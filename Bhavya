public enum JobStatus {

COLLECTION_NEW,

COLLECTION_IN_PROGRESS,

COLLECTION_SUCCESSFUL,

COLLECTION_FAILED,

FLINK_JOB_NEW,

FLINK_JOB_SUBMITTED,

FLINK_JOB_IN_PROGRESS,

FLINK_JOB_SUCCESSFUL,

FLINK_JOB_FAILED

}
public class ConsumerService {

public boolean consume(@Payload @Valid SpaceCollector message) throws Exception

{

String dataRecieved collectorUtil.getDateAsString(new Date()); LOGGER.info("Received Message in Consumer" message.toString());

//initialize SSH Reader

SSHService reader=new SSHService();

blockingQueue.offer(message);

try{

reader.retrieveData(message);

String dataProcessed collectorUtil.getDateAsString(new Date());

kafkaProducerService.write Message(collectorUtil.buildAuditQueueJSON(message, dataRecieved, dataProcessed,

"JobStatus.COLLECTION_SUCCESSFUL), "", auditTopic); "

}

TRUNITE

catch (Exception e) {

e.printStackTrace();

String dataProcessed collectorUtil.getDateAsString(new Date());

LOGGER.error("Error occurred: " + e.getMessage());

kafkaProducerService.writeMessage(collectorUtil.buildAuditQueueJSON(message, dataRecieved, dataProcessed,e.getMessage() ", auditTopic);

JobStatus.COLLECTION_FAILED),
}
return true;

}
public class SSHService {

public void retrieveData(SpaceCollector sp) throws JSchException, SftpException, IOException { LOGGER.info("Entered SSH service");

JSch jsch = new JSch();

String sshUsername=sp.getUserName();

String sshHost-sp.getUrl();

String sshPassword=sp.getPassword();

String inputFilePath=sp.getInputFilePath(); String outputDirectory=sp.getOutputFilePath();

Session session = jsch.getSession(sshUsername, sshHost);

session.setPassword(sshPassword);

session.connect();

ChannelSftp channelSftp = (ChannelSftp) session.openChannel("sftp");

channelSftp.connect();

// Retrieve data file from remote host

InputStream inputStream channelSftp.get(inputFilePath);

// Store the retrieved file in the local directory

String outputFile = outputDirectory + "/" + new File(inputFilePath).getName(); FileOutputStream outputStream = new FileOutputStream(outputFile);

byte[] buffer = new byte[1024];

int bytesRead;

while ((bytesRead = inputStream.read(buffer)) != -1) {

outputStream.write(buffer, e, bytesRead);

} outputStream.close();

inputStream.close();

channelSftp.disconnect();

session.disconnect();
}
}
public class CollectorUtil

@Value("$(ssh-collector.delimiters)") private String delimiters;

@Value("${ssh-collector.fileType}")

private String fileType;

public String getDateAsString(Date dateTime) throws Exception {

SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

return dateFormat.format(dateTime);

}

public JsonNode buildAuditQueueJSON(SpaceCollector message, String dataRecieved, String dataProcessed, String exceptions, JobStatus jobStatus)

throws Exception{

Map<String, Object> auditQueueMap = new HashMap<String, Object>();

String filePath = message.getOutputFilePath() + "/" + new File(message.getInputFilePath()).getName();

auditQueueMap.put("inputFilePath", filePath);

auditQueueMap.put("id", message.getId());

auditQueueMap.put("fileType", fileType);

auditQueueMap.put("delimiters", delimiters);

auditQueueMap.put("url", "url");

auditQueueMap.put("port", 22);

auditQueueMap.put("outputFilePath", "outputFilePath"); auditQueueMap.put("job_status", jobstatus.toString());

auditQueueMap.put("exceptions", exceptions);

auditQueueMap.put("date_received", dataRecieved); auditQueueMap.put("date_processed", dataProcessed);

return new ObjectMapper().valueToTree(auditQueueMap);

}
}
For above code below are 2 acceptance criteria
AC1: From custom-ssh-collector microservice,

Given A space collector object has been received by the collector in 3459-DEV-COLLECTION-REQUEST-QUEUE

When the collection is successful

Then We publish the new format of Unified Audit Message to the 3459-DEV-COLLECTION-AUDIT-QUEUE with job_status COLLECTION_SUCCESSFUL

AC2: From custom-ssh-collector microservice,

Given A space collector object has been received by the collector in 3459-DEV-COLLECTION-REQUEST-QUEUE

When the collection is NOT successful

Then We publish the new format of Unified Audit Message to the 3459-DEV-COLLECTION-AUDIT-QUEUE with job status COLLECTION FAILED
Write the test case code by referring above acceptance criteria