@Test
public void testOnMessage_ValidPayload() throws JsonProcessingException {
    // Set up mock returns
    when(utils.convert(validPayload, ServiceMessage.class)).thenReturn(new ServiceMessage());
    when(utils.convert(anyString(), RequestJSONString.class)).thenReturn(new RequestJSONString());
    when(accountService.getEcpdByAcctId(anyString())).thenReturn(Mono.just("ecpdId"));
    when(utils.convert(anyString(), CustomerEcpdModel.class)).thenReturn(new CustomerEcpdModel());

    CustomerEcpdModel customerEcpdModel = new CustomerEcpdModel();
    customerEcpdModel.setSensitivity("n");
    when(utils.convert(anyString(), CustomerEcpdModel.class)).thenReturn(customerEcpdModel);

    // Additional setup for valid cases
    RequestJSONString requestJSONString = new RequestJSONString();
    Service service = new Service();
    ServiceBody serviceBody = new ServiceBody();
    CallRequest callRequest = new CallRequest();
    Body body = new Body();
    CustomerDetails relinquishingCustomerDetails = new CustomerDetails();
    relinquishingCustomerDetails.setAccountNumber("12345");
    body.setRelinquishingCustomerDetails(relinquishingCustomerDetails);
    callRequest.setBody(body);
    serviceBody.setCallRequest(callRequest);
    service.setServiceBody(serviceBody);
    requestJSONString.setService(service);
    when(utils.convert(anyString(), RequestJSONString.class)).thenReturn(requestJSONString);

    // Call the method
    eventsMessageListener.onMessage(mockConsumerRecord(validPayload), validPayload);

    // Verify interactions
    verify(kafkaTemplate, times(1)).send(any(ProducerRecord.class));
    verify(failedMessageService, never()).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar());
}