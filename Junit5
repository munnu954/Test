import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.StringReader;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.core.JsonProcessingException;

@ExtendWith(MockitoExtension.class)
public class BatchLoaderUtilsTest {

    @InjectMocks
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private Logger logger;

    @BeforeEach
    public void setUp() {
        logger = LoggerFactory.getLogger(BatchLoaderUtils.class);
    }

    @Test
    public void testConvertToObject_Success() throws JsonProcessingException, JAXBException {
        String xml = "<Test><name>test</name></Test>";
        Class<Test> clazz = Test.class;

        JAXBContext jaxbContext = mock(JAXBContext.class);
        Unmarshaller jaxbUnmarshaller = mock(Unmarshaller.class);
        when(jaxbContext.createUnmarshaller()).thenReturn(jaxbUnmarshaller);
        when(jaxbUnmarshaller.unmarshal(any(StringReader.class))).thenReturn(new Test("test"));

        Test result = batchLoaderUtils.convertToObject(xml, clazz);

        assertNotNull(result);
        assertEquals("test", result.getName());
    }

    @Test
    public void testConvertToObject_JAXBException() throws JsonProcessingException, JAXBException {
        String xml = "<Test><name>test</name></Test>";
        Class<Test> clazz = Test.class;

        when(JAXBContext.newInstance(clazz)).thenThrow(JAXBException.class);

        assertThrows(JAXBException.class, () -> {
            batchLoaderUtils.convertToObject(xml, clazz);
        });

        verify(logger).error(anyString(), any(JAXBException.class));
    }

    @Test
    public void testIsValidData_NullInput() {
        assertFalse(batchLoaderUtils.isValidData(null));
    }

    @Test
    public void testIsValidData_BlankInput() {
        assertFalse(batchLoaderUtils.isValidData(" "));
    }

    @Test
    public void testIsValidData_EmptyInput() {
        assertFalse(batchLoaderUtils.isValidData(""));
    }

    @Test
    public void testIsValidData_ZeroInput() {
        assertFalse(batchLoaderUtils.isValidData("0"));
    }

    @Test
    public void testIsValidData_ValidInput() {
        assertTrue(batchLoaderUtils.isValidData("valid"));
    }

    // Inner class to use as a test object
    public static class Test {
        private String name;

        public Test() {}

        public Test(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }
}
