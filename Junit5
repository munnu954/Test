To ensure 100% coverage of the `if(null != deviceResponse)` branch, we need to write a test case where `deviceResponse` is null. This scenario will occur when an exception is thrown during the `restTemplate.exchange` call, and the `catch` block is executed.

Here's how you can write a JUnit test case to cover this scenario:

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.springframework.http.*;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.*;

@RunWith(SpringRunner.class)
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService iVAPPDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    private Map<String, Object> request;
    private UTSEquipmentList utsEquipmentList;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);

        // Directly set the private fields using reflection
        setPrivateField(iVAPPDeviceService, "lookupServiceName", "http://mockService");
        setPrivateField(iVAPPDeviceService, "lookupServicePath", "/mockPath");

        // Set up request and utsEquipmentList with necessary initializations
        request = new HashMap<>();
        utsEquipmentList = new UTSEquipmentList();
        utsEquipmentList.setEquipmentLst(new EquipmentLst());
    }

    private void setPrivateField(Object targetObject, String fieldName, Object value) throws Exception {
        java.lang.reflect.Field field = targetObject.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(targetObject, value);
    }

    @Test
    public void testGetDeviceDetailsv3_nullDeviceResponse() throws Exception {
        // Setup mock responses
        String serviceUrl = "http://mockService/mockPath";
        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn(serviceUrl);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());

        // Simulate an exception leading to a null deviceResponse
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(UTSEquipmentList.class)))
            .thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR));

        // Execute the method
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);

        // Verify that the response is null due to exception
        assertNotNull(result);
        assertNull(result.getEquipmentLst().getEquipmentContainer());

        // Verify covertV3Format is not called since deviceResponse is null
        verify(iVAPPDeviceUtil, never()).covertV3Format(any(UTSEquipmentList.class));
    }
}
```

### Explanation:
- **Setup**: We mock the behavior of `iVAPPDeviceUtil` and `restTemplate` to simulate the conditions that lead to `deviceResponse` being null.
  
- **Simulate Exception**: We simulate an `HttpServerErrorException` during the `restTemplate.exchange` call. This will cause the `deviceResponse` to remain null, as the exception is caught, and the logging statement is executed.

- **Assertions**:
  - We assert that the `result` is not null, meaning the method returns the initial `utsEquipmentList`.
  - We assert that `result.getEquipmentLst().getEquipmentContainer()` is null, indicating no conversion was made.
  - We verify that `covertV3Format` is never called because `deviceResponse` is null, covering the else branch of the `if(null != deviceResponse)` condition.

By adding this test case, you ensure that all branches of the `if(null != deviceResponse)` statement are covered, achieving 100% code coverage for that section.