I see the issue now. Since the `NullPointerException` is not directly thrown by the `ruleLoadingService.loadPostingRule(1L)` method, it might not be caught in the `assertThrows` method. You can modify the test case to explicitly catch the exception that could be thrown due to the null response from `fetchRuleDetails` method. Here's an updated test case:

```java
@Test
void testLoadPostingRuleWithNullResponse() {

    when(rmfApiClient.fetchRuleDetails(any())).thenReturn(null);

    // Check for null response and catch potential NullPointerException
    try {
        ruleLoadingService.loadPostingRule(1L);
        fail("Expected NullPointerException not thrown");
    } catch (NullPointerException e) {
        assertEquals("Response from RMF API is null", e.getMessage());
    }
}
```

By catching the `NullPointerException` explicitly in the test case code and checking its message, you should be able to handle the case where the exception is not directly thrown by the tested method. This should help in properly handling the scenario where a `NullPointerException` should be expected.