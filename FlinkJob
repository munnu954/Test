import org.apache.flink.api.common.accumulators.IntCounter;
import org.apache.flink.api.common.functions.RichFlatMapFunction;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.util.Collector;
import org.json.JSONObject;
import java.util.ArrayList;
import java.util.List;

public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        List<JSONObject> objects = new ArrayList<>();

        // Process the header lines
        JSONObject header1 = new JSONObject();
        header1.put("SystemId", "SOLKTXE1100.101");
        objects.add(header1);

        if (lines.length > 1) {
            String[] arr1 = lines[0].split(",");
            String[] arr2 = lines[1].split(",");

            // Process the header row
            if (arr1.length == arr2.length) {
                headers = arr1; // Store the header row for key names
                for (int i = 1; i < lines.length; i++) {
                    String[] arr = lines[i].split(",");
                    if (headers.length != arr.length) {
                        this.failureIntCounter.add(1);
                        continue;
                    }
                    JSONObject obj = new JSONObject();
                    for (int j = 0; j < arr.length; j++) {
                        String jsonkey = headers[j].trim().replace("\"", "");
                        String jsonvalue = arr[j].trim().replace("\"", "");
                        obj.put(jsonkey, jsonvalue);
                    }
                    objects.add(obj);
                    this.successIntCounter.add(1);
                }
            } else {
                this.failureIntCounter.add(1);
            }
        } else {
            this.failureIntCounter.add(1);
        }

        // Collect all JSON objects
        for (JSONObject obj : objects) {
            collector.collect(obj.toString());
        }
    }
}