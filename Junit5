```java
import com.verizon.uts.coconut.device.service.CoconutDeviceMSConstants;
import com.verizon.uts.coconut.device.service.CoconutServiceVersion3;
import org.junit.Test;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import static org.junit.Assert.assertEquals;

public class CoconutServiceVersion3Test {

    @Test
    public void testQueryBasedOnParameter_BothParametersPresent() throws Exception {
        CoconutServiceVersion3 service = new CoconutServiceVersion3();
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "ABC123");
        queryParams.put("siteName", "Test Site");

        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        String actualQuery = (String) method.invoke(service, queryParams);

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                " AND LOWER(site.clli_code) like 'abc123'" +
                " AND LOWER(site.site_name) like 'test site'";

        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_LocationCLLIOnlyPresent() throws Exception {
        CoconutServiceVersion3 service = new CoconutServiceVersion3();
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "XYZ456");

        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        String actualQuery = (String) method.invoke(service, queryParams);

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                " AND LOWER(site.clli_code) like 'xyz456'";

        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_SiteNameOnlyPresent() throws Exception {
        CoconutServiceVersion3 service = new CoconutServiceVersion3();
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "Another Test Site");

        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        String actualQuery = (String) method.invoke(service, queryParams);

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                " AND LOWER(site.site_name) like 'another test site'";

        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_NoParametersPresent() throws Exception {
        CoconutServiceVersion3 service = new CoconutServiceVersion3();
        Map<String, Object> queryParams = new HashMap<>();

        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        String actualQuery = (String) method.invoke(service, queryParams);

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;

        assertEquals(expectedQuery, actualQuery);
    }
}
```

**Explanation:**

1. **Reflection Usage:** The test cases utilize Java's Reflection API to access the private `queryBasedOnParameter` method of the `CoconutServiceVersion3` class.
2. **Test Cases:**
   - **`testQueryBasedOnParameter_BothParametersPresent`:** Checks when both `locationCLLI` and `siteName` are present in the `queryParams` map.
   - **`testQueryBasedOnParameter_LocationCLLIOnlyPresent`:** Checks when only `locationCLLI` is present.
   - **`testQueryBasedOnParameter_SiteNameOnlyPresent`:** Checks when only `siteName` is present.
   - **`testQueryBasedOnParameter_NoParametersPresent`:** Checks when neither `locationCLLI` nor `siteName` is present.
3. **Assertions:** Each test case uses `assertEquals` to compare the expected query (constructed manually) with the actual query returned by the invoked method.

**Key Points:**

- The tests are comprehensive, covering all possible branches of the conditional statements in the `queryBasedOnParameter` method.
- The use of Reflection allows testing private methods without modifying the original class.
- The tests ensure that the query is constructed correctly depending on the presence or absence of the input parameters, achieving 100% code coverage for the relevant code section. 

This test suite demonstrates how to test private methods effectively using Reflection and how to achieve thorough code coverage for conditional logic.