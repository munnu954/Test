Here is an example of JUnit 5 test cases for the `SegmentProcessor` class to cover the conditional branches:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class SegmentProcessorTest {
    
    private SegmentProcessor segmentProcessor;
    
    @BeforeEach
    void setUp() {
        segmentProcessor = SegmentProcessor.getInstance();
    }
    
    @Test
    void testProcessWithAclliNode() {
        Node mockNode = mock(Node.class);
        when(mockNode.getShelfId()).thenReturn("mockShelfId");
        
        List<Node> nodes = List.of(mockNode);
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);
        
        clliNodeMap.put("aclli", List.of(mockNode));
        
        segmentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);
        
        // Assert that the link was added and the source information matches the mock node
        assertEquals(1, links.size());
        assertEquals("mockShelfId", links.get(0).getSource());
    }
    
    @Test
    void testProcessWithZclliNode() {
        Node mockNode = mock(Node.class);
        when(mockNode.getShelfId()).thenReturn("mockShelfId");
        
        List<Node> nodes = List.of(mockNode);
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);
        
        clliNodeMap.put("zclli", List.of(mockNode));
        
        segmentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);
        
        // Assert that the link was added and the source information matches the mock node
        assertEquals(1, links.size());
        assertEquals("mockShelfId", links.get(0).getSource());
    }
}
```

In the above test cases, we are creating a mock `Node` object with a `mockShelfId` value and adding it to the `clliNodeMap` under the keys `"aclli"` and `"zclli"`. Then, we verify that the source information in the link matches the `mockShelfId` value after the `process` method is called.