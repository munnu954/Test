@RunWith(MockitoJUnitRunner.class)
class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService service;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private Alarm alarm;

    @Test
    void testApplyPostingRulesMatchResultTrueNoExistingPostingRuleMatch() {
        // Arrange
        HashMap<String, Object> alarmMap = new HashMap<>();
        PostingRule postingRule1 = new PostingRule(1L, "Rule1", 1, 1, "Criteria1");
        PostingRule postingRule2 = new PostingRule(2L, "Rule2", 2, 1, "Criteria2");

        when(ruleLoadingService.getRuleMap()).thenReturn(Map.of(
            1L, postingRule1,
            2L, postingRule2
        ));
        when(postingRule1.matchFilter(alarmMap)).thenReturn(true);
        when(postingRule2.matchFilter(alarmMap)).thenReturn(true);

        // Act
        service.applyPostingRules(new Alarm());

        // Assert
        verify(service, times(1)).applyPostingRule(any(), eq(postingRule1), any());
        verify(service, never()).applyPostingRule(any(), eq(postingRule2), any());
    }

    @Test
    void testApplyPostingRulesMatchResultFalse() {
        // Arrange
        HashMap<String, Object> alarmMap = new HashMap<>();
        PostingRule postingRule = new PostingRule(1L, "Rule1", 1, 1, "Criteria1");

        when(ruleLoadingService.getRuleMap()).thenReturn(Map.of(1L, postingRule));
        when(postingRule.matchFilter(alarmMap)).thenReturn(false);

        // Act
        service.applyPostingRules(new Alarm());

        // Assert
        verify(service, never()).applyPostingRule(any(), any(), any());
    }

    @Test
    void testApplyPostingRulesMatchResultTrueExistingPostingRuleMatch() {
        // Arrange
        HashMap<String, Object> alarmMap = new HashMap<>();
        PostingRule existingMatch = new PostingRule(1L, "Rule1", 1, 1, "Criteria1");
        PostingRule newMatch = new PostingRule(2L, "Rule2", 2, 1, "Criteria2");

        when(ruleLoadingService.getRuleMap()).thenReturn(Map.of(
            1L, existingMatch,
            2L, newMatch
        ));
        when(existingMatch.matchFilter(alarmMap)).thenReturn(true);
        when(newMatch.matchFilter(alarmMap)).thenReturn(true);

        // Act
        service.applyPostingRules(new Alarm());

        // Assert
        verify(service, never()).applyPostingRule(any(), eq(existingMatch), any());
        verify(service, times(1)).applyPostingRule(any(), eq(newMatch), any());
    }

    // Additional tests covering the other branches within the if block
}