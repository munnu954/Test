Positive Scenario JUnit5 Test Cases:

1. Test Case: sendJsonMessage_ValidSpaceCollector_ReturnsSuccess
```java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class KafkaProducerServiceTest {

    @Mock
    private KafkaTemplate<String, Object> kafkaTemplate;

    @InjectMocks
    private KafkaProducerService kafkaProducerService;

    public KafkaProducerServiceTest() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void sendJsonMessage_ValidSpaceCollector_ReturnsSuccess() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("1");
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("admin");
        spaceCollector.setPassword("password");

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertNull(result);
        Mockito.verify(kafkaTemplate, Mockito.times(1)).send(Mockito.anyString(), Mockito.eq(spaceCollector));
    }
}
```

2. Test Case: sendJsonMessage_InvalidSpaceCollector_ReturnsErrorMessage
```java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class KafkaProducerServiceTest {

    @Mock
    private KafkaTemplate<String, Object> kafkaTemplate;

    @InjectMocks
    private KafkaProducerService kafkaProducerService;

    public KafkaProducerServiceTest() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void sendJsonMessage_InvalidSpaceCollector_ReturnsErrorMessage() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setUrl("");
        spaceCollector.setPort(0);
        spaceCollector.setConnectionType("SSH");
        spaceCollector.setUsername("admin");
        spaceCollector.setPassword(null);

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertEquals("SpaceCollector json must have a non-empty url", result);
        Mockito.verify(kafkaTemplate, Mockito.times(0)).send(Mockito.anyString(), Mockito.any());
    }
}
```

Negative Scenario JUnit5 Test Cases:

1. Test Case: sendJsonMessage_NullId_ReturnsErrorMessage
```java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class KafkaProducerServiceTest {

    @Mock
    private KafkaTemplate<String, Object> kafkaTemplate;

    @InjectMocks
    private KafkaProducerService kafkaProducerService;

    public KafkaProducerServiceTest() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void sendJsonMessage_NullId_ReturnsErrorMessage() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("admin");
        spaceCollector.setPassword("password");

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertEquals("SpaceCollector json must have an id", result);
        Mockito.verify(kafkaTemplate, Mockito.times(0)).send(Mockito.anyString(), Mockito.any());
    }
}
```

2. Test Case: sendJsonMessage_InvalidConnectionType_ReturnsErrorMessage
```java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class KafkaProducerServiceTest {

    @Mock
    private KafkaTemplate<String, Object> kafkaTemplate;

    @InjectMocks
    private KafkaProducerService kafkaProducerService;

    public KafkaProducerServiceTest() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void sendJsonMessage_InvalidConnectionType_ReturnsErrorMessage() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("1");
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("SSH");
        spaceCollector.setUsername("admin");
        spaceCollector.setPassword("password");

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertEquals("SpaceCollector json must have a connection_type of 'API'", result);
        Mockito.verify(kafkaTemplate, Mockito.times(0)).send(Mockito.anyString(), Mockito.any());
    }
}
```

Note: Mockito framework is used for mocking the dependencies and verifying the method invocations.