To achieve 100% code coverage for the conditional statements `if(!eqtObject.getPortID().equalsIgnoreCase(circuit.getTarget()))` and `if(!eqtObject.getPortID().equalsIgnoreCase(prevCable.getTarget()))` in the `PortProcessor` class, we need to create test cases that simulate scenarios where these conditions are both true and false. This will ensure that the logic inside these conditions is covered.

### JUnit 5 Test Cases

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;

class PortProcessorTest {

    private PortProcessor portProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        portProcessor = PortProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "testSource";
    }

    @Test
    void testProcessWithCircuitTargetMismatch() {
        // Set up a previous component with PATH type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PATH);

        // Add a dummy link to represent the circuit
        Link circuit = new Link();
        circuit.setTarget("DifferentTarget");
        links.add(circuit);

        // Prepare the current ClrComponent with a PortRef
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("NewPortID");
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));

        // List to simulate the ClrComponent history
        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Run the process method
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify that the target of the circuit is updated correctly
        assertEquals("NewPortID", circuit.getTarget());
        assertEquals(1, links.size());
    }

    @Test
    void testProcessWithCircuitTargetMatch() {
        // Set up a previous component with PATH type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PATH);

        // Add a dummy link to represent the circuit
        Link circuit = new Link();
        circuit.setTarget("MatchingPortID");
        links.add(circuit);

        // Prepare the current ClrComponent with a PortRef
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("MatchingPortID");
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));

        // List to simulate the ClrComponent history
        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Run the process method
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify that the target of the circuit remains unchanged
        assertEquals("MatchingPortID", circuit.getTarget());
        assertEquals(1, links.size());
    }

    @Test
    void testProcessWithCableTargetMismatch() {
        // Set up a previous component with CABLE type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.CABLE);

        // Add a dummy link to represent the cable
        Link prevCable = new Link();
        prevCable.setTarget("DifferentCableTarget");
        links.add(prevCable);

        // Prepare the current ClrComponent with a PortRef
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("NewCablePortID");
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));

        // List to simulate the ClrComponent history
        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Run the process method
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify that the target of the cable is updated correctly
        assertEquals("NewCablePortID", prevCable.getTarget());
        assertEquals(1, links.size());
    }

    @Test
    void testProcessWithCableTargetMatch() {
        // Set up a previous component with CABLE type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.CABLE);

        // Add a dummy link to represent the cable
        Link prevCable = new Link();
        prevCable.setTarget("MatchingCablePortID");
        links.add(prevCable);

        // Prepare the current ClrComponent with a PortRef
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("MatchingCablePortID");
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));

        // List to simulate the ClrComponent history
        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Run the process method
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify that the target of the cable remains unchanged
        assertEquals("MatchingCablePortID", prevCable.getTarget());
        assertEquals(1, links.size());
    }
