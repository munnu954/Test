Sure, here are the JUnit 5 test cases to achieve 100% code coverage for the `parse` method in your `AlarmPostingUtils` class:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlarmPostingUtilsTest {

    @Test
    public void testParseWithSimplePlaceholder() throws JsonProcessingException {
        String value = "Hello %name:John%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("name", "John");

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello John", result);
    }

    @Test
    public void testParseWithJsonField() throws JsonProcessingException {
        String value = "Hello %person:details.name%";
        Map<String, Object> srcMap = new HashMap<>();
        Map<String, String> details = new HashMap<>();
        details.put("name", "John");
        srcMap.put("details", details);

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello John", result);
    }

    @Test
    public void testParseWithJsonArray() throws JsonProcessingException {
        String value = "Hello %person:details.names[1]%";
        Map<String, Object> srcMap = new HashMap<>();
        Map<String, List<String>> details = new HashMap<>();
        details.put("names", List.of("Jane", "John"));
        srcMap.put("details", details);

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello John", result);
    }

    @Test
    public void testParseWithInvalidJsonArrayIndex() throws JsonProcessingException {
        String value = "Hello %person:details.names[5]%";
        Map<String, Object> srcMap = new HashMap<>();
        Map<String, List<String>> details = new HashMap<>();
        details.put("names", List.of("Jane", "John"));
        srcMap.put("details", details);

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello ", result);
    }

    @Test
    public void testParseWithInvalidJsonField() throws JsonProcessingException {
        String value = "Hello %person:details.unknown%";
        Map<String, Object> srcMap = new HashMap<>();
        Map<String, String> details = new HashMap<>();
        details.put("name", "John");
        srcMap.put("details", details);

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello ", result);
    }

    @Test
    public void testParseWithEmptyPlaceholder() throws JsonProcessingException {
        String value = "Hello %name:%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("name", "");

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello ", result);
    }

    @Test
    public void testParseWithArrayIndexOutOfBounds() throws JsonProcessingException {
        String value = "Hello %names[10]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("Jane", "John"));

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello ", result);
    }

    @Test
    public void testParseWithInvalidArrayIndex() throws JsonProcessingException {
        String value = "Hello %names[-1]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("Jane", "John"));

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello ", result);
    }

    @Test
    public void testParseWithMissingAttribute() throws JsonProcessingException {
        String value = "Hello %name:missingAttribute%";
        Map<String, Object> srcMap = new HashMap<>();

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello ", result);
    }

    @Test
    public void testParseWithNestedJsonField() throws JsonProcessingException {
        String value = "Hello %person:details.name.first%";
        Map<String, Object> srcMap = new HashMap<>();
        Map<String, Map<String, String>> details = new HashMap<>();
        Map<String, String> name = new HashMap<>();
        name.put("first", "John");
        details.put("name", name);
        srcMap.put("details", details);

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello John", result);
    }
}
```

### Explanation

1. Ensure you import necessary classes and utilities for testing.
2. Mock data is used to simulate various scenarios including simple placeholders, JSON fields, JSON arrays, invalid indexes, and missing attributes.
3. Each test case asserts the expected result for different conditions, ensuring coverage for all branches of the `parse` method.