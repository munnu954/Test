Sure! Here is an example of how you can write JUnit 5 test cases for the `SSHServerSimulator` class to cover every line of code:

```java
import org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory;
import org.apache.sshd.common.keyprovider.SimpleGeneratorHostKeyProvider;
import org.apache.sshd.server.SshServer;
import org.apache.sshd.server.auth.password.PasswordAuthenticator;
import org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.Collections;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class SSHServerSimulatorTest {

    @Mock
    private SshServer sshServer;

    private SSHServerSimulator sshServerSimulator;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        sshServerSimulator = new SSHServerSimulator();
        sshServerSimulator.setHostedPath("path/to/hosted/files");
        sshServerSimulator.setSshHost("localhost");
        sshServerSimulator.setSshPort(22);
        sshServerSimulator.setSshServer(sshServer);
    }

    @Test
    public void testStartServer() throws IOException {
        sshServerSimulator.startServer();
        verify(sshServer).start();
    }

    @Test
    public void testStart() throws IOException {
        sshServerSimulator.start();

        verify(sshServer).setHost("localhost");
        verify(sshServer).setPort(22);
        verify(sshServer).setKeyPairProvider(any(SimpleGeneratorHostKeyProvider.class));
        verify(sshServer).setSubsystemFactories(Collections.singletonList(any(SftpSubsystemFactory.class)));

        PasswordAuthenticator passwordAuthenticator = sshServer.getPasswordAuthenticator();
        boolean isAuthenticated = passwordAuthenticator.authenticate("Uname", "Password", null);
        assert isAuthenticated;

        verify(sshServer).setFileSystemFactory(any(VirtualFileSystemFactory.class));
        verify(sshServer).start();
    }
}
```

In the above example, we use Mockito to mock the `SshServer` object and verify that the methods are called correctly. We also test the authentication process by calling the `PasswordAuthenticator` manually. You may need to add the necessary imports and update the test class according to your project structure.