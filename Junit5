To achieve 100% code coverage for the `createAlarm(String msg)` method of the `AlarmRepositoryImpl` class, you need to write additional Junit5 test cases that cover all the branches of the method. Below is an example of how you can write Junit5 test cases for different scenarios:

```java
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
    }

    @Test
    void testCreateAlarmWithValidMessage() throws Exception {
        // Prepare a valid JSON message for testing
        String validJsonMessage = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";

        // Mock the behavior of PostGreDataBaseConfig
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");

        // Call the method under test
        Alarm alarm = alarmRepositoryImpl.createAlarm(validJsonMessage);

        // Assert the outcome
        assertNotNull(alarm);
        assertEquals("pqwer", alarm.getExternalAlarmId());
        // Add more assertions based on the expected behavior
    }

    @Test
    void testCreateAlarmWithInvalidMessage() throws Exception {
        // Prepare an invalid JSON message for testing
        String invalidJsonMessage = "Invalid JSON message";

        // Call the method under test
        Alarm alarm = alarmRepositoryImpl.createAlarm(invalidJsonMessage);

        // Assert the outcome
        assertNull(alarm);
        // Add more assertions based on the expected behavior for invalid input
    }

    // Add more test cases to cover different branches and scenarios of the createAlarm method

}
```

In the above test cases, you can create scenarios with valid JSON messages, invalid JSON messages, and edge cases to cover all the branches of the `createAlarm(String msg)` method. Make sure to assert the expected behavior based on the input provided in the test cases.

Feel free to add more test cases based on the specific requirements of your application and the different possible scenarios that the `createAlarm` method might encounter.