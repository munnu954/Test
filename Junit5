To achieve 100% code coverage of the `if (!ObjectUtils.isEmpty(aggregateInsightsEntity)) { }` statement within the `convertToMtnInsights` method, we need to consider both scenarios where the `aggregateInsightsEntity` is empty and where it is not. This will require setting up different conditions in the test cases to trigger each branch of the `if` statement.

Below are the expanded JUnit 5 test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.util.ObjectUtils;

public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mtnInsightsManager = new MtnInsightsManager();
    }

    @Test
    public void testConvertToMtnInsights_AggregateInsightsEntityNotEmpty() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue(EventLedgerConstants.OUTAGE_ID + "outage123" + EventLedgerConstants.COMMA_SEPARATOR);

        // Mock behavior
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(any(), any())).thenReturn(aggregateEntity);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
        assertTrue(result.getCategoryInsights()[0].getInsights().length > 0);
    }

    @Test
    public void testConvertToMtnInsights_AggregateInsightsEntityEmpty() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        // Mock behavior for empty aggregate entity
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(any(), any())).thenReturn(null);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
        assertTrue(result.getCategoryInsights()[0].getInsights().length > 0);
    }

    @Test
    public void testConvertToMtnInsights_AggregateValueContainsOutageId() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue(EventLedgerConstants.OUTAGE_ID + "outage123" + EventLedgerConstants.COMMA_SEPARATOR);

        // Mock behavior
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(any(), any())).thenReturn(aggregateEntity);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
        assertTrue(result.getCategoryInsights()[0].getInsights().length > 0);
    }

    @Test
    public void testConvertToMtnInsights_AggregateValueDoesNotContainOutageId() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue("someOtherValue");

        // Mock behavior
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(any(), any())).thenReturn(aggregateEntity);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
        assertTrue(result.getCategoryInsights()[0].getInsights().length > 0);
    }
}
```

### Explanation:

1. **Aggregate Insights Not Empty**: This test ensures that the method behaves correctly when `aggregateInsightsEntity` is not empty. It checks that the `aggregateValue` is processed as expected.

2. **Aggregate Insights Empty**: This test ensures the method handles the case where `aggregateInsightsEntity` is `null`. It verifies that the absence of `aggregateInsightsEntity` does not break the method logic.

3. **Aggregate Value Contains Outage ID**: This test checks if the method handles scenarios where `aggregateValue` contains the `OUTAGE_ID`. The assertion ensures that the `aggregateValue` is manipulated correctly in this condition.

4. **Aggregate Value Does Not Contain Outage ID**: This test handles the scenario where `aggregateValue` does not contain the `OUTAGE_ID`. The logic should handle this path correctly, ensuring the `aggregateValue` is appended without duplicates.

These tests ensure that you cover all logical branches inside the `if (!ObjectUtils.isEmpty(aggregateInsightsEntity)) { }` statement, thus achieving comprehensive coverage for this part of the code.