Here's the complete code for the JUnit 5 test cases for the given project:

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;

@ExtendWith(MockitoExtension.class)
public class KafkaProducerServiceTest {
  
  @Mock
  private KafkaTemplate<String, Object> kafkaTemplate;
  
  @InjectMocks
  private KafkaProducerService kafkaProducerService;
  
  @Test
  public void testSendJsonMessage_Success() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("1");
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setConnectionType("API");
    spaceCollector.setUsername("user");
    spaceCollector.setPassword("pass");

    doNothing().when(kafkaTemplate).send(any(String.class), any(SpaceCollector.class));

    String result = kafkaProducerService.sendJsonMessage(spaceCollector);

    assertThat(result).isEqualTo("jsonMessage sent successfully");
    verify(kafkaTemplate).send(any(String.class), any(SpaceCollector.class));
  }

  @Test
  public void testSendJsonMessage_InvalidJson() {
    SpaceCollector spaceCollector = new SpaceCollector();

    String result = kafkaProducerService.sendJsonMessage(spaceCollector);

    assertThat(result).isEqualTo("SpaceCollector json must have an id");
  }

  @Test
  public void testSendJsonMessage_InvalidUrl() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("1");

    String result = kafkaProducerService.sendJsonMessage(spaceCollector);

    assertThat(result).isEqualTo("SpaceCollector json must have a non-empty url");
  }

  @Test
  public void testSendJsonMessage_InvalidPort() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("1");
    spaceCollector.setUrl("https://example.com");

    String result = kafkaProducerService.sendJsonMessage(spaceCollector);

    assertThat(result).isEqualTo("SpaceCollector json must have a non-zero port number");
  }

  @Test
  public void testSendJsonMessage_InvalidConnectionType() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("1");
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(8080);

    String result = kafkaProducerService.sendJsonMessage(spaceCollector);

    assertThat(result).isEqualTo("SpaceCollector json must have a connection_type of 'API'");
  }

  @Test
  public void testSendJsonMessage_InvalidUsernameAndPassword() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("1");
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setConnectionType("API");

    String result = kafkaProducerService.sendJsonMessage(spaceCollector);

    assertThat(result).isEqualTo("SpaceCollector json must have a non-null username and password");
  }

  @Test
  public void testSendErrorMessage_Success() {
    String message = "Error Message";
    doNothing().when(kafkaTemplate).send(any(String.class), any(Map.class));

    kafkaProducerService.sendErrorMessage(message);

    verify(kafkaTemplate).send(any(String.class), any(Map.class));
  }
}

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@ExtendWith(MockitoExtension.class)
public class CollectorControllerTest {
  
  @Mock
  private KafkaProducerService kafkaProducer;
  
  @InjectMocks
  private CollectorController collectorController;
  
  @Test
  public void testPushSpaceCollectorData_Success() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("1");
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setConnectionType("API");
    spaceCollector.setUsername("user");
    spaceCollector.setPassword("pass");

    when(kafkaProducer.sendJsonMessage(spaceCollector)).thenReturn(null);

    ResponseEntity<String> response = collectorController.pushSpaceCollectorData(spaceCollector);

    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
    assertThat(response.getBody()).isEqualTo("SpaceCollector data pushed to Kafka topic successfully");
    verify(kafkaProducer).sendJsonMessage(spaceCollector);
  }

  @Test
  public void testPushSpaceCollectorData_ValidationFailed() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("1");

    when(kafkaProducer.sendJsonMessage(spaceCollector)).thenReturn("Validation Failed");

    ResponseEntity<String> response = collectorController.pushSpaceCollectorData(spaceCollector);

    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
    assertThat(response.getBody()).isEqualTo("Validation Failed");
    verify(kafkaProducer).sendJsonMessage(spaceCollector);
  }
}

import static org.mockito.Mockito.verify;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

@ExtendWith(MockitoExtension.class)
public class CollectorInitializerServiceTest {
  
  @Mock
  private CollectorApiReader collectorApiReader;
  
  @Mock
  private Logger logger;
  
  @InjectMocks
  private CollectorInitializerService collectorInitializerService;
  
  @Test
  public void testConsume_Success() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("1");

    collectorInitializerService.consume(spaceCollector);

    verify(logger).info("Received SpaceCollector data: {}", spaceCollector);
    verify(collectorApiReader).initialize(spaceCollector);
  }
}

Please note that these test cases assume that the necessary dependencies (e.g., Spring Boot, Mockito, and JUnit 5) are properly configured in your project.