The issue you're encountering is due to the fact that when you invoke a method using reflection, any exception thrown by the invoked method is wrapped inside an `InvocationTargetException`. To properly handle this, you need to unwrap the `InvocationTargetException` to check the cause of the actual exception thrown by the method. Here are the updated test cases with this fix:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import javax.persistence.OptimisticLockException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.UnknownHostException;
import java.time.OffsetDateTime;
import java.util.*;

@ExtendWith(SpringExtension.class)
public class EnrichmentServiceTest {

    @InjectMocks
    private EnrichmentService enrichmentService;

    @Mock
    private CbrsSuppressionRepository cbrsSuppressionRepository;

    @Mock
    private AlarmPostingRepository alarmPostingRepository;

    @Mock
    private Logger logger;

    @Value("$(cbrsAlarmsEnrichmentLimit:10)")
    private Integer cbrsAlarmsEnrichmentLimit;

    @Value("${CbrsDBMaxAttempts}")
    private Integer cbrsDBMaxAttempts;

    private static final String IMPACTED_NODES_COUNT_TOTAL = "ImpactedNodesCountTotal";
    private static final String IMPACTED_NODES_COUNT_ACTIVE = "ImpactedNodesCountActive";

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testExecuteEnrichmentTask_NoActiveAlarms() {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();
        Boolean isAlarmToBeEnriched = true;

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt()))
                .thenReturn(Optional.empty());

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, isAlarmToBeEnriched);

        assertFalse(result);
    }

    @Test
    public void testExecuteEnrichmentTask_ActiveAlarmEnriched() {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();
        Boolean isAlarmToBeEnriched = true;

        CbrsSuppressionAlarm alarm = new CbrsSuppressionAlarm();
        alarm.setLastActivatedTime(currentTimestamp.plusMinutes(1));

        List<CbrsSuppressionAlarm> alarms = Collections.singletonList(alarm);

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt()))
                .thenReturn(Optional.of(alarms));

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, isAlarmToBeEnriched);

        assertFalse(result);
    }

    @Test
    public void testExecuteEnrichmentTask_AlarmsToBeEnriched() throws UnknownHostException {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();
        Boolean isAlarmToBeEnriched = true;

        CbrsSuppressionAlarm alarm = new CbrsSuppressionAlarm();
        alarm.setExpiryTime(currentTimestamp.plusMinutes(1));
        alarm.setTotalActiveSuppressedCount(1);

        List<CbrsSuppressionAlarm> alarms = Collections.singletonList(alarm);

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt()))
                .thenReturn(Optional.of(alarms));

        doAnswer(invocation -> {
            // Simulate the enrichment process
            Method method = EnrichmentService.class.getDeclaredMethod("enrichGeneratedCbrsSuppressionAlarm", CbrsSuppressionAlarm.class);
            method.setAccessible(true);
            method.invoke(enrichmentService, alarm);
            return null;
        }).when(logger).log(any(), anyString(), any());

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, isAlarmToBeEnriched);

        assertTrue(result);
    }

    @Test
    public void testExecuteEnrichmentTask_ExceptionHandling() {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();
        Boolean isAlarmToBeEnriched = true;

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt()))
                .thenThrow(new RuntimeException("DB Error"));

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, isAlarmToBeEnriched);

        assertFalse(result);
    }

    @Test
    public void testEnrichGeneratedCbrsSuppressionAlarm_Success() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, JsonProcessingException {
        CbrsSuppressionAlarm alarm = new CbrsSuppressionAlarm();
        alarm.setAlarmIdentity("alarm1");

        AlarmDetailsModel alarmDetailsModel = new AlarmDetailsModel("{\"key\":\"value\"}", 1L);

        when(alarmPostingRepository.findByAlarmIdentity(anyString()))
                .thenReturn(Optional.of(alarmDetailsModel));

        when(alarmPostingRepository.updateAlarmDetails(anyString(), anyString(), anyLong()))
                .thenReturn(1);

        when(cbrsSuppressionRepository.updateAlarmEnrichmentTime(any(), anyString()))
                .thenReturn(1);

        Method method = EnrichmentService.class.getDeclaredMethod("enrichGeneratedCbrsSuppressionAlarm", CbrsSuppressionAlarm.class);
        method.setAccessible(true);
        method.invoke(enrichmentService, alarm);

        verify(alarmPostingRepository, times(1)).updateAlarmDetails(anyString(), anyString(), anyLong());
        verify(cbrsSuppressionRepository, times(1)).updateAlarmEnrichmentTime(any(), anyString());
    }

    @Test
    public void testEnrichGeneratedCbrsSuppressionAlarm_OptimisticLockingFailure() throws JsonProcessingException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        CbrsSuppressionAlarm alarm = new CbrsSuppressionAlarm();
        alarm.setAlarmIdentity("alarm1");

        AlarmDetailsModel alarmDetailsModel = new AlarmDetailsModel("{\"key\":\"value\"}", 1L);

        when(alarmPostingRepository.findByAlarmIdentity(anyString()))
                .thenReturn(Optional.of(alarmDetailsModel));

        when(alarmPostingRepository.updateAlarmDetails(anyString(), anyString(), anyLong()))
                .thenThrow(new OptimisticLockException("Locking error"));

        Method method = EnrichmentService.class.getDeclaredMethod("enrichGeneratedCbrsSuppressionAlarm", CbrsSuppressionAlarm.class);
        method.setAccessible(true);

        InvocationTargetException exception = assertThrows(InvocationTargetException.class, () -> method.invoke(enrichmentService, alarm));
        assertTrue(exception.getCause() instanceof RuntimeException);
        assertTrue(exception.getCause().getCause() instanceof OptimisticLockException);
    }

    @Test
    public void testEnrichGeneratedCbrsSuppressionAlarm_JsonProcessingException() throws JsonProcessingException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        CbrsSuppressionAlarm alarm = new CbrsSuppressionAlarm();
        alarm.setAlarmIdentity("alarm1");

        when(alarmPostingRepository.findByAlarmIdentity(anyString()))
                .thenReturn(Optional.of(new AlarmDetailsModel("invalid json", 1L)));

        Method method = EnrichmentService.class.getDeclaredMethod("enrichGeneratedCbrsSuppressionAlarm", CbrsSuppressionAlarm.class);
        method.setAccessible(true);

        InvocationTargetException exception = assertThrows(InvocationTargetException.class, () -> method.invoke(enrichmentService, alarm));
        assertTrue(exception.getCause() instanceof RuntimeException);
        assertTrue(exception.getCause().getCause() instanceof JsonProcessingException);
    }
}
```

### Explanation:
1. **Unwrapping InvocationTargetException**: The `InvocationTargetException` is caught, and its cause is checked to ensure it matches the expected exception type (`RuntimeException`), and further, the root cause is checked to ensure it matches the specific exception (`OptimisticLockException` for locking failures and `JsonProcessingException` for JSON parsing errors).
2. **Assertions**: The assertions are updated to properly check the causes of the `InvocationTargetException` to ensure the correct exception is being thrown and handled.

With these changes, your tests should correctly handle and verify the exceptions thrown by the private method when invoked via reflection.