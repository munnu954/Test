```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    void setUp() {
        validator = new MtnInsightsValidator();
    }

    @Test
    void validate_whenInputIsValid_thenNoException() {
        MtnInsightsRequest request = mock(MtnInsightsRequest.class);
        when(request.getServiceHeader()).thenReturn(mock(ServiceHeader.class));
        when(request.getKeyAttributes()).thenReturn(mock(MtnInsightsAttributes.class));
        assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    void validate_whenRequestTypeIsInvalid_thenThrowException() {
        MtnInsightsRequest request = mock(MtnInsightsRequest.class);
        when(request.getServiceHeader()).thenReturn(mock(ServiceHeader.class));
        when(request.getRequestType()).thenReturn(InsightsRequestType.GETMTNINSIGHTS);
        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    void validate_whenNoKeysArePresent_thenThrowException() {
        MtnInsightsRequest request = mock(MtnInsightsRequest.class);
        when(request.getServiceHeader()).thenReturn(mock(ServiceHeader.class));
        when(request.getKeyAttributes()).thenReturn(null);
        when(request.getListKeyAttributes()).thenReturn(null);
        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    void validate_whenSingleKeyIsEmpty_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getEcpdId()).thenReturn(null);
        MtnInsightsRequest request = mock(MtnInsightsRequest.class);
        when(request.getServiceHeader()).thenReturn(mock(ServiceHeader.class));
        when(request.getKeyAttributes()).thenReturn(attributes);
        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    void validate_whenListKeyIsEmpty_thenThrowException() {
        MtnInsightsAttributes[] attributes = {mock(MtnInsightsAttributes.class)};
        when(attributes[0].getEcpdId()).thenReturn(null);
        MtnInsightsRequest request = mock(MtnInsightsRequest.class);
        when(request.getServiceHeader()).thenReturn(mock(ServiceHeader.class));
        when(request.getListKeyAttributes()).thenReturn(attributes);
        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    void validateIterator_whenAllFieldsAreEmpty_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getInsightCategory()).thenReturn(null);
        when(attributes.getInsightName()).thenReturn(null);
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "test"));
    }

    @Test
    void validateIterator_whenMTNAndECPDIdAreEmptyForMyBiz_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getMtn()).thenReturn(null);
        when(attributes.getEcpdId()).thenReturn(null);
        when(attributes.getInsightCategory()).thenReturn(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        when(attributes.getInsightName()).thenReturn(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "test"));
    }

    @Test
    void validateIterator_whenMTNIsEmptyForMyBiz_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getMtn()).thenReturn(null);
        when(attributes.getInsightCategory()).thenReturn(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        when(attributes.getInsightName()).thenReturn(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        when(attributes.getEcpdId()).thenReturn("test");
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "test"));
    }

    @Test
    void validateIterator_whenECPDIdIsEmptyForMyBiz_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getEcpdId()).thenReturn(null);
        when(attributes.getMtn()).thenReturn("test");
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "test"));
    }

    @Test
    void validateIterator_whenInsightCategoryAndInsightNameAreEmptyForMyBiz_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getInsightCategory()).thenReturn(null);
        when(attributes.getInsightName()).thenReturn(null);
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "test"));
    }

    @Test
    void validateIterator_whenInsightCategoryIsEmptyForMyBiz_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getInsightCategory()).thenReturn(null);
        when(attributes.getInsightName()).thenReturn("test");
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "test"));
    }

    @Test
    void validateIterator_whenInsightNameIsEmptyForMyBiz_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getInsightCategory()).thenReturn("test");
        when(attributes.getInsightName()).thenReturn(null);
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "test"));
    }

    @Test
    void validateIterator_whenMTNIsEmptyForNetworkOutage_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getMtn()).thenReturn(null);
        when(attributes.getInsightCategory()).thenReturn(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        when(attributes.getInsightName()).thenReturn(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "test"));
    }

    @Test
    void validateIterator_whenOutageIdIsEmptyForNetworkOutage_thenThrowException() {
        MtnInsightsAttributes attributes = mock(MtnInsightsAttributes.class);
        when(attributes.getOut