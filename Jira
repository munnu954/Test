**SpaceCollector.java:**

```java
import lombok.Data;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;

@Data
@Entity
public class SpaceCollector {
    @Id
    @Min(value = 1, message = "Id should be greater than 1")
    private Integer id;

    @NotBlank(message = "URL is required")
    private String url;

    @NotNull(message = "Port number is required")
    @Max(value = 9999, message = "Only 4 digit port number allowed")
    private Integer port;

    @NotBlank(message = "Username is required")
    private String username;

    @NotBlank(message = "Password is required")
    private String password;

    private String sshPublicKey;
    private String sshPrivateKey;

    @NotBlank(message = "Connection type is required")
    private String connectionType;

    @NotBlank(message = "Enabled field is required")
    private String enabled;

    private String inputFilePath;
    private String outputFilePath;
    private String pollingDuration;
}
```

**CollectorInitializer.java:**

```java
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import java.io.IOException;
import java.util.Set;

@Component
public class CollectorInitializer {
    private final CollectorApiReader collectorApiReader;
    private final Validator validator;

    @Autowired
    public CollectorInitializer(CollectorApiReader collectorApiReader, Validator validator) {
        this.collectorApiReader = collectorApiReader;
        this.validator = validator;
    }

    @KafkaListener(topics = "3459-DEV-COLLECTION-REQUEST-QUEUE")
    public void consumeSpaceCollector(String message) {
        try {
            SpaceCollector spaceCollector = new ObjectMapper().readValue(message, SpaceCollector.class);

            // Initialize CollectorApiReader
            collectorApiReader.initialize(spaceCollector);

            // Print space_collectors json into the console
            System.out.println("space_collectors json: " + message);

            // Validate SpaceCollector
            validateSpaceCollector(spaceCollector);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateSpaceCollector(SpaceCollector spaceCollector) {
        Set<ConstraintViolation<SpaceCollector>> violations = validator.validate(spaceCollector);

        if (!violations.isEmpty()) {
            // Handle validation errors
            for (ConstraintViolation<SpaceCollector> violation : violations) {
                System.out.println("Validation Error: " + violation.getMessage());
            }
        }
    }
}
```

**CollectorApiReader.java:**

```java
import org.springframework.stereotype.Component;

@Component
public class CollectorApiReader {
    private String spaceCollectorJson;

    public void initialize(SpaceCollector spaceCollector) {
        this.spaceCollectorJson = spaceCollector.getJson();

        // Validate space_collector json has an id
        if (spaceCollector.getId() == null) {
            throw new IllegalArgumentException("space_collector json must have an id");
        }

        // Validate space_collector json has an ip address in the url field
        if (spaceCollector.getUrl() == null || spaceCollector.getUrl().isEmpty()) {
            throw new IllegalArgumentException("space_collector json must have a valid ip address in the url field");
        }

        // Validate space_collector json has a port number
        if (spaceCollector.getPort() == null) {
            throw new IllegalArgumentException("space_collector json must have a port number");
        }

        // Validate space_collector json has a connection_type which is API
        if (spaceCollector.getConnectionType() == null || !spaceCollector.getConnectionType().equalsIgnoreCase("API")) {
            throw new IllegalArgumentException("space_collector json must have connection_type as API");
        }

        // Validate space_collector json has a username and password
        if (spaceCollector.getUsername() == null || spaceCollector.getUsername().isEmpty()) {
            throw new IllegalArgumentException("space_collector json must have a username");
        }
        if (spaceCollector.getPassword() == null || spaceCollector.getPassword().isEmpty()) {
            throw new IllegalArgumentException("space_collector json must have a password");
        }

        // Print space_collectors json into the console
        System.out.println("space_collectors json: " + this.spaceCollectorJson);
    }
}
```

**ControllerClass.java:**

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ControllerClass {
    private final KafkaTemplate<String, String> kafkaTemplate;

    @Autowired
    public ControllerClass(KafkaTemplate<String, String> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    @PostMapping("/space-collector")
    public ResponseEntity<String> pushSpaceCollector(@RequestBody SpaceCollector spaceCollector) {
        // Validate the space_collector json
        validateSpaceCollector(spaceCollector);

        String topic = "3459-DEV-COLLECTION-REQUEST-QUEUE";
        String jsonMessage = convertSpaceCollectorToJson(spaceCollector);
        kafkaTemplate.send(topic, jsonMessage);

        return new ResponseEntity<>("SpaceCollector pushed to Kafka topic", HttpStatus.OK);
    }

    private void validateSpaceCollector(SpaceCollector spaceCollector) {
        // Validate space_collector json has an id
        if (spaceCollector.getId() == null) {
            throw new IllegalArgumentException("space_collector json must have an id");
        }

        // Validate space_collector json has an ip address in the url field
        if (spaceCollector.getUrl() == null || spaceCollector.getUrl().isEmpty()) {
            throw new IllegalArgumentException("space_collector json must have a valid ip address in the url field");
        }

        // Validate space_collector json has a port number
        if (spaceCollector.getPort() == null) {
            throw new IllegalArgumentException("space_collector json must have a port number");
        }

        // Validate space_collector json has a connection_type which is API
        if (spaceCollector.getConnectionType() == null || !spaceCollector.getConnectionType().equalsIgnoreCase("API")) {
            throw new IllegalArgumentException("space_collector json must have connection_type as API");
        }

        // Validate space_collector json has a username and password
        if (spaceCollector.getUsername() == null || spaceCollector.getUsername().isEmpty()) {
            throw new IllegalArgumentException("space_collector json must have a username");
        }
        if (spaceCollector.getPassword() == null || spaceCollector.getPassword().isEmpty()) {
            throw new IllegalArgumentException("space_collector json must have a password");
        }
    }

    private String convertSpaceCollectorToJson(SpaceCollector spaceCollector) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.writeValueAsString(spaceCollector);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            return null;
        }
    }
}
```