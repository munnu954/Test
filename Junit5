```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Test
    void applyPostingRules_shouldReturnAlarm_whenPostingRuleMatchFound() {
        // given
        Alarm alarm = mock(Alarm.class);
        when(alarm.getAlarmIdentity()).thenReturn("alarm-id");
        HashMap<String, Object> alarmMap = new HashMap<>();
        when(RulesConstants.getObjectMapper().convertValue(alarm, HashMap.class)).thenReturn(alarmMap);
        PostingRule postingRuleMatch = mock(PostingRule.class);
        when(postingRuleMatch.getRuleId()).thenReturn("rule-id");
        when(postingRuleMatch.matchFilter(anyMap())).thenReturn(true);
        when(ruleLoadingService.getRuleMap()).thenReturn(Map.of("rule-id", postingRuleMatch));

        // when
        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        // then
        assertEquals(alarm, result);
    }

    @Test
    void applyPostingRules_shouldReturnAlarm_whenNoPostingRuleMatchFound() {
        // given
        Alarm alarm = mock(Alarm.class);
        when(alarm.getAlarmIdentity()).thenReturn("alarm-id");
        HashMap<String, Object> alarmMap = new HashMap<>();
        when(RulesConstants.getObjectMapper().convertValue(alarm, HashMap.class)).thenReturn(alarmMap);
        when(ruleLoadingService.getRuleMap()).thenReturn(Map.of());

        // when
        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        // then
        assertEquals(alarm, result);
    }

    @Test
    void getComponentIdForTopoTraversal_shouldReturnComponentId() {
        // given
        HashMap<String, Object> alarmMap = new HashMap<>();
        PostingRule rule = mock(PostingRule.class);
        when(rule.getRuleTraversalExpression()).thenReturn("expression");
        String componentIDAttributeName = "component-id";
        String componentID = "component-id-value";
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(componentID);

        // when
        String result = postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule);

        // then
        assertEquals(componentID, result);
    }

    @Test
    void applyPostingRule_shouldReturnAlarm_whenAlarmedObjectResolved() {
        // given
        Alarm alarm = mock(Alarm.class);
        when(alarm.getAlarmIdentity()).thenReturn("alarm-id");
        PostingRule rule = mock(PostingRule.class);
        when(rule.getRuleId()).thenReturn("rule-id");
        String componentIDAttributeName = "component-id";
        when(postingRuleProcessingService.getComponentIdForTopoTraversal(anyMap(), any())).thenReturn("component-id-value");

        String topologyData = "{\"topologyObjects\": []}";
        ResponseEntity<String> response = mock(ResponseEntity.class);
        when(response.getBody()).thenReturn(topologyData);
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(response);

        HashMap<String, Object> topoObjectMap = new HashMap<>();
        String alarmedObjectExpression = "%TopoObject:OSS_Names[0]%";
        String alarmedObject = "alarmed-object";
        when(utils.evaluateExpression(alarmedObjectExpression, topoObjectMap)).thenReturn(alarmedObject);

        // when
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, new HashMap<>());

        // then
        assertEquals(alarm, result);
        assertEquals(alarmedObject, result.getAlarmedObject());
        assertNotNull(result.getTopologyDetails());
    }

    @Test
    void isLateAlarmEligibleForRuleProcessing_shouldReturnTrue_whenAttributeNameContainsDot() {
        // given
        Alarm alarm = mock(Alarm.class);
        SqlRowSet rs = mock(SqlRowSet.class);
        String componentIDAttributeName = "component-id.sub-component-id";

        // when
        boolean result = postingRuleProcessingService.isLateAlarmEligibleForRuleProcessing(alarm, rs);

        // then
        assertTrue(result);
    }

    @Test
    void isLateAlarmEligibleForRuleProcessing_shouldReturnFalse_whenAttributeNameDoesNotContainDot() {
        // given
        Alarm alarm = mock(Alarm.class);
        SqlRowSet rs = mock(SqlRowSet.class);
        String componentIDAttributeName = "component-id";
        when(rs.getString(anyString())).thenReturn("value");

        // when
        boolean result = postingRuleProcessingService.isLateAlarmEligibleForRuleProcessing(alarm, rs);

        // then
        assertFalse(result);
    }
}
```