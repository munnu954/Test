To achieve 100% code coverage for the `DataSourceConfig` class using JUnit 5, we will write test cases that mock the necessary components and validate the behavior of the methods in the `DataSourceConfig` class. Below is an example of a test class that covers all methods in `DataSourceConfig`, including the creation of the `DataSource`, `EntityManagerFactory`, and `TransactionManager`.

```java
import static org.mockito.Mockito.*;
import static org.assertj.core.api.Assertions.*;

import javax.sql.DataSource;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Primary;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
@EnableConfigurationProperties(DataSourceModal.class)
@EnableJpaRepositories
public class DataSourceConfigTest {

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @Mock
    private DataSourceModal dataSourceModal;

    @Mock
    private EntityManagerFactoryBuilder entityManagerFactoryBuilder;

    @Mock
    private DataSource dataSource;

    @Mock
    private EntityManagerFactory entityManagerFactory;

    @BeforeEach
    public void setUp() {
        when(dataSourceModal.getUrl()).thenReturn("jdbc:mysql://localhost:3306/testdb");
        when(dataSourceModal.getUsername()).thenReturn("testuser");
        when(dataSourceModal.getPassword()).thenReturn("testpassword");
        when(dataSourceModal.getDriver()).thenReturn("com.mysql.cj.jdbc.Driver");
    }

    @Test
    public void testFalloutDataSource() {
        DataSource createdDataSource = dataSourceConfig.falloutDataSource();
        
        assertThat(createdDataSource).isInstanceOf(DriverManagerDataSource.class);
        
        DriverManagerDataSource driverManagerDataSource = (DriverManagerDataSource) createdDataSource;
        assertThat(driverManagerDataSource.getUrl()).isEqualTo("jdbc:mysql://localhost:3306/testdb");
        assertThat(driverManagerDataSource.getUsername()).isEqualTo("testuser");
        assertThat(driverManagerDataSource.getPassword()).isEqualTo("testpassword");
        assertThat(driverManagerDataSource.getDriverClassName()).isEqualTo("com.mysql.cj.jdbc.Driver");
    }

    @Test
    public void testEntityManagerFactoryBean() {
        when(entityManagerFactoryBuilder.dataSource(any())).thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.packages(anyString())).thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.persistenceUnit(anyString())).thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.build()).thenReturn(entityManagerFactory);

        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = dataSourceConfig.entityManagerFactoryBean(entityManagerFactoryBuilder, dataSource);
        
        assertThat(entityManagerFactoryBean).isNotNull();
        verify(entityManagerFactoryBuilder).dataSource(dataSource);
        verify(entityManagerFactoryBuilder).packages("com.verizon.vbg.ledger.entity");
        verify(entityManagerFactoryBuilder).persistenceUnit("fallout-db");
    }

    @Test
    public void testFalloutTransactionManager() {
        when(entityManagerFactory).thenReturn(entityManagerFactory);
        
        PlatformTransactionManager transactionManager = dataSourceConfig.falloutTransactionManager(entityManagerFactory);
        
        assertThat(transactionManager).isInstanceOf(JpaTransactionManager.class);
        verify(entityManagerFactory).equals(entityManagerFactory);
    }
}
```

### Explanation:
1. **Mocks**: We use `@Mock` to create mock instances of `DataSourceModal`, `EntityManagerFactoryBuilder`, and other dependencies.
2. **InjectMocks**: We use `@InjectMocks` with `DataSourceConfig` to inject the mocked dependencies.
3. **Setup Method**: In the `setUp` method, we configure the behavior of the mocked `DataSourceModal`.
4. **Test Methods**: 
   - `testFalloutDataSource` verifies that the `falloutDataSource()` method creates a `DataSource` with the expected properties.
   - `testEntityManagerFactoryBean` checks that the `entityManagerFactoryBean` method sets up the `EntityManagerFactory` correctly.
   - `testFalloutTransactionManager` ensures that the `falloutTransactionManager` method returns a `JpaTransactionManager`.

### Note:
Make sure that you have the necessary dependencies (e.g., JUnit 5, Mockito, Spring Test) included in your project for the tests to run successfully.