Certainly! Let's expand the test cases to cover all branches of the `createAlarm` method in the `AlarmRepositoryImpl` class for achieving 100% code coverage. 

Here's a set of comprehensive JUnit 5 test cases:

```java
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
        Environment env = mock(Environment.class);
        AlarmPostingUtils alarmPostingUtils = mock(AlarmPostingUtils.class);
        AlarmPostingConstants alarmPostingConstants = mock(AlarmPostingConstants.class);
        when(env.getProperty(anyString())).thenReturn("testValue");
        ReflectionTestUtils.setField(alarmPostingUtils, "env", env);
    }

    @Test
    void testCreateAlarm_ValidData() throws Exception {
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);
        typeMap.put("otherType", 7);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"perceivedSeverity\":\"\", \"serviceAffecting\":\"true\", \"alarmRaisedTime\":\"2023-09-01T12:00:00Z\", \"alarmUpdatedTime\":\"2023-09-01T12:00:00Z\", \"alarmDetails\":\"Details\", \"alarmedObject\":\"object\", \"alarmedObjectType\":\"type\", \"TID\":\"tid\", \"specificProblem\":\"problem\", \"Count\":\"5\", \"tag\":[\"tag1\", \"tag2\"] }";
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);
        
        assertNotNull(alarm);
        assertEquals(6, alarm.getState()); // Cleared state
        assertEquals(-1, alarm.getPerceivedSeverity()); // due to perceivedSeverity being empty and state being cleared
        assertTrue(alarm.isServiceAffecting());
        assertEquals(4, alarm.getCount()); // Count - 1
    }

    @Test
    void testCreateAlarm_MissingFields() throws Exception {
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("New", 1);
        typeMap.put("otherType", 7);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"New\", \"sequenceId\":\"23423\", \"alarmRaisedTime\":\"2023-09-01T12:00:00Z\" }";
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getState()); // New state
        assertEquals(1, alarm.getPerceivedSeverity()); // due to perceivedSeverity being null
        assertFalse(alarm.isServiceAffecting()); // default to false
    }

    @Test
    void testCreateAlarm_NullReportingObject() throws Exception {
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("New", 1);
        typeMap.put("otherType", 7);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"New\", \"sequenceId\":\"23423\", \"alarmedObject\":\"\", \"TID\":\"tid\", \"alarmRaisedTime\":\"2023-09-01T12:00:00Z\" }";
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals("tid", alarm.getReportingObject()); // fallback to TID when alarmedObject is empty
    }

    @Test
    void testCreateAlarm_InvalidJson() {
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"New\", \"sequenceId\":\"23423\", \"alarmRaisedTime\":\"invalid_date\" }";
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNull(alarm); // Should return null due to invalid JSON parsing
    }

    @Test
    void testCreateAlarm_MissingSequenceId() throws Exception {
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("New", 1);
        typeMap.put("otherType", 7);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"New\", \"alarmRaisedTime\":\"2023-09-01T12:00:00Z\" }";
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNull(alarm); // Should return null due to missing sequenceId
    }

    @Test
    void testCreateAlarm_WithNullValues() throws Exception {
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("New", 1);
        typeMap.put("otherType", 7);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"New\", \"sequenceId\":\"23423\", \"perceivedSeverity\":null, \"serviceAffecting\":null, \"alarmRaisedTime\":\"2023-09-01T12:00:00Z\" }";
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);
        
        assertNotNull(al