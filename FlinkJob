public class CsvToJsonMrfcTransformer extends RichFlatMapFunction<String, String> {
    private JSONObject jsonObject;
    private String filename;
    private String nodeIP;

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", new IntCounter());
        getRuntimeContext().addAccumulator("failureIntCounter", new IntCounter());
    }

    @Override
    public void flatMap(String value, Collector<String> out) throws Exception {
        String[] lines = value.split(System.lineSeparator());
        boolean isHeaders = false;
        for (String line : lines) {
            String[] arr = line.split(",");

            if (!isHeaders) {
                isHeaders = true;
                continue;
            }

            if (arr.length == 1 && arr[0].startsWith("\"filename:")) {
                filename = arr[0].replace("\"filename:", "").replace("\"", "").trim();
                continue;
            }

            if (arr.length == 1 && arr[0].startsWith("\"NodeIP:")) {
                nodeIP = arr[0].replace("\"NodeIP:", "").replace("\"", "").trim();
                continue;
            }

            if (arr.length > 1) {
                if (jsonObject == null) {
                    jsonObject = new JSONObject();
                }

                for (int i = 0; i < arr.length; i++) {
                    if (i == 0) {
                        String key = arr[i].trim().replaceAll("\"", "");
                        String value = arr[i + 1].trim().replaceAll("\"", "");
                        jsonObject.put(key, value);
                    }
                }
                out.collect(jsonObject.toString());

                jsonObject = null;
            }
        }
    }
}