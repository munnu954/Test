To achieve 100% code coverage for the `convert(String json, Class<?> clazz)` method in the `JsonConverter` class, we need to test various scenarios, including valid JSON input, invalid JSON input, and edge cases. Below is the complete JUnit 5 test class focusing on the `convert` method:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Field;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class JsonConverterTest {

    private JsonConverter jsonConverter;

    @BeforeEach
    void setUp() {
        jsonConverter = new JsonConverter();
    }

    @Test
    void testConvertValidJson() throws JsonMappingException, JsonProcessingException {
        String json = "{\"name\":\"John\", \"age\":30}";
        Person person = (Person) jsonConverter.convert(json, Person.class);
        
        assertEquals("John", person.getName());
        assertEquals(30, person.getAge());
    }

    @Test
    void testConvertInvalidJson() {
        String json = "{\"name\":\"John\", \"age\":\"invalidAge\"}";

        assertThrows(JsonMappingException.class, () -> {
            jsonConverter.convert(json, Person.class);
        });
    }

    @Test
    void testConvertEmptyJson() throws JsonMappingException, JsonProcessingException {
        String json = "{}";
        Person person = (Person) jsonConverter.convert(json, Person.class);
        
        assertEquals(null, person.getName());
        assertEquals(0, person.getAge());
    }

    @Test
    void testConvertJsonWithUnknownProperties() throws JsonMappingException, JsonProcessingException {
        String json = "{\"name\":\"John\", \"age\":30, \"unknownProperty\":\"value\"}";
        Person person = (Person) jsonConverter.convert(json, Person.class);
        
        assertEquals("John", person.getName());
        assertEquals(30, person.getAge());
    }

    @Test
    void testConvertNullJson() {
        assertThrows(JsonMappingException.class, () -> {
            jsonConverter.convert(null, Person.class);
        });
    }

    @Test
    void testConvertInvalidJsonFormat() {
        String json = "not a json";

        assertThrows(JsonMappingException.class, () -> {
            jsonConverter.convert(json, Person.class);
        });
    }

    // Sample Person class for testing purposes
    private static class Person {
        private String name;
        private int age;

        // Getters and setters omitted for brevity
        public Person() {}

        public Person(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }

        public int getAge() {
            return age;
        }
    }
}
```

### Explanation:
1. **testConvertValidJson**: Tests the method with valid JSON, verifying that the `Person` object is correctly populated.
2. **testConvertInvalidJson**: Tests the method with invalid JSON that has a type mismatch, ensuring it throws a `JsonMappingException`.
3. **testConvertEmptyJson**: Tests conversion of an empty JSON object (`{}`) to ensure it creates a `Person` object with null values.
4. **testConvertJsonWithUnknownProperties**: Tests JSON containing known properties and additional unknown properties to ensure it does not throw an exception (as configured).
5. **testConvertNullJson**: Tests the method with a null input, expecting a `JsonMappingException`.
6. **testConvertInvalidJsonFormat**: Tests the method with a string that is not formatted as JSON, ensuring it throws a `JsonMappingException`.

These test cases cover all necessary paths in the `convert` method, ensuring complete coverage and robustness against various input scenarios.