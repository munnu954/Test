To ensure 100% code coverage for the specified if statements in the `convertToMtnInsights` method, let's write test cases that specifically trigger these conditions.

### Test Case for `if(!ObjectUtils.isEmpty(insightsCaseEntities)){ }`

This statement will be triggered when the `insightsRepository` method returns a non-null and non-empty `MtnInsightsEntity`.

### Test Case for `if(aggregateInsightsEntity.getAggrValue().contains(appendOutage.toString())) { }`

This statement is triggered when the `aggrValue` of `AggregateInsightsEntity` contains the specific outage ID string.

Below are the JUnit 5 test cases designed to cover these conditions:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class MtnInsightsManagerTest {

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testConvertToMtnInsights_withNonEmptyInsightsCaseEntities() {
        // Arrange
        MtnInsightsEntity entity1 = createEntity("mtnoutage", "VBGNxOutage", "123");
        List<MtnInsightsEntity> entities = Arrays.asList(entity1);

        MtnInsightsEntity insightsCaseEntity = createEntity("mtnOutageCase", "VBGNxOutage", "123");
        when(insightsRepository.findByPkEcpdIdAndPkMtnAndProdIdAndPkInsightCategoryInAndPkInsightNameIn(
                anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenReturn(insightsCaseEntity);

        // Act
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("VBGNxOutage", result.getCategoryInsights()[0].getCategory());
        assertEquals("mtnOutageCase", result.getCategoryInsights()[0].getInsights()[0].getName());
    }

    @Test
    public void testConvertToMtnInsights_withAggregateValueContainingOutageId() {
        // Arrange
        MtnInsightsEntity entity1 = createEntity("mtnoutage", "VBGNxOutage", "123");
        List<MtnInsightsEntity> entities = Arrays.asList(entity1);

        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        String outageId = "123";
        String appendOutage = "\"outage_id\":\"" + outageId + "\",";
        aggregateEntity.setAggrValue(appendOutage + "otherValue");

        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(anyString(), anyString()))
                .thenReturn(aggregateEntity);

        // Act
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("VBGNxOutage", result.getCategoryInsights()[0].getCategory());
        assertTrue(result.getCategoryInsights()[0].getInsights()[0].getValue().contains("otherValue"));
    }

    private MtnInsightsEntity createEntity(String insightName, String category, String outageId) {
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setEcpdId("ecpdId");
        pk.setMtn("mtn");
        pk.setInsightCategory(category);
        pk.setInsightName(insightName);

        MtnInsightsEntity entity = new MtnInsightsEntity();
        entity.setPk(pk);
        entity.setProdId(outageId);
        entity.setInsightValues("someValue");

        return entity;
    }
}
```

### Explanation

1. **Test Case for Non-Empty Insights Case Entities**:
   - This test sets up a scenario where the `insightsRepository` returns a valid `MtnInsightsEntity` for `mtnOutageCase`, ensuring that `ObjectUtils.isEmpty(insightsCaseEntities)` returns false.
   - The assertions confirm that the insights are processed correctly.

2. **Test Case for Aggregate Value Containing Outage ID**:
   - This test ensures that the `AggregateInsightsEntity` returned by the `aggrInsightRepository` contains the expected outage ID string in its `aggrValue`.
   - The assertion checks that the resulting insights include the processed aggregate values.

These test cases should correctly trigger and validate the specified if statements, ensuring 100% code coverage for those conditions.