@RunWith(MockitoJUnitRunner.class)
public class AlarmOperationsAPITest {

    @InjectMocks
    private AlarmOperationsAPI alarmOperationsAPI;

    @Mock
    private AlarmRelationUtils alarmRelationUtils;

    @Mock
    private Logger logger;

    @Mock
    private ObjectMapper objectMapper;

    @Test
    public void testGetTopologyTraversalObjectsList() throws Exception {
        // Prepare input data
        String responseString = "{\"TBL_response\":{\"topologyObjects\":[{\"id\":\"1\",\"name\":\"Node1\"},{\"id\":\"2\",\"name\":\"Node2\"}]}}";
        HashMap<String, Object> alarmTagValueMap = new HashMap<>();
        alarmTagValueMap.put("alarmIdentity", "123456");

        // Mock ObjectMapper behavior
        JsonNode jsonNode = Mockito.mock(JsonNode.class);
        Mockito.when(objectMapper.readTree(responseString)).thenReturn(jsonNode);

        JsonNode topologyObjectsNode = Mockito.mock(JsonNode.class);
        Mockito.when(jsonNode.at("/TBL_response/topologyObjects")).thenReturn(topologyObjectsNode);
        Mockito.when(topologyObjectsNode.isMissingNode()).thenReturn(false);
        Mockito.when(topologyObjectsNode.isArray()).thenReturn(true);

        // Mock AlarmRelationUtils behavior
        Mockito.when(alarmRelationUtils.evaluateExpression(Mockito.anyString(), Mockito.anyMap())).thenReturn("value1");
        Mockito.when(alarmRelationUtils.evaluateExpression(Mockito.anyString(), Mockito.anyMap())).thenReturn("Node1");

        // Call the method
        List<String> result = ReflectionTestUtils.invokeMethod(alarmOperationsAPI, "getTopologyTraversalObjectsList", responseString, alarmTagValueMap);

        // Assertions
        assertEquals(1, result.size()); // Assuming only 1 element passed the eligibility check
        assertEquals("Node1", result.get(0));
    }
}