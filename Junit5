Sure, I can help you write more Junit5 testcases code for covering the else block for 100% code coverage. Here are a few examples:

```
@Test
public void testParseWithEmptyString() {
  String value = "";
  Map<String, Object> srcMap = new HashMap<>();
  String ruleName = "ruleName";
  String expectedResult = "";
  String actualResult = AlarmPostingUtils.parse(value, srcMap, ruleName);
  assertEquals(expectedResult, actualResult);
}

@Test
public void testParseWithNullString() {
  String value = null;
  Map<String, Object> srcMap = new HashMap<>();
  String ruleName = "ruleName";
  String expectedResult = "";
  String actualResult = AlarmPostingUtils.parse(value, srcMap, ruleName);
  assertEquals(expectedResult, actualResult);
}

@Test
public void testParseWithEmptyMap() {
  String value = "key1:value1";
  Map<String, Object> srcMap = new HashMap<>();
  String ruleName = "ruleName";
  String expectedResult = "key1:value1";
  String actualResult = AlarmPostingUtils.parse(value, srcMap, ruleName);
  assertEquals(expectedResult, actualResult);
}

@Test
public void testParseWithNullMap() {
  String value = "key1:value1";
  Map<String, Object> srcMap = null;
  String ruleName = "ruleName";
  String expectedResult = "";
  String actualResult = AlarmPostingUtils.parse(value, srcMap, ruleName);
  assertEquals(expectedResult, actualResult);
}

@Test
public void testParseWithEmptyRuleName() {
  String value = "key1:value1";
  Map<String, Object> srcMap = new HashMap<>();
  String ruleName = "";
  String expectedResult = "key1:value1";
  String actualResult = AlarmPostingUtils.parse(value, srcMap, ruleName);
  assertEquals(expectedResult, actualResult);
}

@Test
public void testParseWithNullRuleName() {
  String value = "key1:value1";
  Map<String, Object> srcMap = new HashMap<>();
  String ruleName = null;
  String expectedResult = "";
  String actualResult = AlarmPostingUtils.parse(value, srcMap, ruleName);
  assertEquals(expectedResult, actualResult);
}

@Test
public void testParseWithNoMatches() {
  String value = "key1:value1";
  Map<String, Object> srcMap = new HashMap<>();
  srcMap.put("key2", "value2");
  String ruleName = "ruleName";
  String expectedResult = "key1:value1";
  String actualResult = AlarmPostingUtils.parse(value, srcMap, ruleName);
  assertEquals(expectedResult, actualResult);
}

@Test
public void testParseWithOneMatch() {
  String value = "key1:value1";
  Map<String, Object> srcMap = new HashMap<>();
  srcMap.put("key1", "value2");
  String ruleName = "ruleName";
  String expectedResult = "value2";
  String actualResult = AlarmPostingUtils.parse(value, srcMap, ruleName);
  assertEquals(expectedResult, actualResult);
}

@Test
public void testParseWithTwoMatches() {
  String value = "key1:value1,key2:value2";
  Map<String, Object> srcMap = new HashMap<>();
  srcMap.put("key1", "value2");
  srcMap.put("key2", "value3");
  String ruleName = "ruleName";
  String expectedResult = "value2,value3";
  String actualResult = AlarmPostingUtils.parse(value, srcMap, ruleName);
  assertEquals(expectedResult, actualResult);
}

@Test
public void testParseWithThreeMatches() {
  String value = "key1:value1,key2:value2,key3:value3";
  Map<String, Object> srcMap = new HashMap<>();
  srcMap.put("key1", "value2");
  srcMap.put("key2", "value3");
  srcMap.put("key3", "value4");
  String ruleName = "ruleNam