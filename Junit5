@Test
public void testTriggerJob_SuccessfulSubmission() {
    // Prepare test data
    String fileType = ".csv";
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    // set auditMsg fields...

    // Mock external dependencies and response
    ResponseEntity<String> successResponse = new ResponseEntity<>("{\"jobid\":\"12345\"}", HttpStatus.OK);
    Mockito.when(restTemplate.postForEntity(Mockito.anyString(), Mockito.any(), Mockito.eq(String.class)))
            .thenReturn(successResponse);

    // Execute the method
    String result = flinkApiController.triggerJob(auditMsg, fileType);

    // Verify the results
    InOrder inOrder = Mockito.inOrder(kafkaAuditProducer, flinkApiController); // Using Mockito.inOrder properly with the correct mock objects
    inOrder.verify(kafkaAuditProducer).createMessageAndLog(
            Mockito.eq(inputFilePath),
            Mockito.eq(url),
            Mockito.eq(port),
            Mockito.eq(outputFilePath),
            Mockito.eq(fileType),
            Mockito.any(),
            Mockito.eq(noOfRecordsInFile),
            Mockito.eq(noOfRecordsProcessed),
            Mockito.eq(noOfRecordsFailed),
            Mockito.eq(jobId),
            Mockito.eq(jarId),
            Mockito.eq(collectorId),
            Mockito.eq(exceptions),
            Mockito.eq(jobStatus)
    );
    inOrder.verify(flinkApiController).updateJobStatus(auditMsg, "12345");
    Assert.assertEquals("Job submitted", result);
}