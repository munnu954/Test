To achieve 100% code coverage for the for loop in the `applyPostingRule` method of the `PostingRuleProcessingService` class without making the specified fields public, we can use reflection to set the values of those fields before executing the test cases. Here is an example of how you can write JUnit 5 test cases to cover all branches of the for loop:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class PostingRuleProcessingServiceTest {

    @Test
    public void testApplyPostingRuleForLoop() throws Exception {
        PostingRuleProcessingService service = new PostingRuleProcessingService();

        // Mock necessary dependencies
        RuleLoadingService ruleLoadingService = mock(RuleLoadingService.class);
        TopologyApiClient topoApiClient = mock(TopologyApiClient.class);
        AlarmPostingUtils utils = mock(AlarmPostingUtils.class);
        
        // Set the private fields using reflection
        setPrivateField(service, "ruleLoadingService", ruleLoadingService);
        setPrivateField(service, "topoApiClient", topoApiClient);
        setPrivateField(service, "utils", utils);

        // Mock necessary data for the test
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "Test Rule", 1, 1, "Test Criteria");
        HashMap<String, Object> alarmMap = new HashMap<>();
        JsonNode jsonNode = mock(JsonNode.class);
        JsonNode topologyObjectsNode = mock(JsonNode.class);
        
        // Mock the behavior of topoApiClient
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), any())).thenReturn(null);

        // Mock the behavior of utils
        when(utils.evaluateExpression(any(), any())).thenReturn("TestValue");

        // Set the private field 'alarmedObjectExpression' using reflection
        setPrivateField(service, "alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");

        // Execute the method
        assertDoesNotThrow(() -> service.applyPostingRule(alarm, rule, alarmMap));
    }

    private void setPrivateField(PostingRuleProcessingService service, String fieldName, Object value) throws Exception {
        Field field = PostingRuleProcessingService.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(service, value);
    }
}
```

In the above test case, we are using reflection to set the private fields of the `PostingRuleProcessingService` class before executing the `applyPostingRule` method. This allows us to cover all branches of the for loop without making the specified fields public. Make sure to adapt this example to your actual implementation and provide proper assertions and behavior mocking for your specific use case.