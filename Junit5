import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class CableProcessorTest {

    @InjectMocks
    private CableProcessor cableProcessor;

    @Mock
    private Node getNodeMock;
    @Mock
    private PortRef eqtObject;

    @Test
    void process_shouldNotAddLink_whenClrComponentIsNull() {
        // Arrange
        ClrComponent clrComponent = null;

        // Act
        cableProcessor.process(
                Collections.emptyList(),
                Collections.emptyList(),
                clrComponent,
                Collections.emptyList(),
                Collections.emptyMap(),
                0,
                new AtomicInteger(),
                ""
        );

        // Assert
        verify(getNodeMock, never()).getPortId();
    }

    @Test
    void process_shouldAddLink_whenClrComponentCableCompIsNotNull() {
        // Arrange
        CableComp cableCompo = new CableComp();
        when(cableCompo.getLocationA()).thenReturn("aloc");

        List<CableComp> cableCompList = new ArrayList<>();
        cableCompList.add(cableCompo);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCableComp(cableCompList);
        clrComponent.setType("cable");

        List<Node> nodes = new ArrayList<>();
        nodes.add(new Node());

        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(new ClrComponent());

        List<Link> links = new ArrayList<>();

        Map<String, List<Node>> clliNodeMap = Collections.emptyMap();

        AtomicInteger i = new AtomicInteger(0);
        String sourceSys = "";

        // Act
        cableProcessor.process(
                nodes,
                links,
                clrComponent,
                clrComponentList,
                clliNodeMap,
                i.getAndIncrement(),
                i,
                sourceSys
        );

        // Assert
        verify(getNodeMock).getPortId();
    }

    @Test
    void process_shouldNotAddLink_whenPrevTypeIsNotPortOrChannel() {
        // Arrange
        CableComp cableCompo = new CableComp();
        when(cableCompo.getLocationA()).thenReturn("aloc");

        List<CableComp> cableCompList = new ArrayList<>();
        cableCompList.add(cableCompo);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCableComp(cableCompList);
        clrComponent.setType("cable");

        List<Node> nodes = new ArrayList<>();
        nodes.add(new Node());

        List<ClrComponent> clrComponentList = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType("circuit");
        clrComponentList.add(prevClrComponent);

        List<Link> links = new ArrayList<>();

        Map<String, List<Node>> clliNodeMap = Collections.emptyMap();

        AtomicInteger i = new AtomicInteger(0);
        String sourceSys = "";

        // Act
        cableProcessor.process(
                nodes,
                links,
                clrComponent,
                clrComponentList,
                clliNodeMap,
                i.getAndIncrement(),
                i,
                sourceSys
        );

        // Assert
        verify(getNodeMock, never()).getPortId();
    }

    @Test
    void process_shouldAddLink_whenPrevTypeIsPortWithShelfIdMatchingPresentType() {
        // Arrange
        CableComp cableCompo = new CableComp();
        cableCompo.setElementId("Element-1");
        when(cableCompo.getLocationA()).thenReturn("aloc");

        List<CableComp> cableCompList = new ArrayList<>();
        cableCompList.add(cableCompo);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCableComp(cableCompList);
        clrComponent.setType("cable");

        List<Node> nodes = new ArrayList<>();
        Node node = new Node();
        node.setShelfId("shelf-1");
        nodes.add(node);

        List<ClrComponent> clrComponentList = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType("port");
        PortRef prevEqtObject = new PortRef();
        prevEqtObject.setShelfID("shelf-1");
        prevClrComponent.setEquipmentComp(Collections.singletonList(new EquipmentComp().setPortRef(Collections.singletonList(prevEqtObject))));
        clrComponentList.add(prevClrComponent);

        List<Link> links = new ArrayList<>();

        Map<String, List<Node>> clliNodeMap = Collections.emptyMap();

        AtomicInteger i = new AtomicInteger(0);
        String sourceSys = "";

        // Act
        cableProcessor.process(
                nodes,
                links,
                clrComponent,
                clrComponentList,
                clliNodeMap,
                i.getAndIncrement(),
                i,
                sourceSys
        );

        // Assert
        verify(getNodeMock).getPortId();
    }

    @Test
    void process_shouldAddLink_whenPrevTypeIsPortWithShelfIdMatchingAbsentType() {
        // Arrange
        CableComp cableCompo = new CableComp();
        cableCompo.setElementId("Element-1");
        when(cableCompo.getLocationA()).thenReturn("aloc");

        List<CableComp> cableCompList = new ArrayList<>();
        cableCompList.add(cableCompo);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCableComp(cableCompList);
        clrComponent.setType("cable");

        List<Node> nodes = new ArrayList<>();
        Node node = new Node();
        node.setShelfId("shelf-1");
        nodes.add(node);

        List<ClrComponent> clrComponentList = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType("port");
        PortRef prevEqtObject = new PortRef();
        prevEqtObject.setShelfID("NOT-shelf-1");
        prevClrComponent.setEquipmentComp(Collections.singletonList(new EquipmentComp().setPortRef(Collections.singletonList(prevEqtObject))));
        clrComponentList.add(prevClrComponent);

        List<Link> links = new ArrayList<>();

        Map<String, List<Node>> clliNodeMap = Collections.emptyMap();

        AtomicInteger i = new AtomicInteger(0);
        String sourceSys = "";

        // Act
        cableProcessor.process(
                nodes,
                links,
                clrComponent,
                clrComponentList,
                clliNodeMap,
                i.getAndIncrement(),
                i,
                sourceSys
        );

        // Assert
        verify(getNodeMock).getPortId();
    }

    @Test
    void process_shouldNotAddLink_whenPrevTypeIsTrailOrCircuitPathLinkOrCircuit() {
        // Arrange
        CableComp cableCompo = new CableComp();
        when(cableCompo.getLocationA()).thenReturn("aloc");

        List<CableComp> cableCompList = new ArrayList<>();
        cableCompList.add(cableCompo);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCableComp(cableCompList);
        clrComponent.setType("cable");

        List<Node> nodes = new ArrayList<>();
        Node node = new Node();
        node.setShelfId("shelf-1");
        nodes.add(node);

        List<ClrComponent> clrComponentList = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType("trail");
        clrComponentList.add(prevClrComponent);

        List<Link> links = new ArrayList<>();

        Map<String, List<Node>> clliNodeMap = Collections.emptyMap();

        AtomicInteger i = new AtomicInteger(0);
        String sourceSys = "";

        // Act
        cableProcessor.process(
                nodes,
                links,
                clrComponent,
                clrComponentList,
                clliNodeMap,
                i.getAndIncrement(),
                i,
                sourceSys
        );

        // Assert