Certainly! Below is the updated `CoconutServiceVersion3` class with the specified conditions applied to the `queryBasedOnParameter` method:

```java
@Service
public class CoconutServiceVersion3 {

    @Autowired
    CoconutDeviceDao coconutDeviceDao;

    @Autowired
    EuipmentListCoconutDeviceDao euipmentListCoconutDeviceDao;

    @Autowired
    EquipmentListCoconutDeviceV3Dao equipmentListCoconutDeviceV3Dao;

    private CoconutDeviceMSConstants coconutDeviceMSConstants;

    private static Logger logger = LoggerFactory.getLogger(CoconutServiceVersion3.class);

    // newly created for v3api
    public UTSEquipmentList getCOCONUTEquipListV3(EquipmentInputRequest request, UTSEquipmentList utsEquipmentList) throws InternalServerErrorException, NoDataFoundException, InterruptedException, ExecutionException, DaoException {
        try {
            String qry = null;
            String fullQuery = null;
            Map<String, Object> criteria = request.getRequestParameters();
            qry = queryBasedOnParameter(criteria);
            fullQuery = "select COUNT(*) from (" + qry + ")";
            Integer skip = 0;
            Integer limit = 10;
            if (criteria.containsKey("pageNo")) {
                if (criteria.get("pageNo").equals("1")) {
                    skip = 0;
                } else {
                    skip = (Integer.parseInt(criteria.get("pageNo").toString()) * Integer.parseInt(criteria.get("size").toString()));
                    skip = skip - Integer.parseInt(criteria.get("size").toString());
                }
            } else {
                skip = 0;
            }
            if (criteria.containsKey("size")) {
                limit = skip + Integer.parseInt(criteria.get("size").toString());
            } else {
                limit = 10;
            }
            qry = "select * from (select t.*, rownum as rn from (" + qry;
            qry = qry.concat(" ) t ) WHERE rn BETWEEN " + skip + " and " + limit + " ");
            if (criteria.containsKey("sortByField")) {
                qry = qry.concat(" order by " + criteria.get("sortByField") + " ");
            }
            if (criteria.containsKey("sortDirection")) {
                qry = qry.concat(" " + criteria.get("sortDirection") + " ");
            }
            UTSEquipmentList response = new UTSEquipmentList();
            response = equipmentListCoconutDeviceV3Dao.getEquipListDaoV3(criteria, qry, fullQuery, utsEquipmentList, request);
            return response;
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            throw new InternalServerErrorException(ex.getMessage());
        }
    }

    private String queryBasedOnParameter(Map<String, Object> queryParams) {
        String query = "";
        StringJoiner finalQuery = new StringJoiner(" ");

        // Base query
        finalQuery.add(coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);

        // Conditions based on parameters
        if (queryParams.containsKey("locationCLLI")) {
            String locationCLLI = (String) queryParams.get("locationCLLI");
            finalQuery.add("AND (site.clli_code = lower(:locationCLLI) OR site.clli_code = upper(:locationCLLI))");
        }

        if (queryParams.containsKey("siteName")) {
            String siteName = (String) queryParams.get("siteName");
            finalQuery.add("AND site.site_name = :siteName");
        }

        return finalQuery.toString();
    }
}
```

### Explanation:

1. **Base Query Initialization**: The `finalQuery` is initialized with the base query from the `coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY`.

2. **Appending Conditions**:
   - If `locationCLLI` is present in `queryParams`, it appends the condition for `locationCLLI` to the `finalQuery`.
   - If `siteName` is present in `queryParams`, it appends the condition for `siteName` to the `finalQuery`.

3. **Combining Conditions**: The `StringJoiner` ensures that conditions are concatenated properly, maintaining the integrity of the query even if some parameters are missing.

This approach ensures that the final query is dynamically built based on the provided parameters without hardcoding any values.