import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import java.lang.reflect.Method;
import java.util.HashMap;

public class MessageReaderServiceTest {

    @Mock
    private VMBParams vmbParams;

    @Mock
    private ApolloServiceHealth healthChecker;

    @Mock
    private RuleLoadingService ruleLoadingService;

    private MessageReaderService messageReaderService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        messageReaderService = new MessageReaderService();
        messageReaderService.params = vmbParams;
        messageReaderService.healthChecker = healthChecker;
        messageReaderService.rulesLoadingService = ruleLoadingService;
    }

    @Test
    void testIntialializeMessageReaderServiceSuccess() throws Exception {
        VMBConfig vmbConfig = new VMBConfig();
        Reader<byte[]> reader = Mockito.mock(Reader.class);

        Mockito.when(vmbParams.getReaderVMBConfig()).thenReturn(vmbConfig);
        Mockito.when(VMBUtil.createReaderConnection(vmbConfig, MessageId.latest)).thenReturn(reader);

        Method method = MessageReaderService.class.getDeclaredMethod("intialializeMessageReaderService");
        method.setAccessible(true);
        method.invoke(messageReaderService);

        assertNotNull(messageReaderService.reader);
    }

    @Test
    void testIntialializeMessageReaderServiceFailure() throws Exception {
        VMBConfig vmbConfig = new VMBConfig();

        Mockito.when(vmbParams.getReaderVMBConfig()).thenReturn(vmbConfig);
        Mockito.when(VMBUtil.createReaderConnection(vmbConfig, MessageId.latest)).thenReturn(null);

        Mockito.doNothing().when(healthChecker).setHealthy(false, "RuleUpdateNotifier is not created");

        Method method = MessageReaderService.class.getDeclaredMethod("intialializeMessageReaderService");
        method.setAccessible(true);

        assertThrows(SystemExitException.class, () -> {
            method.invoke(messageReaderService);
        });
    }
}