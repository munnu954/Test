I apologize for the inconvenience. Let's revisit the test cases and make sure they are properly set JUnit 5 test cases code:

```java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.jdbc.BadSqlGrammarException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.junit.jupiter.mockito.junit.jupiter.MockitoExtension;

import static org.junitWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Test
    public void testPerformUpdateforACK_WhenBadSqlGrammarExceptionThrown() {
        // Mocking the behavior to throw BadSqlGrammarException
        doThrow(new BadSqlGrammarExceptionwhen(jdbcTemplate).update(anyString());

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforACK("appliedaction", "alarmupdatedtime", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformUpdateforOpNote_WhenBadSqlGrammarExceptionThrown() {
        //Exception
        doThrow(new BadSqlGrammarException("test", "sql")).when(jdbcTemplate).update(anyString());

        assertThrows(B            alarmRepository.performUpdateforOpalarmidentity", 1);
        });
    }

    @Test
    public void testPerformClearbyfeed_WhenBadSqlGrammarExceptionThrown() {
        // Mocking the behavior to throw BadSqlGrammarException
        doThrow(new BadSqlGrammarException("test", "sql")).when(jdbcTemplate).update(anyString());

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performClearbyfeed(1, "cleartime", "alarmupdatedtime", "appliedaction", "alarmidentity", 1    public void testPerformUpdateforHandleEvent_WhenBadSqlGrammarExceptionThrown() {
        // Mocking the behavior to throw BadSqlGrammarException
        doThrow(new BadSqlGrammarException("test", "sql")).when(jdbcTemplate).update(anyString());

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforHandleEvent("handledByidIMPACT", "alarmupdatedtime", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformUpdateforHandleTicket_WhenBadSqlGrammarExceptionThrown() {
        // Mocking the behavior to throw BadSqlGrammarException
        doThrow(new BadSqlGrammarException("test", "sql")).when(jdbcTemplate).update(any            alarmRepository.performUpdateforHandleTicket("ticket", "ticketStatus", "alarmupdatedtime", "alarmidentity catch the BadSqlGrammarException when it is thrown by the methods under test. Feel free to run them and let me know if you encounter any further issues. 

