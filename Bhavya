The error you're encountering indicates that the Spring context is unable to find a bean of type `AccountEcpdService` to inject into the `AccountEcpdStoreController`. To resolve this issue, we need to ensure that the test class is correctly configured to use the Spring context, particularly for mocking the service.

We'll use the `@SpringBootTest` annotation along with `@MockBean` to mock the `AccountEcpdService` within the Spring context during the tests. Here's the revised version of the test class:

```java
import static org.mockito.Mockito.*;
import static org.springframework.test.web.reactive.server.WebTestClient.bindToController;
import static org.springframework.http.MediaType.APPLICATION_JSON;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.test.web.reactive.function.WebTestClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@WebFluxTest(AccountEcpdStoreController.class) // Specifies that we are testing the controller
public class AccountEcpdStoreControllerTest {

    @Autowired
    private WebTestClient webTestClient; // Allows us to make requests to our controller

    @MockBean
    private AccountEcpdService accountService; // Mock the service bean

    @Test
    public void testGetAllAccountEcpdStore() {
        when(accountService.getAllAccountEcpds()).thenReturn(Flux.just("account1", "account2"));

        webTestClient.get()
            .uri("/account-ecpd-store/all")
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectBodyList(String.class)
            .hasSize(2)
            .contains("account1", "account2");
    }

    @Test
    public void testGetEcpdByAcctId() {
        String accountId = "123";
        when(accountService.getEcpdByAcctId(accountId)).thenReturn(Mono.just("accountDetails"));

        webTestClient.get()
            .uri("/account-ecpd-store/account/{accountid}", accountId)
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectBody(String.class)
            .isEqualTo("accountDetails");
    }

    @Test
    public void testGetCount() {
        when(accountService.accountEcpdStoreCount()).thenReturn(Mono.just(5L));

        webTestClient.get()
            .uri("/account-ecpd-store/count")
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectBody(Long.class)
            .isEqualTo(5L);
    }

    @Test
    public void testGetEcpdByAcctId_NotFound() {
        String accountId = "999";
        when(accountService.getEcpdByAcctId(accountId)).thenReturn(Mono.empty());

        webTestClient.get()
            .uri("/account-ecpd-store/account/{accountid}", accountId)
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isNotFound();
    }

    @Test
    public void testGetAllAccountEcpdStore_Empty() {
        when(accountService.getAllAccountEcpds()).thenReturn(Flux.empty());

        webTestClient.get()
            .uri("/account-ecpd-store/all")
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectBodyList(String.class)
            .hasSize(0);
    }
}
```

### Key Changes:
1. **Annotations**:
   - `@WebFluxTest(AccountEcpdStoreController.class)`: This annotation is used to create a Spring context that only includes the specified controller and its dependencies, allowing for focused tests.
   - `@MockBean`: This annotation is used to declare a mock for `AccountEcpdService` within the Spring context.

2. **WebTestClient**: Instead of creating a `WebTestClient` manually, we now inject it using `@Autowired`, which allows us to perform requests against the controller.

With these changes, you should be able to run your tests without encountering the `NoSuchBeanDefinitionException`. Each test will create a Spring context that includes the controller and the mocked service, allowing for effective testing of your controller's endpoints.