Certainly! Here are additional JUnit 5 test cases that aim to cover more branches and edge cases of the `createAlarm(String msg)` method in the `AlarmRepositoryImpl` class. These should help achieve 100% code coverage:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
    }

    @Test
    void testCreateAlarm_withMissingFields() throws Exception {
        String missingFieldsJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\"}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(missingFieldsJson);

        // Add your assertions here
    }

    @Test
    void testCreateAlarm_withNullJson() throws Exception {
        String nullJson = null;

        alarmRepositoryImpl.createAlarm(nullJson);

        // Add your assertions here
    }

    @Test
    void testCreateAlarm_withEmptyJson() throws Exception {
        String emptyJson = "{}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(emptyJson);

        // Add your assertions here
    }

    @Test
    void testCreateAlarm_withInvalidJson() {
        String invalidJson = "{ invalid json }";

        try {
            alarmRepositoryImpl.createAlarm(invalidJson);
        } catch (Exception e) {
            // Add your assertions here
        }
    }

    @Test
    void testCreateAlarm_withUnknownState() throws Exception {
        String unknownStateJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"unknown\", \"sequenceId\":\"23423\", \"perceivedSeverity\":\"Indeterminate\"}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("unknown", null);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(unknownStateJson);

        // Add your assertions here
    }

    @Test
    void testCreateAlarm_withUnknownPerceivedSeverity() throws Exception {
        String unknownPerceivedSeverityJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"perceivedSeverity\":\"unknown\"}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("unknown", null);
        stateMap.put("cleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(unknownPerceivedSeverityJson);

        // Add your assertions here
    }

    @Test
    void testCreateAlarm_withUnknownAlarmType() throws Exception {
        String unknownAlarmTypeJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"alarmType\":\"unknown\"}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);
        typeMap.put("unknown", null);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(unknownAlarmTypeJson);

        // Add your assertions here
    }

    @Test
    void testCreateAlarm_withOptionalFields() throws Exception {
        String optionalFieldsJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"acknowledgementTime\":\"2023-10-01T00:00:00Z\", \"serviceAffecting\":\"true\", \"tag\":[\"tag1\", \"tag2\"]}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(optionalFieldsJson);

        // Add your assertions here
    }

    @Test
    void testCreateAlarm_withAllFieldsAndTagMap() throws Exception {
        String allFieldsJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"perceivedSeverity\":\"Indeterminate\", \"alarmType\":\"Other\", \"serviceAffecting\":\"true\", \"tag\": {\"key1\": \"value1\", \"key2\": \"value2\"}}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.get