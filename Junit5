import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.Environment;
import org.springframework.core.env.PropertySource;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CBRSSuppressionApplicationTest {

    @Mock
    Environment mockEnvironment;

    @Mock
    SpringApplication mockSpringApplication;

    @Mock
    ConfigurableApplicationContext mockAppContext;

    @Test
    void testMain_UnsatisfiedDependencyException() {
        // Arrange
        when(mockEnvironment.getProperty(anyString())).thenReturn("RDB_BAD_QUERY");
        when(mockSpringApplication.run(any(String[].class))).thenReturn(mockAppContext);

        // Act & Assert
        assertDoesNotThrow(() -> {
            CBRSSuppressionApplication application = new CBRSSuppressionApplication(mockEnvironment);
            application.main(new String[]{});
        });
    }

    @Test
    void testMain_OtherException() {
        // Arrange
        when(mockEnvironment.getProperty(anyString())).thenReturn(null);
        when(mockSpringApplication.run(any(String[].class))).thenThrow(UnsatisfiedDependencyException.class);

        // Act & Assert
        assertThrows(UnsatisfiedDependencyException.class, () -> {
            CBRSSuppressionApplication application = new CBRSSuppressionApplication(mockEnvironment);
            application.main(new String[]{});
        });
    }
}