@Test
public void testGetThreadPoolExecutorStatisticsWithNullExecutor() {
    // Arrange
    ThreadPoolController controller = new ThreadPoolController();
    ThreadPoolTaskExecutor mockExecutor = Mockito.mock(ThreadPoolTaskExecutor.class);
    ReflectionTestUtils.setField(controller, "deviceTP", mockExecutor);

    // Act
    ThreadPoolResponse response = controller.getThreadPoolExecutorStatistics(1);

    // Assert
    assertNull(response.getHistorical_thread_count());
}

@Test
public void testStopThreads() {
    // Arrange
    ThreadPoolController controller = new ThreadPoolController();
    Thread mockThread = Mockito.mock(Thread.class);
    Set<Thread> mockThreads = new HashSet<>();
    mockThreads.add(mockThread);
    Mockito.when(Thread.getAllStackTraces().keySet()).thenReturn(mockThreads);
    Mockito.when(mockThread.getName()).thenReturn("test-thread");
    Mockito.when(mockThread.interrupt()).thenReturn(null);

    // Act
    controller.stopThreads();

    // Assert
    Mockito.verify(mockThread, Mockito.times(1)).interrupt();
}

@Test
public void testTestThreadsWhenPooledRecordsEmpty() {
    // Arrange
    ThreadPoolController controller = new ThreadPoolController();
    LuceneSpaceCollectorRepository mockRepository = Mockito.mock(LuceneSpaceCollectorRepository.class);
    KafkaProducerServiceImpl mockKafkaProducer = Mockito.mock(KafkaProducerServiceImpl.class);
    ReflectionTestUtils.setField(controller, "luceneSpaceCollectorRepository", mockRepository);
    ReflectionTestUtils.setField(controller, "kafkaProducerService", mockKafkaProducer);
    List<SpaceCollector> emptyList = new ArrayList<>();
    Mockito.when(mockRepository.findByQuery(Mockito.anyString())).thenReturn(emptyList);

    // Act
    controller.testThreads();

    // Assert
    Mockito.verify(mockKafkaProducer, Mockito.never()).writeMessage(Mockito.any());
}
@Test
public void testTestThreadsWhenPooledRecordsNotEmpty() {
    // Arrange
    ThreadPoolController controller = new ThreadPoolController();
    LuceneSpaceCollectorRepository mockRepository = Mockito.mock(LuceneSpaceCollectorRepository.class);
    KafkaProducerServiceImpl mockKafkaProducer = Mockito.mock(KafkaProducerServiceImpl.class);
    ReflectionTestUtils.setField(controller, "luceneSpaceCollectorRepository", mockRepository);
    ReflectionTestUtils.setField(controller, "kafkaProducerService", mockKafkaProducer);
    SpaceCollector device = new SpaceCollector();
    device.setId("test-id");
    List<SpaceCollector> deviceList = new ArrayList<>();
    deviceList.add(device);
    Mockito.when(mockRepository.findByQuery(Mockito.anyString())).thenReturn(deviceList);

    // Act
    controller.testThreads();

    // Assert
    Mockito.verify(mockKafkaProducer, Mockito.times(1)).writeMessage(device);
}