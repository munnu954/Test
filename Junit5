To write JUnit 5 test cases for the `EcpdFeedBatchProcessor` class and achieve 100% code coverage, you'll need to consider both the branches of the process method. Let's break down the test cases step-by-step:

### 1. Test Setup

First, you need to create mock objects for the dependencies, such as `SensitivityTokenService`. You can use a mocking framework like Mockito for this purpose.

### 2. Test Cases

- **Test Case 1: Sensitivity Token Matches and Has Length**
  - Mock `sensitivityTokenService.getSensitiveTokenList()` to return a list containing a token that matches `ecpdGSAMSensitiveProfile.getSensitivityToken()`.
  - Ensure that the `ecpdGSAMSensitiveProfile` has a non-empty sensitivity token.
  - Assert that the returned `GSAMSensitiveProfiles` object has the expected sensitivity token.

- **Test Case 2: Sensitivity Token Matches but No Length**
  - Mock `sensitivityTokenService.getSensitiveTokenList()` as above.
  - Ensure that the `ecpdGSAMSensitiveProfile` has an empty sensitivity token.
  - Assert that the returned object is `null`.

- **Test Case 3: Sensitivity Token Does Not Match**
  - Mock `sensitivityTokenService.getSensitiveTokenList()` to return a list that does not contain a matching token.
  - Assert that the returned object is `null`.

### Code Example

Here's how the JUnit test class might look:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class EcpdFeedBatchProcessorTest {

    @Mock
    private SensitivityTokenService sensitivityTokenService;

    @InjectMocks
    private EcpdFeedBatchProcessor ecpdFeedBatchProcessor;

    private EcpdGSAMSensitiveProfile ecpdGSAMSensitiveProfile;

    @BeforeEach
    public void setUp() {
        ecpdGSAMSensitiveProfile = new EcpdGSAMSensitiveProfile();
    }

    @Test
    public void testProcess_SensitivityTokenMatchesAndHasLength() {
        ecpdGSAMSensitiveProfile.setSensitivityToken("token123");

        when(sensitivityTokenService.getSensitiveTokenList()).thenReturn(Arrays.asList("token123", "token456"));

        GSAMSensitiveProfiles result = ecpdFeedBatchProcessor.process(ecpdGSAMSensitiveProfile);

        assertNotNull(result);
        assertEquals("token123", result.getSensitivityToken());
    }

    @Test
    public void testProcess_SensitivityTokenMatchesButNoLength() {
        ecpdGSAMSensitiveProfile.setSensitivityToken("");

        when(sensitivityTokenService.getSensitiveTokenList()).thenReturn(Arrays.asList("token123", "token456"));

        GSAMSensitiveProfiles result = ecpdFeedBatchProcessor.process(ecpdGSAMSensitiveProfile);

        assertNull(result);
    }

    @Test
    public void testProcess_SensitivityTokenDoesNotMatch() {
        ecpdGSAMSensitiveProfile.setSensitivityToken("nonMatchingToken");

        when(sensitivityTokenService.getSensitiveTokenList()).thenReturn(Arrays.asList("token123", "token456"));

        GSAMSensitiveProfiles result = ecpdFeedBatchProcessor.process(ecpdGSAMSensitiveProfile);

        assertNull(result);
    }
}
```

### Explanation

- **Mocking**: We use Mockito to mock the `SensitivityTokenService` and control the behavior of `getSensitiveTokenList()`.
- **Assertions**: We use assertions to verify the behavior of the `process` method under different conditions.
- **Branch Coverage**: Each test case is designed to cover different branches of the code to ensure complete coverage.

This setup should help you achieve full coverage of the `EcpdFeedBatchProcessor` class.