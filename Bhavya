The error you're encountering in the `testOnMessage_NullRequestJSONString` method indicates that the expected interaction with the `failedMessageService.saveFailedRecords` method did not occur. This suggests that the condition to trigger this method wasn't met in the test. To resolve this, we need to ensure that the `onMessage` method is set up correctly to call `saveFailedRecords` when `requestJSONString` is null.

### Updating the Test Case

1. **Set Up the Mocks Properly**: Ensure that the `utils.convert` method is set to return a valid `ServiceMessage` that leads to a null `RequestJSONString` when processed.

2. **Add Assertions**: After invoking the method, assert that the `saveFailedRecords` method is called.

Here's an updated version of the `testOnMessage_NullRequestJSONString` method:

```java
@Test
public void testOnMessage_NullRequestJSONString() {
    // Mock the behavior of convert method to return a valid ServiceMessage
    ServiceMessage serviceMessage = new ServiceMessage();
    
    // Set up the mock to return the service message
    when(utils.convert(anyString(), eq(ServiceMessage.class))).thenReturn(serviceMessage);
    
    // Set up the service to return null when trying to access RequestJSONString
    when(serviceMessage.getRequestJSONString()).thenReturn(null);

    // Call the method with the valid payload
    eventsMessageListener.onMessage(mockConsumerRecord(validPayload), validPayload);

    // Verify that the failed message service is invoked due to null RequestJSONString
    verify(failedMessageService, times(1)).saveFailedRecords(anyString(), anyString(), eq(validPayload), anyString(), anyChar());
}
```

### Key Changes Made:

- **Mocking ServiceMessage**: The `serviceMessage` is created and configured to return a null `RequestJSONString` when `getRequestJSONString` is called.
- **Using `anyString()`**: The `anyString()` matcher is used to ensure that any string parameter is accepted for the `topicName` and `key` arguments in the verification.
- **Verification**: After the method call, we verify that the `failedMessageService.saveFailedRecords` method is called exactly once when `requestJSONString` is null.

### Conclusion

This revised test case should correctly trigger the call to `saveFailedRecords` when the `onMessage` method encounters a scenario where `requestJSONString` is null, thus resolving the error you are seeing. Make sure to run the test again after applying these changes. If there are still issues, consider adding debugging information in the `onMessage` method to trace the flow and identify why the expected behavior is not occurring.