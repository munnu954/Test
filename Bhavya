To achieve 100% code coverage for the `RedisConfigCTI` class through JUnit tests, you can write a series of test cases that cover all the branches and lines of the code. Below is an example of how you might structure your JUnit tests using Mockito to mock the dependencies.

This example assumes you are using JUnit 5 and Mockito. Make sure to adjust the test framework and version according to your project setup.

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
class RedisConfigCTITest {

    @InjectMocks
    private RedisConfigCTI redisConfigCTI;

    @Mock
    private RedisConfigProperties cacheProps;

    @BeforeEach
    void setUp() {
        when(cacheProps.commandTimeout).thenReturn(60000L);
        when(cacheProps.shutdownTimeout).thenReturn(10000L);
    }

    @Test
    void testGetConnectionFactoryStandalone() {
        // Test standalone Redis configuration
        when(cacheProps.standalone).thenReturn(true);
        when(cacheProps.standaloneHost).thenReturn("localhost");
        when(cacheProps.standalonePort).thenReturn(6379);
        when(cacheProps.ioThreads).thenReturn(2);
        when(cacheProps.compThreads).thenReturn(4);

        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();
        
        assertNotNull(connectionFactory);
        // Add more assertions based on your requirements
    }

    @Test
    void testGetConnectionFactorySentinel() {
        // Test sentinel Redis configuration
        when(cacheProps.standalone).thenReturn(false);
        when(cacheProps.master).thenReturn("mymaster");
        when(cacheProps.node).thenReturn(Arrays.asList("localhost:26379"));
        when(cacheProps.username).thenReturn("user");
        when(cacheProps.sentinelpassword).thenReturn("password");

        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();
        
        assertNotNull(connectionFactory);
        // Add more assertions based on your requirements
    }

    @Test
    void testGetConnectionFactorySentinelWithScaleThreadsViaRuntime() {
        // Test sentinel configuration with runtime scaling
        when(cacheProps.standalone).thenReturn(false);
        when(cacheProps.scaleThreadsViaRuntime).thenReturn(true);
        when(cacheProps.master).thenReturn("mymaster");
        when(cacheProps.node).thenReturn(Arrays.asList("localhost:26379"));

        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();
        
        assertNotNull(connectionFactory);
        // Add more assertions based on your requirements
    }

    @Test
    void testGetConnectionFactorySentinelWithDefaultThreads() {
        // Test sentinel configuration with config-based scaling
        when(cacheProps.standalone).thenReturn(false);
        when(cacheProps.scaleThreadsViaRuntime).thenReturn(false);
        when(cacheProps.ioThreads).thenReturn(0);
        when(cacheProps.compThreads).thenReturn(0);
        when(cacheProps.master).thenReturn("mymaster");
        when(cacheProps.node).thenReturn(Arrays.asList("localhost:26379"));

        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();
        
        assertNotNull(connectionFactory);
        // Add more assertions based on your requirements
    }

    // Add more tests for edge cases, such as when properties are null or empty
}
```

### Key Points:
- **Mocking Dependencies**: Use Mockito to mock the `RedisConfigProperties` class, allowing you to control the behavior of its methods.
- **Testing Different Scenarios**: Create tests for different configurations, such as standalone and sentinel modes, as well as different settings for thread scaling.
- **Assertions**: Ensure you have appropriate assertions to verify that the connection factory is created correctly and behaves as expected.
- **Edge Cases**: Consider adding tests for edge cases, such as missing or invalid configuration values.

This setup should help you achieve the desired code coverage for the `RedisConfigCTI` class. Adjust the assertions and additional tests based on your specific application requirements and functionality.