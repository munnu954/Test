import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.apache.kafka.clients.admin.*;
import org.apache.kafka.common.KafkaException;
import org.junit.jupiter.api.Test;

import java.util.concurrent.ExecutionException;

public class KafkaTopicUtilTest {

    @Test
    public void testIsKafkaTopicPresentForExistingTopic() throws ExecutionException, InterruptedException {
        String topicName = "test-topic";
        
        AdminClient adminClient = mock(AdminClient.class);
        ListTopicsResult listTopicsResult = mock(ListTopicsResult.class);
        Set<String> topicNames = new HashSet<>();
        topicNames.add(topicName);
        when(listTopicsResult.names()).thenReturn(topicNames);
        
        try (adminClient) {
            when(adminClient.listTopics(any(ListTopicsOptions.class))).thenReturn(listTopicsResult);
            
            boolean result = KafkaTopicUtil.isKafkaTopicPresent(topicName);
            
            assertTrue(result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void testIsKafkaTopicPresentForNonExistingTopic() throws ExecutionException, InterruptedException {
        String topicName = "test-topic";
        
        AdminClient adminClient = mock(AdminClient.class);
        ListTopicsResult listTopicsResult = mock(ListTopicsResult.class);
        Set<String> topicNames = new HashSet<>();
        topicNames.add("another-topic");
        when(listTopicsResult.names()).thenReturn(topicNames);

        try (adminClient) {
            when(adminClient.listTopics(any(ListTopicsOptions.class))).thenReturn(listTopicsResult);
            
            boolean result = KafkaTopicUtil.isKafkaTopicPresent(topicName);
            
            assertFalse(result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    public void testIsKafkaTopicPresentWhenExceptionThrown() throws ExecutionException, InterruptedException {
        AdminClient adminClient = mock(AdminClient.class);
        
        try (adminClient) {
            when(adminClient.listTopics(any(ListTopicsOptions.class))).thenThrow(KafkaException.class);
            
            boolean result = KafkaTopicUtil.isKafkaTopicPresent("test-topic");
            
            assertFalse(result);
        } catch (Exception e) {
            assertTrue(e instanceof KafkaException);
        }
    }
}