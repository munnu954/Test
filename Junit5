To achieve 100% code coverage for the "if(CommonWrapperConstants.PORT.equalsIgnoreCase(clrComponent.getType()) || CommonWrapperConstants.CHANNEL.equalsIgnoreCase(clrComponent.getType())) {}" statements in the `getAEnd()` and `getZEnd()` methods of the `CircuitDetailsProvider` class, you can write JUnit5 test cases using Mockito to mock the dependencies. Below is an example of how you can write test cases to cover all branches of these statements:

```java
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testGetAEndWithPortType() {
        // Mock the necessary data
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        response.getCircuitData().getCircuitLst().add(new CircuitLst());
        Circuit circuit = new Circuit();
        circuit.setAEnd(Collections.singletonList(new AEnd()));
        circuit.getAEnd().get(0).setPortChannel(Collections.singletonList(new PortChannel()));
        PortRef portRef = new PortRef();
        portRef.setClliCode("CLLI");
        circuit.getAEnd().get(0).getPortChannel().get(0).setPortRef(Collections.singletonList(portRef));
        
        // Mock the REST call
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn("");
        
        // Test the method
        AEnd aEnd = circuitDetailsProvider.getAEnd("circuitId", "CLLI", response);
        
        // Assert the result
        assertNotNull(aEnd);
    }

    @Test
    void testGetZEndWithChannelType() {
        // Mock the necessary data
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        response.getCircuitData().getCircuitLst().add(new CircuitLst());
        Circuit circuit = new Circuit();
        circuit.setClr(Collections.singletonList(new ClrComponent()));
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CHANNEL); // Set channel type
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setClliCode("CLLI");
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        circuit.setAEnd(Collections.singletonList(new AEnd()));
        
        // Mock the REST call
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn("");
        
        // Test the method
        ZEnd zEnd = circuitDetailsProvider.getZEnd("circuitId", "CLLI", response);
        
        // Assert the result
        assertNotNull(zEnd);
    }
}
```

In these test cases, we are covering different scenarios by setting up necessary mock data and mocking the REST call to return an empty response. You can add more test cases to cover other branches as needed.

Make sure to import the necessary packages and update the test cases according to your actual project setup and dependencies.