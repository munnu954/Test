To cover the `else` block in the code for 100% code coverage, we can write additional JUnit5 test cases. Here are some test cases that target the `else` block specifically:

```
@Test
void testParseWithNoArrayIndexMatch() throws Exception {
    // Arrange
    String expression = "%attribute1:names%";
    srcMap.put("names", List.of("John", "Jane"));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void testParseWithNoJsonMapMatch() throws Exception {
    // Arrange
    String expression = "%attribute1:details.name%";
    srcMap.put("details", "invalid format");
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void testParseWithNoAttributeArrayMatch() throws Exception {
    // Arrange
    String expression = "%attribute1%";
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void testParseWithEmptyAttribute() throws Exception {
    // Arrange
    String expression = "%%";
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}
```

These additional test cases should help in achieving 100% code coverage, specifically targeting the `else` block in the `parse` method.