The error "java.lang.IllegalStateException: Expected 2 but got 1 partitions" is caused by the fact that the EmbeddedKafkaBroker is configured with two partitions, but the KafkaConsumerService is only expecting one partition. To fix this, you need to update the EmbeddedKafkaBroker configuration to have only one partition. You can do this by setting the partitions property to 1 in the KafkaTestUtils.consumerProps() method.

Here is the updated code:


@EmbeddedKafka
@ExtendWith(SpringExtension.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class KafkaConsumerServiceTest {

@Autowired private EmbeddedKafkaBroker embeddedKafkaBroker;

@Mock
TelnetReader telnetReader;

@Mock
KafkaProducerService kafkaProducerService;

@Mock
ObjectMapper mapper;

@InjectMocks
KafkaConsumerService kafkaConsumerService;

KafkaMessageListenerContainer<String, String> container;

BlockingQueue<ConsumerRecord<String, String>> records;

private static final String TOPIC = "test-topic";

@BeforeAll
void setupTest() {
Map<String, Object> configs = new HashMap<>(KafkaTestUtils.consumerProps("consumer", "false", embeddedkafkaBroker)); DefaultKafkaConsumerFactory<>(configs, String> consumerFactory new

DefaultKafkaConsumerFactory<String, new StringDeserializer(), new StringDeserializer());

ContainerProperties container Properties = new ContainerProperties(TOPIC); container = new KafkaMessageListener Container<>(consumerFactory, container Properties);

records = new LinkedBlockingQueue<>(); container.setupMessageListener((MessageListener<String, String>) records::add);

container.start();

ContainerTestUtils.waitForAssignment(container, 1);

}

@Test
public void kafkaSetup_withTopic_ensureSendMessageIsReceived() throws Exception {

// Arrange

Map<String, Object> configs = new HashMap<>(KafkaTestUtils.producerProps (embeddedKafkaBroker));

Producer<String, String> producer = new DefaultKafkaProducerFactory<>(configs, new StringSerializer(), new StringSerializer()).createProducer();

SpaceCollector sp-getSpaceCollector(); String value= sp.toString();

// Act

producer.send(new ProducerRecord<>(TOPIC, "Space-Collector", value));

producer.flush();

// Assert

ConsumerRecord<String, String> singleRecord records.poll(100, TimeUnit, MILLISECONDS);
assertThat(singleRecord).isNotNull();

assertThat(singleRecord.key()).isEqualTo("Space-Collector"); assertThat(singleRecord.value()).isEqualTo(value);
}
@Test
void testConsume() throws IOException, InterruptedException {

SpaceCollector sp=getSpaceCollector(); doNothing().when(telnetReader).collect(sp);

kafkaConsumerService.consume(new ObjectMapper().writeValueAsString(sp));

}
}


I hope this helps