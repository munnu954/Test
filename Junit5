Certainly! Here are some additional JUnit 5 test cases that cover different branches of the `createAlarm(String msg)` method in the `AlarmRepositoryImpl` class:

```java
@Test
void testCreateAlarmWithEmptyMessage() {
    assertThrows(IllegalArgumentException.class, () -> alarmRepositoryImpl.createAlarm(""));
}

@Test
void testCreateAlarmWithMalformedJson() {
    assertThrows(Exception.class, () -> alarmRepositoryImpl.createAlarm("{invalidJson"));
}

@Test
void testCreateAlarmWithInvalidStateMissing() {
    ObjectMapper obj = new ObjectMapper();
    JsonNode json = obj.createObjectNode();
    ((ObjectNode)json).put("externalAlarmId", "12345");
    
    assertThrows(Exception.class, () -> alarmRepositoryImpl.createAlarm(json.toString()));
}

@Test
void testCreateAlarmWithValidAlarm() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();

    percMap.put("Critical", 1);
    stateMap.put("active", 1);
    typeMap.put("network_failure", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");

    JsonNode json = obj.readTree("{ \"externalAlarmId\":\"12345\", \"State\":\"active\",\"AlarmType\":\"network_failure\",\"sequenceId\":\"67890\"}");
    alarmRepositoryImpl.createAlarm(json.toString());
    
    // Add assertions here based on the expected behavior
}

@Test
void testCreateAlarmWithValidAlarmAndOtherType() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();

    percMap.put("Critical", 1);
    stateMap.put("active", 1);
    typeMap.put("network_failure", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");

    JsonNode json = obj.readTree("{ \"externalAlarmId\":\"12345\", \"State\":\"active\",\"AlarmType\":\"SomeType\",\"sequenceId\":\"67890\"}");
    alarmRepositoryImpl.createAlarm(json.toString());
    
    // Add assertions here based on the expected behavior
}

@Test
void testCreateAlarmWithTransientError() {
    ObjectMapper obj = new ObjectMapper();
    JsonNode json = obj.createObjectNode();
    ((ObjectNode)json).put("externalAlarmId", "12345");
    ((ObjectNode)json).put("State", "active");
    ((ObjectNode)json).put("AlarmType", "network_failure");
    ((ObjectNode)json).put("sequenceId", "67890");

    Map<String, Integer> percMap = new HashMap<>();
    percMap.put("Critical", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(new HashMap<>());
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");

    assertThrows(Exception.class, () -> alarmRepositoryImpl.createAlarm(json.toString()));
}

@Test
void testCreateAlarmWithNewState() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();

    percMap.put("Critical", 1);
    stateMap.put("active", 1);
    typeMap.put("network_failure", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");

    JsonNode json = obj.readTree("{ \"externalAlarmId\":\"12345\", \"State\":\"New\",\"AlarmType\":\"network_failure\",\"sequenceId\":\"67890\"}");
    alarmRepositoryImpl.createAlarm(json.toString());
    
    }


import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class AlarmRepositoryImplTest {

    private AlarmRepositoryImpl alarmRepository;

    @BeforeEach
    public void setup() {
        alarmRepository = new AlarmRepositoryImpl();
    }

    @Test
    public void testCreateAlarmWithValidMessage() {
        Alarm alarm = alarmRepository.createAlarm("Test alarm");
        assertNotNull(alarm);
        assertEquals("Test alarm", alarm.getMessage());
        assertNotNull(alarm.getTimestamp());
    }

    @Test
    public void testCreateAlarmWithNullMessage() {
        assertThrows(IllegalArgumentException.class, () -> {
            alarmRepository.createAlarm(null);
        });
    }

    @Test
    public void testCreateAlarmWithEmptyMessage() {
        assertThrows(IllegalArgumentException.class, () -> {
            alarmRepository.createAlarm("");
        });
    }

    @Test
    public void testCreateAlarmWithWhiteSpaceMessage() {
        assertThrows(IllegalArgumentException.class, () -> {
            alarmRepository.createAlarm("   ");
        });
    }
}
