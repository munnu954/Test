LinkAggregationUtil class: 
Added the Jackson dependencies to resolve the TypeNotPresentException in the getLinkAggregationResults method.

```java
public class LinkAggregationUtil {

    @Autowired
    RestTemplate restTemplate;

    private static final Logger logger = LoggerFactory.getLogger(LinkAggregationUtil.class);

    public String findServiceForName(String name) {
        return name.contains("http") ? name.toLowerCase() : "https://uts-ple.verizon.com/" + name.toLowerCase();
    }

    public boolean validate(LinkAggregationRequest request) throws InputInvalidException {
        if (request.getSystem() == null || request.getSystem().isEmpty()) {
            throw new InputInvalidException(LinkAggregationConstants.NO_SYS_PROVIDED);
        }
        if ((request.getId() == null || request.getId().isEmpty()) && (request.getName() == null || request.getName().isEmpty())) {
            throw new InputInvalidException(LinkAggregationConstants.ID_OR_NAME_NULL);
        }
        return true;
    }

    public HttpHeaders addSecurityDtlsToMS() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        String plainCreds = "MICROSERVICE: MICROSERVICE123";
        byte[] plainCredsBytes = plainCreds.getBytes();
        byte[] base64CredsBytes = Base64.encodeBase64(plainCredsBytes, false);
        String base64Creds = new String(base64CredsBytes);
        headers.add("Authorization", "Basic" + base64Creds);
        return headers;
    }

    public LinkAggregationResponse getLinkAggregationResults(String url, Map<String, String> map) throws NoDataFoundException, LinkAggregationException {
        try {
            HttpEntity<Map<String, String>> httpEntity = new HttpEntity<>(map, addSecurityDtlsToMS());
            ResponseEntity<LinkAggregationResponse> response = restTemplate.exchange(
                    url,
                    HttpMethod.POST,
                    httpEntity,
                    LinkAggregationResponse.class
            );

            if (response.getStatusCode() == HttpStatus.OK) {
                return response.getBody();
            }
        } catch (HttpClientErrorException e) {
            if (e.getStatusCode() == HttpStatus.NOT_FOUND) {
                throw new NoDataFoundException(LinkAggregationConstants.NO_DATA_FOUND);
            }
            throw new LinkAggregationException(LinkAggregationConstants.EXCEPTION_MSG_URL + url + LinkAggregationConstants.EXCEPTION_MSG + e.getMessage());
        } catch (Exception e) {
            throw new LinkAggregationException(LinkAggregationConstants.EXCEPTION_MSG_URL + url + LinkAggregationConstants.EXCEPTION_MSG + e.getMessage());
        }

        throw new NoDataFoundException(LinkAggregationConstants.NO_DATA_FOUND);
    }
}
```

AppConfig class: 
Updated the RestTemplate bean creation to include the necessary message converters.

```java
@Configuration
public class AppConfig {

    Map<String, String> configData = new HashMap<>();

    @Value("${com.tcoms.linkaggregation.service.name}")
    String tcomsLinkAggregationServiceName;

    @Value("${com.tcoms.linkaggregation.service.url}")
    String tcomsLinkAggregationServiceNameUrl;

    @Bean("configMap")
    public Map<String, String> getConfigData() {
        configData.put("tcomsLinkAggregationServiceName", tcomsLinkAggregationServiceName);
        configData.put("tcomsLinkAggregationServiceNameUrl", tcomsLinkAggregationServiceNameUrl);
        return configData;
    }

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        RestTemplate restTemplate = builder
                .additionalMessageConverters(new MappingJackson2HttpMessageConverter())
                .additionalMessageConverters(new StringHttpMessageConverter())
                .additionalMessageConverters(new FormHttpMessageConverter())
                .setConnectTimeout(Duration.ofMillis(20000))
                .setReadTimeout(Duration.ofMillis(100000))
                .build();
        return restTemplate;
    }
}
```

These changes should resolve the errors you were facing and help in the smooth execution of the code.