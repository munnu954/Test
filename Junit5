To write JUnit 5 test cases for the `TrunkProcessor` class, particularly focusing on covering the branches related to the `if (isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL))` condition within the `else if (CommonWrapperConstants.SEGEMENT.equalsIgnoreCase(prevType))` block, you can follow the steps below. These test cases will ensure that both the true and false branches of the `isNotNull` check are covered.

Here's how you can write these test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    public void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "TestSourceSys";
    }

    @Test
    public void testProcessWithSegmentTypeWhenTrailIsNotNull() {
        // Set up the ClrComponent list with one having TRAIL type
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("SEGEMENT");

        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType("TRAIL");
        CircuitComp circuitComp = new CircuitComp();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitComp.getCircuitInfo().add(circuitInfo);
        prevClrComponent.getCircuitComp().add(circuitComp);

        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Add a previous link to the links list
        Link prevLink = new Link();
        links.add(prevLink);

        // Call the method under test
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assertions to verify the behavior
        assertEquals(2, links.size(), "Should have added another link");
        Link newLink = links.get(1);
        assertNotNull(newLink.getSource(), "Source should be set for the new link");
        assertNotNull(newLink.getTarget(), "Target should be set for the new link");
    }

    @Test
    public void testProcessWithSegmentTypeWhenTrailIsNull() {
        // Set up the ClrComponent list with one having non-TRAIL type
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("SEGEMENT");

        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType("TRAIL");

        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Add a previous link to the links list
        Link prevLink = new Link();
        links.add(prevLink);

        // Call the method under test
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assertions to verify the behavior
        assertEquals(1, links.size(), "Should not have added another link");
        Link existingLink = links.get(0);
        assertNull(existingLink.getTarget(), "Target should not be set for the existing link");
    }
}
```

### Explanation:

1. **Setup Method (`setUp`)**: Initializes the test environment, creating necessary objects like `TrunkProcessor`, `nodes`, `links`, etc.

2. **Test Methods**:
   - `testProcessWithSegmentTypeWhenTrailIsNotNull`: Tests the scenario where the previous component's type is `TRAIL` and `isNotNull` returns `true`. This should result in a new link being added with both source and target set.
   - `testProcessWithSegmentTypeWhenTrailIsNull`: Tests the scenario where the previous component's type is `TRAIL` but `isNotNull` returns `false`. This should result in no new link being added.

3. **Assertions**: Verifies the expected behavior by checking the size of the links list and the presence of source/target in the new link.

Make sure to adjust the `CommonWrapperConstants` strings and other specific logic according to your actual implementation details.