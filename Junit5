import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import javax.validation.constraints.Positive;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.URL;

public class SpaceCollectorBuilderTest {

    // Test Builder Equals

    @Test
    public void testBuilder_Equals_SameInstance() {
        SpaceCollector.SpaceCollectorBuilder builder = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt");

        assertTrue(builder.equals(builder));
    }

    @Test
    public void testBuilder_Equals_NullObject() {
        SpaceCollector.SpaceCollectorBuilder builder = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt");

        assertFalse(builder.equals(null));
    }

    @Test
    public void testBuilder_Equals_ObjectOfDifferentClass() {
        SpaceCollector.SpaceCollectorBuilder builder = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt");

        assertFalse(builder.equals(new Object()));
    }

    // Test Builder HashCode

    @Test
    public void testBuilder_HashCode_EqualObjects() {
        SpaceCollector.SpaceCollectorBuilder builder1 = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt");

        SpaceCollector.SpaceCollectorBuilder builder2 = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt");

        assertEquals(builder1.hashCode(), builder2.hashCode());
    }

    @Test
    public void testBuilder_HashCode_NotEqualObjects() {
        SpaceCollector.SpaceCollectorBuilder builder1 = SpaceCollector.builder()
                .inputFilePath("file1.txt")
                .id(1)
                .url("http://example1.com")
                .port(8080)
                .outputFilePath("output1.txt");

        SpaceCollector.SpaceCollectorBuilder builder2 = SpaceCollector.builder()
                .inputFilePath("file2.txt")
                .id(2)
                .url("http://example2.com")
                .port(9090)
                .outputFilePath("output2.txt");

        assertNotEquals(builder1.hashCode(), builder2.hashCode());
    }

    // Additional scenarios can be added here based on specific needs

}