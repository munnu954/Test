import static org.assertj.core.api.Assertions.*;

@Given("a csv file with MRFC data")
public void acsvFileWithMRFCData() throws IOException {
    this.MRFCFile = MRFCResource.getFile();
}

@When("CsvtoJsonMRFCnTransformer is invoked on the csv file")
public void csvtojsonmrfentransformerIsInvokedOnTheCsvFile() throws Exception {
    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
    final DataStream<String> stream = env.fromElements(Main.readCSVFile(this.MRFCFile.toPath().toString()));
    this.MRFCJsonStream = stream.flatMap(new CsvtoJsonConversion.CsvtoJsonMRFCnTransformer(fileName));
}

@And("the MRFC csv file content is converted to json")
public void theMRFCCsvFileContentIsConvertedToJson() throws Exception {
    Iterator<String> iterator = this.MRFCJsonStream.executeAndCollect();
    List<String> jsonRows = new ArrayList<>();
    iterator.forEachRemaining(jsonRows::add);
    this.jsonRows = jsonRows;
}

@Then("validate the converted MRFC json content")
public void validateTheConvertedMRFCJsonContent() throws JSONException {
    // Validate IPCQLEN in the 3rd row
    JSONObject ipcqlenJson = new JSONObject(jsonRows.get(2)); // 3rd row
    assertThat(ipcqlenJson.getInt("IPCQLEN")).as("IPCQLEN in 3rd row").isEqualTo(140);

    // Validate DESTNODETYPE in the 3rd row
    JSONObject destNodeTypeJson = new JSONObject(jsonRows.get(2)); // 3rd row
    assertThat(destNodeTypeJson.getInt("DESTNODETYPE")).as("DESTNODETYPE in 3rd row").isEqualTo(2);

    // Validate IPCQLEN in the 4th row
    JSONObject ipcqlenJson4th = new JSONObject(jsonRows.get(3)); // 4th row
    assertThat(ipcqlenJson4th.getInt("IPCQLEN")).as("IPCQLEN in 4th row").isEqualTo(140);

    // Validate DESTNODETYPE in the 4th row
    JSONObject destNodeTypeJson4th = new JSONObject(jsonRows.get(3)); // 4th row
    assertThat(destNodeTypeJson4th.getInt("DESTNODETYPE")).as("DESTNODETYPE in 4th row").isEqualTo(2);
}