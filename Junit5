To write JUnit 5 test cases for the `EcpdFeedBatchConfiguration` class with 100% code coverage, we need to test the following components:

1. The `FileSkipPolicy` class.
2. The `FileSkipListener` class.
3. The `reader` method that provides a `MultiResourceItemReader`.

Since the requirement is to use reflection to access private fields and methods, we will use Java's Reflection API for testing purposes. Additionally, we will use mocking to simulate the behavior of dependencies.

Here's a comprehensive JUnit 5 test class:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.item.file.FlatFileParseException;
import org.springframework.batch.item.file.MultiResourceItemReader;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;

import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.file.Paths;

@ExtendWith(MockitoExtension.class)
public class EcpdFeedBatchConfigurationTest {

    @InjectMocks
    private EcpdFeedBatchConfiguration config;

    @Mock
    private ErrorFileMovement errorFileMovement;

    @Mock
    private FlatFileParseException flatFileParseException;

    @Mock
    private Resource mockResource;

    private EcpdFeedBatchConfiguration.FileSkipPolicy skipPolicy;
    private EcpdFeedBatchConfiguration.FileSkipListener skipListener;

    @BeforeEach
    public void setUp() throws Exception {
        skipPolicy = config.new FileSkipPolicy();
        skipListener = config.new FileSkipListener();

        setPrivateField(config, "fileFeedLocation", "classpath*:data/*.csv");
        setPrivateField(config, "errorDirectory", "errorDir");
    }

    private void setPrivateField(Object obj, String fieldName, Object value) throws Exception {
        Field field = obj.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(obj, value);
    }

    @Test
    public void testFileSkipPolicy_shouldSkip() {
        assertTrue(skipPolicy.shouldSkip(flatFileParseException, 1));
        assertTrue(skipPolicy.shouldSkip(new IOException(), 1));
        assertTrue(skipPolicy.shouldSkip(new Exception(), 1));
    }

    @Test
    public void testFileSkipPolicy_shouldNotSkip() {
        assertFalse(skipPolicy.shouldSkip(new Throwable(), 1));
    }

    @Test
    public void testFileSkipListener_onSkipInRead() {
        when(flatFileParseException.getMessage()).thenReturn("[file [sample.csv]]");
        when(flatFileParseException.getInput()).thenReturn("input");

        skipListener.onSkipInRead(flatFileParseException);

        verify(errorFileMovement).writeErrorRecordsToFile(eq("errorDir"), anyString(), anyString());
    }

    @Test
    public void testFileSkipListener_onSkipInReadWithException() {
        Exception exception = new Exception("[file [sample.csv]]");
        skipListener.onSkipInRead(exception);

        verify(errorFileMovement).moveErrorFile(anyString(), eq("errorDir"));
    }

    @Test
    public void testFileSkipListener_onSkipInWrite() {
        EcpdGSAMSensitiveProfile item = new EcpdGSAMSensitiveProfile();
        item.setFileName("sample.csv");
        Exception exception = new Exception();

        skipListener.onSkipInWrite(item, exception);

        verify(errorFileMovement).moveErrorFiletoErrorDir(eq("sample.csv"), anyString(), eq("errorDir"));
    }

    @Test
    public void testFileSkipListener_onSkipInProcess() {
        EcpdGSAMSensitiveProfile item = new EcpdGSAMSensitiveProfile();
        item.setFileName("sample.csv");
        Exception exception = new Exception();

        skipListener.onSkipInProcess(item, exception);

        verify(errorFileMovement).moveErrorFiletoErrorDir(eq("sample.csv"), anyString(), eq("errorDir"));
    }

    @Test
    public void testReader() throws IOException {
        FlatFileItemReader<EcpdGSAMSensitiveProfile> ecpdItemReader = mock(FlatFileItemReader.class);
        PathMatchingResourcePatternResolver resolver = mock(PathMatchingResourcePatternResolver.class);
        when(resolver.getResources(anyString())).thenReturn(new Resource[]{mockResource});

        MultiResourceItemReader<EcpdGSAMSensitiveProfile> reader = config.reader(ecpdItemReader);

        assertNotNull(reader);
        assertEquals(ecpdItemReader, reader.getDelegate());
    }
}
```

### Key Points

- **Reflection**: We use reflection to set the private fields `fileFeedLocation` and `errorDirectory` for testing purposes.
- **Mockito**: Mocking is used to simulate dependencies and exceptions, allowing us to focus on the behavior of the `EcpdFeedBatchConfiguration` class.
- **Assertions**: We ensure that methods behave as expected, checking both positive and negative cases for the skip policy and listener methods.
- **Resource Handling**: Mocking the `PathMatchingResourcePatternResolver` to simulate resource loading in the `reader` method.

This setup provides complete coverage for the main aspects of the `EcpdFeedBatchConfiguration` class.