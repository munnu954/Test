import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.net.URI;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(MockitoExtension.class) // Enables Mockito without Spring Context
public class ApiOperationTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private ApiOperation apiOperation;

    private AlarmGroupingParams configParams; // Creating an instance instead of mocking

    @BeforeEach
    void setUp() {
        configParams = new AlarmGroupingParams();
        
        // Manually setting values using ReflectionTestUtils
        ReflectionTestUtils.setField(configParams, "alarmFetchURL", "http://mock-url.com");
        ReflectionTestUtils.setField(configParams, "alarmFilterKey", "mock-auth-key");

        // Inject configParams manually into apiOperation
        ReflectionTestUtils.setField(apiOperation, "configParams", configParams);
    }

    @Test
    void testGetAlarmDetailsById_NotFoundException() {
        String alarmIdentity = "test-alarm-id";
        String mockUrl = configParams.getAlarmFetchURL();
        
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", configParams.getAlarmFilterKey());
        HttpEntity<Object> entity = new HttpEntity<>(null, headers);

        // Simulate HttpClientErrorException.NotFound exception
        when(restTemplate.exchange(eq(mockUrl), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND, "Not Found"));

        // Execute method and verify result
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        assertNull(result, "Expected result to be null when NotFound exception is thrown");
    }
}