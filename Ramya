import org.apache.flink.api.common.JobID;
import org.apache.flink.api.common.restartstrategy.RestartStrategies;
import org.apache.flink.api.common.time.Time;
import org.apache.flink.runtime.state.filesystem.FsStateBackend;
import org.apache.flink.runtime.state.hashmap.HashMapStateBackend;
import org.apache.flink.runtime.state.storage.FileSystemCheckpointStorage;
import org.apache.flink.streaming.api.CheckpointingMode;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.CheckpointConfig;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.sink.SinkFunction;
import org.apache.flink.streaming.api.watermark.WatermarkStrategy;
import org.apache.flink.streaming.connectors.kafka.source.KafkaSource;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.flink.api.common.serialization.SimpleStringSchema;
import org.apache.flink.connector.kafka.source.enumerator.initializer.OffsetsInitializer;
import org.apache.flink.connector.kafka.source.KafkaSource;
import org.apache.flink.api.common.eventtime.WatermarkStrategy;
import org.apache.flink.api.java.tuple.Tuple2;
import org.json.JSONObject;

public class XmlTransformerJob {
    private static final Logger LOGGER = LoggerFactory.getLogger(XmlTransformerJob.class);
    public static AppProperties appProp = AppProperties.getInstance();
    private XmlTransformerJobUtil jobUtil;
    private final PublishAuditMessage pubAuditMsg;

    public XmlTransformerJob(PublishAuditMessage pubAuditMsg) {
        this.jobUtil = new XmlTransformerJobUtil(pubAuditMsg);
        this.pubAuditMsg = pubAuditMsg;
    }

    public XmlTransformerJob(PublishAuditMessage pubAuditMsg, XmlTransformerJobUtil xmlTransformerJobUtil) {
        this.jobUtil = xmlTransformerJobUtil;
        this.pubAuditMsg = pubAuditMsg;
    }

    public PublishAuditMessage getPubAuditMsg() {
        return pubAuditMsg;
    }

    public void execute() throws Exception {
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        CollectionAudit collectionAudit = new CollectionAudit();

        // Set Flink job properties
        env.setParallelism(Integer.valueOf(appProp.getAppProperties("flink.parallelism")));
        
        // Enable checkpointing
        env.enableCheckpointing(Long.valueOf(appProp.getAppProperties("flink.checkpoint.interval")));
        env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);
        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(Long.valueOf(appProp.getAppProperties("flink.checkpoint.min-pause")));
        env.getCheckpointConfig().setCheckpointTimeout(Long.valueOf(appProp.getAppProperties("flink.checkpoint.timeout")));
        env.getCheckpointConfig().setMaxConcurrentCheckpoints(Integer.valueOf(appProp.getAppProperties("flink.checkpoint.max-concurrent")));
        env.getCheckpointConfig().enableExternalizedCheckpoints(CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION);

        // Set state backend
        env.setStateBackend(new HashMapStateBackend());
        env.getCheckpointConfig().setCheckpointStorage(new FileSystemCheckpointStorage(appProp.getAppProperties("flink.checkpoint.path")));

        // Set restart strategy
        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(
            3, // number of restart attempts
            Time.seconds(10) // delay between attempts
        ));

        // Kafka source configuration
        OffsetsInitializer offsetsInitializer = jobUtil.getOffsetsInitializer(appProp.getAppProperties("spring.kafka.consumer.auto-offset-reset"));
        collectionAudit = jobUtil.setCollectionAuditProperties(collectionAudit);
        jobUtil.validateKafka(collectionAudit);

        KafkaSource<String> source = jobUtil.buildKafkaSource(collectionAudit, offsetsInitializer, appProp.getAppProperties("spring.kafka.consumer-group-id"));
        DataStream<String> stream = env.fromSource(source, WatermarkStrategy.noWatermarks(), "Kafka Source");

        DataStream<CollectionAudit> collectionAuditStream = XmlTransformerJobUtil.convertStreamToCollectionAudit(stream, collectionAudit);
        DataStream<Tuple2<String, CollectionAudit>> xmlDataStream = XmlTransformerJobUtil.getXmlDataStream(collectionAuditStream);
        DataStream<Tuple2<JSONObject, CollectionAudit>> jsonNodeStream = XmlTransformerJobUtil.convertXmlToJson(xmlDataStream);
        DataStream<Tuple2<String, CollectionAudit>> finalDataStream = XmlTransformerJobUtil.encapsulateJson(jsonNodeStream);

        publishTransformedData(finalDataStream, null);

        // Execute the job in a blocking manner to keep the application running
        env.execute("Xml to JSON Transformer Job");
    }

    public void publishTransformedData(DataStream<Tuple2<String, CollectionAudit>> encapsulatedJsonStream, String jobId) {
        try {
            DataStream<String> jsonStringStream = jobUtil.getJsonStringStream(encapsulatedJsonStream);
            if (jobUtil.shouldPublishKafka()) {
                jobUtil.publishToKafka(jsonStringStream);
            }
            if (jobUtil.shouldPublishVMB()) {
                jobUtil.publishToVMB(jsonStringStream);
            }
            jobUtil.processStream(encapsulatedJsonStream, JobStatus.FLINK_JOB_SUCCESSFUL);
        } catch (Exception e) {
            LOGGER.error("Error while publishing data to Sink", e);
            jobUtil.processStream(encapsulatedJsonStream, JobStatus.FLINK_JOB_FAILED);
        }
    }
}