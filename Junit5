To thoroughly test the conditional statements in the `ctionMessage` method of the `EventsMessageListener` class, let's focus on covering all possible outcomes for each condition. Specifically, we'll target:

1. `if(utils.isValidData(customerEcpdModel.getSensitivity())) { }`
2. `if(StringUtils.hasLength(customerEcpdModel.getSensitivity())) { }`
3. `if(sentityvityFlag.equalsIgnoreCase("Y")) { }`

Here's how you can write additional JUnit 5 test cases to cover these scenarios:

```java
import com.verizon.vbg.ledger.listener.EventsMessageListener;
import com.verizon.vbg.ledger.service.MtnEcpdService;
import com.verizon.vbg.ledger.service.CTIEcpdService;
import com.verizon.vbg.ledger.service.KafkaFalloutService;
import com.verizon.vbg.ledger.util.BatchLoaderUtils;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.util.StringUtils;

import static org.mockito.Mockito.*;

class EventsMessageListenerSensitivityTests {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @Mock
    private MtnEcpdService mtnEcpdService;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @Mock
    private BatchLoaderUtils utils;

    @Mock
    private CTIEcpdService ctiEcpdService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "outbound-cti-event");
    }

    @Test
    void testCtionMessage_utilsIsValidDataTrue() {
        // Prepare a payload with sensitivity
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CHECK\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mocking the model and utils
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setSensitivity("SensitiveData");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);
        when(utils.isValidData("SensitiveData")).thenReturn(true);

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that if sensitivity is valid, the message is processed accordingly
        verify(kafkaTemplate, times(1)).send(any());
    }

    @Test
    void testCtionMessage_utilsIsValidDataFalse() {
        // Prepare a payload with sensitivity
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CHECK\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mocking the model and utils
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setSensitivity("InvalidData");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);
        when(utils.isValidData("InvalidData")).thenReturn(false);

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that if sensitivity is not valid, the message processing is handled differently
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    void testCtionMessage_sensitivityHasLength() {
        // Prepare a payload with sensitivity
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CHECK\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mocking the model
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setSensitivity("NonEmpty");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

        // Ensure StringUtils.hasLength will return true
        assert StringUtils.hasLength(ctiDataStore.getSensitivity());

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that if sensitivity has length, the message is processed
        verify(kafkaTemplate, times(1)).send(any());
    }

    @Test
    void testCtionMessage_sensitivityFlagEqualsY() {
        // Prepare a payload with sensitivity flag "Y"
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CHECK\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mocking the model
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setSensitivity("Y");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that if sensitivity flag is "Y", the message is not processed
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    void testCtionMessage_sensitivityFlagNotEqualsY() {
        // Prepare a payload with sensitivity flag not "Y"
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CHECK\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mocking the model
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setSensitivity("N");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that if sensitivity flag is not "Y", the message is processed
        verify(kafkaTemplate, times(1)).send(any());
    }
}
```

### Explanation of Test Scenarios:

1. **`utils.isValidData` True**: Tests when the sensitivity data is valid, triggering the logic within that conditional block.

2. **`utils.isValidData` False**: Tests when the sensitivity data is not valid, ensuring the alternative logic path is taken.

3. **`StringUtils.hasLength`**: Covers scenarios where the sensitivity data has a length, verifying the execution of the associated logic.

4. **Sensitivity Flag Equals "Y"**: Ensures that when the sensitivity flag is "Y", certain logic (e.g., potentially skipping processing) is executed.

5. **Sensitivity Flag Not Equals "Y"**: Tests when the sensitivity flag is not "Y", ensuring the message is processed as expected.

These test cases are designed to ensure that all branches of the specified conditions are covered, providing comprehensive coverage of the sensitivity-related logic within the `ctionMessage` method. Adjust the mock setups and assertions as needed based on the actual method implementation details.