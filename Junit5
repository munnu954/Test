import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.jupiter.api.Test;

class TrunkProcessorTest {

    @Test
    public void testProcess_withTrail_prevHasTarget() {
        // Prepare data
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRAIL);
        Link prevTrail = new Link();
        prevTrail.setTarget("prevTarget");
        links.add(prevTrail);
        List<ClrComponent> clrComponentList = Collections.singletonList(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Collections.emptyMap();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);

        // Call the method
        TrunkProcessor.getInstance().process(nodes, links, new ClrComponent(), clrComponentList, clliNodeMap, i, ukCount, "");

        // Assert link properties
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals(CommonWrapperConstants.CIRCUIT, link.getLinkType());
        assertEquals("prevTarget", link.getSource());
        assertNull(link.getTarget());
    }

    @Test
    public void testProcess_withTrail_prevHasNoTarget() {
        // Prepare data
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRAIL);
        Link prevTrail = new Link();
        links.add(prevTrail);
        List<ClrComponent> clrComponentList = Collections.singletonList(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Collections.emptyMap();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);

        // Call the method
        TrunkProcessor.getInstance().process(nodes, links, new ClrComponent(), clrComponentList, clliNodeMap, i, ukCount, "");

        // Assert link properties
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals(CommonWrapperConstants.CIRCUIT, link.getLinkType());
        assertNull(link.getSource());
        assertNotNull(link.getTarget()); // Unknown equipment will be created
    }
}
