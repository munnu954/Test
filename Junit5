```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.InputStream;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestTemplate;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

@ExtendWith(MockitoExtension.class)
public class GraniteSegmentServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private RestClientUtil restClientUtil;

    @Mock
    private InputStream trustStore;

    private GraniteSegmentService graniteSegmentService;

    private Gson gson;

    private Map<String, String> reqParams;

    private String circuitName;

    private boolean cndFlag;

    private String serviceName;

    private String urlPath;

    private Object response;

    @BeforeEach
    public void setup() {
        gson = new Gson();
        reqParams = new HashMap<>();
        circuitName = "circuitName";
        cndFlag = true;
        serviceName = "serviceName";
        urlPath = "urlPath";
        graniteSegmentService = new GraniteSegmentService(restClientUtil);
    }

    @Test
    public void testCallcircuitDetailAPI_withCircuitNameAndCndFlag_shouldReturnCircuitDetailResponse() {
        // Setup
        String responseStr = "{\"circuitData\":{\"circuitLst\":[{\"circuit\":[{\"id\":\"circuitId\"}]}]}}";
        Object responseCktHdr = gson.fromJson(responseStr, CircuitDetailResponse.class);
        CircuitDetailResponse expectedResponse = gson.fromJson(responseStr, CircuitDetailResponse.class);
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class))).thenReturn(responseCktHdr);

        // Call
        CircuitDetailResponse actualResponse = graniteSegmentService.callcircuitDetailAPI(circuitName, cndFlag);

        // Assert
        assertEquals(expectedResponse, actualResponse);
    }

    @Test
    public void testCallcircuitDetailAPI_withoutCircuitName_shouldReturnCircuitDetailResponse() {
        // Call
        CircuitDetailResponse actualResponse = graniteSegmentService.callcircuitDetailAPI("", cndFlag);

        // Assert
        assertNull(actualResponse);
    }

    @Test
    public void testCallcircuitDetailAPI_withoutCndFlag_shouldReturnCircuitDetailResponse() {
        // Setup
        String responseStr = "{\"circuitData\":{\"circuitLst\":[{\"circuit\":[{\"id\":\"circuitId\"}]}]}}";
        Object responseCktHdr = gson.fromJson(responseStr, CircuitDetailResponse.class);
        CircuitDetailResponse expectedResponse = gson.fromJson(responseStr, CircuitDetailResponse.class);
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class))).thenReturn(responseCktHdr);

        // Call
        CircuitDetailResponse actualResponse = graniteSegmentService.callcircuitDetailAPI(circuitName, false);

        // Assert
        assertEquals(expectedResponse, actualResponse);
    }

    @Test
    public void testCallcircuitDetailAPI_withException_shouldThrowCommonWrapperException() {
        // Setup
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class))).thenThrow(new RuntimeException());

        // Call
        assertThrows(CommonWrapperException.class, () -> graniteSegmentService.callcircuitDetailAPI(circuitName, cndFlag));
    }

    @Test
    public void testCallcircuitDetailAPI_withHttpStatusCodeException_shouldThrowCommonWrapperException() {
        // Setup
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class))).thenThrow(new HttpStatusCodeException(400));

        // Call
        assertThrows(CommonWrapperException.class, () -> graniteSegmentService.callcircuitDetailAPI(circuitName, cndFlag));
    }

    @Test
    public void testCallcircuitDetailAPI_withResourceAccessException_shouldThrowCommonWrapperException() {
        // Setup
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class))).thenThrow(new ResourceAccessException(""));

        // Call
        assertThrows(CommonWrapperException.class, () -> graniteSegmentService.callcircuitDetailAPI(circuitName, cndFlag));
    }

    @Test
    public void testCallcircuitDetailAPI_withNullResponse_shouldReturnNull() {
        // Call
        CircuitDetailResponse actualResponse = graniteSegmentService.callcircuitDetailAPI(circuitName, cndFlag);

        // Assert
        assertNull(actualResponse);
    }

    @Test
    public void testGetRestobjData_withRequestParams_shouldReturnHttpEntity() throws Exception {
        // Setup
        Map<String, String> requestParams = new HashMap<>();
        String serviceName = "serviceName";
        String appendUrl = "appendUrl";
        Type parameterizedTypeReference = new TypeToken<Map<String, String>>() {}.getType();
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), any(Class.class))).thenReturn(new HashMap<>());

        // Call
        graniteSegmentService.getRestobjData(requestParams, serviceName, appendUrl, parameterizedTypeReference);

        // Assert
        verify(restClientUtil).exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), any(Class.class));
    }

    @Test
    public void testFindServiceForName_withServiceName_shouldReturnServiceName() throws Exception {
        // Setup
        String serviceName = "serviceName";
        String expectedServiceName = "http://servicename.toLowerCase()";
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), any(Class.class))).thenReturn(new HashMap<>());

        // Call
        String actualServiceName = graniteSegmentService.findServiceForName(serviceName);

        // Assert
        assertEquals(expectedServiceName, actualServiceName);
    }

    @Test
    public void testAddSecurityDtlsToMSHeaders_shouldReturnHttpHeaders() {
        // Setup
        HttpHeaders expectedHttpHeaders = new HttpHeaders();
        expectedHttpHeaders.setContentType(MediaType.APPLICATION_JSON);
        expectedHttpHeaders.add("Authorization", "Basic V1JFUEFJUjogVkRSRVBJRDEyMw==");

        // Call
        HttpHeaders actualHttpHeaders = graniteSegmentService.addSecurityDtlsToMSHeaders();

        // Assert
        assertEquals(expectedHttpHeaders, actualHttpHeaders);
    }
}
```