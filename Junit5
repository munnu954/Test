To achieve 100% code coverage for the "NetworkOutageEventsMessageListener" class, specifically for the two branches you mentioned, we need to write JUnit5 test cases with Mockito framework. Below is a sample code snippet to provide an overview of how these test cases would look:

```java
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class NetworkOutageEventsMessageListenerTest {

    @InjectMocks
    private NetworkOutageEventsMessageListener listener;

    @Mock
    private BatchLoaderUtils utils;

    @Test
    void testOnMessageWithKafkaError() throws Exception {
        // Prepare test data
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn("test data".getBytes());

        // Mock the behavior of utils.saveFailedRecords to throw a Kafka error
        String errorMessage = "Kafka error message";
        doThrow(new RuntimeException(errorMessage)).when(utils).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar(), anyString(), anyString());

        // Invoke the method under test
        assertThrows(SystemException.class, () -> listener.onMessage(message));

        // Verify that the saveFailedRecords method was called with the expected arguments
        verify(utils).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), eq('-'), anyString(), eq(errorMessage));
    }

    @Test
    void testOnMessageWithUncategorizedError() throws Exception {
        // Prepare test data
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn("test data".getBytes());

        // Mock the behavior of utils.convert to throw a JsonProcessingException
        doThrow(new JsonProcessingException("JSON processing error") {}).when(utils).convert(anyString(), eq(OutageDetailsEvent.class));

        // Invoke the method under test
        assertThrows(SystemException.class, () -> listener.onMessage(message));

        // Verify that the saveFailedRecords method was called with the expected arguments
        verify(utils).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), eq('-'), anyString(), anyString());
    }
}
```

In the above test cases, we use Mockito to mock the behavior of the `BatchLoaderUtils` class methods and simulate the conditions where the `saveFailedRecords` method is called with different error scenarios. By doing this, we can ensure that both branches of code are covered in the testing process.

You can further expand the test cases to cover additional scenarios and assertions as needed for complete code coverage validation.