To achieve 100% code coverage for the mentioned conditional statements in the `validateIterator` method of `MtnInsightsValidator` class, you can write JUnit5 test cases as follows:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class MtnInsightsValidatorTest {

    @Test
    void testValidateIterator() {
        MtnInsightsValidator validator = new MtnInsightsValidator();

        // Test case 1
        MtnInsightsAttributes attributes1 = new MtnInsightsAttributes();
        attributes1.setMtn("ExampleMTN");
        attributes1.setInsightCategory("ExampleCategory");
        attributes1.setInsightName("ExampleName");
        String errorMessage1 = null;
        assertDoesNotThrow(() -> validator.validateIterator(errorMessage1, attributes1, "Test1"));

        // Test case 2
        MtnInsightsAttributes attributes2 = new MtnInsightsAttributes();
        attributes2.setMtn("");
        attributes2.setInsightCategory("");
        attributes2.setInsightName("");
        String errorMessage2 = null;
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(errorMessage2, attributes2, "Test2"));

        // Add more test cases as needed for other conditional statements

        // Ensure expected and unexpected exceptions are handled properly
        MtnInsightsAttributes attributes3 = new MtnInsightsAttributes();
        attributes3.setMtn("");
        attributes3.setInsightCategory("");
        attributes3.setInsightName("");
        String errorMessage3 = null;
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(errorMessage3, attributes3, "Test3"),
                "MTN, Insight Category and Insight Name should not be null or empty.");
    }
}
```

In the test cases above, we are testing two scenarios where one should pass without throwing an exception and the other should throw an `InvalidRequestException` based on the conditions inside the `validateIterator` method.

Make sure to include any necessary imports such as `InvalidRequestException` based on your project structure. Update the test cases according to your project setup if needed. Let me know if there is anything else I can assist you with!