import java.util.*;

public class Main {
    public static String StringChallenge(String str) {
        // Allowed HTML elements
        Set<String> allowedElements = new HashSet<>(Arrays.asList("b", "i", "em", "div", "p"));

        // Stack to track opening tags
        Stack<String> stack = new Stack<>();

        // Variables to track the first mismatched element
        String firstMismatch = null;
        boolean isNested = true;

        // Parse through the string
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == '<') {
                // Check if it's an opening tag
                int endIndex = str.indexOf('>', i);
                if (endIndex != -1) {
                    String tag = str.substring(i + 1, endIndex);
                    if (tag.charAt(0) != '/') {
                        // Opening tag
                        String tagName = tag.split(" ")[0]; // Get tag name without attributes
                        if (allowedElements.contains(tagName)) {
                            stack.push(tagName);
                        }
                    } else {
                        // Closing tag
                        String tagName = tag.substring(1); // Remove '/'
                        if (!stack.isEmpty() && stack.peek().equals(tagName)) {
                            stack.pop();
                        } else {
                            // Found mismatch
                            String openingTag = tagName.substring(1); // Get corresponding opening tag name
                            firstMismatch = openingTag;
                            isNested = false;
                            break;
                        }
                    }
                    i = endIndex; // Move index to end of tag
                }
            }
        }

        // Determine output based on nesting validity
        if (isNested && stack.isEmpty()) {
            return "true";
        } else {
            if (firstMismatch != null) {
                return firstMismatch;
            } else {
                return "none"; // Handle edge case where no mismatch is found
            }
        }
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        String input = s.nextLine().trim(); // Read input
        String result = StringChallenge(input); // Process input
        String challengeToken = "uxt3ol9y5df"; // Provided ChallengeToken

        // Construct final output in reverse order separated by colon
        String finalOutput = new StringBuilder(result).reverse().toString() + ":" + new StringBuilder(challengeToken).reverse().toString();
        System.out.println("Final Output: " + finalOutput);
    }
}