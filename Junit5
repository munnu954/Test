To achieve 100% code coverage for the `TopologyRetrievalQueryResponse` class, we need to create JUnit 5 test cases that test the `getTotalRecords`, `getError`, and `getEntityProps` methods. We will continue to use reflection to set the values of private fields for testing purposes.

Here's the updated JUnit 5 test class to achieve 100% code coverage:

1. **POM or build.gradle dependencies** (if not already included):
   ```xml
   <!-- For Maven (pom.xml) -->
   <dependency>
       <groupId>org.junit.jupiter</groupId>
       <artifactId>junit-jupiter-engine</artifactId>
       <version>LATEST_VERSION</version>
       <scope>test</scope>
   </dependency>
   <dependency>
       <groupId>com.fasterxml.jackson.core</groupId>
       <artifactId>jackson-databind</artifactId>
       <version>YOUR_VERSION</version>
   </dependency>
   ```

2. **JUnit 5 Test Class:**
   ```java
   import static org.junit.jupiter.api.Assertions.assertEquals;

   import java.lang.reflect.Field;
   import java.util.ArrayList;

   import org.junit.jupiter.api.BeforeEach;
   import org.junit.jupiter.api.Test;

   public class TopologyRetrievalQueryResponseTest {
       
       private TopologyRetrievalQueryResponse response;
       
       @BeforeEach
       public void setUp() {
           response = new TopologyRetrievalQueryResponse();
       }

       @Test
       public void testGetTotalRecords() throws NoSuchFieldException, IllegalAccessException {
           // Use reflection to set 'totalRecords' field
           Field field = TopologyRetrievalQueryResponse.class.getDeclaredField("totalRecords");
           field.setAccessible(true);
           long expectedTotalRecords = 100L;
           field.set(response, expectedTotalRecords);
   
           assertEquals(expectedTotalRecords, response.getTotalRecords());
       }

       @Test
       public void testGetError() throws NoSuchFieldException, IllegalAccessException {
           // Use reflection to set 'error' field
           Field field = TopologyRetrievalQueryResponse.class.getDeclaredField("error");
           field.setAccessible(true);
           String expectedError = "No error";
           field.set(response, expectedError);
   
           assertEquals(expectedError, response.getError());
       }
       
       @Test
       public void testGetEntityProps() throws NoSuchFieldException, IllegalAccessException {
           // Use reflection to set 'entityProps' field
           Field field = TopologyRetrievalQueryResponse.class.getDeclaredField("entityProps");
           field.setAccessible(true);
           ArrayList<EntityProps> expectedEntityProps = new ArrayList<>();
           expectedEntityProps.add(new EntityProps());
           field.set(response, expectedEntityProps);
   
           assertEquals(expectedEntityProps, response.getEntityProps());
       }
   }
   
   // Your original class with correct package and imports
   import com.fasterxml.jackson.annotation.JsonProperty;
   import java.util.ArrayList;

   public class TopologyRetrievalQueryResponse {

       @JsonProperty("totalRecords") 
       private long totalRecords;

       @JsonProperty("entityProps")
       private ArrayList<EntityProps> entityProps;

       @JsonProperty("error")
       private String error;

       public long getTotalRecords() {
           return totalRecords; 
       }

       public String getError() {
           return error;
       }
       
       public ArrayList<EntityProps> getEntityProps() {
           return entityProps;
       }
   }

   // Assuming EntityProps class exists with appropriate structure
   public class EntityProps {
       // EntityProps fields and methods here...
   }
   ```

### Explanation:
1. **Dependencies**:
   - Ensure that you have the necessary dependencies for JUnit 5 (`junit-jupiter-engine`) and Jackson (`jackson-databind`) included.

2. **Test Class `TopologyRetrievalQueryResponseTest`**:
   - **Setup Method `setUp`**: Initializes the `TopologyRetrievalQueryResponse` object before each test.
   - **Test Method `testGetTotalRecords`**: Uses reflection to set the private field `totalRecords` and then verifies that the `getTotalRecords` method returns the correct value.
       ```java
       @Test
       public void testGetTotalRecords() throws NoSuchFieldException, IllegalAccessException {
           // Use reflection to set 'totalRecords' field
           Field field = TopologyRetrievalQueryResponse.class.getDeclaredField("totalRecords");
           field.setAccessible(true);
           long expectedTotalRecords = 100L;
           field.set(response, expectedTotalRecords);
   
           assertEquals(expectedTotalRecords, response.getTotalRecords());
       }
       ```
   - **Test Method `testGetError`**: Uses reflection to set the private field `error` and then verifies that the `getError` method returns the correct value.
       ```java
       @Test
       public void testGetError() throws NoSuchFieldException, IllegalAccessException {
           // Use reflection to set 'error' field
           Field field = TopologyRetrievalQueryResponse.class.getDeclaredField("error");
           field.setAccessible(true);
           String expectedError = "No error";
           field.set(response, expectedError);
   
           assertEquals(expectedError, response.getError());
       }
       ```
   - **Test Method `testGetEntityProps`**: Uses reflection to set the private field `entityProps` and then verifies that the `getEntityProps` method returns the correct value.
       ```java
       @Test
       public void testGetEntityProps() throws NoSuchFieldException, IllegalAccessException {
           // Use reflection to set 'entityProps' field
           Field field = TopologyRetrievalQueryResponse.class.getDeclaredField("entityProps");
           field.setAccessible(true);
           ArrayList<EntityProps> expectedEntityProps = new ArrayList<>();
           expectedEntityProps.add(new EntityProps());
           field.set(response, expectedEntityProps);
   
           assertEquals(expectedEntityProps, response.getEntityProps());
       }
       ```

By running these tests, you will achieve 100% code coverage for the `TopologyRetrievalQueryResponse` class. This ensures that all getter methods are tested effectively.