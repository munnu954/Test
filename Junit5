import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.io.IOException;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

public class KafkaConsumerTest {

    private KafkaConsumer kafkaConsumer;

    @Mock
    private CSVParser csvParser;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        kafkaConsumer = new KafkaConsumer();
    }

    @AfterEach
    public void tearDown() {
        kafkaConsumer = null;
    }

    @Test
    public void testRetrieveCsvFile_Success() throws IOException {
        // Arrange
        String sourceFilePath = "test.csv";
        when(csvParser.parse()).thenReturn(createTestCSVRecords());

        // Act
        List<String[]> result = kafkaConsumer.retrieveCsvFile(sourceFilePath);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("value1", result.get(0)[0]);
        assertEquals("value2", result.get(1)[0]);
    }

    @Test
    public void testRetrieveCsvFile_EmptyFile() throws IOException {
        // Arrange
        String sourceFilePath = "empty.csv";
        when(csvParser.parse()).thenReturn(new ArrayList<>());

        // Act
        List<String[]> result = kafkaConsumer.retrieveCsvFile(sourceFilePath);

        // Assert
        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    public void testRetrieveCsvFile_IOError() throws IOException {
        // Arrange
        String sourceFilePath = "error.csv";
        when(csvParser.parse()).thenThrow(new IOException());

        // Act & Assert
        assertThrows(IOException.class, () -> kafkaConsumer.retrieveCsvFile(sourceFilePath));
    }

    private List<CSVRecord> createTestCSVRecords() {
        List<CSVRecord> records = new ArrayList<>();
        CSVRecord record1 = new CSVRecord(Arrays.asList("value1"));
        CSVRecord record2 = new CSVRecord(Arrays.asList("value2"));
        records.add(record1);
        records.add(record2);
        return records;
    }
}