To create JUnit 5 test cases for the `validateIterator` method in the `MtnInsightsValidator` class, we need to focus on the specific conditional branches mentioned in your request. We'll write test cases that cover different scenarios based on the attributes of `MtnInsightsAttributes`.

Here's a set of test cases that aim to provide 100% code coverage for the specified branches:

```java
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.test.util.ReflectionTestUtils;

import com.vz.s360.vbg.eventledger.exception.InvalidRequestException;

public class MtnInsightsValidatorTest {

    @InjectMocks
    private MtnInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    private MtnInsightsAttributes createAttributes(String mtn, String insightCategory, String insightName, String ecpdId, String outageId) {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(mtn);
        attributes.setInsightCategory(insightCategory);
        attributes.setInsightName(insightName);
        attributes.setEcpdId(ecpdId);
        attributes.setOutageId(outageId);
        return attributes;
    }

    @Test
    public void testEmptyMtnCategoryNameShouldThrowException() {
        MtnInsightsAttributes attributes = createAttributes("", "", "", "someEcpdId", "someOutageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal ");
        });
    }

    @Test
    public void testEmptyCategoryAndNameShouldThrowException() {
        MtnInsightsAttributes attributes = createAttributes("someMtn", "", "", "someEcpdId", "someOutageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal ");
        });
    }

    @Test
    public void testValidMyBizAttributesShouldNotThrowException() {
        MtnInsightsAttributes attributes = createAttributes("someMtn", EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ, EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0), "someEcpdId", "someOutageId");

        validator.validateIterator(null, attributes, "LogVal ");
    }

    @Test
    public void testInvalidMyBizAttributesShouldThrowException() {
        MtnInsightsAttributes attributes = createAttributes(null, EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ, EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0), null, "someOutageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal ");
        });
    }

    @Test
    public void testEmptyMtnInMyBizShouldThrowException() {
        MtnInsightsAttributes attributes = createAttributes("", EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ, EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0), "someEcpdId", "someOutageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal ");
        });
    }

    @Test
    public void testEmptyEcpdIdInMyBizShouldThrowException() {
        MtnInsightsAttributes attributes = createAttributes("someMtn", EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ, EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0), "", "someOutageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal ");
        });
    }

    @Test
    public void testEmptyCategoryInMyBizShouldThrowException() {
        MtnInsightsAttributes attributes = createAttributes("someMtn", "", EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0), "someEcpdId", "someOutageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal ");
        });
    }

    @Test
    public void testEmptyNameInMyBizShouldThrowException() {
        MtnInsightsAttributes attributes = createAttributes("someMtn", EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ, "", "someEcpdId", "someOutageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal ");
        });
    }

    @Test
    public void testValidAttributesShouldNotThrowException() {
        MtnInsightsAttributes attributes = createAttributes("someMtn", "someCategory", "someName", "someEcpdId", "someOutageId");

        validator.validateIterator(null, attributes, "LogVal ");
    }

    @Test
    public void testEmptyMtnInGeneralShouldThrowException() {
        MtnInsightsAttributes attributes = createAttributes("", "someCategory", "someName", "someEcpdId", "someOutageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal ");
        });
    }
}
```

In this set of tests, we are creating instances of `MtnInsightsAttributes` with various combinations of attribute values to hit different branches of the `validateIterator` method. The test cases ensure that the method throws exceptions when it's supposed to and runs successfully when the input conditions are met.