   @Test
 public void testParseWithValidJsonField() throws Exception {
        // Arrange
        String expression = "%attribute1:details.name%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("details", Map.of("name", "John"));

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("John", result);
    }

    @Test
    public void testParseWithInvalidJsonField() throws Exception {
        // Arrange
        String expression = "%attribute1:details.unknown%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("details", Map.of("name", "John"));

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("", result);
    }

    @Test
    public void testParseWithValidArrayIndex() throws Exception {
        // Arrange
        String expression = "%attribute1: names[1]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("John", "Jane"));

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("Jane", result);
    }

    @Test
    public void testParseWithInvalid_ArrayIndex() throws Exception {
        // Arrange
        String expression = "%attribute1: names[1]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("John", "Jane"));

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("Jane", result);
    }

    @Test
    public void testParseWithInvalid_JsonFormat() throws Exception {
        // Arrange
        String expression = "%attribute1: details%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("details", "invalid format");

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("invalid format", result);
    }

    @Test
    public void testParseWithNoMatches() throws Exception {

        // Arrange
        String expression = "%nonExistent%";
        Map<String, Object> srcMap = new HashMap<>();

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("%nonExistent%", result);
    }
}