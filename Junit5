Certainly! To write JUnit 5 test cases for the `AlarmRepositoryImpl` class, particularly focusing on the branch you specified, we'll be using Mockito to mock dependencies and cover all the branches. Here's the code:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.HashMap;
import java.util.Map;

public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @Mock
    private Logger LOG = LoggerFactory.getLogger(AlarmRepositoryImpl.class);

    @Mock
    private ObjectMapper objectMapper;

    private Map<String, Integer> perceivedSeverityMap;
    private Map<String, Integer> alarmStateMap;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        perceivedSeverityMap.put("Critical", 2);
        perceivedSeverityMap.put("Major", 3);

        alarmStateMap = new HashMap<>();
        alarmStateMap.put("New", 1);
        alarmStateMap.put("Cleared", 2);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    }

    @Test
    void testPerceivedSeverityNullAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":null,\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityEmptyAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"\",\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNotNullAndNotEmptyAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"Critical\",\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNullAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":null,\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    void testPerceivedSeverityEmptyAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"\",\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    void testPerceivedSeverityNotNullAndNotEmptyAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"Major\",\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(3, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNotInMapAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"NonExistentSeverity\",\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNotInMapAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"NonExistentSeverity\",\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity()); // Indeterminate
    }
}
```

This JUnit 5 test class covers all the branches for the specified condition in the `AlarmRepositoryImpl` class. Each test case sets up the necessary mocked dependencies and checks the different conditions of `perceivedSeverity` and `stateValue`.