Certainly! Below is an example of a JUnit test class that uses Reflection APIs to test the `queryBasedOnParameter` method of the `CoconutServiceVersion3` class, ensuring that all branches of the conditional statements are covered. 

This test will create instances of `CoconutServiceVersion3`, and manipulate the `queryParams` Map to trigger different branches of logic.

```java
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class CoconutServiceVersion3Test {

    @InjectMocks
    private CoconutServiceVersion3 coconutServiceVersion3;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testQueryBasedOnParameter_WithLocationCLLI() throws Exception {
        // Arrange
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "testCLLI");

        // Access the private method using reflection
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        // Act
        String result = (String) method.invoke(coconutServiceVersion3, queryParams);

        // Assert
        String expected = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'testclli'");
        assertEquals(expected, result);
    }

    @Test
    public void testQueryBasedOnParameter_WithSiteName() throws Exception {
        // Arrange
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "testSite");

        // Access the private method using reflection
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        // Act
        String result = (String) method.invoke(coconutServiceVersion3, queryParams);

        // Assert
        String expected = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'testsite'");
        assertEquals(expected, result);
    }

    @Test
    public void testQueryBasedOnParameter_WithBothLocationCLLIAndSiteName() throws Exception {
        // Arrange
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "testCLLI");
        queryParams.put("siteName", "testSite");

        // Access the private method using reflection
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        // Act
        String result = (String) method.invoke(coconutServiceVersion3, queryParams);

        // Assert
        String expected = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'testclli'") +
                CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'testsite'");
        assertEquals(expected, result);
    }

    @Test
    public void testQueryBasedOnParameter_WithNoParameters() throws Exception {
        // Arrange
        Map<String, Object> queryParams = new HashMap<>();

        // Access the private method using reflection
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        // Act
        String result = (String) method.invoke(coconutServiceVersion3, queryParams);

        // Assert
        String expected = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;
        assertEquals(expected, result);
    }
}
```

### Explanation:
1. **Test Setup**: The `setUp` method initializes the necessary mocks and prepares the testing environment.
2. **Test Cases**:
   - Each test case creates a different scenario using the `queryParams` Map to cover the various branches in the `queryBasedOnParameter` method.
   - The `Method` object is used to access the private method, and its accessibility is set to `true` to allow invocation.
   - Finally, assertions are made to verify that the generated query matches the expected output.

With these test cases, you'll achieve 100% code coverage for the conditional branches in the `queryBasedOnParameter` method.