Certainly! Below is a set of JUnit 5 test cases aimed at achieving 100% code coverage for the `CollectionAudit` class using the Lombok `@Builder` functionality:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CollectionAuditTest {

    @Test
    public void testCollectionAuditBuilder() {
        // Building a CollectionAudit object using the builder
        CollectionAudit audit = CollectionAudit.builder()
                .id("123")
                .collectorId("collector-1")
                .processType(ProcessType.Collector)
                .jarId("jar-1")
                .jobId("job-1")
                .flinkJobId("flink-job-1")
                .jobStatus("COMPLETED")
                .inputFilePath("/input/path")
                .outputFilePath("/output/path")
                .url("http://example.com")
                .flinkURL("http://flink-example.com")
                .port(8080)
                .delimiters(",")
                .fileType("CSV")
                .dateReceived("2023-10-01")
                .dateProcessed("2023-10-02")
                .noofRecordsInTheFile(100)
                .noofRecordsProcessed(90)
                .noofRecordsFailed(10)
                .exceptions("Some exceptions")
                .bootstrapServer("localhost:9092")
                .build();
                
        // Verifying each field
        assertEquals("123", audit.getId());
        assertEquals("collector-1", audit.getCollectorId());
        assertEquals(ProcessType.Collector, audit.getProcessType());
        assertEquals("jar-1", audit.getJarId());
        assertEquals("job-1", audit.getJobId());
        assertEquals("flink-job-1", audit.getFlinkJobId());
        assertEquals("COMPLETED", audit.getJobStatus());
        assertEquals("/input/path", audit.getInputFilePath());
        assertEquals("/output/path", audit.getOutputFilePath());
        assertEquals("http://example.com", audit.getUrl());
        assertEquals("http://flink-example.com", audit.getFlinkURL());
        assertEquals(8080, audit.getPort());
        assertEquals(",", audit.getDelimiters());
        assertEquals("CSV", audit.getFileType());
        assertEquals("2023-10-01", audit.getDateReceived());
        assertEquals("2023-10-02", audit.getDateProcessed());
        assertEquals(100, audit.getNoofRecordsInTheFile());
        assertEquals(90, audit.getNoofRecordsProcessed());
        assertEquals(10, audit.getNoofRecordsFailed());
        assertEquals("Some exceptions", audit.getExceptions());
        assertEquals("localhost:9092", audit.getBootstrapServer());
    }

    @Test
    public void testCollectionAuditNoArgsConstructor() {
        // Creating an object using the no-args constructor
        CollectionAudit audit = new CollectionAudit();
        
        // Verifying default values
        assertNull(audit.getId());
        assertNull(audit.getCollectorId());
        assertNull(audit.getProcessType());
        assertNull(audit.getJarId());
        assertNull(audit.getJobId());
        assertNull(audit.getFlinkJobId());
        assertNull(audit.getJobStatus());
        assertNull(audit.getInputFilePath());
        assertNull(audit.getOutputFilePath());
        assertNull(audit.getUrl());
        assertNull(audit.getFlinkURL());
        assertNull(audit.getPort());
        assertNull(audit.getDelimiters());
        assertNull(audit.getFileType());
        assertNull(audit.getDateReceived());
        assertNull(audit.getDateProcessed());
        assertNull(audit.getNoofRecordsInTheFile());
        assertNull(audit.getNoofRecordsProcessed());
        assertNull(audit.getNoofRecordsFailed());
        assertNull(audit.getExceptions());
        assertNull(audit.getBootstrapServer());
    }

    @Test
    public void testCollectionAuditAllArgsConstructor() {
        // Creating an object using the all-args constructor
        CollectionAudit audit = new CollectionAudit(
                "123", "collector-1", ProcessType.Collector, "jar-1", "job-1", 
                "flink-job-1", "COMPLETED", "/input/path", "/output/path", 
                "http://example.com", "http://flink-example.com", 8080, ",", 
                "CSV", "2023-10-01", "2023-10-02", 100, 90, 10, "Some exceptions", 
                "localhost:9092"
        );

        // Verifying each field
        assertEquals("123", audit.getId());
        assertEquals("collector-1", audit.getCollectorId());
        assertEquals(ProcessType.Collector, audit.getProcessType());
        assertEquals("jar-1", audit.getJarId());
        assertEquals("job-1", audit.getJobId());
        assertEquals("flink-job-1", audit.getFlinkJobId());
        assertEquals("COMPLETED", audit.getJobStatus());
        assertEquals("/input/path", audit.getInputFilePath());
        assertEquals("/output/path", audit.getOutputFilePath());
        assertEquals("http://example.com", audit.getUrl());
        assertEquals("http://flink-example.com", audit.getFlinkURL());
        assertEquals(8080, audit.getPort());
        assertEquals(",", audit.getDelimiters());
        assertEquals("CSV", audit.getFileType());
        assertEquals("2023-10-01", audit.getDateReceived());
        assertEquals("2023-10-02", audit.getDateProcessed());
        assertEquals(100, audit.getNoofRecordsInTheFile());
        assertEquals(90, audit.getNoofRecordsProcessed());
        assertEquals(10, audit.getNoofRecordsFailed());
        assertEquals("Some exceptions", audit.getExceptions());
        assertEquals("localhost:9092", audit.getBootstrapServer());
    }

    @Test
    public void testCollectionAuditToString() {
        // Building a CollectionAudit object using the builder
        CollectionAudit audit = CollectionAudit.builder()
                .id("123")
                .collectorId("collector-1")
                .processType(ProcessType.Collector)
                .jarId("jar-1")
                .jobId("job-1")
                .flinkJobId("flink-job-1")
                .jobStatus("COMPLETED")
                .inputFilePath("/input/path")
                .outputFilePath("/output/path")
                .url("http://example.com")
                .flinkURL("http://flink-example.com")
                .port(8080)
                .delimiters(",")
                .fileType("CSV")
                .dateReceived("2023-10-01")
                .dateProcessed("2023-10-02")
                .noofRecordsInTheFile(100)
                .noofRecordsProcessed(90)
                .noofRecordsFailed(10)
                .exceptions("Some exceptions")
                .bootstrapServer("localhost:9092")
                .build();

        // Verifying the toString method
        String expectedString = "CollectionAudit(id=123, collectorId=collector-1, processType=Collector, jarId=jar-1, jobId=job-1, flinkJobId=flink-job-1, jobStatus=COMPLETED, inputFilePath=/input/path, outputFilePath=/output/path, url=http://example.com, flinkURL=http://flink-example.com, port=8080, delimiters=,, fileType=CSV, dateReceived=2023-10-01, dateProcessed=2023-10-02, noofRecordsInTheFile=100, noofRecordsProcessed=90, noofRecordsFailed=10, exceptions=Some exceptions, bootstrapServer=localhost:9092)";
        assertEquals(expectedString, audit.toString());
    }
}
```

These test cases cover the builder pattern, the no-args constructor, the all-args constructor, and the `toString()` method generated by Lombok. This code should provide 100% coverage for the `CollectionAudit` class.