Certainly! Writing unit tests to cover the particular `else` blocks within your `parse` method will help ensure robustness. Here are some JUnit 5 test cases that focus on covering these `else` conditions.

Firstly, ensure you have the necessary dependencies added to your project for JUnit 5 and Mockito if they aren't already present.

Here's an example setup in your `pom.xml` for Maven:

```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>3.12.4</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.0</version>
</dependency>
```

Next, implement the test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlarmPostingUtilsTest {

    private AlarmPostingUtils utils;
    private ObjectMapper objectMapper;
    private Map<String, Object> srcMap;

    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper();
        srcMap = new HashMap<>();
        utils = new AlarmPostingUtils(null);
    }

    @Test
    void testParseWithEmptyAttributeForMapPath() throws Exception {
        try (MockedStatic<RulesConstants> utilities = Mockito.mockStatic(RulesConstants.class)) {
            utilities.when(RulesConstants::getObjectMapper).thenReturn(objectMapper);
            utilities.when(() -> RulesConstants.EMPTYSTRING).thenReturn("");

            String result = AlarmPostingUtils.parse("%detail.something_nonexistent%", srcMap, "ruleName");

            assertEquals("", result);
        }
    }

    @Test
    void testParseWithEmptyAttributeForArrayPath() throws Exception {
        try (MockedStatic<RulesConstants> utilities = Mockito.mockStatic(RulesConstants.class)) {
            utilities.when(RulesConstants::getObjectMapper).thenReturn(objectMapper);
            utilities.when(() -> RulesConstants.EMPTYSTRING).thenReturn("");

            srcMap.put("array", List.of("value1", "value2"));

            String result = AlarmPostingUtils.parse("%array[3]%", srcMap, "ruleName");

            assertEquals("", result);
        }
    }

    @Test
    void testParseWithNonExistentAttribute() throws Exception {
        try (MockedStatic<RulesConstants> utilities = Mockito.mockStatic(RulesConstants.class)) {
            utilities.when(RulesConstants::getObjectMapper).thenReturn(objectMapper);
            utilities.when(() -> RulesConstants.EMPTYSTRING).thenReturn("");

            String result = AlarmPostingUtils.parse("%nonexistent_attribute%", srcMap, "ruleName");

            assertEquals("", result);
        }
    }

    @Test
    void testParseWithNonExistentArrayAttribute() throws Exception {
        try (MockedStatic<RulesConstants> utilities = Mockito.mockStatic(RulesConstants.class)) {
            utilities.when(RulesConstants::getObjectMapper).thenReturn(objectMapper);
            utilities.when(() -> RulesConstants.EMPTYSTRING).thenReturn("");

            String result = AlarmPostingUtils.parse("%nonexistent_array[0]%", srcMap, "ruleName");

            assertEquals("", result);
        }
    }
}
```

### Explanation:

1. **`testParseWithEmptyAttributeForMapPath`**:
    - This test case verifies the scenario where an attribute in the path (e.g., `something_nonexistent` from `detail`) does not exist in the `srcMap`. It triggers the `else` block where `EMPTYSTRING` is returned.

2. **`testParseWithEmptyAttributeForArrayPath`**:
    - This checks the scenario where an array index is out of bounds. Given an array with fewer elements, it confirms that the `else` block is triggered correctly.

3. **`testParseWithNonExistentAttribute`**:
    - Tests for a direct non-existent attribute reference, ensuring the method correctly handles this by returning an empty string.

4. **`testParseWithNonExistentArrayAttribute`**:
    - Similar to the previous one but specifically for array attributes which do not exist.

These test cases mock `RulesConstants.getObjectMapper()` to ensure `ObjectMapper` dependency is correctly injected. Each test checks that for various conditions the code correctly falls through to the `else` block, verifying `EMPTYSTRING` usage.