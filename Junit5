@Test
public void testApplyPostingRule() throws Exception {
    // Create test data
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();

    // Mock dependencies
    ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
    when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");

    // Set up test values for fields
    ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "%Mock:TopologyExpression%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
    ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

    // Execute applyPostingRule method
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    // Verify the interactions and assertions
    assertNotNull(result);
    verify(topoApiClient).fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString());
    verify(utils, times(3)).evaluateExpression(anyString(), anyMap());
    verify(utils).evaluateExpression(eq("%Mock:AlarmExpression%"), anyMap());
    verify(utils).evaluateExpression(eq("%Mock:TopologyExpression%"), anyMap());
    verify(utils).evaluateExpression(eq("%Mock:EligibilityValue%"), anyMap());
}



```java
import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
class PostingRuleProcessingServiceTest {

  @Mock
  private TopologyApiClient topoApiClient;

  @Mock
  private AlarmPostingUtils utils;

  @Autowired
  @InjectMocks
  private PostingRuleProcessingService postingRuleProcessingService;

  private Alarm alarm;
  private PostingRule rule;
  private Map<String, Object> alarmMap;

  @BeforeEach
  void setUp() {
    alarm = new Alarm();
    rule = new PostingRule();
    alarmMap = new HashMap<>();
  }

  @Test
  void testApplyPostingRule_NullComponentIdReq() {
    String componentIdReq = null;
    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule))
        .thenReturn(componentIdReq);

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertEquals(alarm, result);
  }

  @Test
  void testApplyPostingRule_NullResponseEntity() {
    String componentIdReq = "componentIdReq";
    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule))
        .thenReturn(componentIdReq);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq))
        .thenReturn(null);

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertEquals(alarm, result);
  }

  @Test
  void testApplyPostingRule_MissingTopologyData() {
    String componentIdReq = "componentIdReq";
    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule))
        .thenReturn(componentIdReq);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq))
        .thenReturn(ResponseEntity.ok("{\"traversalTopologyObjects\": []}"));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertEquals(alarm, result);
  }

  @Test
  void testApplyPostingRule_TopologyObjectsNodeNotArray() {
    String componentIdReq = "componentIdReq";
    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule))
        .thenReturn(componentIdReq);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq))
        .thenReturn(ResponseEntity.ok("{\"traversalTopologyObjects\": null}"));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertEquals(alarm, result);
  }

  @Test
  void testApplyPostingRule_IneligibleTopoObjectEligibilityValue() {
    String componentIdReq = "componentIdReq";
    String topoObjectEligibilityValue = "ineligibleValue";
    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule))
        .thenReturn(componentIdReq);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq))
        .thenReturn(ResponseEntity.ok(
            "{\"traversalTopologyObjects\": [{\"MO_Type\": \"MO_Type\"}]}"));
    Mockito.when(utils.evaluateExpression(postingRuleProcessingService.topologyObjectEligibilityCheckValue,
        Mockito.anyMap()))
        .thenReturn(topoObjectEligibilityValue);

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertEquals(alarm, result);
  }

  @Test
  void testApplyPostingRule_NullAlarmedObject() {
    String componentIdReq = "componentIdReq";
    String topologyObjectEligibilityValue = "eligibleValue";
    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule))
        .thenReturn(componentIdReq);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq))
        .thenReturn(ResponseEntity.ok(
            "{\"traversalTopologyObjects\": [{\"MO_Type\": \"MO_Type\"}]}"));
    Mockito.when(utils.evaluateExpression(postingRuleProcessingService.topologyObjectEligibilityCheckValue,
        Mockito.anyMap()))
        .thenReturn(topologyObjectEligibilityValue);
    Mockito.when(utils.evaluateExpression(postingRuleProcessingService.alarmedObjectExpression,
        Mockito.anyMap()))
        .thenReturn(null);

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertEquals(alarm, result);
  }

  @Test
  void testApplyPostingRule_NullAlarmedObjectTopologyDet() {
    String componentIdReq = "componentIdReq";
    String topologyObjectEligibilityValue = "eligibleValue";
    String alarmedObject = "alarmedObject";
    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule))
        .thenReturn(componentIdReq);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq))
        .thenReturn(ResponseEntity.ok(
            "{\"traversalTopologyObjects\": [{\"MO_Type\": \"MO_Type\"}]}"));
    Mockito.when(utils.evaluateExpression(postingRuleProcessingService.topologyObjectEligibilityCheckValue,
        Mockito.anyMap()))
        .thenReturn(topologyObjectEligibilityValue);
    Mockito.when(utils.evaluateExpression(postingRuleProcessingService.alarmedObjectExpression,
        Mockito.anyMap()))
        .thenReturn(alarmedObject);
    Mockito.when(utils.evaluateExpression(postingRuleProcessingService.topologyDetailsAlarmedObjectExpression,
        Mockito.anyMap()))
        .thenReturn(null);

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertEquals(alarm, result);
  }

  @Test
  void testApplyPostingRule_SetAllFields() {
    String componentIdReq = "componentIdReq";
    String topologyObjectEligibilityValue = "eligibleValue";
    String alarmedObject = "alarmedObject";
    String alarmedObjectTopologyDet = "{\"MO_Type\": \"MO_Type\"}";
    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule))
        .thenReturn(componentIdReq);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq))
        .thenReturn(ResponseEntity.ok(
            "{\"traversalTopologyObjects\": [{\"MO_Type\": \"MO_Type\"}]}"));
    Mockito.when(utils.evaluateExpression(postingRuleProcessingService.topologyObjectEligibilityCheckValue,
        Mockito.anyMap()))
        .thenReturn(topologyObjectEligibilityValue);
    Mockito.when(utils.evaluateExpression(postingRuleProcessingService.alarmedObjectExpression,
        Mockito.anyMap()))
        .thenReturn(alarmedObject);
    Mockito.when(utils.evaluateExpression(postingRuleProcessingService.topologyDetailsAlarmedObjectExpression,
        Mockito.anyMap()))
        .thenReturn(alarmedObjectTopologyDet);

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertEquals(alarmedObject, result.getAlarmedObject());
    assertEquals(alarmedObjectTopologyDet, result.getTopologyDetails());
  }
}
```