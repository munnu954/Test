Here are additional JUnit5 test cases that cover the else block in the `parse` method for achieving 100% code coverage:

```java
@Test
void testParseWithValidArrayIndexAndJsonField() throws Exception {
    // Arrange
    String expression = "%attribute1: details.names[0]%";
    srcMap.put("details", Map.of("names", List.of("John", "Jane")));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("John", result);
}

@Test
void testParseWithInvalidArrayIndexAndJsonField() throws Exception {
    // Arrange
    String expression = "%attribute1: details.names[2]%";
    srcMap.put("details", Map.of("names", List.of("John", "Jane")));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}

@Test
void testParseWithValidJsonFieldNoReplace() throws Exception {
    // Arrange
    String expression = "%attribute1: details.name%";
    srcMap.put("details", Map.of("age", 25));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("%attribute1: details.name%", result);
}

@Test
void testParseWithInvalidJsonFieldNoReplace() throws Exception {
    // Arrange
    String expression = "%attribute1: details.unknown%";
    srcMap.put("details", Map.of("age", 25));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("%attribute1: details.unknown%", result);
}

@Test
void testParseWithEmptySrcMap() throws Exception {
    // Arrange
    String expression = "%attribute1: details.name%";
    srcMap = Collections.emptyMap();
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}
```

These additional test cases cover different scenarios of using valid or invalid field names, array indexes, and empty maps in the `srcMap` for different situations where the else block in the `parse` method is executed.