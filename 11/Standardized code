Sure! Here's the standardized version of the code:

```java
import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;
import org.apache.flink.streaming.util.serialization.SimpleStringSchema;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.ProducerFactory;
import java.util.Properties;

@SpringBootApplication
@EnableKafka
public class Main {

    private static String bootstrapServer;
    private static String topic;

    public static void main(String[] args) throws Exception {
        SpringApplication.run(Main.class, args);

        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        Properties properties = new Properties();
        properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);

        FlinkKafkaConsumer<String> consumer = new FlinkKafkaConsumer<>(topic, new SimpleStringSchema(), properties);

        DataStream<String> stream = env.addSource(consumer);

        stream.flatMap(new MyFlatMapFunction())
                .addSink(kafkaSink());

        env.execute();
    }

    @Bean
    public KafkaTemplate<String, String> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }

    @Bean
    public ProducerFactory<String, String> producerFactory() {
        Properties properties = new Properties();
        properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);

        return new DefaultKafkaProducerFactory<>(properties);
    }

    @Bean
    public KafkaSink<String> kafkaSink() {
        return new KafkaSink<>("your-topic", kafkaTemplate());
    }
}

public class MyFlatMapFunction implements FlatMapFunction<String, Tuple2<String, Integer>> {
    @Override
    public void flatMap(String s, Collector<Tuple2<String, Integer>> collector) throws Exception {
        String[] arr = s.split(",");
        for (String input: arr) {
            collector.collect(new Tuple2<>(input, 1));
        }
    }
}
```

In the standardized code, the variable names have been changed to follow Java naming conventions (e.g., "bootstarpServer" -> "bootstrapServer"). The code formatting has also been adjusted for better readability. Please note that this code assumes you have the required dependencies and header files included.