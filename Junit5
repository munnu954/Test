import com.newwaylabs.alarm.config.PostGreDataBaseConfig;
import com.newwaylabs.alarm.constants.AlarmConstants;
import com.newwaylabs.alarm.model.Alarm;
import com.newwaylabs.alarm.repository.impl.AlarmRepositoryImpl;
import com.newwaylabs.alarm.service.PostingRuleProcessingService;
import com.newwaylabs.alarm.utils.AlarmPostingUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;

import java.sql.Timestamp;
import java.time.Instant;

@ExtendWith(MockitoExtension.class)
class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private AlarmPostingUtils alarmPostingUtils;

    @Mock
    private PostGreDataBaseConfig postGreDataBaseConfig;

    @Mock
    private PostingRuleProcessingService postingRuleProcessingService;

    private Alarm alarm;

    @BeforeEach
    void setUp() {
        alarm = new Alarm();
        alarm.setAlarmIdentity("test-alarm-id");
        alarm.setAlarmUpdatedTime("2023-05-01T12:00:00Z");
        alarm.setSequenceID(1L);
    }

    @Test
    void testPostAlarmForEachIteration_WithSequenceID0() {
        // Arrange
        SqlRowSet sqlRowSet = Mockito.mock(SqlRowSet.class);
        Mockito.when(sqlRowSet.next()).thenReturn(true);
        Mockito.when(sqlRowSet.getLong("sequenceid")).thenReturn(0L);
        Mockito.when(sqlRowSet.getBoolean("resolved")).thenReturn(true);
        Mockito.when(sqlRowSet.getString("componentid")).thenReturn("component-id");
        Mockito.when(sqlRowSet.getString("alarmedobject")).thenReturn("alarmed-object");
        Mockito.when(sqlRowSet.getString("reportingobject")).thenReturn("reporting-object");
        Mockito.when(sqlRowSet.getString("equipmentobject")).thenReturn("equipment-object");
        Mockito.when(sqlRowSet.getString("tid")).thenReturn("tid");
        Mockito.when(sqlRowSet.getString("aid")).thenReturn("aid");
        Mockito.when(sqlRowSet.getString("rawmessage")).thenReturn("raw-message");
        Mockito.when(sqlRowSet.getInt("stage")).thenReturn(1);
        Mockito.when(jdbcTemplate.queryForRowSet(ArgumentMatchers.eq(AlarmConstants.CHECK_ALARM_IDENTITY), ArgumentMatchers.any())).thenReturn(sqlRowSet);

        // Act
        int rowsAffected = alarmRepositoryImpl.postAlarmForEachIteration(alarm, "component-id");

        // Assert
        Assertions.assertEquals(0, rowsAffected);
        Assertions.assertEquals(1L, alarm.getSequenceID());
        Assertions.assertTrue(alarm.isResolved());
        Assertions.assertEquals("component-id", alarm.getComponentId());
        Assertions.assertEquals("alarmed-object", alarm.getAlarmedObject());
        Assertions.assertEquals("reporting-object", alarm.getReportingObject());
        Assertions.assertEquals("equipment-object", alarm.getEquipmentObject());
        Assertions.assertEquals("tid", alarm.getTid());
        Assertions.assertEquals("aid", alarm.getAid());
        Assertions.assertEquals("raw-message", alarm.getRawMessage());
        Assertions.assertEquals(1, alarm.getStage());
    }

    // Add more test cases for other scenarios
}