To achieve 100% code coverage for the `DataSourceConfig` class using JUnit 5, you need to create test cases that verify each of the beans being initialized, as well as their configurations. Below is a suggested implementation for the JUnit 5 test class:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import javax.sql.DataSource;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;

@ExtendWith(MockitoExtension.class)
public class DataSourceConfigTest {

    @Mock
    private DataSourceModal dataSourceModal;

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @BeforeEach
    void setUp() {
        when(dataSourceModal.getUsername()).thenReturn("testUser");
        when(dataSourceModal.getPassword()).thenReturn("testPass");
        when(dataSourceModal.getUrl()).thenReturn("jdbc:mysql://localhost:3306/testdb");
        when(dataSourceModal.getDriver()).thenReturn("com.mysql.cj.jdbc.Driver");
    }

    @Test
    void testFalloutDataSource() {
        DataSource dataSource = dataSourceConfig.falloutDataSource();

        assertNotNull(dataSource);
        assertTrue(dataSource instanceof DriverManagerDataSource);
        DriverManagerDataSource driverManagerDataSource = (DriverManagerDataSource) dataSource;

        assertEquals("jdbc:mysql://localhost:3306/testdb", driverManagerDataSource.getUrl());
        assertEquals("testUser", driverManagerDataSource.getUsername());
        assertEquals("testPass", driverManagerDataSource.getPassword());
        assertEquals("com.mysql.cj.jdbc.Driver", driverManagerDataSource.getDriverClassName());
    }

    @Test
    void testEntityManagerFactoryBean() {
        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = 
            dataSourceConfig.entityManagerFactoryBean(null, dataSourceConfig.falloutDataSource());

        assertNotNull(entityManagerFactoryBean);
        assertEquals("fallout-db", entityManagerFactoryBean.getPersistenceUnit());
        assertEquals("com.verizon.vbg.ledger.entity", entityManagerFactoryBean.getPackagesToScan()[0]);
    }

    @Test
    void testFalloutTransactionManager() {
        PlatformTransactionManager transactionManager = dataSourceConfig.falloutTransactionManager(
            dataSourceConfig.entityManagerFactoryBean(null, dataSourceConfig.falloutDataSource()).getObject());

        assertNotNull(transactionManager);
        assertTrue(transactionManager instanceof JpaTransactionManager);
    }
}
```

### Explanation of the Test Cases:

1. **Setup Mock Data**: 
   - The `setUp` method uses Mockito to define the behavior of the `DataSourceModal` mock object.

2. **Test `falloutDataSource`**:
   - This test verifies that the `falloutDataSource` bean is created and checks its properties against the expected values.

3. **Test `entityManagerFactoryBean`**:
   - This test ensures that the `entityManagerFactoryBean` is created properly with the appropriate configuration.

4. **Test `falloutTransactionManager`**:
   - This test checks that the transaction manager is correctly instantiated and is an instance of `JpaTransactionManager`.

### Additional Notes:
- Ensure you have the necessary dependencies for JUnit 5 and Mockito in your build configuration (like Maven or Gradle).
- Depending on your actual setup, you might need to adjust the imports or the package structure.
- These tests assume that the `DataSourceConfig` class does not have any complex dependencies that require additional mocking. If there are, consider mocking those as well.