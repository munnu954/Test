import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

@ExtendWith(MockitoExtension.class)
class PortProcessorTest {

    @Mock
    private ClrComponent clrComponent;

    @Mock
    private List<ClrComponent> clrComponentList;

    @Mock
    private Map<String, List<Node>> clliNodeMap;

    private PortProcessor portProcessor;

    @BeforeEach
    void setUp() {
        portProcessor = PortProcessor.getInstance();
    }

    @Test
    void testProcessPreviousPortOrChannel() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef prevEqtObject = new PortRef();
        prevEqtObject.setPortID("prevPortID");
        prevEqtObject.setClliCode("prevClliCode");
        equipmentComp.setPortRef(List.of(prevEqtObject));
        prevClrComponent.setEquipmentComp(List.of(equipmentComp));
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        PortRef eqtObject = new PortRef();
        eqtObject.setPortID("portID");
        eqtObject.setClliCode("clliCode");
        eqtObject.setNeType("neType");
        EquipmentComp equipmentComp2 = new EquipmentComp();
        equipmentComp2.setPortRef(List.of(eqtObject));
        clrComponent.setEquipmentComp(List.of(equipmentComp2));

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, new AtomicInteger(), "sourceSys");

        Assertions.assertEquals(1, links.size());
        Assertions.assertEquals("prevPortID", links.get(0).getSource());
        Assertions.assertEquals("portID", links.get(0).getTarget());
    }

    @Test
    void testProcessDifferentPortIDs() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef prevEqtObject = new PortRef();
        prevEqtObject.setPortID("prevPortID");
        equipmentComp.setPortRef(List.of(prevEqtObject));
        prevClrComponent.setEquipmentComp(List.of(equipmentComp));
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        PortRef eqtObject = new PortRef();
        eqtObject.setPortID("portID");
        eqtObject.setShelfID("shelfID");
        EquipmentComp equipmentComp2 = new EquipmentComp();
        equipmentComp2.setPortRef(List.of(eqtObject));
        clrComponent.setEquipmentComp(List.of(equipmentComp2));

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, new AtomicInteger(), "sourceSys");

        Assertions.assertEquals(1, links.size());
        Assertions.assertEquals("prevPortID", links.get(0).getSource());
        Assertions.assertEquals("portID", links.get(0).getTarget());
    }

    @Test
    void testProcessNoPreviousConnection() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef prevEqtObject = new PortRef();
        prevEqtObject.setPortID("prevPortID");
        equipmentComp.setPortRef(List.of(prevEqtObject));
        prevClrComponent.setEquipmentComp(List.of(equipmentComp));
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        PortRef eqtObject = new PortRef();
        eqtObject.setPortID("portID");
        EquipmentComp equipmentComp2 = new EquipmentComp();
        equipmentComp2.setPortRef(List.of(eqtObject));
        clrComponent.setEquipmentComp(List.of(equipmentComp2));

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, new AtomicInteger(), "sourceSys");

        Assertions.assertEquals(1, links.size());
        Assertions.assertEquals("undefined", links.get(0).getSource());
        Assertions.assertEquals("portID", links.get(0).getTarget());
    }

    @Test
    void testProcessPreviousCableOrCablePairOrCablePairGroup() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp prevCabObject = new CableComp();
        prevCabObject.setLocationA("siteCode");
        prevClrComponent.setCableComp(List.of(prevCabObject));
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        PortRef eqtObject = new PortRef();
        eqtObject.setSiteCode("siteCode");
        EquipmentComp equipmentComp2 = new EquipmentComp();
        equipmentComp2.setPortRef(List.of(eqtObject));
        clrComponent.setEquipmentComp(List.of(equipmentComp2));

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, new AtomicInteger(), "sourceSys");

        Assertions.assertEquals(2, links.size());
        Assertions.assertEquals("prevNode.getPortId()", links.get(1).getSource());
        Assertions.assertEquals("eqtObject.getPortID()", links.get(1).getTarget());
    }

    @Test
    void testProcessPreviousPath() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PATH);
        Link circuit = new Link();
        links.add(circuit);
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        PortRef eqtObject = new PortRef();
        eqtObject.setPortID("portID");
        eqtObject.setShelfTID("shelfTID");
        EquipmentComp equipmentComp2 = new EquipmentComp();
        equipmentComp2.setPortRef(List.of(eqtObject));
        clrComponent.setEquipmentComp(List.of(equipmentComp2));

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, new AtomicInteger(), "sourceSys");

        Assertions.assertEquals("portID", circuit.getTarget());
        Assertions.assertEquals("shelfTID", circuit.getTarget());
    }

    @Test
    void testProcessDecommissionedNetworkEquipment() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        clrComponentList.add(clrComponent);

        PortRef eqtObject = new PortRef();
        eqtObject.setNeStatus(CommonWrapperConstants.DECOMMISSIONED);
        eqtObject.setNeName("neName");
        EquipmentComp equipmentComp2 = new EquipmentComp();
        equipmentComp2.setPortRef(List.of(eqtObject));
        clrComponent.setEquipmentComp(List.of(equipmentComp2));

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, new AtomicInteger(), "sourceSys");

        Assertions.assertEquals(0, links.size());
    }

    @Test
    void testProcessUnknownNetworkEquipment() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef prevEqtObject = new PortRef();
        prevEqtObject.setPortID("prevPortID");
        equipmentComp.setPortRef(List.of(prevEqtObject));
        prevClrComponent.setEquipmentComp(List.of(equipmentComp));
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        PortRef eqtObject = null;
        EquipmentComp equipmentComp2 = new EquipmentComp();
        equipmentComp2.setPortRef(List.of(eqtObject));
        clrComponent.setEquipmentComp(List.of(equipmentComp2));

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, new AtomicInteger(), "sourceSys");

        Assertions.assertEquals(1, links.size());
        Assertions.assertEquals("prevNode.getPortId()", links.get(0).getSource());
        Assertions.assertEquals("eqtObject.getPortID()", links.get(0).getTarget());
    }
}