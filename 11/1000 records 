import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.core.KafkaTemplate;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

public class CustomDataTransformerClientTest {
    @Mock
    private FlinkApiClient flinkApiClient;
    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;
    @Mock
    private LogFileWriter logFileWriter;

    @Test
    void testJobSubmissionWithErrorAndNotOkStatusCode() {
        // Given
        CustomDataTransformerClient client = new CustomDataTransformerClient(flinkApiClient, kafkaTemplate, logFileWriter);
        String fileName = "<file_name>";
        int noOfRecordsInFile = 10;
        int noOfRecordsProcessed = 0;
        int noOfRecordsFailed = 0;
        String errorMessage = "<error_message>";
        
        // When
        Mockito.when(flinkApiClient.submitJob(fileName)).thenThrow(new RuntimeException(errorMessage));
        Mockito.when(flinkApiClient.getStatusCode()).thenReturn(HttpStatus.NOT_OK);
        client.transformFile(fileName);
        
        // Then
        verify(flinkApiClient, times(1)).submitJob(fileName);
        verify(flinkApiClient, times(1)).getStatusCode();
        verify(kafkaTemplate, times(1)).send(any(String.class), any(String.class));
        verify(logFileWriter, times(0)).writeToFile(any(String.class));
    }

    @Test
    void testPublishingToQueueFails() {
        // Given
        CustomDataTransformerClient client = new CustomDataTransformerClient(flinkApiClient, kafkaTemplate, logFileWriter);
        String fileName = "<file_name>";
        int noOfRecordsInFile = 10;
        int noOfRecordsProcessed = 0;
        int noOfRecordsFailed = 0;
        
        // When
        Mockito.when(flinkApiClient.submitJob(fileName)).thenThrow(new RuntimeException());
        Mockito.when(flinkApiClient.getStatusCode()).thenReturn(HttpStatus.NOT_OK);
        Mockito.when(kafkaTemplate.send(any(String.class), any(String.class))).thenThrow(new RuntimeException());
        client.transformFile(fileName);
        
        // Then
        verify(flinkApiClient, times(1)).submitJob(fileName);
        verify(flinkApiClient, times(1)).getStatusCode();
        verify(kafkaTemplate, times(1)).send(any(String.class), any(String.class));
        verify(logFileWriter, times(1)).writeToFile(any(String.class));
    }

    @Test
    void testInputTopicNotAccessible() {
        // Given
        CustomDataTransformerClient client = new CustomDataTransformerClient(flinkApiClient, kafkaTemplate, logFileWriter);
        String fileName = "<file_name>";
        int noOfRecordsInFile = 10;
        int noOfRecordsProcessed = 0;
        int noOfRecordsFailed = 0;
        
        // When
        Mockito.when(flinkApiClient.submitJob(fileName)).thenReturn(new ResponseEntity<>(HttpStatus.CREATED));
        Mockito.when(flinkApiClient.getStatusCode()).thenReturn(HttpStatus.OK);
        Mockito.when(flinkApiClient.isTopicAccessible("3459-COLLECTION-REQUEST-QUEUE")).thenReturn(false);
        client.transformFile(fileName);
        
        // Then
        verify(flinkApiClient, times(1)).submitJob(fileName);
        verify(flinkApiClient, times(1)).getStatusCode();
        verify(kafkaTemplate, times(1)).send(any(String.class), any(String.class));
        verify(logFileWriter, times(1)).writeToFile(any(String.class));
    }

    @Test
    void testNoJarsOnFlinkCluster() {
        // Given
        CustomDataTransformerClient client = new CustomDataTransformerClient(flinkApiClient, kafkaTemplate, logFileWriter);
        String fileName = "<file_name>";
        int noOfRecordsInFile = 10;
        int noOfRecordsProcessed = 0;
        int noOfRecordsFailed = 0;
        
        // When
        Mockito.when(flinkApiClient.submitJob(fileName)).thenThrow(new RuntimeException());
        Mockito.when(flinkApiClient.getStatusCode()).thenReturn(HttpStatus.NOT_OK);
        Mockito.when(flinkApiClient.getJobsCount()).thenReturn(0);
        client.transformFile(fileName);
        
        // Then
        verify(flinkApiClient, times(1)).submitJob(fileName);
        verify(flinkApiClient, times(1)).getStatusCode();
        verify(kafkaTemplate, times(1)).send(any(String.class), any(String.class));
        verify(logFileWriter, times(1)).writeToFile(any(String.class));
    }

    @Test
    void testNonExistentJarId() {
        // Given
        CustomDataTransformerClient client = new CustomDataTransformerClient(flinkApiClient, kafkaTemplate, logFileWriter);
        String fileName = "<file_name>";
        int noOfRecordsInFile = 10;
        int noOfRecordsProcessed = 0;
        int noOfRecordsFailed = 0;
        
        // When
        Mockito.when(flinkApiClient.submitJob(fileName)).thenThrow(new RuntimeException());
        Mockito.when(flinkApiClient.getStatusCode()).thenReturn(HttpStatus.NOT_OK);
        Mockito.when(flinkApiClient.getJobsCount()).thenReturn(1);
        Mockito.when(flinkApiClient.isJarIdValid(any(String.class))).thenReturn(false);
        client.transformFile(fileName);
        
        // Then
        verify(flinkApiClient, times(1)).submitJob(fileName);
        verify(flinkApiClient, times(1)).getStatusCode();
        verify(kafkaTemplate, times(1)).send(any(String.class), any(String.class));
        verify(logFileWriter, times(1)).writeToFile(any(String.class));
    }
}