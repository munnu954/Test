The error `java.lang.StringIndexOutOfBoundsException: begin 0, end 200, length 194` indicates that the substring operation is attempting to access a range beyond the actual length of the string. To fix this, you need to ensure that the substring operation only takes place if the string length is indeed greater than 200 characters.

Here's the corrected test code to handle this exception:

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

import java.util.concurrent.CompletableFuture;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.support.SendResult;
import org.springframework.kafka.core.KafkaTemplate;

@ExtendWith(MockitoExtension.class)
public class BatchLoaderUtilsTest {

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @InjectMocks
    private BatchLoaderUtils batchLoaderUtils;

    private ProducerRecord<String, String> producerRecord;
    private String transactionId;
    private String payload;
    private String producerTopic;
    private String insightName;
    private char sensitivityCheckDone;
    private String errorCategory;

    @BeforeEach
    void setUp() {
        producerRecord = new ProducerRecord<>("topic", "key", "value");
        transactionId = "txnId";
        payload = "payload";
        producerTopic = "producerTopic";
        insightName = "insightName";
        sensitivityCheckDone = 'Y';
        errorCategory = "errorCategory";
    }

    @Test
    void testSendMessageAsync_withShortErrorMessage() {
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.completeExceptionally(new RuntimeException("Short error message"));

        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        batchLoaderUtils.sendMessageAsync(producerRecord, transactionId, payload, producerTopic, insightName, sensitivityCheckDone, errorCategory);

        verify(failedMessageService, times(1)).saveFailedRecords(eq(producerTopic), eq(transactionId), eq(payload), eq(insightName), eq(sensitivityCheckDone), eq(errorCategory), eq("Short error message"));
    }

    @Test
    void testSendMessageAsync_withLongErrorMessage() {
        String longErrorMessage = "This is a very long error message that exceeds two hundred characters. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";
        String expectedErrorMessage = longErrorMessage.length() > 200 ? longErrorMessage.substring(0, 200) : longErrorMessage;

        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.completeExceptionally(new RuntimeException(longErrorMessage));

        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        batchLoaderUtils.sendMessageAsync(producerRecord, transactionId, payload, producerTopic, insightName, sensitivityCheckDone, errorCategory);

        verify(failedMessageService, times(1)).saveFailedRecords(eq(producerTopic), eq(transactionId), eq(payload), eq(insightName), eq(sensitivityCheckDone), eq(errorCategory), eq(expectedErrorMessage));
    }
}
```

### Changes Made:

- **Handling Substring Logic in Test Case**:
  - In `testSendMessageAsync_withLongErrorMessage`, the substring operation is now conditional on the length of the error message being greater than 200 characters. This prevents the `StringIndexOutOfBoundsException`.

This adjustment ensures that the test cases handle both short and long error messages correctly without encountering an out-of-bounds exception.