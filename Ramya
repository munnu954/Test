import java.util.List;
import java.util.UUID;
import java.time.LocalDateTime;
import java.util.Collections;

public class AuditMessageGenerator {

    public static UnifiedAuditMessage generateAuditMessage(String path, boolean transformationSuccessful) {
        UnifiedAuditMessage auditMessage = new UnifiedAuditMessage();
        auditMessage.setProcessType(ProcessType.TRANSFORMER);
        auditMessage.setInputFilePath(path);
        auditMessage.setUr("sampleUR");
        auditMessage.setPort(8080);
        auditMessage.setOutputFilePath("/output/sample.txt");
        auditMessage.setDelimiters(",");
        auditMessage.setFileType("CSV");
        auditMessage.setCollectorId(UUID.randomUUID());
        auditMessage.setDateReceived(LocalDateTime.now());
        auditMessage.setDateProcessed(LocalDateTime.now());
        auditMessage.setJobId(UUID.randomUUID());
        auditMessage.setJarId(UUID.randomUUID());
        auditMessage.setNumOfRecords(100);
        auditMessage.setNumOfRecordsProcessed(90); // Replace this with your actual value
        auditMessage.setNumOfRecordsFailed(10); // Replace this with your actual value

        // For a successful transformation job
        if (transformationSuccessful) {
            auditMessage.setJobStatus(JobStatus.FLINK_JOB_SUCCESSFUL);
        } else {
            auditMessage.setJobStatus(JobStatus.FLINK_JOB_FAILED);
        }

        return auditMessage;
    }

    public static void handleException(UnifiedAuditMessage auditMessage, Exception e) {
        auditMessage.setJobStatus(JobStatus.FLINK_JOB_FAILED);
        List<String> exceptionList = Collections.singletonList(e.getMessage());
        auditMessage.setExceptions(exceptionList);
    }
}
