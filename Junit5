Certainly! Below are additional JUnit 5 test cases aimed at achieving 100% code coverage for the `MtnInsightsValidator` class, particularly focusing on other methods like `validateIterator` and various scenarios for both `MtnInsightsRequest` and `MtnInsightsSearchRequest`.

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    public void setup() {
        validator = new MtnInsightsValidator();
    }

    // Testing validate for MtnInsightsRequest
    @Test
    public void testValidate_InsertMtnInsights_Success() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        request.setKeyAttributes(createValidMtnInsightsAttributes());

        assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidate_InvalidRequestType_ThrowsException() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.OTHER);

        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidate_MissingKeyAttributes_ThrowsException() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        
        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidate_InvalidListKeyAttributes_ThrowsException() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        request.setListKeyAttributes(new MtnInsightsAttributes[]{createInvalidMtnInsightsAttributes()});

        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    // Testing validate for MtnInsightsSearchRequest
    @Test
    public void testValidate_MtnInsightsSearchRequest_Success() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        request.setServiceRequest(createValidMtnInsightsSearchParam());

        assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidate_MtnInsightsSearchRequest_MissingFields_ThrowsException() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setEcpdId(null); // Missing field

        request.setServiceRequest(searchParam);

        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    // Testing validateIterator
    @Test
    public void testValidateIterator_Success() {
        MtnInsightsAttributes attributes = createValidMtnInsightsAttributes();
        assertDoesNotThrow(() -> validator.validateIterator(null, attributes, "Test Log"));
    }

    @Test
    public void testValidateIterator_MissingMtnInsightNameAndCategory_ThrowsException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("123");
        attributes.setMtn(null); // Null MTN
        attributes.setInsightName(null); // Null Insight Name
        attributes.setInsightCategory(null); // Null Insight Category

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "Test Log"));
    }

    @Test
    public void testValidateIterator_NetworkOutageMandatoryFields_ThrowsException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));
        attributes.setMtn(null); // Missing MTN
        attributes.setOutageId(null); // Missing Outage ID
        attributes.setEcpdId(null); // Missing ECPD ID

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "Test Log"));
    }

    // Helper methods to create valid instances for testing
    private MtnInsightsAttributes createValidMtnInsightsAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("123");
        attributes.setMtn("456");
        attributes.setInsightCategory("ValidCategory");
        attributes.setInsightName("ValidName");
        attributes.setOutageId("789");
        return attributes;
    }

    private MtnInsightsAttributes createInvalidMtnInsightsAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId(null);
        attributes.setMtn(null);
        attributes.setInsightCategory(null);
        attributes.setInsightName(null);
        attributes.setOutageId(null);
        return attributes;
    }

    private MtnInsightsSearchParam createValidMtnInsightsSearchParam() {
        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setEcpdId("123");
        searchParam.setMtn("456");
        searchParam.setInsightCategory(new String[]{"Category"});
        searchParam.setInsightName(new String[]{"Name"});
        return searchParam;
    }
}
```

### Explanation of Additional Tests:

1. **Testing `validate(MtnInsightsRequest request)`**:
   - **Invalid List Key Attributes**: Added a test to check if the validation throws an exception when the `listKeyAttributes` contains invalid data.

2. **Testing `validateIterator`**:
   - **Success Case**: Valid attributes should not throw any exceptions.
   - **Missing MTN, Insight Name, and Category**: When these fields are null, the method should throw an `InvalidRequestException`.
   - **Network Outage Mandatory Fields**: Added a case where the required fields for network outage insights are missing. This should also trigger an exception.

3. **Helper Methods**: Updated the helper methods to include a method for creating invalid `MtnInsightsAttributes`.

These additional test cases are designed to cover various branches and edge cases in the `MtnInsightsValidator` class, ensuring comprehensive testing and achieving 100% code coverage.