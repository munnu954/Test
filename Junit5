import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.apache.flink.util.Collector;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;

@ExtendWith(MockitoExtension.class)
public class CsvtoJsonConversionTests {

    @InjectMocks
    private CsvtoJsonConversion csvtoJsonConversion;

    @Mock
    private Collector<String> collector;

    private String gigamonCSVHeaders = "TimeStamp,Node Name,Connection Alias,Entity ID,Monitoring Domain,Vseries ID,TX Bytes,RX Bytes,TX Packets,RX Packets,TX Errors,RX Errors,TX Drops, RX Drops";

    private String validGigamonRecord = "2023-11-21 14:14:51,node-1,connection-1,entity-1,monitoring-domain-1,vseries-1,100,200,300,400,5,6,7,8";

    @Test
    public void givenValidGigamonCSV_whenConvertedToJSON_thenReturnValidJSONObject() throws Exception {
        CsvtoJsonConversion csvtoJsonConversion = new CsvtoJsonConversion();
        csvtoJsonConversion.flatMap(validGigamonRecord, collector);
        verify(collector, times(1)).collect("{\"key1\":\"2023-11-21 14:14:51\",\"key2\":\"node-1\",\"key3\":\"connection-1\",\"key4\":\"entity-1\",\"key5\":\"monitoring-domain-1\",\"key6\":\"vseries-1\",\"key7\":\"100\",\"key8\":\"200\",\"key9\":\"300\",\"key10\":\"400\",\"key11\":\"5\",\"key12\":\"6\",\"key13\":\"7\",\"key14\":\"8\"}");
    }

    @Test
    public void givenInvalidGigamonCSV_whenConvertedToJSON_thenReturnEmptyJSON() throws Exception {
        CsvtoJsonConversion csvtoJsonConversion = new CsvtoJsonConversion();
        csvtoJsonConversion.flatMap("Invalid CSV Record", collector);
        verify(collector, times(1)).collect("{}"); // Empty JSON object
    }
}