To achieve full coverage for the conditional statement within the `CableProcessor` class, specifically the statement:

```java
if (null != prevClrComponent.getEquipmentComp() && !prevClrComponent.getEquipmentComp().isEmpty() && null != prevClrComponent.getEquipmentComp().get(0).getPortRef() && !prevClrComponent.getEquipmentComp().get(0).getPortRef().isEmpty()) {
    // Your logic here
}
```

We need to write test cases that cover all possible branches of this condition. Hereâ€™s how you can structure these tests:

### Test Cases

1. **Test when all conditions are true**: The `getEquipmentComp()` returns a non-null, non-empty list, and the first `EquipmentComp` object contains a non-null, non-empty `PortRef` list.

2. **Test when `getEquipmentComp()` is null**: The list is null.

3. **Test when `getEquipmentComp()` is empty**: The list is empty.

4. **Test when the first `EquipmentComp` has a null `PortRef`**: The `PortRef` list is null.

5. **Test when the first `EquipmentComp` has an empty `PortRef`**: The `PortRef` list is empty.

Here is the JUnit 5 test code:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;

class CableProcessorTest {

    private CableProcessor cableProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        cableProcessor = CableProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "testSource";
    }

    @Test
    void testProcessWithNonEmptyEquipmentAndPortRef() {
        ClrComponent prevClrComponent = new ClrComponent();
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("Port1");
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        prevClrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));

        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setLocationA("LocationA");
        clrComponent.setCableComp(Collections.singletonList(cableComp));
        clrComponentList.add(clrComponent);

        Link prevLink = new Link();
        links.add(prevLink);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Check if links are processed correctly
        assertEquals("Port1", links.get(0).getSource());
    }

    @Test
    void testProcessWithNullEquipmentComp() {
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setEquipmentComp(null);

        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setLocationA("LocationA");
        clrComponent.setCableComp(Collections.singletonList(cableComp));
        clrComponentList.add(clrComponent);

        Link prevLink = new Link();
        links.add(prevLink);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Ensure process handles null gracefully
        assertEquals("--", links.get(0).getSource());
    }

    @Test
    void testProcessWithEmptyEquipmentComp() {
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setEquipmentComp(Collections.emptyList());

        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setLocationA("LocationA");
        clrComponent.setCableComp(Collections.singletonList(cableComp));
        clrComponentList.add(clrComponent);

        Link prevLink = new Link();
        links.add(prevLink);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Ensure process handles empty list gracefully
        assertEquals("--", links.get(0).getSource());
    }

    @Test
    void testProcessWithNullPortRef() {
        ClrComponent prevClrComponent = new ClrComponent();
        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(null);
        prevClrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));

        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setLocationA("LocationA");
        clrComponent.setCableComp(Collections.singletonList(cableComp));
        clrComponentList.add(clrComponent);

        Link prevLink = new Link();
        links.add(prevLink);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Ensure process handles null PortRef gracefully
        assertEquals("--", links.get(0).getSource());
    }

    @Test
    void testProcessWithEmptyPortRef() {
        ClrComponent prevClrComponent = new ClrComponent();
        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(Collections.emptyList());
        prevClrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));

        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setLocationA("LocationA");
        clrComponent.setCableComp(Collections.singletonList(cableComp));
        clrComponentList.add(clrComponent);

        Link prevLink = new Link();
        links.add(prevLink);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Ensure process handles empty PortRef list gracefully
        assertEquals("--", links.get(0).getSource());
    }
