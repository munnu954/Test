To achieve 100% code coverage for the specified section of the `TrailProcessor` class, we need to create JUnit 5 test cases that cover all possible scenarios within the conditional statement. Let's break down the logic and write test cases to ensure each branch is tested.

Below is an example of how you can structure your JUnit 5 test class for the `TrailProcessor` class:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class TrailProcessorTest {

    @Mock
    private CircuitDetailsProvider circuitDetailsProvider;

    @InjectMocks
    private TrailProcessor trailProcessor;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        trailProcessor = TrailProcessor.getInstance(circuitDetailsProvider);
    }

    @Test
    public void testProcess_TargetNotFoundAndIgtZero_WithLink() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);

        Node node = new Node();
        node.setPortId("nodePortId");
        node.setAttributes(Collections.singletonList(new Attribute("tid", "nodeTid")));
        nodes.add(node);

        Link prevLink = new Link();
        prevLink.setTarget("prevTarget");
        links.add(prevLink);

        PortRef aEqtObject = new PortRef();
        aEqtObject.setPortID("aEqtPortID");
        aEqtObject.setShelfID("shelfID");
        aEqtObject.setSiteCode("siteCode");

        PortRef zEqtObject = new PortRef();
        zEqtObject.setPortID("zEqtPortID");
        zEqtObject.setShelfID("shelfID");
        zEqtObject.setSiteCode("siteCode");

        trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        assertEquals(2, links.size());
        assertEquals("prevTarget", links.get(1).getSource());
        assertEquals("aEqtPortID", links.get(1).getTarget());
        assertEquals("nodeTid", getAttributeValue(links.get(1).getAttributes(), "tid0"));
    }

    @Test
    public void testProcess_TargetNotFoundAndIgtZero_WithoutLink() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);

        Node node = new Node();
        node.setPortId("nodePortId");
        node.setAttributes(Collections.singletonList(new Attribute("tid", "nodeTid")));
        nodes.add(node);

        PortRef aEqtObject = new PortRef();
        aEqtObject.setPortID("aEqtPortID");
        aEqtObject.setShelfID("shelfID");
        aEqtObject.setSiteCode("siteCode");

        PortRef zEqtObject = new PortRef();
        zEqtObject.setPortID("zEqtPortID");
        zEqtObject.setShelfID("shelfID");
        zEqtObject.setSiteCode("siteCode");

        trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        assertEquals(1, links.size());
        assertEquals("nodePortId", links.get(0).getSource());
        assertEquals("aEqtPortID", links.get(0).getTarget());
        assertEquals("nodeTid", getAttributeValue(links.get(0).getAttributes(), "tid0"));
    }

    private String getAttributeValue(List<Attribute> attributes, String name) {
        return attributes.stream()
                .filter(attr -> name.equals(attr.getName()))
                .map(Attribute::getValue)
                .findFirst()
                .orElse(null);
    }
}
```

### Explanation:

1. **Setup and Initialization**: 
   - We initialize the `TrailProcessor` instance using Mockito to mock dependencies.

2. **Test Cases**:
   - **`testProcess_TargetNotFoundAndIgtZero_WithLink`**: This test verifies the scenario where `links.size() > 0`. It checks the creation of a new `Link` with the correct `source` and `target`.
   
   - **`testProcess_TargetNotFoundAndIgtZero_WithoutLink`**: This test verifies the scenario where `links.size() == 0`. It checks the creation of a new `Link` starting from the last node's port ID.

3. **Assertions**:
   - We assert the size of the links, the source, and target of the new link, and the attributes added to it.

This setup ensures that all possible branches within the specified conditional block are covered, providing full code coverage for that section.