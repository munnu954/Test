import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TransactionLoggerServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private HttpHeaders headers;

    @InjectMocks
    private TransactionLoggerService transactionLoggerService;

    @Test
    void testSendLoggerMessage() throws Exception {
        String rulename = "Test Rule";
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "Test Identity");

        ObjectNode logMsg = mock(ObjectNode.class);
        when(transactionLoggerService.sendLoggerMessage(rulename, alarmMap)).thenReturn(mock(ResponseEntity.class));

        verify(transactionLoggerService, times(1)).sendLoggerMessage(rulename, alarmMap);
    }

    @Test
    void testSendLoggerMessageWithHttpClientErrorException() {
        String rulename = "Test Rule";
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "Test Identity");

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenThrow(HttpClientErrorException.class);

        transactionLoggerService.sendLoggerMessage(rulename, alarmMap);

        // Add assertions for the expected behavior when HttpClientErrorException is thrown
    }

    @Test
    void testSendLoggerMessageWithHttpServerErrorException() {
        String rulename = "Test Rule";
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "Test Identity");

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenThrow(HttpServerErrorException.class);

        transactionLoggerService.sendLoggerMessage(rulename, alarmMap);

        // Add assertions for the expected behavior when HttpServerErrorException is thrown
    }

}
