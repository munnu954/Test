Certainly! To update the `CoconutServiceVersion3` class to dynamically build the `finalQuery` based on the presence of `locationCLLI` and `siteName` in the `queryParams`, you can follow the steps below. The idea is to conditionally append the `WHERE` clause parts only if the corresponding parameters are present.

Here is the updated `CoconutServiceVersion3` class with the required changes:

```java
@Service
public class CoconutServiceVersion3 {

    @Autowired
    CoconutDeviceDao coconutDeviceDao;

    @Autowired
    EuipmentListCoconutDeviceDao euipmentListCoconutDeviceDao;

    @Autowired
    EquipmentListCoconutDeviceV3Dao equipmentListCoconutDeviceV3Dao;

    private CoconutDeviceMSConstants coconutDeviceMSConstants;

    private static Logger logger = LoggerFactory.getLogger(CoconutServiceVersion3.class);

    // Newly created for v3api
    public UTSEquipmentList getCOCONUTEquipListV3(EquipmentInputRequest request, UTSEquipmentList utsEquipmentList) 
            throws InternalServerErrorException, NoDataFoundException, InterruptedException, ExecutionException, DaoException {
        try {
            String qry = null;
            String fullQuery = null;
            Map<String, Object> criteria = request.getRequestParameters();
            qry = queryBasedOnParameter(criteria);
            fullQuery = "select COUNT(*) from (" + qry + ")";

            Integer skip = 0;
            Integer limit = 10;
            if (criteria.containsKey("pageNo")) {
                if (criteria.get("pageNo").equals("1")) {
                    skip = 0;
                } else {
                    skip = (Integer.parseInt(criteria.get("pageNo").toString()) * Integer.parseInt(criteria.get("size").toString()));
                    skip = skip - Integer.parseInt(criteria.get("size").toString());
                }
            } else {
                skip = 0;
            }
            if (criteria.containsKey("size")) {
                limit = skip + Integer.parseInt(criteria.get("size").toString());
            } else {
                limit = 10;
            }
            qry = "select * from (select t.*, rownum as rn from (" + qry;
            qry = qry.concat(" ) t ) WHERE rn BETWEEN " + skip + " and " + limit + " ");
            if (criteria.containsKey("sortByField")) {
                qry = qry.concat(" order by " + criteria.get("sortByField") + " ");
            }
            if (criteria.containsKey("sortDirection")) {
                qry = qry.concat(" " + criteria.get("sortDirection") + " ");
            }
            UTSEquipmentList response = new UTSEquipmentList();
            response = equipmentListCoconutDeviceV3Dao.getEquipListDaoV3(criteria, qry, fullQuery, utsEquipmentList, request);
            return response;
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            throw new InternalServerErrorException(ex.getMessage());
        }
    }

    private String queryBasedOnParameter(Map<String, Object> queryParams) {
        String query = "";
        StringJoiner finalQuery = new StringJoiner(" ");

        if ("LOCATION".equalsIgnoreCase((String) queryParams.get("outputControl"))) {
            finalQuery.add(coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);

            if (queryParams.containsKey("locationCLLI")) {
                String locationCLLI = (String) queryParams.get("locationCLLI");
                finalQuery.add("AND (site.clli_code = lower(:locationCLLI) OR site.clli_code = upper(:locationCLLI))");
            }

            if (queryParams.containsKey("siteName")) {
                String siteName = (String) queryParams.get("siteName");
                finalQuery.add("AND site.site_name = :siteName");
            }
        }

        return finalQuery.toString();
    }
}
```

### Explanation:

1. **Autowiring Dependencies and Declaring Logger**: 
   - No changes made here.

2. **getCOCONUTEquipListV3 Method**:
   - No significant changes here except for the usage of the updated `queryBasedOnParameter` method.
   - The `qry` is now derived from the updated `queryBasedOnParameter` method.

3. **queryBasedOnParameter Method**:
   - Construct the base query using `coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY`.
   - Conditionally append the `WHERE` clause parts based on the presence of `locationCLLI` and `siteName` in the `queryParams`.
   - This ensures that the `finalQuery` can handle cases where either or both of `locationCLLI` and `siteName` are provided or not provided.

This approach ensures that the query is dynamically built based on the input parameters, fulfilling the requirements you've specified.