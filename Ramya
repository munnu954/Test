import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.util.Collector;
import org.json.JSONObject;

public class CsvtoJsonConversion implements FlatMapFunction<String, String> {

    private JSONObject currentObject;
    private String currentObjectName;
    private Collector<String> collector;

    @Override
    public void flatMap(String input, Collector<String> collector) throws Exception {
        this.collector = collector;
        String[] arr = input.split(",");

        if (arr.length > 2 && arr[2] != null && !arr[2].isEmpty()) {
            // New main object
            handleNewObject(arr);
        } else if (currentObjectName != null) {
            processObjectDetails(arr);
        }
    }

    private void handleNewObject(String[] arr) {
        if (currentObject != null) {
            // Save the completed object
            collector.collect(currentObject.toString());
        }

        // Start a new JSON object
        currentObjectName = arr[2].trim();
        currentObject = new JSONObject();
        currentObject.put("ObjectName", currentObjectName);
    }

    private void processObjectDetails(String[] arr) {
        // Dynamic handling of columns and values
        for (int i = 0; i < arr.length; i++) {
            if (i + 1 < arr.length && arr[i] != null && arr[i + 1] != null && !arr[i].isEmpty()) {
                // Odd index contains column names, even index contains values
                String columnName = arr[i].trim();
                String value = arr[i + 1].trim();
                if (columnName.equalsIgnoreCase("Begin date") ||
                        columnName.equalsIgnoreCase("End date") ||
                        columnName.equalsIgnoreCase("Ticket number")) {
                    // Handle special cases for Begin date, End date, Ticket number
                    currentObject.put(columnName, value);
                } else {
                    // Handle sub-objects dynamically
                    handleSubObject(columnName, value);
                }
            }
        }
    }

    private void handleSubObject(String columnName, String value) {
        // Assuming sub-objects are separated by spaces
        String[] subObjectKeys = columnName.split("\\s+");
        JSONObject subObject = currentObject;
        for (String key : subObjectKeys) {
            if (!subObject.has(key)) {
                subObject.put(key, new JSONObject());
            }
            subObject = subObject.getJSONObject(key);
        }
        subObject.put("Min", value);
    }

    @Override
    public void close() {
        if (currentObject != null) {
            // Save the completed object
            collector.collect(currentObject.toString());
        }
    }
}
