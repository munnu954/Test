To achieve 100% code coverage for the specified conditional statement in the `CableProcessor` class, we need to create test cases to cover all possible branches of the condition:

- The condition evaluates to `true`.
- The condition evaluates to `false` due to various reasons (e.g., null `EquipmentComp`, empty `EquipmentComp`, null `PortRef`, or empty `PortRef`).

Here's how you can write JUnit 5 test cases for these scenarios:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class CableProcessorTest {

    private CableProcessor cableProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    public void setup() {
        cableProcessor = CableProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "TestSource";

        // Setup a mock link and node to avoid nulls
        Node mockNode = new Node();
        mockNode.setShelfId("Shelf1");
        mockNode.setPortId("Port1");
        nodes.add(mockNode);

        Link mockLink = new Link();
        mockLink.setTarget("Port1");
        links.add(mockLink);
    }

    @Test
    public void testProcessWithEquipmentCompAndPortRef() {
        // Setup a previous ClrComponent with valid EquipmentComp and PortRef
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);

        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("Port2");
        equipmentComp.getPortRef().add(portRef);
        prevClrComponent.getEquipmentComp().add(equipmentComp);
        clrComponentList.add(prevClrComponent);

        // Setup the current ClrComponent
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setElementId("Shelf1");
        CablePairDetail pairDetail = new CablePairDetail();
        pairDetail.setStrandNumber("Strand1");
        cableComp.getCablePairDetails().add(pairDetail);
        clrComponent.getCableComp().add(cableComp);

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Validate the results
        assertEquals(2, links.size(), "There should be two links after processing with valid EquipmentComp and PortRef");
    }

    @Test
    public void testProcessWithoutEquipmentComp() {
        // Setup a previous ClrComponent without EquipmentComp
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        clrComponentList.add(prevClrComponent);

        // Setup the current ClrComponent
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setElementId("Shelf1");
        CablePairDetail pairDetail = new CablePairDetail();
        pairDetail.setStrandNumber("Strand1");
        cableComp.getCablePairDetails().add(pairDetail);
        clrComponent.getCableComp().add(cableComp);

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Validate no additional link is created
        assertEquals(1, links.size(), "There should be one link since EquipmentComp is missing");
    }

    @Test
    public void testProcessWithEmptyEquipmentComp() {
        // Setup a previous ClrComponent with empty EquipmentComp
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        prevClrComponent.setEquipmentComp(new ArrayList<>()); // Empty list
        clrComponentList.add(prevClrComponent);

        // Setup the current ClrComponent
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setElementId("Shelf1");
        CablePairDetail pairDetail = new CablePairDetail();
        pairDetail.setStrandNumber("Strand1");
        cableComp.getCablePairDetails().add(pairDetail);
        clrComponent.getCableComp().add(cableComp);

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Validate no additional link is created
        assertEquals(1, links.size(), "There should be one link since EquipmentComp is empty");
    }

    @Test
    public void testProcessWithEquipmentCompButNoPortRef() {
        // Setup a previous ClrComponent with EquipmentComp but no PortRef
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);

        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(new ArrayList<>()); // Empty PortRef
        prevClrComponent.getEquipmentComp().add(equipmentComp);
        clrComponentList.add(prevClrComponent);

        // Setup the current ClrComponent
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setElementId("Shelf1");
        CablePairDetail pairDetail = new CablePairDetail();
        pairDetail.setStrandNumber("Strand1");
        cableComp.getCablePairDetails().add(pairDetail);
        clrComponent.getCableComp().add(cableComp);

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Validate no additional link is created
        assertEquals(1, links.size(), "There should be one link since PortRef is empty");
    }
}
```

### Explanation

- **`testProcessWithEquipmentCompAndPortRef()`**: This test sets up a scenario where all conditions evaluate to `true`. It ensures that the processing logic correctly identifies valid equipment and port references, leading to an expected increase in the number of links.

- **`testProcessWithoutEquipmentComp()`**: This test covers the scenario where the `EquipmentComp` is completely missing from `prevClrComponent`. It ensures that no additional processing occurs without equipment details.

- **`testProcessWithEmptyEquipmentComp()`**: This test ensures that an empty `EquipmentComp` list results in no additional link being created, covering the branch where the list is present but empty.

- **`testProcessWithEquipmentCompButNoPortRef()`**: This test checks the condition where the `EquipmentComp` exists but contains no `PortRef`, ensuring the logic handles this gracefully without processing further.

These tests together ensure that all branches of the specified condition are covered, achieving full code coverage.