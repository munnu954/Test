@Test
public void testInitialize_Success() {
    // Arrange
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("123456");
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setUsername("username");
    spaceCollector.setPassword("password");
    spaceCollector.setSshPublicKey("sshPublicKey");
    spaceCollector.setSshPrivateKey("sshPrivateKey");
    spaceCollector.setConnectionType("ssh");
    spaceCollector.setEnabled(true);
    spaceCollector.setInputFilePath("inputFilePath");
    spaceCollector.setOutputFilePath("outputFilePath");
    spaceCollector.setPollingDuration(60);

    // Act
    when(collectorApiReader.initialize(spaceCollector)).thenReturn(true);

    // Assert
    assertDoesNotThrow(() -> collectorInitializerService.initialize(spaceCollector));



CollectorApiReader.java:-

@Component
public class CollectorApiReader {

private static final Logger LOGGER = LoggerFactory.getLogger(CollectorApiReader.class);

public boolean initialize(SpaceCollector spaceCollector)  
    try {
        LOGGER.info("Initialized Api Reader ", spaceCollector); 
        return true;
     catch (Exception e) {
        LOGGER.error("Error initializing Api Reader ", e.getMessage());
        return false;
    }


}

CollectorInitializerService.java:-

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class CollectorInitializerService {

    private final CollectorApiReader collectorApiReader;
    private final Validator validator;

    @Autowired
    public CollectorInitializerService(CollectorApiReader collectorApiReader, Validator validator) {
        this.collectorApiReader = collectorApiReader;
        this.validator = validator;
    }

    @KafkaListener(topics = "spring.kafka.producer.topic-name", groupId = "spring.kafka.consumer.group-id")
    public void consume(SpaceCollector spaceCollector) {
        LOGGER.info("Received SpaceCollector data: ", spaceCollector);
        boolean initialized = collectorApiReader.initialize(spaceCollector);
        if(initialized) {
            LOGGER.info("SpaceCollector initialized successfully");
         else {
            LOGGER.error("Failed to initialize SpaceCollector");
        }
    }


public void initialize (SpaceCollector data) {
LOGGER.info("Initializing collector for topic "); 
validator.validate(data);
collectorApiReader.initialize(data);
.