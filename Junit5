To achieve 100% code coverage for the `DataSourceConfig` class using JUnit 5 and Mockito, you'll need to mock the dependencies and verify that your configuration methods work as expected without actually connecting to a real database. Here's how you can write the test class:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.JpaTransactionManager;
import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import com.verizon.vbg.ledger.config.DataSourceConfig;
import com.verizon.vbg.ledger.modal.DataSourceModal;

public class DataSourceConfigTest {

    @Mock
    private DataSourceModal dataSourceModal;

    @Mock
    private EntityManagerFactoryBuilder builder;

    @Mock
    private EntityManagerFactory entityManagerFactory;

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        // Setting up mock DataSourceModal
        when(dataSourceModal.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        when(dataSourceModal.getUsername()).thenReturn("testuser");
        when(dataSourceModal.getPassword()).thenReturn("testpass");
        when(dataSourceModal.getDriver()).thenReturn("org.h2.Driver");
    }

    @Test
    public void testFalloutDataSource() {
        DataSource dataSource = dataSourceConfig.falloutDataSource();
        assertNotNull(dataSource);

        // Verify DataSource properties (assuming DriverManagerDataSource is used)
        org.springframework.jdbc.datasource.DriverManagerDataSource ds =
                (org.springframework.jdbc.datasource.DriverManagerDataSource) dataSource;
        assertEquals("jdbc:h2:mem:testdb", ds.getUrl());
        assertEquals("testuser", ds.getUsername());
        assertEquals("testpass", ds.getPassword());
        assertEquals("org.h2.Driver", ds.getDriverClassName());
    }

    @Test
    public void testEntityManagerFactoryBean() {
        // Mock the EntityManagerFactoryBuilder behavior
        LocalContainerEntityManagerFactoryBean expectedFactoryBean =
                new LocalContainerEntityManagerFactoryBean();
        when(builder.dataSource(any(DataSource.class)))
                .thenReturn(builder);
        when(builder.packages("com.verizon.vbg.ledger.entity"))
                .thenReturn(builder);
        when(builder.persistenceUnit("fallout-db"))
                .thenReturn(builder);
        when(builder.build())
                .thenReturn(expectedFactoryBean);

        LocalContainerEntityManagerFactoryBean factoryBean =
                dataSourceConfig.entityManagerFactoryBean(builder, dataSourceConfig.falloutDataSource());
        assertNotNull(factoryBean);
        assertEquals(expectedFactoryBean, factoryBean);
    }

    @Test
    public void testFalloutTransactionManager() {
        JpaTransactionManager transactionManager =
                dataSourceConfig.falloutTransactionManager(entityManagerFactory);
        assertNotNull(transactionManager);
        assertEquals(entityManagerFactory, transactionManager.getEntityManagerFactory());
    }
}
```

### Key Points:
- **Mockito** is used to mock the `DataSourceModal` and `EntityManagerFactoryBuilder` dependencies.
- Each test method verifies the behavior of the corresponding method in the `DataSourceConfig` class.
- The `@BeforeEach` method sets up the mock objects with expected values.
- We assert the properties of the `DataSource` and verify the configurations for `EntityManagerFactoryBean` and `TransactionManager`.

This test class should provide full coverage for the `DataSourceConfig` class without needing a real database connection.