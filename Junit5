@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService iVAPPDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    @Test
    public void testGetDeviceDetailsv3_Success() throws NoDataFoundException {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());
        UTSEquipmentList expectedUtsEquipmentList = new UTSEquipmentList();
        expectedUtsEquipmentList.setEquipmentLst(new EquipmentLst());

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn("http://example.com");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(any(), any(), any(), eq(UTSEquipmentList.class))).thenReturn(ResponseEntity.ok(expectedUtsEquipmentList));
        when(iVAPPDeviceUtil.covertV3Format(any())).thenReturn(expectedUtsEquipmentList);

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, new UTSEquipmentList());

        // Assert
        assertSame(expectedUtsEquipmentList, result);
    }

    @Test
    public void testGetDeviceDetailsv3_HttpServerErrorException() throws NoDataFoundException {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn("http://example.com");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(any(), any(), any(), eq(UTSEquipmentList.class))).thenThrow(HttpServerErrorException.class);

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);

        // Assert
        assertSame(utsEquipmentList, result);
        verify(iVAPPDeviceService.LOGGER, times(1)).info(contains("Internal Server Exception happened"));
    }

    @Test
    public void testGetDeviceDetailsv3_OtherException() throws NoDataFoundException {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn("http://example.com");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(any(), any(), any(), eq(UTSEquipmentList.class))).thenThrow(RuntimeException.class);

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);

        // Assert
        assertSame(utsEquipmentList, result);
        verify(iVAPPDeviceService.LOGGER, times(1)).info(contains("Exception happened"));
    }

    @Test(expected = NoDataFoundException.class)
    public void testGetDeviceDetailsv3_NoDataFound() throws NoDataFoundException {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn("http://example.com");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(any(), any(), any(), eq(UTSEquipmentList.class))).thenReturn(ResponseEntity.ok(null));
        when(iVAPPDeviceUtil.covertV3Format(any())).thenThrow(NoDataFoundException.class);

        // Act
        iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
    }
}