import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Collections;
import java.util.concurrent.ExecutionException;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@SpringBootTest
public class KafkaTopicUtilTest {

    @InjectMocks
    private KafkaTopicUtil kafkaTopicUtil;

    @Mock
    private AdminClient adminClient;

    @Mock
    private ListTopicsResult listTopicsResult;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testIsKafkaTopicPresent() throws ExecutionException, InterruptedException {
        when(adminClient.listTopics(any())).thenReturn(listTopicsResult);
        when(listTopicsResult.names()).thenReturn(java.util.concurrent.CompletableFuture.completedFuture(Collections.singleton("testTopic")));

        assertTrue(kafkaTopicUtil.isKafkaTopicPresent("testTopic"));
        assertFalse(kafkaTopicUtil.isKafkaTopicPresent("nonExistentTopic"));
    }
}
