Here is the complete and executable code for the Junit 5 test cases for the provided project:

SpaceCollectorTest.java:

```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class SpaceCollectorTest {

    @Test
    public void testSettersAndGetters() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("1");
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setUsername("admin");
        spaceCollector.setPassword("password");
        spaceCollector.setSshPublicKey("publicKey");
        spaceCollector.setSshPrivateKey("privateKey");
        spaceCollector.setConnectionType("API");
        spaceCollector.setEnabled(true);
        spaceCollector.setInputFilePath("/path/to/input");
        spaceCollector.setOutputFilePath("/path/to/output");
        spaceCollector.setPollingDuration(300);

        Assertions.assertEquals("1", spaceCollector.getId());
        Assertions.assertEquals("http://example.com", spaceCollector.getUrl());
        Assertions.assertEquals(8080, spaceCollector.getPort());
        Assertions.assertEquals("admin", spaceCollector.getUsername());
        Assertions.assertEquals("password", spaceCollector.getPassword());
        Assertions.assertEquals("publicKey", spaceCollector.getSshPublicKey());
        Assertions.assertEquals("privateKey", spaceCollector.getSshPrivateKey());
        Assertions.assertEquals("API", spaceCollector.getConnectionType());
        Assertions.assertTrue(spaceCollector.isEnabled());
        Assertions.assertEquals("/path/to/input", spaceCollector.getInputFilePath());
        Assertions.assertEquals("/path/to/output", spaceCollector.getOutputFilePath());
        Assertions.assertEquals(300, spaceCollector.getPollingDuration());
    }
}
```

KafkaProducerServiceTest.java:

```java
import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;

public class KafkaProducerServiceTest {

    private static final String TOPIC_NAME = "test-topic";

    private KafkaProducerService kafkaProducerService;

    @Mock
    private KafkaTemplate<String, Object> kafkaTemplateMock;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        kafkaProducerService = new KafkaProducerService(kafkaTemplateMock);
        kafkaProducerService.setTopicName(TOPIC_NAME);
    }

    @Test
    public void testSendJsonMessage_Success() {
        SpaceCollector spaceCollector = createValidSpaceCollector();

        kafkaProducerService.sendJsonMessage(spaceCollector);

        ArgumentCaptor<ProducerRecord<String, Object>> captor = ArgumentCaptor.forClass(ProducerRecord.class);
        verify(kafkaTemplateMock, times(1)).send(captor.capture());

        ProducerRecord<String, Object> sentRecord = captor.getValue();
        Assertions.assertEquals(TOPIC_NAME, sentRecord.topic());
        Assertions.assertEquals(spaceCollector, sentRecord.value());
    }

    @Test
    public void testSendJsonMessage_ValidationFailed() {
        SpaceCollector spaceCollector = new SpaceCollector();

        kafkaProducerService.sendJsonMessage(spaceCollector);

        ArgumentCaptor<ProducerRecord<String, Object>> captor = ArgumentCaptor.forClass(ProducerRecord.class);
        verify(kafkaTemplateMock, times(1)).send(captor.capture());

        ProducerRecord<String, Object> sentRecord = captor.getValue();
        Assertions.assertEquals(TOPIC_NAME, sentRecord.topic());
        Assertions.assertEquals(createErrorMessage("Validation Failed: Missing id"), sentRecord.value());
    }

    private SpaceCollector createValidSpaceCollector() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("1");
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("admin");
        spaceCollector.setPassword("password");
        return spaceCollector;
    }

    private Map<String, Object> createErrorMessage(String message) {
        Map<String, Object> errorMessageMap = new HashMap<>();
        errorMessageMap.put("STATUS", "FAIL");
        errorMessageMap.put("MESSAGE", message);
        return errorMessageMap;
    }
}
```

CollectorControllerTest.java:

```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import static org.mockito.Mockito.*;

public class CollectorControllerTest {

    private CollectorController collectorController;

    @Mock
    private KafkaProducerService kafkaProducerServiceMock;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        collectorController = new CollectorController();
        collectorController.setKafkaProducer(kafkaProducerServiceMock);
    }

    @Test
    public void testPushSpaceCollectorData_Success() {
        String expectedResponse = "SpaceCollector data pushed to Kafka topic successfully";
        SpaceCollector spaceCollector = createValidSpaceCollector();

        ResponseEntity<String> responseEntity = collectorController.pushSpaceCollectorData(spaceCollector);

        Assertions.assertEquals(200, responseEntity.getStatusCodeValue());
        Assertions.assertEquals(expectedResponse, responseEntity.getBody());
        verify(kafkaProducerServiceMock, times(1)).sendJsonMessage(spaceCollector);
    }

    private SpaceCollector createValidSpaceCollector() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("1");
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("admin");
        spaceCollector.setPassword("password");
        return spaceCollector;
    }
}
```

CollectorInitializerServiceTest.java:

```java
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

public class CollectorInitializerServiceTest {

    private static final String TOPIC_NAME = "test-topic";

    private CollectorInitializerService collectorInitializerService;

    @Mock
    private CollectorApiReader collectorApiReaderMock;

    @Mock
    private Validator validatorMock;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        collectorInitializerService = new CollectorInitializerService(collectorApiReaderMock, validatorMock);
        collectorInitializerService.setTopicName(TOPIC_NAME);
    }

    @Test
    public void testConsume_Success() {
        SpaceCollector spaceCollector = createValidSpaceCollector();

        ConsumerRecord<String, SpaceCollector> consumerRecord = new ConsumerRecord<>(TOPIC_NAME, 0, 0, "", spaceCollector);

        collectorInitializerService.consume(consumerRecord);

        verify(collectorApiReaderMock, times(1)).initialize(spaceCollector);
    }

    private SpaceCollector createValidSpaceCollector() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("1");
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("admin");
        spaceCollector.setPassword("password");
        return spaceCollector;
    }
}
```

Note: You may need to add appropriate dependencies and annotations to make the code compile and run successfully.