```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.cassandra.core.query.Query;

@ExtendWith(MockitoExtension.class)
class MtnInsightsManagerTest {

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Mock
    private MtnInsightsRepository mtnInsightsRepository;
    @Mock
    private AggregateInsightsRepository aggregateInsightsRepository;

    @Mock
    private EcpdByKeyRepository ecpdByKeyRepository;

    @Mock
    private MtnInsightsValidator validator;

    @BeforeEach
    void setUp() {
        mtnInsightsManager.obj = new ObjectMapper();
    }

    @Test
    void convertToMtnInsights_shouldAddInsightsList_whenAggregateInsightsEntityNotNullAndAppendOutagePresent() {
        // Given
        MtnInsightsEntity mtnInsightsEntity = new MtnInsightsEntity();
        List<MtnInsightsEntity> entities = new ArrayList<>();
        entities.add(mtnInsightsEntity);
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName("TEST");
        pk.setInsightCategory(INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsEntity.setPk(pk);
        mtnInsightsEntity.setProdId("1");
        String outageId = "1";

        AggregateInsightsEntity aggregateInsightsEntity = new AggregateInsightsEntity();
        aggregateInsightsEntity.setAggrValue("OUTAGE_ID1,2,");
        when(aggregateInsightsRepository.findByPkAggrCategoryAndPkAggrProdId(INSIGHT_CATEGORY_NETWORK_OUTAGE, "1"))
                .thenReturn(aggregateInsightsEntity);

        // When
        mtnInsightsManager.convertToMtnInsights(entities, true);

        // Then
        assertEquals("2", aggregateInsightsEntity.getAggrValue());
    }

    @Test
    void convertToMtnInsights_shouldAddInsightsList_whenAggregateInsightsEntityNotNullAndAppendOutageSpacePresent() {
        // Given
        MtnInsightsEntity mtnInsightsEntity = new MtnInsightsEntity();
        List<MtnInsightsEntity> entities = new ArrayList<>();
        entities.add(mtnInsightsEntity);
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName("TEST");
        pk.setInsightCategory(INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsEntity.setPk(pk);
        mtnInsightsEntity.setProdId("1");
        String outageId = "1";

        AggregateInsightsEntity aggregateInsightsEntity = new AggregateInsightsEntity();
        aggregateInsightsEntity.setAggrValue("OUTAGE_ID_SPACE1,2,");
        when(aggregateInsightsRepository.findByPkAggrCategoryAndPkAggrProdId(INSIGHT_CATEGORY_NETWORK_OUTAGE, "1"))
                .thenReturn(aggregateInsightsEntity);

        // When
        mtnInsightsManager.convertToMtnInsights(entities, true);

        // Then
        assertEquals("2", aggregateInsightsEntity.getAggrValue());
    }

    @Test
    void convertToMtnInsights_shouldNotAddInsightsList_whenAggregateInsightsEntityNull() {
        // Given
        MtnInsightsEntity mtnInsightsEntity = new MtnInsightsEntity();
        List<MtnInsightsEntity> entities = new ArrayList<>();
        entities.add(mtnInsightsEntity);
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName("TEST");
        pk.setInsightCategory(INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsEntity.setPk(pk);
        mtnInsightsEntity.setProdId("1");
        String outageId = "1";

        when(aggregateInsightsRepository.findByPkAggrCategoryAndPkAggrProdId(INSIGHT_CATEGORY_NETWORK_OUTAGE, "1"))
                .thenReturn(null);

        // When
        mtnInsightsManager.convertToMtnInsights(entities, true);

        // Then
        assertNull(aggregateInsightsEntity);
    }
}
```