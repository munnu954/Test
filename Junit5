To achieve 100% code coverage, we need to write additional test cases that cover both branches of the `if (null != deviceResponse)` statement in the `IVAPPDeviceService` class. This means we need to test situations where `deviceResponse` is `null` and where it is not `null`.

Here are the updated test cases:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService ivappDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    private DeviceListInputRequest request;
    private UTSEquipmentList utsEquipmentList;

    @Before
    public void setUp() throws Exception {
        // Set private fields using reflection
        setPrivateField(ivappDeviceService, "lookupServiceName", "http://testService");
        setPrivateField(ivappDeviceService, "lookupServicePath", "/testPath");

        request = new DeviceListInputRequest();
        Map<String, Object> requestParams = new HashMap<>();
        requestParams.put("key", "value");
        request.setRequestParameters(requestParams);

        utsEquipmentList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://testService/testPath");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
    }

    private void setPrivateField(Object targetObject, String fieldName, Object fieldValue) throws Exception {
        Field field = targetObject.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(targetObject, fieldValue);
    }

    @Test
    public void testGetDeviceDetailsv3_ResponseNotNull() throws Exception {
        String dataServiceUrl = "http://testService/testPath";

        ObjectMapper mapper = new ObjectMapper();
        JsonNode mockResponse = mapper.readTree("{ \"equipmentLst\": { \"equipmentContainer\": [] }}");

        ResponseEntity<JsonNode> responseEntity = ResponseEntity.ok(mockResponse);

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenReturn(responseEntity);

        when(iVAPPDeviceUtil.covertv3format(any(JsonNode.class))).thenReturn(new UTSEquipmentList());

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNotNull(result);
    }

    @Test
    public void testGetDeviceDetailsv3_ResponseNull() throws Exception {
        String dataServiceUrl = "http://testService/testPath";

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenReturn(null);

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNotNull(result);  // Ensure result is not null
        assertNull(result.getEquipmentLst());
    }

    @Test
    public void testGetDeviceDetailsv3_HttpServerErrorException() {
        String dataServiceUrl = "http://testService/testPath";

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenThrow(new HttpServerErrorException(org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR));

        try {
            UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
            assertNotNull(result);  // Ensure result is not null
            assertNull(result.getEquipmentLst());
        } catch (Exception e) {
            fail("Exception should not have been thrown");
        }
    }

    @Test
    public void testGetDeviceDetailsv3_OtherException() {
        String dataServiceUrl = "http://testService/testPath";

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenThrow(new RuntimeException());

        try {
            UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
            assertNotNull(result);  // Ensure result is not null
            assertNull(result.getEquipmentLst());
        } catch (Exception e) {
            fail("Exception should not have been thrown");
        }
    }
}
```

### Explanation of the New Test Case:

- **`testGetDeviceDetailsv3_ResponseNotNull`**: Ensures the original case where `deviceResponse` is not `null` is covered.

- **`testGetDeviceDetailsv3_ResponseNull`**: This new test case handles the scenario where `deviceResponse` is `null`, ensuring that the method gracefully handles this case without throwing exceptions, and the `utsEquipmentList` remains unchanged.

- **Other Exception Cases**: Remain unchanged but ensure they do not throw unexpected exceptions.

These test cases ensure that both branches of the `if (null != deviceResponse)` condition are covered, achieving full code coverage.