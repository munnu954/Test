To achieve 100% code coverage for the mentioned if statement in the `applyPostingRule` method of `PostingRuleProcessingService` class without making the fields public, you can utilize Java reflection to access the private fields. Below is the example of JUnit5 test cases to cover all 4 branches:

```java
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.InjectMocks;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import java.lang.reflect.Field;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;

@SpringBootTest
public class PostingRuleProcessingServiceTests {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @MockBean
    private RuleLoadingService ruleLoadingService;

    @MockBean
    private TopologyApiClient topoApiClient;

    @MockBean
    private AlarmPostingUtils alarmPostingUtils;

    @Test
    void testApplyPostingRuleWithNonNullTopologyDetails() throws Exception {
        PostingRule rule = new PostingRule(1L, "Rule1", 1, 1, "MatchingCriteria1");
        
        // Mocking required dependencies
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(ResponseEntity.ok("{\"TBL_response\": {\"topologyObjects\": [{}]}}"));

        Alarm alarm = new Alarm();
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "123");
        alarm.setAlarmIdentity("123");

        // Setting private field value using reflection
        Field field = PostingRuleProcessingService.class.getDeclaredField("iconBaseName");
        field.setAccessible(true);
        field.set(postingRuleProcessingService, "iconBaseName");

        // Invoke the method to be tested
        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions
        assertEquals("iconBaseName", alarm.getTopologyDetails());
    }

    // Write similar test cases to cover other branches of the if statement
}
```

In this test class:
- We use Mockito to mock the dependencies (TopologyApiClient, RuleLoadingService, AlarmPostingUtils).
- In each test case, we set the value of the private field using Java reflection before invoking the method to be tested.
- We then verify the expected behavior by asserting the outcome.

Make sure to add similar test cases for the remaining branches of the if statement to achieve 100% code coverage.