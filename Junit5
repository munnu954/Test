```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
public class MtnInsightsManagerTest {

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Mock
    private MtnInsightsRepository mtnInsightsRepository;

    @Mock
    private AggregateInsightsRepository aggregateInsightsRepository;

    @Mock
    private EcpdByKeyRepository ecpdByKeyRepository;

    @Mock
    private MtnInsightsValidator validator;

    private List<MtnInsightsEntity> mtnInsightsEntities;

    @BeforeEach
    public void setUp() {
        mtnInsightsEntities = new ArrayList<>();
        MtnInsightsEntity entity1 = new MtnInsightsEntity();
        MtnInsightsPK pk1 = new MtnInsightsPK();
        pk1.setEcpdId("ecpdId1");
        pk1.setMtn("mtn1");
        pk1.setInsightCategory("VBGNxOutage");
        pk1.setInsightName("mtnOutage");
        entity1.setPk(pk1);
        entity1.setProdId("prodId1");
        entity1.setInsightValues("{\"event_customer_status\":\"3\"}");
        mtnInsightsEntities.add(entity1);

        MtnInsightsEntity entity2 = new MtnInsightsEntity();
        MtnInsightsPK pk2 = new MtnInsightsPK();
        pk2.setEcpdId("ecpdId2");
        pk2.setMtn("mtn2");
        pk2.setInsightCategory("VBGNxOutage");
        pk2.setInsightName("mtnOutageCase");
        entity2.setPk(pk2);
        entity2.setProdId("prodId2");
        entity2.setInsightValues("{\"message\":\"NO ELIGIBLE DATA FOUND\",\"outage_id\":\"outageId2\"}");
        mtnInsightsEntities.add(entity2);

        MtnInsightsEntity entity3 = new MtnInsightsEntity();
        MtnInsightsPK pk3 = new MtnInsightsPK();
        pk3.setEcpdId("ecpdId3");
        pk3.setMtn("mtn3");
        pk3.setInsightCategory("VBGNxOutage");
        pk3.setInsightName("mtnOutage");
        entity3.setPk(pk3);
        entity3.setProdId("prodId3");
        entity3.setInsightValues("{\"event_customer_space_status\":\"3\"}");
        mtnInsightsEntities.add(entity3);

        MtnInsightsEntity entity4 = new MtnInsightsEntity();
        MtnInsightsPK pk4 = new MtnInsightsPK();
        pk4.setEcpdId("ecpdId4");
        pk4.setMtn("mtn4");
        pk4.setInsightCategory("VBGNxOutage");
        pk4.setInsightName("mtnOutageCase");
        entity4.setPk(pk4);
        entity4.setProdId("prodId3");
        entity4.setInsightValues("{\"outage_id\":\"outageId4\",\"event_customer_status\":\"3\"}");
        mtnInsightsEntities.add(entity4);

        MtnInsightsEntity entity5 = new MtnInsightsEntity();
        MtnInsightsPK pk5 = new MtnInsightsPK();
        pk5.setEcpdId("ecpdId5");
        pk5.setMtn("mtn5");
        pk5.setInsightCategory("someOtherInsight");
        pk5.setInsightName("someOtherInsight");
        entity5.setPk(pk5);
        entity5.setProdId("prodId5");
        entity5.setInsightValues("{\"someOtherInsight\":\"someOtherValue\"}");
        mtnInsightsEntities.add(entity5);
    }

    @Test
    public void testConvertToMtnInsights_whenInsightsCategoryIsNetworkOutage_andEligibleDataFound_andInsightsCaseEntitiesAreNotEmpty_andAggregateInsightsEntityContainsAppendOutage() {
        // Arrange
        boolean flag = true;
        when(mtnInsightsRepository.findByPkEcpdIdAndPkMtnAndProdIdAndPkInsightCategoryInAndPkInsightNameIn(any(), any(), any(), any(), any()))
                .thenReturn(Collections.singletonList(new MtnInsightsEntity()));
        when(aggregateInsightsRepository.findByPkAggrCategoryAndPkAggrProdId(any(), any()))
                .thenReturn(new AggregateInsightsEntity());

        // Act
        InsightsMtn insightsMtn = mtnInsightsManager.convertToMtnInsights(mtnInsightsEntities, flag);

        // Assert
        Assertions.assertNotNull(insightsMtn);
        Assertions.assertEquals(2, insightsMtn.getCategoryInsights().length);

        CategoryMtnInsights categoryMtnInsights1 = insightsMtn.getCategoryInsights()[0];
        Assertions.assertEquals("VBGNxOutage", categoryMtnInsights1.getCategory());
        Assertions.assertEquals(1, categoryMtnInsights1.getInsights().length);
        Assertions.assertEquals("mtnOutageCase", categoryMtnInsights1.getInsights()[0].getName());
        Assertions.assertEquals("{\"message\":\"NO ELIGIBLE DATA FOUND\",\"outage_id\":\"outageId2\"}", categoryMtnInsights1.getInsights()[0].getValue());

        CategoryMtnInsights categoryMtnInsights2 = insightsMtn.getCategoryInsights()[1];
        Assertions.assertEquals("VBGNxOutage", categoryMtnInsights2.getCategory());
        Assertions.assertEquals(1, categoryMtnInsights2.getInsights().length);
        Assertions.assertEquals("mtnOutage", categoryMtnInsights2.getInsights()[0].getName());
        Assertions.assertEquals("{\"event_customer_status\":\"3\"}", categoryMtnInsights2.getInsights()[0].getValue());
    }

    @Test
    public void testConvertToMtnInsights_whenInsightsCategoryIsNetworkOutage_andEligibleDataFound_andInsightsCaseEntitiesAreNotEmpty_andAggregateInsightsEntityDoesNotContainAppendOutage() {
        // Arrange
        boolean flag = true;
        when(mtnInsightsRepository.findByPkEcpdIdAndPkMtnAndProdIdAndPkInsightCategoryInAndPkInsightNameIn(any(), any(), any(), any(), any()))
                .thenReturn(Collections.singletonList(new MtnInsightsEntity()));
        when(aggregateInsightsRepository.findByPkAggrCategoryAndPkAggrProdId(any(), any()))
                .thenReturn(null);

        // Act
        InsightsMtn insightsMtn = mtnInsightsManager.convertToMtnInsights(mtnInsightsEntities, flag);

        // Assert
        Assertions.assertNotNull(insightsMtn);
        Assertions.assertEquals(2, insightsMtn.getCategoryInsights().length);

        CategoryMtnInsights categoryMtnInsights1 = insightsMtn.getCategoryInsights()[0];
        Assertions.assertEquals("VBGNxOutage", categoryMtnInsights1.getCategory());
        Assertions.assertEquals(2, categoryMtnInsights1.getInsights().length);
        Assertions.assertEquals("mtnOutageCase", categoryMtnInsights1.getInsights()[0].getName());
        Assertions.assertEquals("{\"message\":\"NO ELIGIBLE DATA FOUND\",\"outage_id\":\"outageId2\"}", categoryMtnInsights1.getInsights()[0].getValue());
        Assertions.assertEquals("mtnOutage", categoryMtnInsights1.getInsights()[1].getName());
        Assertions.assertEquals("{\"event_customer_status\":\"3\"}", categoryMtnInsights1.getInsights()[1].getValue());

        CategoryMtnInsights categoryMtnInsights2 = insightsMtn.getCategoryInsights()[1];
        Assertions.assertEquals("VBGNxOutage", categoryMtnInsights2.getCategory());
        Assertions.assertEquals(1, categoryMtnInsights2.getInsights().length);
        Assertions.assertEquals("mtnOutage", categoryMtnInsights2.getInsights()[0].getName());
        Assertions.assertEquals("{\"event_customer_space_status\":\"3\"}", categoryMtnInsights2.getInsights()[0].getValue());
    }

    @Test
    public void testConvertToMtnInsights_whenInsightsCategoryIsNetworkOutage_andEligibleDataFound_and