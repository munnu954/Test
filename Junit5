If the actual value returned by the method is blank, it suggests that the method `queryBasedOnParameter` is not being invoked correctly or the query string is not being constructed as expected. Let's review and refine the test setup and invocation process. I'll ensure the reflection method invocation is set up properly, and double-check that the constants are being used correctly.

Here is the revised JUnit test code with additional debugging:

```java
import static org.junit.Assert.assertEquals;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;

public class CoconutServiceVersion3Test {

    private CoconutServiceVersion3 coconutServiceVersion3;

    @Before
    public void setUp() {
        coconutServiceVersion3 = new CoconutServiceVersion3();
    }

    @Test
    public void testQueryBasedOnParameter_withBothConditions() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("locationCLLI", "NYCLLI");
        params.put("siteName", "New York Site");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY
                + " AND LOWER(site.clli_code) like 'nyclli'"
                + " AND LOWER(site.site_name) like 'new york site'";

        String actualQuery = invokeQueryBasedOnParameter(params);
        assertEquals(trimAndNormalizeWhitespace(expectedQuery), trimAndNormalizeWhitespace(actualQuery));
    }

    @Test
    public void testQueryBasedOnParameter_withLocationCLLIOnly() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("locationCLLI", "NYCLLI");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY
                + " AND LOWER(site.clli_code) like 'nyclli'";

        String actualQuery = invokeQueryBasedOnParameter(params);
        assertEquals(trimAndNormalizeWhitespace(expectedQuery), trimAndNormalizeWhitespace(actualQuery));
    }

    @Test
    public void testQueryBasedOnParameter_withSiteNameOnly() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("siteName", "New York Site");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY
                + " AND LOWER(site.site_name) like 'new york site'";

        String actualQuery = invokeQueryBasedOnParameter(params);
        assertEquals(trimAndNormalizeWhitespace(expectedQuery), trimAndNormalizeWhitespace(actualQuery));
    }

    @Test
    public void testQueryBasedOnParameter_withNoConditions() throws Exception {
        Map<String, Object> params = new HashMap<>();

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;

        String actualQuery = invokeQueryBasedOnParameter(params);
        assertEquals(trimAndNormalizeWhitespace(expectedQuery), trimAndNormalizeWhitespace(actualQuery));
    }

    private String invokeQueryBasedOnParameter(Map<String, Object> params) throws Exception {
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        Object result = method.invoke(coconutServiceVersion3, params);
        return result != null ? result.toString() : "";
    }

    private String trimAndNormalizeWhitespace(String input) {
        return input.replaceAll("\\s+", " ").trim();
    }

    private void logDebugInfo(String actualQuery) {
        System.out.println("Actual Query: [" + actualQuery + "]");
    }
}
```

### Key Points:
1. **Debugging Info**: The `logDebugInfo` method is added to print the actual query for debugging purposes. You can call `logDebugInfo(actualQuery);` before the assertion in each test to see what's being returned.
2. **Null Check**: Added a check in `invokeQueryBasedOnParameter` to ensure null results are handled gracefully, returning an empty string if the invocation result is null.
3. **Reflection Setup**: Double-checked that the method setup with reflection correctly accesses the private method.

Ensure that the `CoconutDeviceMSConstants` contains the correct query strings. If the constants themselves are incorrect, no tests will pass as expected. If the actual query is still blank, consider adding logging within the `queryBasedOnParameter` method itself to trace its internal execution.