To test private methods using Reflection API in Java, we can use the `java.lang.reflect` package. Here's how we can modify the `AlarmReceiverTest` class to test private methods without making `getConnection` and `receiveMessages` public in the `AlarmReceiver` class:

```java
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;

import static org.mockito.Mockito.*;

public class AlarmReceiverTest {

    @Mock
    private VMBParams vmbParams;

    @Mock
    private AlarmPostGreService alarmPostGreService;

    @Mock
    private PostingService alarmPointLookupService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetConnectionSuccess() throws Exception {
        VMBConfig vmbConfig = new VMBConfig();
        // Set up your vmbConfig
        
        when(vmbParams.getConsumerVMBConfig()).thenReturn(vmbConfig);

        AlarmReceiver alarmReceiver = new AlarmReceiver(vmbParams, alarmPostGreService, alarmPointLookupService);

        Method privateMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        privateMethod.setAccessible(true);
        privateMethod.invoke(alarmReceiver);

        // Verify/assert any relevant behavior if necessary
    }

    @Test
    public void testReceiveMessages() throws Exception {
        AlarmReceiver alarmReceiver = new AlarmReceiver(vmbParams, alarmPostGreService, alarmPointLookupService);
        // Set up any necessary mocks
        
        Method privateMethod = AlarmReceiver.class.getDeclaredMethod("receiveMessages");
        privateMethod.setAccessible(true);
        privateMethod.invoke(alarmReceiver);

        // Verify/assert any relevant behavior if necessary
    }

    // Add other test methods for remaining private methods as needed
}
```

In the above code, we use Reflection to access and invoke private methods `getConnection` and `receiveMessages` in the `AlarmReceiver` class for testing purposes without modifying the access modifiers of those methods.

Remember to handle exceptions such as `NoSuchMethodException`, `IllegalAccessException`, and `InvocationTargetException` that may be thrown when using Reflection API.