import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;

public class CircuitDetailsProviderTest {

    @Test
    void testGetAEnd() {
        CircuitDetailsProvider circuitDetailsProvider = new CircuitDetailsProvider();
        
        RestClientUtil restClientUtilMock = mock(RestClientUtil.class);
        when(restClientUtilMock.callEndpoint(anyString(), HttpMethod.GET, anyMap())).thenReturn(getMockResponse());
        
        circuitDetailsProvider.setRestClientUtil(restClientUtilMock);
        
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails("testCircuitId");
        
        AEnd aEnd = circuitDetailsProvider.getAEnd("testCircuitId", "testClli", response);
        
        // Perform assertions on the AEnd object
        
    }

    @Test
    void testGetZEnd() {
        CircuitDetailsProvider circuitDetailsProvider = new CircuitDetailsProvider();
        
        RestClientUtil restClientUtilMock = mock(RestClientUtil.class);
        when(restClientUtilMock.callEndpoint(anyString(), HttpMethod.GET, anyMap())).thenReturn(getMockResponse());
        
        circuitDetailsProvider.setRestClientUtil(restClientUtilMock);
        
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails("testCircuitId");
        
        ZEnd zEnd = circuitDetailsProvider.getZEnd("testCircuitId", "testClli", response);
        
        // Perform assertions on the ZEnd object
        
    }

    private String getMockResponse() {
        // Create a sample JSON response string for mocking the API response
        return "{ \"circuitData\": { \"circuitLst\": [ { \"circuit\": [ { \"AEnd\": [ { \"portChannel\": [ { \"portRef\": [ { \"siteCode\": \"testSiteCode\", \"portID\": \"testPortID\", \"shelfID\": \"testShelfID\" } ] } ] } ] } ] } }";
    }
}