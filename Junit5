import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class TrunkProcessorTest {

    @InjectMocks
    private TrunkProcessor trunkProcessor;

    @Mock
    private AbstractClrComponentProcessor abstractClrComponentProcessor;

    @Test
    public void testProcess_withSegment_noCondition() {
        // Arrange
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = mock(ClrComponent.class);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = mock(Map.class);
        AtomicInteger ukCount = new AtomicInteger(1);
        String sourceSys = "sourceSys";

        when(clrComponent.getType()).thenReturn("SEGMENT");
        when(abstractClrComponentProcessor.addOrUpdateNode(any(), any(), any())).thenReturn(mock(Node.class));

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);

        // Assert
        verify(abstractClrComponentProcessor).addOrUpdateNode(any(), any(), any());
    }

    @Test
    public void testProcess_withSegment_yesCondition() {
        // Arrange
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = mock(ClrComponent.class);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = mock(Map.class);
        AtomicInteger ukCount = new AtomicInteger(1);
        String sourceSys = "sourceSys";

        when(clrComponent.getType()).thenReturn("SEGMENT");
        when(clrComponent.getTrailComp()).thenReturn(new ArrayList<>());
        when(abstractClrComponentProcessor.addOrUpdateNode(any(), any(), any())).thenReturn(mock(Node.class));

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);

        // Assert
        verify(abstractClrComponentProcessor, times(2)).addOrUpdateNode(any(), any(), any());
    }

    @Test
    public void testProcess_withTrail_noCondition() {
        // Arrange
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = mock(ClrComponent.class);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = mock(Map.class);
        AtomicInteger ukCount = new AtomicInteger(1);
        String sourceSys = "sourceSys";

        when(clrComponent.getType()).thenReturn("TRAIL");
        when(abstractClrComponentProcessor.addOrUpdateNode(any(), any(), any())).thenReturn(mock(Node.class));

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);

        // Assert
        verify(abstractClrComponentProcessor).addOrUpdateNode(any(), any(), any());
    }

    @Test
    public void testProcess_withTrail_yesCondition() {
        // Arrange
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = mock(ClrComponent.class);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = mock(Map.class);
        AtomicInteger ukCount = new AtomicInteger(1);
        String sourceSys = "sourceSys";

        when(clrComponent.getType()).thenReturn("TRAIL");
        when(clrComponent.getSegmentComp()).thenReturn(new ArrayList<>());
        when(abstractClrComponentProcessor.addOrUpdateNode(any(), any(), any())).thenReturn(mock(Node.class));

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);

        // Assert
        verify(abstractClrComponentProcessor, times(2)).addOrUpdateNode(any(), any(), any());
    }
}