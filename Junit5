
@Test
public void testPerformUpdateforACK() throws Exception {
  AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
  String appliedaction = "appliedaction";
  String alarmupdatedtime = "alarmupdatedtime";
  String alarmidentity = "alarmidentity";
  long usn = 1L;
  Object[] params = new Object[] {appliedaction, alarmupdatedtime, alarmidentity, usn};
  try {
    alarmRepository.performUpdateforACK(appliedaction, alarmupdatedtime, alarmidentity, usn);
  } catch (BadSqlGrammarException e) {
    assertEquals(env.getProperty("RDB_BAD_QUERY"), e.getLocalizedMessage());
  }
}

@Test
public void testPerformUpdateforOpNote() throws Exception {
  AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
  String opNoteText = "opNoteText";
  String alarmupdatedtime = "alarmupdatedtime";
  String alarmidentity = "alarmidentity";
  long usn = 1L;
  Object[] params = new Object[] {opNoteText, alarmupdatedtime, alarmidentity, usn};
  try {
    alarmRepository.performUpdateforOpNote(opNoteText, alarmupdatedtime, alarmidentity, usn);
  } catch (BadSqlGrammarException e) {
    assertEquals(env.getProperty("RDB_BAD_QUERY"), e.getLocalizedMessage());
  }
}

@Test
public void testPerformClearbyfeed() throws Exception {
  AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
  int state = 1;
  String cleartime = "cleartime";
  String alarmupdatedtime = "alarmupdatedtime";
  String appliedaction = "appliedaction";
  String alarmidentity = "alarmidentity";
  long usn = 1L;
  Object[] params = new Object[] {state, cleartime, alarmupdatedtime, appliedaction, alarmidentity, usn};
  try {
    alarmRepository.performClearbyfeed(state, cleartime, alarmupdatedtime, appliedaction, alarmidentity, usn);
  } catch (BadSqlGrammarException e) {
    assertEquals(env.getProperty("RDB_BAD_QUERY"), e.getLocalizedMessage());
  }
}

@Test
public void testPerformUpdateforHandleEvent() throws Exception {
  AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
  String handledByidIMPACT = "handledByidIMPACT";
  String alarmupdatedtime = "alarmupdatedtime";
  String alarmidentity = "alarmidentity";
  long usn = 1L;
  Object[] params = new Object[] {handledByidIMPACT, alarmupdatedtime, alarmidentity, usn};
  try {
    alarmRepository.performUpdateforHandleEvent(handledByidIMPACT, alarmupdatedtime, alarmidentity, usn);
  } catch (BadSqlGrammarException e) {
    assertEquals(env.getProperty("RDB_BAD_QUERY"), e.getLocalizedMessage());
  }
}

@Test
public void testPerformUpdateforHandleTicket() throws Exception {
  AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
  String ticket = "ticket";
  String ticketStatus = "ticketStatus";
  String alarmupdatedtime = "alarmupdatedtime";
  String alarmidentity = "alarmidentity";
  long usn = 1L;
  Object[] params = new Object[] {ticket, ticketStatus, alarmupdatedtime, alarmidentity, usn};
  try {
    alarmRepository.performUpdateforHandleTicket(ticket, ticketStatus, alarmupdatedtime, alarmidentity, usn);
  } catch (BadSqlGrammarException e) {
    assertEquals(env.getProperty("RDB_BAD_QUERY"), e.getLocalizedMessage());
  }
}