To ensure 100% code coverage for the `isValidData` method, we need to explicitly cover both parts of the `else if` condition that checks for `input.isBlank()` and `input.isEmpty()`. Given that `isBlank()` checks for whitespace and `isEmpty()` checks for a string with zero length, we need distinct test cases to cover each scenario.

Here's an additional test case focusing on an input that is not blank but is empty, ensuring that both conditions in the `else if` statement are covered:

```java
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BatchLoaderUtilsTest {

    private BatchLoaderUtils batchLoaderUtils;

    @BeforeEach
    public void setUp() {
        batchLoaderUtils = new BatchLoaderUtils();
    }

    @Test
    public void testIsValidData_NullInput() {
        String input = null;
        Boolean result = batchLoaderUtils.isValidData(input);
        assertFalse(result, "Expected false for null input");
    }

    @Test
    public void testIsValidData_BlankInput() {
        String input = "   "; // Blank input with spaces
        Boolean result = batchLoaderUtils.isValidData(input);
        assertFalse(result, "Expected false for blank input");
    }

    @Test
    public void testIsValidData_EmptyInput() {
        String input = ""; // Empty input
        Boolean result = batchLoaderUtils.isValidData(input);
        assertFalse(result, "Expected false for empty input");
    }

    @Test
    public void testIsValidData_ValidInput() {
        String input = "Valid data"; // Valid input
        Boolean result = batchLoaderUtils.isValidData(input);
        assertTrue(result, "Expected true for valid input");
    }
}
```

### Explanation:

- **Empty Input Test**: This test case verifies that an empty string (`""`) returns `false`. This specifically covers the `input.isEmpty()` part of the `else if` condition. 

By ensuring that this scenario is explicitly tested, you cover both branches of the `else if` condition, achieving 100% code coverage for the `isValidData` method.