import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import java.util.concurrent.TimeUnit;

import org.apache.pulsar.client.api.Consumer;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.PulsarClientException;
import org.junit.jupiter.api.Test;

public class AlarmReceiverTest {

    @Test
    public void testGetConnection() throws Exception {
        // Mocking dependencies
        VMBParams vmbParams = mock(VMBParams.class);
        AlarmPostGreService alarmPostGreService = mock(AlarmPostGreService.class);
        PostingService postingService = mock(PostingService.class);

        // Initialize vmbConfig and set necessary fields
        VMBConfig vmbConfig = new VMBConfig();
        vmbConfig.setTopic("testTopic");
        vmbConfig.setServiceURL("https://example.com");
        vmbConfig.setSubscriptionName("exampleSubscription");
        vmbConfig.setSubscriptionType(SubscriptionType.Shared);
        vmbConfig.setVmbRetryCount(5);
        vmbConfig.setVmbRetryTimeIntervalInSeconds(20);
        vmbConfig.setVmbRetryCycleTimeIntervalInMins(60);
        vmbConfig.setBatchingMaxPublishDelay(1000);
        vmbConfig.setSendTimeout(30);
        vmbConfig.setBlockIfQueueFull(true);
        vmbConfig.setEnableKeyBaching(false);
        vmbConfig.setVMBConnectionFailureThresholdCount(3);
        vmbConfig.setEncryptionStatus(true);
        vmbConfig.setKeySharedSubscription(false);
        vmbConfig.setConsumerName("exampleConsumer");

        // Mock the VMBUtil.createConsumerConnection() method
        Consumer<byte[]> consumer = mock(Consumer.class);
        doReturn(consumer).when(VMBUtil.class, "createConsumerConnection", any(), any());

        // Create the AlarmReceiver instance
        AlarmReceiver alarmReceiver = new AlarmReceiver(vmbParams, alarmPostGreService, postingService);

        // Set the vmbConfig using Reflection Api
        Field vmbConfigField = AlarmReceiver.class.getDeclaredField("params");
        vmbConfigField.setAccessible(true);
        vmbConfigField.set(alarmReceiver, vmbConfig);

        // Call the getConnection() method
        alarmReceiver.getConnection();

        // Verify the VMBUtil.createConsumerConnection() method is called with correct parameters
        verifyStatic(VMBUtil.class);
        VMBUtil.createConsumerConnection(vmbConfig, null);

        // Verify the Health status is up
        assertEquals(alarmReceiver.health(), Health.up());
    }
}