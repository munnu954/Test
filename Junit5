To cover all eight branches of the `else if` block in the `createAlarm` method of the `AlarmRepositoryImpl` class, we can write the following JUnit5 test cases:

```java
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class AlarmRepositoryImplTest {

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Test
    void testCreateAlarm_PerceivedSeverityNull_StateCleared() throws Exception {
        // Arrange
        String msg = "{\"externalAlarmId\":\"pqwer\",\"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("cleared", 6));
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmpty_StateCleared() throws Exception {
        // Arrange
        String msg = "{\"externalAlarmId\":\"pqwer\",\"State\":\"cleared\",\"perceivedSeverity\":\"\",\"sequenceId\":\"23423\"}";
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("cleared", 6));
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotInMap_StateNotCleared() throws Exception {
        // Arrange
        String msg = "{\"externalAlarmId\":\"pqwer\",\"State\":\"new\",\"perceivedSeverity\":\"critical\",\"sequenceId\":\"23423\"}";
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("new", 1));
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(Map.of("indeterminate", 1));
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("indeterminate");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityInMap_StateNotCleared() throws Exception {
        // Arrange
        String msg = "{\"externalAlarmId\":\"pqwer\",\"State\":\"new\",\"perceivedSeverity\":\"major\",\"sequenceId\":\"23423\"}";
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("new", 1));
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(Map.of("major", 3));

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(3, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNull_StateNotCleared() throws Exception {
        // Arrange
        String msg = "{\"externalAlarmId\":\"pqwer\",\"State\":\"new\",\"sequenceId\":\"23423\"}";
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("new", 1));
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(Map.of("indeterminate", 1));
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("indeterminate");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmpty_StateNotCleared() throws Exception {
        // Arrange
        String msg = "{\"externalAlarmId\":\"pqwer\",\"State\":\"new\",\"perceivedSeverity\":\"\",\"sequenceId\":\"23423\"}";
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("new", 1));
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(Map.of("indeterminate", 1));
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("indeterminate");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityInMap_StateCleared() throws Exception {
        // Arrange
        String msg = "{\"externalAlarmId\":\"pqwer\",\"State\":\"cleared\",\"perceivedSeverity\":\"minor\",\"sequenceId\":\"23423\"}";
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("cleared", 6));
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(Map.of("minor", 2));

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotInMap_StateCleared() throws Exception {
        // Arrange
        String msg = "{\"externalAlarmId\":\"pqwer\",\"State\":\"cleared\",\"perceivedSeverity\":\"critical\",\"sequenceId\":\"23423\"}";
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("cleared", 6));
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(Map.of("indeterminate", 1));
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("indeterminate");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity());
    }
}
```

These test cases cover the following eight branches:

1. `perceivedSeverity` is `null` and `state` is `cleared`.
2. `perceivedSeverity` is empty and `state` is `cleared`.
3. `perceivedSeverity` is not in the map and `state` is not `cleared`.
4. `perceivedSeverity` is in the map and `state` is not `cleared`.
5. `perceivedSeverity` is `null` and `state` is not `cleared`.
6. `perceivedSeverity` is empty and `state` is not `cleared`.
7. `perceivedSeverity` is in the map and `state` is `cleared`.
8. `perceivedSeverity` is not in the map and `state` is `cleared`.

Each test case sets up the necessary mocks for the `PostGreDataBaseConfig` and then calls the `createAlarm` method with a specific input message. The assertions then check that the `Alarm` object created by the method has the expected `perceivedSeverity` value based on the input.

Note that these test cases assume the existence of the `Alarm` class as defined in the provided code, and the `PostGreDataBaseConfig` class as described in the question.