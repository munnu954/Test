```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.verizon.uts.cdo.circ.det.error.ExceptionReader;
import com.verizon.uts.cdo.circ.det.jsongenobj.circuitoutput.Attribute;
import com.verizon.uts.cdo.circ.det.jsongenobj.circuitoutput.CableComp;
import com.verizon.uts.cdo.circ.det.jsongenobj.circuitoutput.CircuitComp;
import com.verizon.uts.cdo.circ.det.jsongenobj.circuitoutput.CircuitInfo;
import com.verizon.uts.cdo.circ.det.jsongenobj.circuitoutput.ClrComponent;
import com.verizon.uts.cdo.circ.det.jsongenobj.circuitoutput.EquipmentComp;
import com.verizon.uts.cdo.circ.det.jsongenobj.circuitoutput.Link;
import com.verizon.uts.cdo.circ.det.jsongenobj.circuitoutput.Node;
import com.verizon.uts.cdo.circ.det.jsongenobj.circuitoutput.PortRef;
import com.verizon.uts.cdo.circ.det.vo.CircuitDetailResponse;
import com.verizon.uts.cdo.circ.det.vo.CircuitLst;
import com.verizon.uts.commonwrapper.api.CommonServiceClientRmi;
import com.verizon.uts.commonwrapper.error.ErrorCodes;
import com.verizon.uts.commonwrapper.error.ParseException;
import com.verizon.uts.commonwrapper.vo.Attribute;
import com.verizon.uts.commonwrapper.vo.Node;
import com.verizon.uts.upf.api.ScopeConfImpl;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class PathProcessorTest {

  @InjectMocks
  private PathProcessor pathProcessor;
  @Mock
  private CommonServiceClientRmi commonServiceClientRmi;
  @Mock
  private ScopeConfImpl scopeConf;
  @Mock
  private ExceptionReader exceptionReader;
  @Mock
  private AtomicInteger ukCount;
  @Captor
  private ArgumentCaptor<Node> nodeArgumentCaptor;
  @Captor
  private ArgumentCaptor<Link> linkArgumentCaptor;

  @BeforeEach
  void setUp() {
    MockitoAnnotations.initMocks(this);
  }

  @Test
  void testProcess_whenCircuitCompIsGiven() {

    //given
    String sourceSys = "Test";
    int iterationNo = 0;
    int circuitCompIndex = 0;
    ClrComponent clrComponent = new ClrComponent();

    Node mockedSwappedNode = new Node();
    mockedSwappedNode.setShelfId("123");
    mockedSwappedNode.setPortId("456");

    Node mockedSourceNode = new Node();
    mockedSourceNode.setShelfId("456");
    mockedSourceNode.setPortId("123");

    Map<String, List<Node>> clliNodeMap = new HashMap<>();
    clliNodeMap.put("clli", Collections.singletonList(mockedSwappedNode));
    List<Node> nodes = Collections.singletonList(mockedSwappedNode);
    List<Link> links = Collections.singletonList(new Link());
    List<ClrComponent> clrComponents = Collections.singletonList(clrComponent);
    CircuitInfo circuitInfo = new CircuitInfo();
    circuitInfo.setCircuitName("test");
    CircuitComp circuitComp = new CircuitComp();
    circuitComp.setCircuitInfo(Collections.singletonList(circuitInfo));
    clrComponent.setCircuitComp(Collections.singletonList(circuitComp));

    //when
    pathProcessor.process(nodes, links, clrComponent, clrComponents, clliNodeMap, iterationNo, ukCount, sourceSys);

    //then
    verify(commonServiceClientRmi, times(1)).getPortStatus(anyString(), any(), any());
    verify(scopeConf, times(1)).getClliAssociate(anyString(), anyString());

    Node argumentNode = nodeArgumentCaptor.getValue();
    assertEquals(mockedSwappedNode, argumentNode);
  }

  @Test
  void testProcess_whenCircuitCompIsGivenAndPreviousEquipmentIsGiven() {

    //given
    String sourceSys = "Test";
    int iterationNo = 1;
    int circuitCompIndex = 0;
    ClrComponent clrComponent = new ClrComponent();

    Node mockedSwappedNode = new Node();
    mockedSwappedNode.setShelfId("123");
    mockedSwappedNode.setPortId("456");

    Node mockedSourceNode = new Node();
    mockedSourceNode.setShelfId("456");
    mockedSourceNode.setPortId("123");

    Map<String, List<Node>> clliNodeMap = new HashMap<>();
    clliNodeMap.put("clli", Collections.singletonList(mockedSwappedNode));
    List<Node> nodes = Collections.singletonList(mockedSwappedNode);
    List<Link> links = Collections.singletonList(new Link());
    List<ClrComponent> clrComponents = new ArrayList<>();

    PortRef mockedPortRef = new PortRef();
    mockedPortRef.setPortID("456");
    EquipmentComp equipmentComp = new EquipmentComp();
    equipmentComp.setPortRef(Collections.singletonList(mockedPortRef));
    ClrComponent prevClrComponent = new ClrComponent();
    prevClrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
    prevClrComponent.setType("PORT");
    clrComponents.add(prevClrComponent);
    clrComponents.add(clrComponent);

    CircuitInfo circuitInfo = new CircuitInfo();
    circuitInfo.setCircuitName("test");
    CircuitComp circuitComp = new CircuitComp();
    circuitComp.setCircuitInfo(Collections.singletonList(circuitInfo));
    clrComponent.setCircuitComp(Collections.singletonList(circuitComp));

    //when
    pathProcessor.process(nodes, links, clrComponent, clrComponents, clliNodeMap, iterationNo, ukCount, sourceSys);

    //then
    verify(commonServiceClientRmi, times(1)).getPortStatus(anyString(), any(), any());
    verify(scopeConf, times(1)).getClliAssociate(anyString(), anyString());

    Node argumentNode = nodeArgumentCaptor.getValue();
    assertEquals(mockedSourceNode, argumentNode);
  }

  