Certainly! Here's the updated code to add the necessary functionality:

```java
public static class CsvtoJsonRTROCSnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    private String fileName;

    public CsvtoJsonRTROCSnTransformer(String fileName) {
        this.fileName = fileName;
    }

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        
        // Extract headers from line 1 (assuming it starts from index 0)
        headers = lines[0].split(",");

        for (int i = 2; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");
            
            if (headers == null || headers.length != arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }

            JSONObject obj = new JSONObject();

            // Adding headers and values from line 1 as key-value pairs
            for (int j = 0; j < headers.length; j++) {
                String jsonkey = headers[j].trim().replace("\"", "");
                String jsonvalue = lines[1].split(",")[j].trim().replace("\"", "");
                obj.put(jsonkey, jsonvalue);
            }

            obj.put("FILENAME", fileName);

            // Adding headers and values from line 3 (index 2) onwards
            for (int j = 0; j < arr.length; j++) {
                String jsonkey = headers[j].trim().replace("\"", "");
                String jsonvalue = arr[j].trim().replace("\"", "");
                obj.put(jsonkey, jsonvalue);
            }

            this.successIntCounter.add(1);
            collector.collect(obj.toString());
        }
    }
}
```

In this updated code, I have added the functionality to extract headers and values from line 1 and added them as key-value pairs in the JSON object. The headers are extracted from line 1 (index 0), and the corresponding values are extracted from line 2 (index 1). The logic for processing lines from line 3 (index 2) onwards remains the same as before.