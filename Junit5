import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class AlarmReceiverTest {

    @Mock
    private HealthIndicator healthIndicator;

    @Mock
    private AlarmPostGreService alarmPostGreService;

    @Mock
    private PostingService alarmPointLookupService;

    @Mock
    private VMBParams vmbParams;

    private AlarmReceiver alarmReceiver;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        alarmReceiver = new AlarmReceiver(vmbParams, alarmPostGreService, alarmPointLookupService);
        alarmReceiver.setHealthIndicator(healthIndicator);
    }

    @Test
    public void testReceiveMessages() {
        try {
            alarmReceiver.setConsumer(mock(Consumer.class));
            alarmReceiver.receiveMessages();
        } catch (PulsarClientException e) {
            fail("Exception occurred while receiving messages");
        }
    }

    @Test
    public void testAcknowledgeMessage() {
        Message<byte[]> msg = mock(Message.class);
        doThrow(PulsarClientException.class).when(healthIndicator).up();

        try {
            alarmReceiver.acknowledgeMessage(msg);
        } catch (Exception e) {
            fail("Exception occurred while acknowledging message");
        }
    }

    @Test
    public void testSyncReconnect() {
        AtomicInteger reconnectStage = new AtomicInteger(0);
        alarmReceiver.setReconnectStage(reconnectState);
        alarmReceiver.setConsumer(mock(Consumer.class));
        alarmReceiver.syncReconnect();
        
        assertEquals(AlarmPostingConstants.VMB_RECONNECT_COMPLETE, reconnectStage.get());
    }

    @Test
    public void testRun() {
        doNothing().when(alarmPostGreService).getAlarmTypeList();
        doNothing().when(alarmReceiver).receiveMessages();

        // Setting up a scenario where run() will exit without error
        alarmReceiver.run();

        // Setting up a scenario where run() will throw an exception
    }

    @Test
    public void testShutdown() {
        doNothing().when(alarmReceiver).shutDown();

        // Testing shutdown without exception
        try {
            alarmReceiver.shutDown();
        } catch (PulsarClientException e) {
            fail("Exception occurred during shutdown");
        }
    }
}
