To achieve 100% code coverage for the `addTagsToSet` method, you need to add additional test cases that cover all possible branches of the `if` condition. Specifically, you need to test the cases where `tagArray` is `null` and where `tagArray` is an empty array.

Here are the additional test cases to achieve full coverage:

1. Test when `tagArray` is `null`.
2. Test when `tagArray` is an empty array.

Here is the complete JUnit 5 test code with all necessary test cases:

```java
import org.junit.jupiter.api.Test;

import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class AlarmRepositoryImplTest {

    @Test
    public void testAddTagsToSetWithValidTags() throws Exception {
        String[] tagArray = {"tag1", "tag2", "tag3"};
        Set<String> expectedSet = new HashSet<>();
        expectedSet.add("tag1");
        expectedSet.add("tag2");
        expectedSet.add("tag3");

        AlarmRepositoryImpl alarmRepositoryImpl = new AlarmRepositoryImpl();
        Method method = AlarmRepositoryImpl.class.getDeclaredMethod("addTagsToSet", String[].class);
        method.setAccessible(true);
        Set<String> actualSet = (Set<String>) method.invoke(alarmRepositoryImpl, (Object) tagArray);

        assertEquals(expectedSet.size(), actualSet.size());
        assertTrue(expectedSet.containsAll(actualSet));
    }

    @Test
    public void testAddTagsToSetWithNullArray() throws Exception {
        String[] tagArray = null;
        Set<String> expectedSet = new HashSet<>();

        AlarmRepositoryImpl alarmRepositoryImpl = new AlarmRepositoryImpl();
        Method method = AlarmRepositoryImpl.class.getDeclaredMethod("addTagsToSet", String[].class);
        method.setAccessible(true);
        Set<String> actualSet = (Set<String>) method.invoke(alarmRepositoryImpl, (Object) tagArray);

        assertEquals(expectedSet.size(), actualSet.size());
        assertTrue(expectedSet.containsAll(actualSet));
    }

    @Test
    public void testAddTagsToSetWithEmptyArray() throws Exception {
        String[] tagArray = {};
        Set<String> expectedSet = new HashSet<>();

        AlarmRepositoryImpl alarmRepositoryImpl = new AlarmRepositoryImpl();
        Method method = AlarmRepositoryImpl.class.getDeclaredMethod("addTagsToSet", String[].class);
        method.setAccessible(true);
        Set<String> actualSet = (Set<String>) method.invoke(alarmRepositoryImpl, (Object) tagArray);

        assertEquals(expectedSet.size(), actualSet.size());
        assertTrue(expectedSet.containsAll(actualSet));
    }
}
```

### Explanation:
1. **testAddTagsToSetWithValidTags**:
    - This test case covers the scenario where `tagArray` is a non-null array with elements (already provided).

2. **testAddTagsToSetWithNullArray**:
    - This test case covers the scenario where `tagArray` is `null`.
    - The expected set is empty, and we assert that the actual set is also empty.

3. **testAddTagsToSetWithEmptyArray**:
    - This test case covers the scenario where `tagArray` is an empty array.
    - The expected set is empty, and we assert that the actual set is also empty.

By adding these additional test cases, you ensure that all branches of the `if` condition in the `addTagsToSet` method are covered, achieving 100% code coverage.