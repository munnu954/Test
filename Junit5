Certainly! To ensure 100% code coverage for the specified if and else blocks, we need to cover all possible logical branches. Here are additional test cases to cover the remaining branches:

```java
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.HashMap;
import java.util.Map;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
    }

    @Test
    void testCreateAlarm_reportingObjectNullAndAlarmedObjectNull() throws Exception {
        String json = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"reportingObject\":null, \"alarmedObject\":null, \"tid\":\"someTid\"}";
        
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(json);

        // Add your assertions here to validate the reportingObject is set to tid
    }

    @Test
    void testCreateAlarm_reportingObjectEmptyAndAlarmedObjectEmpty() throws Exception {
        String json = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"reportingObject\":\"\", \"alarmedObject\":\"\", \"tid\":\"someTid\"}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(json);

        // Add your assertions here to validate the reportingObject is set to tid
    }

    @Test
    void testCreateAlarm_reportingObjectNullAndAlarmedObjectNotEmpty() throws Exception {
        String json = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"reportingObject\":null, \"alarmedObject\":\"someAlarmedObject\", \"tid\":\"someTid\"}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(json);

        // Add your assertions here to validate the reportingObject is set to alarmedObject
    }

    @Test
    void testCreateAlarm_reportingObjectEmptyAndAlarmedObjectNotEmpty() throws Exception {
        String json = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"reportingObject\":\"\", \"alarmedObject\":\"someAlarmedObject\", \"tid\":\"someTid\"}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(json);

        // Add your assertions here to validate the reportingObject is set to alarmedObject
    }

    @Test
    void testCreateAlarm_reportingObjectNotEmptyAndAlarmedObjectNull() throws Exception {
        String json = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"reportingObject\":\"existingReportingObject\", \"alarmedObject\":null, \"tid\":\"someTid\"}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(json);

        // Add your assertions here to validate the reportingObject remains unchanged
    }

    @Test
    void testCreateAlarm_reportingObjectNotEmptyAndAlarmedObjectEmpty() throws Exception {
        String json = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"reportingObject\":\"existingReportingObject\", \"alarmedObject\":\"\", \"tid\":\"someTid\"}";

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(json);

        // Add your assertions here to validate the reportingObject remains unchanged
    }
}
```

In these additional tests, we cover the scenarios where:
1. `reportingObject` is not empty and `alarmedObject` is `null`.
2. `reportingObject` is not empty and `alarmedObject` is empty.

In each of these tests, you should add assertions that validate the `reportingObject` is set correctly based on the input JSON and whether it remains unchanged when it is already set.