To address the issue with handling nested JSON inputs, we need to ensure that we correctly parse and handle JSON strings at every level of nesting. The error you are encountering suggests that the JSON parsing process is encountering an unexpected character, likely due to incorrect handling of JSON strings. Here's the updated code with comments to highlight the changes:

```java
@Component
public class DeduplicationUtils {
    Logger logger = LogManager.getLogger(this.getClass());

    public HashMap<String, Object> removeNullValuesInJsonAttributes(Map<String, Object> msg) {
        HashMap<String, Object> resultMsg = new HashMap<>(msg); // Initialize the resultMsg with the original msg
        try {
            for (Map.Entry<String, Object> iterate : msg.entrySet()) {
                if (checkIfJsonValue(iterate.getValue())) {
                    HashMap<String, Object> updatedMsg = removeNullValuesInJsonAttributes(
                            RulesConstants.getObjectMapper().readValue(iterate.getValue().toString(), HashMap.class));
                    resultMsg.put(iterate.getKey(), updatedMsg);
                } else {
                    if (iterate.getValue() == null || iterate.getValue().toString().isEmpty()) {
                        resultMsg.remove(iterate.getKey());
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Exception occurred while trying to remove null/empty values from json attributes: " + e);
        }
        return resultMsg;
    }

    public HashMap<String, Object> mergeUpdateJsonValues(Map<String, Object> incomingMsg, Map<String, Object> cachedMsg, boolean isLateAlarm) {
        try {
            for (Map.Entry<String, Object> iterate : incomingMsg.entrySet()) {
                if (iterate.getValue() != null && !iterate.getValue().toString().isEmpty()) {
                    if (!isLateAlarm) {
                        if (checkIfJsonValue(iterate.getValue())) {
                            HashMap<String, Object> incomingValue = RulesConstants.getObjectMapper().readValue(
                                    iterate.getValue().toString(), HashMap.class);
                            if (cachedMsg.get(iterate.getKey()) != null) {
                                HashMap<String, Object> cachedValue = (HashMap<String, Object>) cachedMsg.get(iterate.getKey());
                                HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(incomingValue, cachedValue, isLateAlarm);
                                cachedMsg.put(iterate.getKey(), updatedMsg);
                            } else {
                                cachedMsg.put(iterate.getKey(), removeNullValuesInJsonAttributes(incomingValue));
                            }
                        } else {
                            cachedMsg.put(iterate.getKey(), iterate.getValue());
                        }
                    } else {
                        if (cachedMsg.get(iterate.getKey()) != null && checkIfJsonValue(cachedMsg.get(iterate.getKey()))) {
                            HashMap<String, Object> incomingValue = RulesConstants.getObjectMapper().readValue(
                                    iterate.getValue().toString(), HashMap.class);
                            HashMap<String, Object> cachedValue = (HashMap<String, Object>) cachedMsg.get(iterate.getKey());
                            HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(incomingValue, cachedValue, isLateAlarm);
                            cachedMsg.put(iterate.getKey(), updatedMsg);
                        } else if (cachedMsg.get(iterate.getKey()) == null) {
                            cachedMsg.put(iterate.getKey(), iterate.getValue());
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Exception occurred while trying to merge update JsonValues: " + e + " and incoming message : " + incomingMsg);
        }
        return (HashMap<String, Object>) cachedMsg;
    }

    public boolean checkIfJsonValue(Object obj) {
        boolean isJson = false;
        try {
            String jsonString = RulesConstants.getObjectMapper().writeValueAsString(obj).trim();
            if (jsonString.startsWith("{") || jsonString.startsWith("[")) {
                isJson = true;
            }
        } catch (JsonProcessingException e) {
            return isJson;
        }
        return isJson;
    }
}
```

### Changes Made:

1. **Initialization of `resultMsg`:** A new `HashMap` named `resultMsg` is initialized at the start of the `removeNullValuesInJsonAttributes` method to maintain the original message structure and update it as we process each entry.

2. **Consistent JSON Parsing:** In the `mergeUpdateJsonValues` method, whenever we detect a JSON value using `checkIfJsonValue`, we deserialize it into a `HashMap` immediately. This ensures that we can traverse and modify nested JSON structures correctly.

3. **Improved JSON Check:** The `checkIfJsonValue` method now properly checks if the string representation of the object starts with `{` or `[`, which are indicators of JSON objects or arrays.

These changes aim to ensure proper handling and traversal of nested JSON structures while avoiding JSON parsing errors.