private String createJson(String mainHeader, CSVRecord csvRecord) {
    JSONObject jsonObject = new JSONObject();

    // Split main header to handle the main object name
    String[] mainHeaderParts = mainHeader.split(":");
    jsonObject.put(mainHeaderParts[0].trim(), mainHeaderParts[1].trim());

    // Assuming headers are comma-separated sub-headers
    String[] subHeaders = mainHeaderParts[1].split(",");
    int columnCount = csvRecord.size();

    // Iterate over the sub-headers and columns
    for (int i = 0; i < subHeaders.length && i < columnCount; i++) {
        String subHeader = subHeaders[i].trim();
        String columnValue = csvRecord.get(i).trim();

        // Handle the special case where subHeader is a key with nested values
        if (subHeader.equals("Max concurrent calls") || subHeader.equals("Incoming attempt")) {
            JSONObject subJsonObject = new JSONObject();
            String[] values = columnValue.split(",");
            for (int j = 0; j < values.length; j++) {
                String[] keyValue = values[j].split(":");
                String nestedKey = keyValue[0].trim();
                String nestedValue = keyValue[1].trim();
                subJsonObject.put(nestedKey, nestedValue);
            }
            jsonObject.put(subHeader, subJsonObject);
        } else {
            // For regular headers, add key-value pairs directly
            jsonObject.put(subHeader, columnValue);
        }
    }

    return jsonObject.toString();
}