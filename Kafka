Positive Scenario Test Case:

@Test
void testSendJsonMessage_PositiveScenario() {
    // Given
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("12345");
    spaceCollector.setUrl("http://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setConnectionType("API");
    spaceCollector.setUsername("user1");
    spaceCollector.setPassword("pass123");

    // When
    String result = kafkaProducerService.sendJsonMessage(spaceCollector);

    // Then
    assertEquals("jsonMessage sent successfully", result);
    // Add additional assertions here if needed
}

Negative Scenario Test Cases:

@Test
void testSendJsonMessage_NoId() {
    // Given
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setUrl("http://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setConnectionType("API");
    spaceCollector.setUsername("user1");
    spaceCollector.setPassword("pass123");

    // When
    String result = kafkaProducerService.sendJsonMessage(spaceCollector);

    // Then
    assertEquals("SpaceCollector json must have an id", result);
    // Add additional assertions here if needed
}

@Test
void testSendJsonMessage_NoUrl() {
    // Given
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("12345");
    spaceCollector.setPort(8080);
    spaceCollector.setConnectionType("API");
    spaceCollector.setUsername("user1");
    spaceCollector.setPassword("pass123");

    // When
    String result = kafkaProducerService.sendJsonMessage(spaceCollector);

    // Then
    assertEquals("SpaceCollector json must have a non-empty url", result);
    // Add additional assertions here if needed
}

// Add more negative scenario test cases for other validation checks (port, connection_type, username, password)