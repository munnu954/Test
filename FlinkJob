public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private List<String> headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    
    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }
    
    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        for (int i = 0; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");
            
            if (i == 0 || i == 1) {
                if (headers == null) {
                    headers = new ArrayList<>();
                }
                for (String header : arr) {
                    headers.add(header.trim().replace("\"", ""));
                }
                continue;
            }
            
            if (i == 2) {
                if (headers == null || headers.size() != arr.length) {
                    this.failureIntCounter.add(1);
                    continue;
                }
                
                JSONObject obj = new JSONObject();
                for (int j = 0; j < arr.length; j++) {
                    String jsonkey = headers.get(j);
                    String jsonvalue = arr[j].trim().replace("\"", "");
                    obj.put(jsonkey, jsonvalue);
                }
                
                this.successIntCounter.add(1);
                collector.collect(obj.toString());
            }
        }
    }
}