To write JUnit 5 test cases that specifically target the catch blocks in the `convert(MtnInsightsAttributes[] listKeyAttributes)` and `convertEcpd(MtnInsightsAttributes attr)` methods, we need to simulate a situation where these methods throw a `JsonProcessingException`. Since `JsonProcessingException` is typically thrown by methods dealing with JSON processing, we'll mock the `ObjectMapper` to throw this exception during testing.

Below is a JUnit 5 test class with test cases covering the catch blocks of the specified methods. We'll use Mockito to mock dependencies and exceptions.

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.doThrow;

@ExtendWith(MockitoExtension.class)
public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @Mock
    private EcpdByKeyRepository ecpdByKeyRepository;

    @Mock
    private MtnInsightsValidator validator;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @BeforeEach
    public void setup() {
        // Initialize the manager with a mocked ObjectMapper
        mtnInsightsManager = new MtnInsightsManager();
        mtnInsightsManager.obj = objectMapper;
    }

    @Test
    public void testConvertAttributesArray_JsonProcessingException() throws JsonProcessingException {
        // Arrange
        MtnInsightsAttributes attr = new MtnInsightsAttributes(); // Assuming this is a valid object
        MtnInsightsAttributes[] attrsArray = {attr};

        // Mock the ObjectMapper to throw JsonProcessingException
        doThrow(new JsonProcessingException("Mocked Exception") {}).when(objectMapper).writeValueAsString(Mockito.any());

        // Act & Assert
        assertThrows(SystemException.class, () -> {
            mtnInsightsManager.convert(attrsArray);
        });
    }

    @Test
    public void testConvertEcpd_JsonProcessingException() throws JsonProcessingException {
        // Arrange
        MtnInsightsAttributes attr = new MtnInsightsAttributes(); // Assuming this is a valid object

        // Mock the ObjectMapper to throw JsonProcessingException
        doThrow(new JsonProcessingException("Mocked Exception") {}).when(objectMapper).writeValueAsString(Mockito.any());

        // Act & Assert
        assertThrows(SystemException.class, () -> {
            mtnInsightsManager.convertEcpd(attr);
        });
    }
}
```

### Explanation:

1. **Mocking with Mockito:**
   - We use the `@Mock` annotation to mock dependencies such as `ObjectMapper`.
   - The `@InjectMocks` annotation is used to inject these mocks into an instance of `MtnInsightsManager`.

2. **Simulating Exceptions:**
   - In each test case, `doThrow` is used to simulate `JsonProcessingException` when `writeValueAsString` is called.

3. **Testing `convert` Method:**
   - We create a test case that passes an array of `MtnInsightsAttributes` and expects a `SystemException` due to the mocked exception.

4. **Testing `convertEcpd` Method:**
   - Similarly, for the `convertEcpd` method, we simulate the exception and ensure it is caught and wrapped in a `SystemException`.

These tests ensure the catch blocks are executed and verified by asserting that the `SystemException` is thrown. Adjust the setup and assumptions about `MtnInsightsAttributes` based on the actual class details if needed.