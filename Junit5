import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class BatchLoaderUtilsTest {

    @Mock
    private JAXBContext jaxbContext;

    @Mock
    private Unmarshaller jaxbUnmarshaller;

    @Mock
    private Logger LOGGER;

    private BatchLoaderUtils batchLoaderUtils;

    public void setUp() {
        MockitoAnnotations.initMocks(this);
        batchLoaderUtils = new BatchLoaderUtils();
    }

    @Test
    public void testConvertToObject_JAXBException() {
        String xml = "<xml></xml>";
        Class<TYSConstants> clazz = TYSConstants.class;

        Mockito.when(jaxbContext.createUnmarshaller()).thenThrow(new JAXBException("Unable to convert"));

        Throwable exception = assertThrows(JAXBException.class, () -> {
            batchLoaderUtils.convertToObject(xml, clazz);
        });

        Mockito.verify(LOGGER).error("Unable to convert - ", exception);
    }
}
Please note that in this test case, the LOGGER instance is mocked using Mockito. You can replace it with the actual Logger instance in your production code. Also, this test case covers the catch block that handles JAXBException in the convertToObject method of BatchLoaderUtils class for 100% code coverage.