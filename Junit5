@Test
void testCreateAlarm_PerceivedSeverityNull_StateCleared() throws Exception {
    // Arrange
    String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    percMap.put("Other", 6);
    percMap.put("Indeterminate", 1);
    stateMap.put("cleared", 6);
    
    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    // Act
    alarmRepositoryImpl.createAlarm(msg);

    // Assert
    ArgumentCaptor<Alarm> alarmCaptor = ArgumentCaptor.forClass(Alarm.class);
    verify(alarmRepositoryImpl).createAlarm(msg);
    verify(alarmRepositoryImpl).postAlarm(alarmCaptor.capture(), eq("compId"));

    assertEquals(-1, alarmCaptor.getValue().getPerceivedSeverity());
}
```

This test case specifically covers the scenario where `perceivedSeverity` is null and `stateValue` matches the state cleared in the `createAlarm` method, ensuring that the `perceivedSeverity` is set to -1 as expected. This will provide 100% code coverage for the mentioned block in the `createAlarm` method.