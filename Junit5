Sure! To cover the remaining branches of the `Health health()` method related to closing the `Statement` and `Connection`, we can add the following additional test cases:

```java
@Test
void testHealthWithOpenStatementAndConnectionCloseSuccess() throws SQLException {
    Connection conn = mock(Connection.class);
    when(ds.getConnection()).thenReturn(conn);
    Statement stmt = mock(Statement.class);
    when(conn.createStatement()).thenReturn(stmt);
    when(stmt.isClosed()).thenReturn(false);
    when(conn.isClosed()).thenReturn(false);
    ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);

    Health health = databaseHealthContributor.health();
    assertEquals("UP", health.getStatus().getCode());

    // Verifying that statement and connection get closed
    verify(stmt, times(1)).close();
    verify(conn, times(1)).close();
}

@Test
void testHealthWithOpenStatementAndConnectionCloseFailure() throws SQLException {
    Connection conn = mock(Connection.class);
    when(ds.getConnection()).thenReturn(conn);
    Statement stmt = mock(Statement.class);
    when(conn.createStatement()).thenReturn(stmt);
    when(stmt.isClosed()).thenReturn(false);
    when(conn.isClosed()).thenReturn(false);
    doThrow(new SQLException()).when(stmt).close();
    doThrow(new SQLException()).when(conn).close();
    ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);

    Health health = databaseHealthContributor.health();
    assertEquals("DOWN", health.getStatus().getCode());
}

@Test
void testHealthWithNullStatementAndOpenConnection() throws SQLException {
    Connection conn = mock(Connection.class);
    when(ds.getConnection()).thenReturn(conn);
    when(conn.createStatement()).thenReturn(null);
    when(conn.isClosed()).thenReturn(false);
    ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);

    Health health = databaseHealthContributor.health();
    assertEquals("DOWN", health.getStatus().getCode());

    // Verifying connection closure
    verify(conn, times(1)).close();
}

@Test
void testHealthWithNullConnectionAndOpenStatement() throws SQLException {
    when(ds.getConnection()).thenReturn(null);
    Statement stmt = mock(Statement.class);
    when(stmt.isClosed()).thenReturn(false);
    ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);

    Health health = databaseHealthContributor.health();
    assertEquals("DOWN", health.getStatus().getCode());
}
```

These additional test cases check for the correct behavior of closing the `Statement` and `Connection` in all scenarios based on the conditions in the `Health health()` method. Running these tests along with the existing ones should now provide 100% code coverage for all branches in the method.