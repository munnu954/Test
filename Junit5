Here's an example of how you can write JUnit 5 test cases to achieve 100% code coverage for the `getAEnd` and `getZEnd` methods of the `CircuitDetailsProvider` class:

```
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class CircuitDetailsProviderTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    @Mock
    private Gson gson;

    private CircuitDetailResponse response;
    private CircuitData circuitData;
    private CircuitLst circuitLst;
    private Circuit circuit;
    private AEnd aEnd;
    private ZEnd zEnd;
    private PortChannel portChannel;
    private PortRef portRef;
    private ClrComponent clrComponent;

    @BeforeEach
    void setup() {
        response = new CircuitDetailResponse();
        circuitData = new CircuitData();
        circuitLst = new CircuitLst();
        circuit = new Circuit();
        aEnd = new AEnd();
        zEnd = new ZEnd();
        portChannel = new PortChannel();
        portRef = new PortRef();
        clrComponent = new ClrComponent();

        circuitDetailsProvider = new CircuitDetailsProvider();
    }

    // Test cases for getAEnd

    @Test
    void testGetAEndNullResponse() {
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(null);
        assertNull(circuitDetailsProvider.getAEnd("circuitId", "clli", null));
    }

    @Test
    void testGetAEndNullCircuitData() {
        response.setCircuitData(null);
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(gson.toJson(response));
        assertNull(circuitDetailsProvider.getAEnd("circuitId", "clli", response));
    }

    @Test
    void testGetAEndNullCircuitLst() {
        circuitData.setCircuitLst(null);
        response.setCircuitData(circuitData);
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(gson.toJson(response));
        assertNull(circuitDetailsProvider.getAEnd("circuitId", "clli", response));
    }

    @Test
    void testGetAEndNullCircuit() {
        circuitLst.setCircuit(null);
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));
        response.setCircuitData(circuitData);
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(gson.toJson(response));
        assertNull(circuitDetailsProvider.getAEnd("circuitId", "clli", response));
    }

    @Test
    void testGetAEndNullAEnd() {
        circuit.setAEnd(null);
        circuitLst.setCircuit(Collections.singletonList(circuit));
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));
        response.setCircuitData(circuitData);
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(gson.toJson(response));
        assertNull(circuitDetailsProvider.getAEnd("circuitId", "clli", response));
    }

    @Test
    void testGetAEndSuccess() {
        aEnd.setPortChannel(Collections.singletonList(portChannel));
        portChannel.setPortRef(Collections.singletonList(portRef));
        portRef.setClliCode("clli");
        circuit.setAEnd(Collections.singletonList(aEnd));
        circuitLst.setCircuit(Collections.singletonList(circuit));
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));
        response.setCircuitData(circuitData);
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(gson.toJson(response));
        assertNotNull(circuitDetailsProvider.getAEnd("circuitId", "clli", response));
    }

    // Test cases for getZEnd

    @Test
    void testGetZEndNullResponse() {
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(null);
        assertNull(circuitDetailsProvider.getZEnd("circuitId", "clli", null));
    }

    @Test
    void testGetZEndNullCircuitData() {
        response.setCircuitData(null);
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(gson.toJson(response));
        assertNull(circuitDetailsProvider.getZEnd("circuitId", "clli", response));
    }

    