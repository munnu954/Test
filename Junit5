Sure! Below is an example of additional JUnit 5 test cases that cover different branches of the `createAlarm(String msg)` method in the `AlarmRepositoryImpl` class to achieve 100% code coverage:

```java
@Test
void testCreateAlarmWithInvalidJson() {
    assertThrows(Exception.class, () -> alarmRepositoryImpl.createAlarm("invalid json"));
}

@Test
void testCreateAlarmWithNullState() {
    ObjectMapper obj = new ObjectMapper();
    JsonNode json = obj.createObjectNode();
    assertThrows(Exception.class, () -> alarmRepositoryImpl.createAlarm(json.toString()));
}

@Test
void testCreateAlarmWithValidState() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();

    percMap.put("Other", 6);
    stateMap.put("active", 6);

    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    
    JsonNode json = obj.readTree("{ \"externalAlarmId\":\"pqwer\", \"State\":\"active\",\"sequenceId\":\"23423\"}");
    alarmRepositoryImpl.createAlarm(json.toString());
    
    // Add assertions here based on the expected behavior
}
```

You can continue adding more test cases to cover different scenarios, such as handling different states, edge cases, and error conditions to achieve a thorough coverage of the `createAlarm(String msg)` method in the `AlarmRepositoryImpl` class. Make sure to include assertions that validate the behavior of the method for each test case.