To achieve 100% code coverage for the `getDeviceDetailsv3` method in the `IVAPPDeviceService` class, you need to write JUnit test cases that cover all possible scenarios and branches of the method. Below, I'll provide a comprehensive set of JUnit tests using Mockito to mock dependencies. This will include tests for successful execution, handling of exceptions, and different possible paths through the method.

Make sure you have the necessary dependencies for JUnit and Mockito in your build file (Maven or Gradle).

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.*;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.*;

@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService iVAPPDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        iVAPPDeviceService.lookupServiceName = "http://mockservice";
        iVAPPDeviceService.lookupServicePath = "/mockpath";
    }

    @Test
    public void testGetDeviceDetailsv3_Success() throws Exception {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());
        
        UTSEquipmentList expectedResponse = new UTSEquipmentList();
        EquipmentLst equipmentLst = new EquipmentLst();
        equipmentLst.setEquipmentContainer(new ArrayList<>());
        expectedResponse.setEquipmentLst(equipmentLst);

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://mockservice/mockpath");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(UTSEquipmentList.class)))
                .thenReturn(new ResponseEntity<>(expectedResponse, HttpStatus.OK));
        when(iVAPPDeviceUtil.covertV3Format(any())).thenReturn(expectedResponse);

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, new UTSEquipmentList());

        // Assert
        assertNotNull(result);
        assertEquals(expectedResponse, result);
    }

    @Test
    public void testGetDeviceDetailsv3_HttpServerErrorException() {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://mockservice/mockpath");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(UTSEquipmentList.class)))
                .thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR));

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, new UTSEquipmentList());

        // Assert
        assertNotNull(result);
        assertNull(result.getEquipmentLst());
    }

    @Test
    public void testGetDeviceDetailsv3_Exception() {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://mockservice/mockpath");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(UTSEquipmentList.class)))
                .thenThrow(new RuntimeException("General Exception"));

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, new UTSEquipmentList());

        // Assert
        assertNotNull(result);
        assertNull(result.getEquipmentLst());
    }

    @Test(expected = NoDataFoundException.class)
    public void testCovertV3Format_NoDataFoundException() throws Exception {
        // Arrange
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();

        // Act
        iVAPPDeviceUtil.covertV3Format(utsEquipmentList);

        // Assert: expect NoDataFoundException
    }
}
```

### Key Points:
- **Mocks**: Dependencies like `IVAPPDeviceUtil` and `RestTemplate` are mocked to control their behavior during the test.
- **Setup**: `setUp()` method initializes the necessary configurations before each test.
- **Test Cases**:
  - **Successful Execution**: Tests if the method correctly processes a valid request and response.
  - **Exception Handling**: Tests how the method handles `HttpServerErrorException` and general exceptions.
  - **NoDataFoundException**: Tests the conversion utility method to ensure it throws a `NoDataFoundException` when appropriate.

These tests should help ensure that all branches and paths in the `getDeviceDetailsv3` method are exercised, achieving full code coverage.