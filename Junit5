To ensure 100% code coverage for the `isValidData` method, it's important to consider all logical paths. The `else if` condition `input.isBlank() || input.isEmpty()` has two branches: when `input.isBlank()` is true and `input.isEmpty()` is false, and vice versa. However, due to the nature of `isBlank()`, which includes `isEmpty()`, we should focus on understanding each logical path distinctly.

Let's refine the test cases:

```java
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BatchLoaderUtilsTest {

    private BatchLoaderUtils batchLoaderUtils;

    @BeforeEach
    public void setUp() {
        batchLoaderUtils = new BatchLoaderUtils();
    }

    @Test
    public void testIsValidData_NullInput() {
        // Test case where input is null
        String input = null;
        assertFalse(batchLoaderUtils.isValidData(input), "Input is null, expected false");
    }

    @Test
    public void testIsValidData_BlankInput() {
        // Test case where input is blank (contains only whitespace)
        String input = "   ";
        assertFalse(batchLoaderUtils.isValidData(input), "Input is blank, expected false");
    }

    @Test
    public void testIsValidData_EmptyInput() {
        // Test case where input is an empty string
        String input = "";
        assertFalse(batchLoaderUtils.isValidData(input), "Input is empty, expected false");
    }

    @Test
    public void testIsValidData_ValidInput() {
        // Test case where input is a valid non-empty, non-blank string
        String input = "Valid data";
        assertTrue(batchLoaderUtils.isValidData(input), "Input is valid, expected true");
    }

    @Test
    public void testIsValidData_NonBlankButEmptyLikeInput() {
        // Test case where input is not empty but not blank (e.g., a single non-whitespace character)
        String input = "a";
        assertTrue(batchLoaderUtils.isValidData(input), "Input is non-blank and non-empty, expected true");
    }
}
```

### Explanation:

- **Null Input Test**: Ensures the method returns `false` for `null` input.
- **Blank Input Test**: Ensures the method returns `false` for a string that contains only whitespace.
- **Empty Input Test**: Ensures the method returns `false` for an empty string.
- **Valid Input Test**: Ensures the method returns `true` for a valid string that is neither empty nor blank.
- **Non-Blank But Non-Empty-Like Input Test**: Tests a scenario where the input is a single non-whitespace character (e.g., "a"), ensuring that this path is also considered and verified.

By adding the `Non-Blank But Non-Empty-Like Input Test`, we cover all logical branches for the condition `input.isBlank() || input.isEmpty()` and ensure 100% method coverage.