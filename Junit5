import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;

import com.verizon.apollo.UWAUpdatesHandlerApplication;
import com.verizon.apollo.MessageConsumer;

@ExtendWith(MockitoExtension.class)
public class UWAUpdatesHandlerApplicationTest {

    @InjectMocks
    private UWAUpdatesHandlerApplication application;

    @Mock
    private SpringApplication springApplication;

    @Mock
    private ConfigurableApplicationContext applicationContext;

    @Mock
    private MessageConsumer messageConsumerService;

    @BeforeEach
    public void setUp() {
        when(springApplication.run(any(String[].class))).thenReturn(applicationContext);
        when(applicationContext.getBean(MessageConsumer.class)).thenReturn(messageConsumerService);
    }

    @Test
    public void testMain_whenNoException() {
        application.main(new String[0]);

        verify(springApplication).run(any(String[].class));
        verify(applicationContext).start();
        verify(messageConsumerService).start();
        verify(applicationContext).stop();
    }

    @Test
    public void testMain_whenExceptionInTryBlock() {
        doThrow(new RuntimeException()).when(springApplication).run(any(String[].class));

        Exception exception = assertThrows(Exception.class, () -> {
            application.main(new String[0]);
        });

        assertEquals("Application startup failed. Exception : java.lang.RuntimeException", exception.getMessage());
        verify(applicationContext, never()).start();
        verify(messageConsumerService, never()).start();
        verify(applicationContext, never()).stop();
    }

    @Test
    public void testMain_whenExceptionInStartMessageConsumer() {
        when(applicationContext.getBean(MessageConsumer.class)).thenThrow(new RuntimeException());

        Exception exception = assertThrows(Exception.class, () -> {
            application.main(new String[0]);
        });

        assertEquals("Application startup failed. Exception : java.lang.RuntimeException", exception.getMessage());
        verify(applicationContext).start();
        verify(messageConsumerService, never()).start();
        verify(applicationContext).stop();
    }

    @Test
    public void testMain_whenExceptionInAddShutdownHook() {
        doThrow(new RuntimeException()).when(Runtime.getRuntime()).addShutdownHook(any(Thread.class));

        Exception exception = assertThrows(Exception.class, () -> {
            application.main(new String[0]);
        });

        assertEquals("Application startup failed. Exception : java.lang.RuntimeException", exception.getMessage());
        verify(applicationContext).start();
        verify(messageConsumerService).start();
        verify(applicationContext, never()).stop();
    }

    @Test
    public void testMain_whenExceptionInShutdownHook() {
        doThrow(new RuntimeException()).when(messageConsumerService).shutdown();

        application.main(new String[0]);

        verify(applicationContext).start();
        verify(messageConsumerService).start();
        verify(applicationContext).stop();
    }
}