// AuditService.java

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

@Service
public class AuditService {

    @PersistenceContext
    private EntityManager entityManager;

    public CollectionAuditInfo getLastSuccessfulDates(String url) {
        CollectionAuditInfo auditInfo = new CollectionAuditInfo();

        try {
            // Query to retrieve the last successful collection date
            Query collectionQuery = entityManager.createQuery(
                "SELECT MAX(dateProcessed) FROM CollectionAudit WHERE host = :url AND status = 'COLLECTION_SUCCESSFUL'"
            );
            collectionQuery.setParameter("url", url);
            LocalDateTime lastCollectionDate = (LocalDateTime) collectionQuery.getSingleResult();
            auditInfo.setLastSuccessfulCollection(lastCollectionDate);

            // Query to retrieve the last successful transformation date
            Query transformationQuery = entityManager.createQuery(
                "SELECT MAX(dateProcessed) FROM CollectionAudit WHERE host = :url AND status = 'FLINK_JOB_SUCCESSFUL'"
            );
            transformationQuery.setParameter("url", url);
            LocalDateTime lastTransformationDate = (LocalDateTime) transformationQuery.getSingleResult();
            auditInfo.setLastSuccessfulTransformation(lastTransformationDate);
        } catch (Exception e) {
            e.printStackTrace();
            // Handle exceptions as needed
        }

        return auditInfo;
    }
}
