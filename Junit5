To achieve 100% code coverage for the provided classes, you'll need to write JUnit 5 test cases that cover all conditional branches and the exception handling. Below is a comprehensive guide, including the test cases for both `CommonWrapperController` and `CircuitDetailsProvider` classes.

### Setup for JUnit 5

Firstly, make sure you have the necessary dependencies for JUnit 5 and Mockito (for mocking services) in your `pom.xml` or `build.gradle`.

### JUnit 5 Test Cases

#### Test Cases for `CommonWrapperController`

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

@SpringBootTest
public class CommonWrapperControllerTest {

    @InjectMocks
    private CommonWrapperController commonWrapperController;

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetClrGraphics_allBranches() throws UnsupportedEncodingException {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String phyModel = "testPhyModel";

        // Simulate all branches of the cnd condition
        String[] cndValues = {null, "", " ", "Y", "N"};
        for (String cnd : cndValues) {
            String expectedCnd = (cnd == null || cnd.trim().isEmpty() || !cnd.equalsIgnoreCase("Y")) ? "N" : "Y";
            when(clrGraphicsService.getClrGraphics(anyString(), anyString(), anyString(), anyString())).thenReturn("response");

            String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);
            assertNotNull(response);
            verify(clrGraphicsService).getClrGraphics(eq(circuitId), eq(sourceSys), eq(expectedCnd), eq(phyModel));
        }
    }

    @Test
    public void testGetClrGraphics_phyModelCondition_empty() throws UnsupportedEncodingException {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String cnd = "Y";
        String phyModel = null;

        when(clrGraphicsService.getClrGraphics(anyString(), anyString(), anyString(), anyString())).thenReturn("response");

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);
        assertNotNull(response);
        verify(clrGraphicsService).getClrGraphics(eq(circuitId), eq(sourceSys), eq(cnd), eq(phyModel));
    }

    @Test
    public void testGetClrGraphics_circuitIdDecodingException() throws UnsupportedEncodingException {
        String circuitId = "%";
        String sourceSys = "testSourceSys";
        String cnd = "N";
        String phyModel = "model";

        when(clrGraphicsService.getClrGraphics(anyString(), anyString(), anyString(), anyString())).thenReturn("response");

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);
        assertNotNull(response);
        verify(clrGraphicsService).getClrGraphics(anyString(), anyString(), anyString(), anyString());
    }
}
```

#### Test Cases for `CircuitDetailsProvider`

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class CircuitDetailsProviderTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    private final String cktDetailUri = "/circuit/details?cktId=#circuitId#&sourceSys=#sourceSys#";

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        // Assume this value is injected properly via @Value or similar mechanism
        circuitDetailsProvider.cktDetailUri = cktDetailUri;
    }

    @Test
    public void testGetCircuitDetails_allBranches() {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String[] cndValues = {"Y", "N"};
        String[] phyModelValues = {null, "", " ", "model"};

        for (String cnd : cndValues) {
            for (String phyModel : phyModelValues) {
                String expectedPhyModel = (phyModel != null && !phyModel.trim().isEmpty()) ? "&phyModel=" + phyModel.trim() : "";
                String expectedUrl = "http://cktDetServiceName" + cktDetailUri.replace("#circuitId#", circuitId)
                        .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + expectedPhyModel;

                when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), anyMap())).thenReturn("{\"someKey\":\"someValue\"}");

                CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);
                assertNotNull(response);
                verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), anyMap());
            }
        }
    }
}
```

### Key Points:
- **Mocks**: Used Mockito to mock dependencies (`ClrGraphicsService` and `RestClientUtil`).
- **Branches**: Covered all branches in the conditional statements by iterating through possible values for `cnd` and `phyModel`.
- **Exception Handling**: Tested the exception handling in `CommonWrapperController` by providing an invalid `circuitId` that would trigger the `UnsupportedEncodingException`.
- **Setup**: Initialized necessary fields and dependencies in `@BeforeEach` methods.

This setup ensures that all code paths are tested, including edge cases for string manipulation and null checks. Adjust the `cktDetailUri` initialization as needed, depending on your actual application setup.