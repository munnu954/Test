```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.verify;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.clients.producer.SendResult;
import org.apache.kafka.common.header.Header;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.test.util.ReflectionTestUtils;

import com.pg.eventsmessagelistener.EventsMessageListener;
import com.pg.eventsmessagelistener.dto.Body;
import com.pg.eventsmessagelistener.dto.CallRequest;
import com.pg.eventsmessagelistener.dto.CustomerDetails;
import com.pg.eventsmessagelistener.dto.MTNDetails;
import com.pg.eventsmessagelistener.dto.RequestJSONString;
import com.pg.eventsmessagelistener.dto.Service;
import com.pg.eventsmessagelistener.dto.ServiceHeader;
import com.pg.eventsmessagelistener.dto.ServiceMessage;
import com.pg.eventsmessagelistener.service.AccountEcpdService;
import com.pg.eventsmessagelistener.service.KafkaFalloutService;
import com.pg.eventsmessagelistener.utils.BatchLoaderUtils;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
class EventsMessageListenerTest {

    @InjectMocks
    EventsMessageListener eventsMessageListener;

    @Mock
    AccountEcpdService accountEcpdService;

    @Mock
    KafkaFalloutService kafkaFalloutService;

    @Mock
    KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    BatchLoaderUtils batchLoaderUtils;

    @Spy
    private List<Header> header = new ArrayList<>();

    @Test
    void onMessage_messageIsNull_returns() throws ReflectiveOperationException, InterruptedException, ExecutionException {
        Field LOGGERField = EventsMessageListener.class.getDeclaredField("LOGGER");
        LOGGERField.setAccessible(true);
        LOGGERField.set(eventsMessageListener, org.mockito.Mockito.mock(org.slf4j.Logger.class));

        eventsMessageListener.onMessage(null, null);

        verify(LOGGERField.get(eventsMessageListener)).error((String) any(), (Throwable) any());
    }

    @Test
    void onMessage_serviceMessageIsNull_returns() throws ReflectiveOperationException, InterruptedException, ExecutionException {
        Field LOGGERField = EventsMessageListener.class.getDeclaredField("LOGGER");
        LOGGERField.setAccessible(true);
        LOGGERField.set(eventsMessageListener, org.mockito.Mockito.mock(org.slf4j.Logger.class));
        
        ReflectionTestUtils.setField(eventsMessageListener, "producerTopic", "test-topic");

        eventsMessageListener.onMessage(null, "{\"name\":\"test\"}");

        verify(LOGGERField.get(eventsMessageListener)).error((String) any(), (Throwable) any());
    }

    @Test
    void onMessage_serviceMessageWithoutRequestJSONString_returns() throws ReflectiveOperationException, InterruptedException, ExecutionException {
        Field LOGGERField = EventsMessageListener.class.getDeclaredField("LOGGER");
        LOGGERField.setAccessible(true);
        LOGGERField.set(eventsMessageListener, org.mockito.Mockito.mock(org.slf4j.Logger.class));

        ReflectionTestUtils.setField(eventsMessageListener, "producerTopic", "test-topic");

        ServiceMessage serviceMessage = new ServiceMessage();
        eventsMessageListener.onMessage(null, "{\"name\":\"test\"}");

        verify(LOGGERField.get(eventsMessageListener)).error((String) any(), (Throwable) any());
    }

    @Test
    void onMessage_requestJSONStringInvalid_returns() throws ReflectiveOperationException, InterruptedException, ExecutionException {
        Field LOGGERField = EventsMessageListener.class.getDeclaredField("LOGGER");
        LOGGERField.setAccessible(true);
        LOGGERField.set(eventsMessageListener, org.mockito.Mockito.mock(org.slf4j.Logger.class));

        ReflectionTestUtils.setField(eventsMessageListener, "producerTopic", "test-topic");
        
        ServiceMessage serviceMessage = new ServiceMessage();
        serviceMessage.setRequestJSONString("{\"name\":\"test\"}");
        eventsMessageListener.onMessage(null, "{\"name\":\"test\"}");

        verify(LOGGERField.get(eventsMessageListener)).error((String) any(), (Throwable) any());
    }

    @Test
    void onMessage_reliquishingAccountNumberIsEmpty_returns() throws ReflectiveOperationException, InterruptedException, ExecutionException {
        Field LOGGERField = EventsMessageListener.class.getDeclaredField("LOGGER");
        LOGGERField.setAccessible(true);
        LOGGERField.set(eventsMessageListener, org.mockito.Mockito.mock(org.slf4j.Logger.class));

        ReflectionTestUtils.setField(eventsMessageListener, "producerTopic", "test-topic");

        ServiceMessage serviceMessage = new ServiceMessage();
        RequestJSONString requestJSONString = new RequestJSONString();
        requestJSONString.setService(new Service());
        requestJSONString.getService().setServiceBody(new ServiceBody());
        requestJSONString.getService().getServiceBody().setCallRequest(new CallRequest());
        serviceMessage.setRequestJSONString("{\"name\":\"test\"}");
        eventsMessageListener.onMessage(null, "{\"name\":\"test\"}");

        verify(LOGGERField.get(eventsMessageListener)).warn((String) any());
    }

    @Test
    void onMessage_noEcpdIdFound_sensitivityCheckCompleteFalse() {
        ReflectionTestUtils.setField(eventsMessageListener, "producerTopic", "test-topic");

        ServiceMessage serviceMessage = new ServiceMessage();
        RequestJSONString requestJSONString = new RequestJSONString();
        requestJSONString.setService(new Service());
        requestJSONString.getService().setServiceBody(new ServiceBody());
        requestJSONString.getService().getServiceBody().setCallRequest(new CallRequest());
        requestJSONString.getService().getServiceBody().getCallRequest().setBody(new Body());
        requestJSONString.getService().getServiceBody().getCallRequest().setBody().setRelinquishingCustomerDetails(new CustomerDetails());
        requestJSONString.getService().getServiceBody().getCallRequest().getBody().getRelinquishingCustomerDetails().setAccountNumber("testAccountNum");

        eventsMessageListener.onMessage(null, "payload");

        verify(kafkaFalloutService).saveFailedRecords(eq("test-topic"), any(), any(), eq("Flow360AuditEvent"), eq('N'));
    }

    @Test
    void onMessage_ecpdIdFoundSensitivityValueY_returns() throws ReflectiveOperationException, InterruptedException, ExecutionException {
        Field LOGGERField = EventsMessageListener.class.getDeclaredField("LOGGER");
        LOGGERField.setAccessible(true);
        LOGGERField.set(eventsMessageListener, org.mockito.Mockito.mock(org.slf4j.Logger.class));

        ReflectionTestUtils.setField(eventsMessageListener, "producerTopic", "test-topic");

        doReturn(Optional.empty()).when(accountEcpdService).getEcpdByAcctId((String) any());

        ServiceMessage serviceMessage = new ServiceMessage();
        RequestJSONString requestJSONString = new RequestJSONString();
        requestJSONString.setService(new Service());
        requestJSONString.getService().setServiceBody(new ServiceBody());
        requestJSONString.getService().getServiceBody().setCallRequest(new CallRequest());
        requestJSONString.getService().getServiceBody().getCallRequest().setBody(new Body());
        requestJSONString.getService().getServiceBody().getCallRequest().getBody().setRelinquishingCustomerDetails(new CustomerDetails());
        requestJSONString.getService().getServiceBody().getCallRequest().getBody().getRelinquishingCustomerDetails().setAccountNumber("testAccountNum");

        eventsMessageListener.onMessage(null, "payload");

        verify(LOGGERField.get(eventsMessageListener)).info((String