import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;
import java.util.Map;

public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Test
    public void testApplyPostingRule() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");

        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(alarm);
    }

    @Test
    public void testApplyPostingRule_TopologyObjectsNodeMissing() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"test\": \"data\"}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");

        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(alarm);
    }

    @Test
    public void testApplyPostingRule_ExceptionHandling() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenThrow(new RuntimeException("Mock Exception"));

        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(alarm);
    }

    @Test
    public void testApplyPostingRule_LateAlarmEligibleForRuleProcessing() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        SqlRowSet rs = mock(SqlRowSet.class);
        when(rs.getString(anyString())).thenReturn("TestValue");

        postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertTrue(postingRuleProcessingService.isLateAlarmEligibleForRuleProcessing(alarm, rs));
    }
}