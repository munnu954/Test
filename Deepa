Positive Junit5 test case for KafkaProducer:

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.test.util.ReflectionTestUtils;
import org.apache.kafka.clients.producer.ProducerRecord;

@ExtendWith(MockitoExtension.class)
class KafkaProducerTest {

  @InjectMocks
  private KafkaProducer kafkaProducer;

  @Mock
  private KafkaTemplate<String, SpaceCollector> kafkaTemplate;

  @Test
  void testSendMessage() {
    SpaceCollector message = new SpaceCollector();
    message.setId(1);
    when(kafkaTemplate.send("test-topic", message)).thenReturn(null);

    ReflectionTestUtils.setField(kafkaProducer, "topicName", "test-topic");
    kafkaProducer.sendMessage(message);

    verify(kafkaTemplate).send("test-topic", message);
  }
}

Negative Junit5 test case for KafkaProducer:

import static org.mockito.Mockito.verify;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;

@ExtendWith(MockitoExtension.class)
class KafkaProducerTest {

  @InjectMocks
  private KafkaProducer kafkaProducer;

  @Mock
  private KafkaTemplate<String, SpaceCollector> kafkaTemplate;

  @Test
  void testSendMessage() {
    SpaceCollector message = new SpaceCollector();
    message.setId(1);

    kafkaProducer.sendMessage(message);

    verify(kafkaTemplate).send("test-topic", message);
  }
}

Positive Junit5 test case for KafkaConsumer:

import static org.mockito.Mockito.verify;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class KafkaConsumerTest {

  @InjectMocks
  private KafkaConsumer kafkaConsumer;

  @Mock
  private FlinkApiController flinkApiController;

  @Test
  void testConsume() {
    SpaceCollector message = new SpaceCollector();
    message.setId(1);
    message.setInputFilePath("/input/test.csv");

    kafkaConsumer.consume(message);

    verify(flinkApiController).triggerJob(message);
  }
}

Negative Junit5 test case for KafkaConsumer:

import static org.mockito.Mockito.verify;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class KafkaConsumerTest {

  @InjectMocks
  private KafkaConsumer kafkaConsumer;

  @Mock
  private FlinkApiController flinkApiController;

  @Test
  void testConsume() {
    SpaceCollector message = new SpaceCollector();
    message.setId(1);
    message.setInputFilePath("/input/test.csv");

    kafkaConsumer.consume(message);

    verify(flinkApiController).triggerJob(message);
  }
}

These test cases use Mockito to mock dependencies and verify the behavior of the KafkaProducer and KafkaConsumer classes. However, the negative test cases are not fully defined and may need additional assertions or mocking to test for specific failure scenarios.