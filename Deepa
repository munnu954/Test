Here is an example of a test class for testing CRUD operations in a Spring Boot application using H2 database.

```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import static org.junit.jupiter.api.Assertions.*;
import com.example.demo.model.Product;
import com.example.demo.repository.ProductRepository;

@ExtendWith(SpringExtension.class)
@DataJpaTest
public class ProductRepositoryTest {

    @Autowired
    private ProductRepository productRepository;

    @Test
    public void testSaveProduct() {
        // Create a new product
        Product product = new Product("Test Product", 100.0, "Test description");
        // Save the product
        Product savedProduct = productRepository.save(product);
        // Check if the product is saved successfully
        assertNotNull(savedProduct.getId());
    }

    @Test
    public void testFindProductById() {
        // Create a new product
        Product product = new Product("Test Product", 100.0, "Test description");
        // Save the product
        Product savedProduct = productRepository.save(product);
        // Find the product by id
        Product foundProduct = productRepository.findById(savedProduct.getId()).orElse(null);
        // Check if the product is found successfully
        assertNotNull(foundProduct);
        assertEquals(savedProduct.getId(), foundProduct.getId());
    }

    @Test
    public void testUpdateProduct() {
        // Create a new product
        Product product = new Product("Test Product", 100.0, "Test description");
        // Save the product
        Product savedProduct = productRepository.save(product);
        // Update the product
        savedProduct.setName("Updated Product");
        Product updatedProduct = productRepository.save(savedProduct);
        // Check if the product is updated successfully
        assertEquals("Updated Product", updatedProduct.getName());
    }

    @Test
    public void testDeleteProduct() {
        // Create a new product
        Product product = new Product("Test Product", 100.0, "Test description");
        // Save the product
        Product savedProduct = productRepository.save(product);
        // Delete the product
        productRepository.delete(savedProduct);
        // Check if the product is deleted successfully
        assertFalse(productRepository.findById(savedProduct.getId()).isPresent());
    }
}
```

In this example, we have created a test class `ProductRepositoryTest` which contains test methods for CRUD operations. We have used the `@DataJpaTest` annotation to configure the test to use an in-memory H2 database. The `@Autowired` annotation is used to inject the `ProductRepository` for performing CRUD operations. Each test method contains positive and negative scenarios to test the CRUD operations.