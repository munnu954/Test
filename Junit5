Here is an example of JUnit5 test case code using reflection to cover the mentioned if block in the `retrieveAndCorrelateAlarm` method of the `AlarmOperationsAPI` class:

```java
import org.junit.jupiter.api.Test;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

public class AlarmOperationsAPITest {

    @Test
    public void testRetrieveAndCorrelateAlarmIfBlockCoverage() {
        AlarmOperationsAPI alarmOperationsAPI = new AlarmOperationsAPI();
        try {
            Field topologyTraversalOppositeLevelField = AlarmOperationsAPI.class.getDeclaredField("topologyTraversalOppositeLevel");
            topologyTraversalOppositeLevelField.setAccessible(true);
            topologyTraversalOppositeLevelField.set(alarmOperationsAPI, "test_value");

            Method retrieveAndCorrelateAlarmMethod = AlarmOperationsAPI.class.getDeclaredMethod("retrieveAndCorrelateAlarm",
                    String.class, TernaryValue.class, HashMap.class, String.class, long.class, RelationRule.class, RuleDetails.class, Long.class, List.class);
            retrieveAndCorrelateAlarmMethod.setAccessible(true);

            assertDoesNotThrow(() -> retrieveAndCorrelateAlarmMethod.invoke(alarmOperationsAPI, "sqlQuery", TernaryValue.TRUE,
                    new HashMap<>(), "action", 123L, new RelationRule(), new RuleDetails(), 456L, new ArrayList<RelationAPIRequest>()));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

In this test case example, we are using reflection to access and set the private field `topologyTraversalOppositeLevel` with a test value and to invoke the private method `retrieveAndCorrelateAlarm` with the necessary parameters. This approach allows us to test the private method and cover the specified if block without modifying the access modifiers of the fields or methods.