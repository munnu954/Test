The `AssertionFailedError: expected: not <null>` error indicates that the `createAlarm` method is returning `null` for some of the test cases. This could be due to several reasons, such as the method not handling certain inputs correctly, or the mocked configurations not being set up properly.

Let's make sure to handle all possible scenarios in the `createAlarm` method and also ensure that our test cases cover those scenarios correctly.

Here's a refined approach to address this:

1. **Ensure the `createAlarm` method doesn't return `null`.**
2. **Make sure mock configurations are set up correctly.**

Here is the updated JUnit 5 test cases code:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private PostgresConf postgresConf;

    private ObjectMapper objectMapper;
    private Map<String, Integer> perceivedSeverityMap;
    private Map<String, Integer> alarmStateMap;

    @BeforeEach
    public void setUp() {
        objectMapper = new ObjectMapper();
        perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Critical", 5);
        perceivedSeverityMap.put("Major", 4);
        perceivedSeverityMap.put("Indeterminate", 2);

        alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 0);
        alarmStateMap.put("New", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    }

    @Test
    public void testCreateAlarm_NullPerceivedSeverity_ClearedState() throws Exception {
        String msg = "{\"State\":\"Cleared\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_EmptyPerceivedSeverity_ClearedState() throws Exception {
        String msg = "{\"State\":\"Cleared\", \"perceivedSeverity\":\"\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_NotNullPerceivedSeverity_ClearedState() throws Exception {
        String msg = "{\"State\":\"Cleared\", \"perceivedSeverity\":\"Critical\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(5, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_NullPerceivedSeverity_NotClearedState() throws Exception {
        String msg = "{\"State\":\"New\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    public void testCreateAlarm_EmptyPerceivedSeverity_NotClearedState() throws Exception {
        String msg = "{\"State\":\"New\", \"perceivedSeverity\":\"\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    public void testCreateAlarm_NotNullPerceivedSeverity_NotClearedState() throws Exception {
        String msg = "{\"State\":\"New\", \"perceivedSeverity\":\"Major\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(4, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_UnmappedPerceivedSeverity() throws Exception {
        String msg = "{\"State\":\"New\", \"perceivedSeverity\":\"Unknown\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    public void testCreateAlarm_NullPerceivedSeverity_NullState() throws Exception {
        String msg = "{}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity()); // Indeterminate
    }
}
```

### Key Points to Check:

1. **`AlarmRepositoryImpl` Implementation:** Ensure that the `createAlarm` method in `AlarmRepositoryImpl` correctly handles all possible inputs and does not return `null`.
2. **Mock Configuration:** Verify that the mocked configurations are correctly set up, as shown in the `setUp` method.
3. **JSON Input:** Ensure the JSON strings used in the test cases match the expected input format for the `createAlarm` method.

If the `createAlarm` method still returns `null`, it may be necessary to review and possibly refactor the method to handle all inputs correctly. Here is a sample implementation of the `createAlarm` method to ensure it handles all inputs without returning `null`:

```java
public class AlarmRepositoryImpl {

    private PostgresConf postgresConf;

    public Alarm createAlarm(String jsonString) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode jsonNode = objectMapper.readTree(jsonString);

            String state = jsonNode.path("State").asText(null);
            String perceivedSeverityStr = jsonNode.path("perceivedSeverity").asText(null);

            Integer perceivedSeverity = null;

            if (perceivedSeverityStr == null || perceivedSeverityStr.isEmpty()) {
                if ("Cleared".equals(state)) {
                    perceivedSeverity = -1;
                } else {
                    perceivedSeverity = postgresConf.getPerceivedSeverityMap().getOrDefault(postgresConf.getPerceivedSeverityIndeterminate(), 2);
                }
            } else {
                perceivedSeverity = postgresConf.getPerceivedSeverityMap().getOrDefault(perceivedSeverityStr, postgresConf.getPerceivedSeverityMap().get(postgresConf.getPerceivedSeverityIndeterminate()));
            }

            if (perceivedSeverity == null) {
                perceivedSeverity = postgresConf.getPerceivedSeverityMap().getOrDefault(postgresConf.getPerceivedSeverityIndeterminate(), 2);
            }

            return new Alarm(perceivedSeverity);
        } catch (Exception e) {
            return new Alarm(-1); // Default to -1 in case of any exception
        }
    }
}
```

In this implementation, the `createAlarm` method ensures that it never returns `null` by defaulting to `-1` or the indeterminate severity in case of any issues. This should prevent the `NullPointerException` and the `AssertionFailedError`.