Certainly! Here's the complete implementation for the `testCreateAlarmWithValidJsonNoState` method:

```java
@Test
void testCreateAlarmWithValidJsonNoState() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    String validJsonNoState = "{ \"externalAlarmId\":\"pqwer\", \"sequenceId\":\"23423\", \"alarmType\":\"SomeType\", \"perceivedSeverity\":\"Indeterminate\"}";
    JsonNode json = obj.readTree(validJsonNoState);

    // Mock the returns for the configuration methods
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    percMap.put("Indeterminate", 1);
    typeMap.put("SomeType", 1);
    
    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");

    alarmRepositoryImpl.createAlarm(validJsonNoState);

    // Verify that the createAlarm method was called with the correct parameters
    verify(postgresConf, times(1)).getAlarmTypeMap();
    verify(postgresConf, times(1)).getPerceivedSeverityMap();
    verify(postgresConf, times(1)).getAlarmTypeOther();
    verify(postgresConf, times(1)).getPerceivedSeverityIndeterminate();
    verify(postgresConf, times(1)).getAlarmStateNew();
    
    // You may also want to verify other interactions or states depending on your implementation
}
```

This test method ensures that the `createAlarm` method is called with a valid JSON that does not include a state field. It also verifies the expected interactions with the `postgresConf` mock to ensure the correct configuration methods are called. The JSON string used in the test includes the necessary fields for `externalAlarmId`, `sequenceId`, `alarmType`, and `perceivedSeverity`.