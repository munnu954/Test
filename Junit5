@Test
void testProcessWithNullClrComponent() {
    // Arrange
    ClrComponent clrComponent = null;
    List<ClrComponent> clrComponentList = new ArrayList<>();

    // Act
    trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

    // Assert
    Assertions.assertTrue(links.isEmpty());
}

@Test
void testProcessWithEmptyClrComponentList() {
    // Arrange
    List<ClrComponent> clrComponentList = new ArrayList<>();

    // Act
    trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

    // Assert
    Assertions.assertTrue(links.isEmpty());
}

@Test
void testProcessWithInvalidPrevComponent() {
    // Arrange
    ClrComponent prevClrComponent = new ClrComponent();
    prevClrComponent.setType("invalid-type");
    clrComponentList.add(prevClrComponent);

    TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
    CktLst cktLst = new CktLst();
    CircuitInfo circuitInfo = new CircuitInfo();
    circuitInfo.setCircuitName("test-circuit");
    circuitInfo.setType("test-type");
    circuitInfo.setServiceType("test-service-type");
    circuitInfo.setBw("test-bandwidth");
    circuitInfo.setStatus("test-status");
    cktLst.setCircuitInfo(List.of(circuitInfo));
    trunkGroupComp.setCktLst(List.of(cktLst));
    clrComponent.setTrunkGroupComp(List.of(trunkGroupComp));

    // Act
    trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

    // Assert
    Assertions.assertTrue(links.isEmpty());
}

@Test
void testProcessWithValidPrevComponentAndNullNode() {
    // Arrange
    ClrComponent prevClrComponent = new ClrComponent();
    prevClrComponent.setType(CommonWrapperConstants.PORT);
    EquipmentComp equipmentComp = new EquipmentComp();
    PortRef portRef = new PortRef();
    portRef.setShelfID("test-shelf-id");
    portRef.setPortID("test-port-id");
    equipmentComp.setPortRef(List.of(portRef));
    prevClrComponent.setEquipmentComp(List.of(equipmentComp));
    clrComponentList.add(prevClrComponent);

    TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
    CktLst cktLst = new CktLst();
    CircuitInfo circuitInfo = new CircuitInfo();
    circuitInfo.setCircuitName("test-circuit");
    circuitInfo.setType("test-type");
    circuitInfo.setServiceType("test-service-type");
    circuitInfo.setBw("test-bandwidth");
    circuitInfo.setStatus("test-status");
    cktLst.setCircuitInfo(List.of(circuitInfo));
    trunkGroupComp.setCktLst(List.of(cktLst));
    clrComponent.setTrunkGroupComp(List.of(trunkGroupComp));

    // Act
    trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

    // Assert
    Assertions.assertTrue(links.isEmpty());
}

@Test
void testProcessWithValidPrevComponentAndDuplicateNode() {
    // Arrange
    ClrComponent prevClrComponent = new ClrComponent();
    prevClrComponent.setType(CommonWrapperConstants.PORT);
    EquipmentComp equipmentComp = new EquipmentComp();
    PortRef portRef = new PortRef();
    portRef.setShelfID("test-shelf-id");
    portRef.setPortID("test-port-id");
    equipmentComp.setPortRef(List.of(portRef));
    prevClrComponent.setEquipmentComp(List.of(equipmentComp));
    clrComponentList.add(prevClrComponent);

    TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
    CktLst cktLst = new CktLst();
    CircuitInfo circuitInfo = new CircuitInfo();
    circuitInfo.setCircuitName("test-circuit");
    circuitInfo.setType("test-type");
    circuitInfo.setServiceType("test-service-type");
    circuitInfo.setBw("test-bandwidth");
    circuitInfo.setStatus("test-status");
    cktLst.setCircuitInfo(List.of(circuitInfo));
    trunkGroupComp.setCktLst(List.of(cktLst));
    clrComponent.setTrunkGroupComp(List.of(trunkGroupComp));

    // Create two mock Node objects with the same port ID
    Node mockNode1 = Mockito.mock(Node.class);
    Mockito.when(mockNode1.getPortId()).thenReturn("test-port-id");
    Node mockNode2 = Mockito.mock(Node.class);
    Mockito.when(mockNode2.getPortId()).thenReturn("test-port-id");
    nodes.add(mockNode1);
    nodes.add(mockNode2);

    // Act
    trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

    // Assert
    Assertions.assertFalse(links.isEmpty());
    Link circuit = links.get(0);
    Assertions.assertEquals(CommonWrapperConstants.CIRCUIT, circuit.getLinkType());
    Assertions.assertEquals("test-port-id", circuit.getSource());
}

@Test
void testProcessWithValidPrevComponentAndDuplicateCircuit() {
    // Arrange
    ClrComponent prevClrComponent = new ClrComponent();
    prevClrComponent.setType(CommonWrapperConstants.PORT);
    EquipmentComp equipmentComp = new EquipmentComp();
    PortRef portRef = new PortRef();
    portRef.setShelfID("test-shelf-id");
    portRef.setPortID("test-port-id");
    equipmentComp.setPortRef(List.of(portRef));
    prevClrComponent.setEquipmentComp(List.of(equipmentComp));
    clrComponentList.add(prevClrComponent);

    TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
    CktLst cktLst = new CktLst();
    CircuitInfo circuitInfo = new CircuitInfo();
    circuitInfo.setCircuitName("test-circuit");
    circuitInfo.setType("test-type");
    circuitInfo.setServiceType("test-service-type");
    circuitInfo.setBw("test-bandwidth");
    circuitInfo.setStatus("test-status");
    cktLst.setCircuitInfo(List.of(circuitInfo));
    trunkGroupComp.setCktLst(List.of(cktLst));
    clrComponent.setTrunkGroupComp(List.of(trunkGroupComp));

    // Create a mock Node object
    Node mockNode = Mockito.mock(Node.class);
    Mockito.when(mockNode.getPortId()).thenReturn("test-port-id");
    nodes.add(mockNode);

    // Add a duplicate circuit to the links list
    Link duplicateCircuit = new Link();
    duplicateCircuit.setSource("test-port-id");
    duplicateCircuit.setLinkType(CommonWrapperConstants.CIRCUIT);
    links.add(duplicateCircuit);

    // Act
    trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

    // Assert
    Assertions.assertEquals(1, links.size());
    Link circuit = links.get(0);
    Assertions.assertEquals(CommonWrapperConstants.CIRCUIT, circuit.getLinkType());
    Assertions.assertEquals("test-port-id", circuit.getSource());
}