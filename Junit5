To test the `else` conditional statement in the `PortProcessor` class that deals with creating a new `Link` object and adding it to the `links` list, we'll write a JUnit 5 test case that sets up the required scenario. This will ensure that this part of the code is executed and covered. Hereâ€™s how you can create a test case for it:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

class PortProcessorTest {

    private PortProcessor portProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;

    @BeforeEach
    void setUp() {
        portProcessor = PortProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
    }

    @Test
    void testProcessElseBranchForCableCreation() {
        // Setting up the previous link
        Link prevLink = new Link();
        prevLink.setTarget("PrevNodeID");
        links.add(prevLink);

        // Adding a Node that matches the previous link's target
        Node prevNode = new Node();
        prevNode.setPortId("PrevNodeID");
        nodes.add(prevNode);

        // Setting up the current ClrComponent with a type that will trigger the else branch
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("CABLE");

        // Setting up a previous ClrComponent with a PortRef
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType("SOME_OTHER_TYPE");

        PortRef prevEqtObject = new PortRef();
        prevEqtObject.setPortID("PrevPortID");

        EquipmentComp prevEquipmentComp = new EquipmentComp();
        prevEquipmentComp.getPortRef().add(prevEqtObject);

        prevClrComponent.getEquipmentComp().add(prevEquipmentComp);

        // Adding the previous ClrComponent to the list
        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Process the components
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSysExample");

        // Assertions to check if the new link is created and added correctly
        assertEquals(2, links.size()); // Ensure that a new link was added
        Link newCable = links.get(1);
        assertEquals("CABLE", newCable.getLinkType());
        assertEquals("PrevNodeID", newCable.getSource());
        assertEquals("PrevPortID", newCable.getTarget());
    }
}
```

### Explanation:

1. **Setting Up Previous Link and Node**:
   - We create a `Link` object and a `Node` object with matching identifiers to simulate the existing state before processing the new component.

2. **Creating ClrComponent**:
   - We set the `ClrComponent` type to `"CABLE"` to trigger the specific `else` branch in the `process` method.
   - We also set up a previous `ClrComponent` with a `PortRef` that has a valid `PortID`.

3. **Process and Assertions**:
   - The `process` method is called with the setup data.
   - Assertions are made to ensure that the new `Link` is correctly created and added to the `links` list with the expected source and target IDs.

This test case ensures that the `else` branch is executed and verifies the creation and addition of the new `Link` object. Adjust the test data as necessary to match any other specifics of your implementation or requirements.