The `NullPointerException` at the line `LOGGER.info("Response from the lookupService: " + deviceResponse.toString());` occurs because `deviceResponse` is `null` when an exception is thrown during the `restTemplate.exchange` call. To avoid this, you should first check if `deviceResponse` is not null before trying to call `toString()` on it.

Here's how you can modify the `getDeviceDetailsv3` method to handle this situation safely:

### Updated Method in `IVAPPDeviceService`

```java
public UTSEquipmentList getDeviceDetailsv3(Map<String, Object> request, UTSEquipmentList utsEquipmentList) throws NoDataFoundException {

    String dataServiceUrl = iVAPPDeviceUtil.findServiceByName(lookupServiceName).concat(lookupServicePath);

    UriComponentsBuilder uribuilder = UriComponentsBuilder.fromHttpUrl(dataServiceUrl);

    HttpHeaders headers = new HttpHeaders();

    HttpEntity<String> httpEntity = new HttpEntity<>(gson.toJson(request), iVAPPDeviceUtil.getHttpHeaders());
    ResponseEntity<UTSEquipmentList> deviceResponse = null;

    try {
        deviceResponse = restTemplate.exchange(uribuilder.build().toUriString(), HttpMethod.POST, httpEntity, UTSEquipmentList.class);
    } catch (HttpServerErrorException e) {
        LOGGER.info("Internal Server Exception happened: " + e.getMessage());
    } catch (Exception e) {
        LOGGER.info("Exception happened: " + e.getMessage());
    }

    if (deviceResponse != null) {
        LOGGER.info("Response from the lookupService: " + deviceResponse.toString());
        utsEquipmentList = iVAPPDeviceUtil.covertV3Format(deviceResponse.getBody());
    } else {
        LOGGER.info("No response from the lookupService.");
    }

    return utsEquipmentList;
}
```

### Explanation of Changes:
- **Null Check Before Logging**: Before calling `.toString()` on `deviceResponse`, check if it is not null. If it is null, log an appropriate message indicating no response was received.

### Updated Test Case

With the above method updated, your test case should now run without encountering a `NullPointerException`. Here is the test case again for context:

```java
@Test
public void testGetDeviceDetailsv3_nullDeviceResponse() throws Exception {
    // Setup mock responses
    String serviceUrl = "http://mockService/mockPath";
    when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn(serviceUrl);
    when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());

    // Simulate an exception leading to a null deviceResponse
    when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(UTSEquipmentList.class)))
        .thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR));

    // Execute the method
    UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);

    // Verify that the response is null due to the exception
    assertNotNull(result);
    assertNull(result.getEquipmentLst().getEquipmentContainer());

    // Verify covertV3Format is not called since deviceResponse is null
    verify(iVAPPDeviceUtil, never()).covertV3Format(any(UTSEquipmentList.class));
}
```

This adjustment ensures that your method handles the potential for a null `deviceResponse` gracefully and should resolve the `NullPointerException` issue you're facing in the logs.