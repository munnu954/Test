Feature: Polling feature

Scenario: One thread created for one space collector record present in repo
Given One record in space collector repository
When the scheduler runs
Then the poller should create 1 thread
And validate that one thread is created and it is running

Implementation:

Feature: Polling feature

Scenario: One thread created for one space collector record present in repo
Given One record in space collector repository
When the scheduler runs
Then the poller should create 1 thread
And validate that one thread is created and it is running

@RunWith(Cucumber.class)
@CucumberOptions(plugin = {"pretty"}, features = "src/test/resources")
public class CucumberTestRunner {
}

public class PollingTest {

SpaceCollectorRepository spaceCollectorRepository;
PollingServiceImpl pollingService;
int threadCount = 0;
boolean isThreadRunning = false;

@Before
public void setUp() {
spaceCollectorRepository = new SpaceCollectorRepository();
pollingService = new PollingServiceImpl(spaceCollectorRepository);
}

@Given("One record in space collector repository")
public void oneRecordInRepository() {
SpaceCollector spaceCollector = new SpaceCollector();
spaceCollectorRepository.add(spaceCollector);
}

@When("the scheduler runs")
public void schedulerRuns() {
pollingService.pollDeviceDB();
}

@Then("the poller should create 1 thread")
public void oneThreadCreated() {
threadCount = Thread.getAllStackTraces().keySet()
.stream()
.filter(thread -> thread.getName().startsWith("collection-orchestrator-id-"))
.collect(Collectors.toList())
.size();
assertEquals(1, threadCount);
}

@And("validate that one thread is created and it is running")
public void validateThreadRunning() {
Thread thread = Thread.getAllStackTraces().keySet()
.stream()
.filter(t -> t.getName().startsWith("collection-orchestrator-id-"))
.findFirst()
.orElse(null);
if (thread != null) {
isThreadRunning = !thread.getState().equals(Thread.State.WAITING)
&& !thread.getState().equals(Thread.State.TERMINATED);
}
assertTrue(isThreadRunning);
}

}