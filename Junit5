import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;

import com.verizon.vbg.ledger.service.ArchivalFileMovement;

class ArchivalFileMovementTest {

  @InjectMocks
  private ArchivalFileMovement archivalFileMovement;

  @Mock
  private Logger LOGGER;

  @BeforeEach
  void setUp() {
    MockitoAnnotations.openMocks(this);
  }

  @Test
  void testMoveFilesMatchingPattern_Success() throws Exception {
    // Mock Files.list and moveFile methods
    Path sourceDir = Paths.get("src/test/resources/test-data/source");
    when(Files.list(sourceDir)).thenReturn(Stream.of(
        Paths.get("src/test/resources/test-data/source/testFile1.txt"),
        Paths.get("src/test/resources/test-data/source/testFile2.txt")
    ));

    // Mock the moveFile method
    doNothing().when(archivalFileMovement).moveFile(any(Path.class), anyString());

    // Invoke the method under test
    archivalFileMovement.moveFilesMatchingPattern("src/test/resources/test-data/source/*.txt", "src/test/resources/test-data/destination");

    // Verify the calls
    verify(Files, times(2)).list(any(Path.class));
    verify(archivalFileMovement, times(2)).moveFile(any(Path.class), anyString());
    verify(LOGGER, times(1)).info(anyString(), any(Long.class));
  }

  @Test
  void testMoveFilesMatchingPattern_ErrorMovingFile() throws Exception {
    // Mock Files.list and moveFile methods
    Path sourceDir = Paths.get("src/test/resources/test-data/source");
    when(Files.list(sourceDir)).thenReturn(Stream.of(
        Paths.get("src/test/resources/test-data/source/testFile1.txt"),
        Paths.get("src/test/resources/test-data/source/testFile2.txt")
    ));

    // Mock the moveFile method to throw an exception
    doThrow(new IOException("Simulated move error")).when(archivalFileMovement).moveFile(any(Path.class), anyString());

    // Invoke the method under test
    archivalFileMovement.moveFilesMatchingPattern("src/test/resources/test-data/source/*.txt", "src/test/resources/test-data/destination");

    // Verify the calls
    verify(Files, times(2)).list(any(Path.class));
    verify(archivalFileMovement, times(2)).moveFile(any(Path.class), anyString());
    verify(LOGGER, times(1)).info(anyString(), any(Long.class));
    verify(LOGGER, times(2)).error(anyString(), any(Object.class), anyString());
  }

  @Test
  void testGetSourceDirectory() throws Exception {
    // Invoke the private method using reflection
    String sourcePathPattern = "src/test/resources/test-data/source/*.txt";
    Method getSourceDirectoryMethod = ArchivalFileMovement.class.getDeclaredMethod("getSourceDirectory", String.class);
    getSourceDirectoryMethod.setAccessible(true);
    Path result = (Path) getSourceDirectoryMethod.invoke(archivalFileMovement, sourcePathPattern);

    // Verify the result
    assertEquals(Paths.get("src/test/resources/test-data/source"), result);
    verify(LOGGER, times(1)).info("get Source Dirtectory");
  }

  @Test
  void testGetFilePattern() throws Exception {
    // Invoke the private method using reflection
    String sourcePathPattern = "src/test/resources/test-data/source/*.txt";
    Method getFilePatternMethod = ArchivalFileMovement.class.getDeclaredMethod("getFilePattern", String.class);
    getFilePatternMethod.setAccessible(true);
    String result = (String) getFilePatternMethod.invoke(archivalFileMovement, sourcePathPattern);

    // Verify the result
    assertEquals("\\*.txt", result);
    verify(LOGGER, times(1)).info("get File Pattern");
  }

  @Test
  void testMoveFile() throws Exception {
    // Mock Files.move method
    Path sourcePath = Paths.get("src/test/resources/test-data/source/testFile1.txt");
    Path destinationPath = Paths.get("src/test/resources/test-data/destination");
    doNothing().when(Files).move(any(Path.class), any(Path.class), any(StandardCopyOption.class));

    // Invoke the moveFile method
    archivalFileMovement.moveFile(sourcePath, "src/test/resources/test-data/destination");

    // Verify the calls
    verify(Files, times(1)).move(any(Path.class), any(Path.class), any(StandardCopyOption.class));
    verify(LOGGER, times(1)).info("sourcePath: {}", sourcePath);
    verify(LOGGER, times(1)).info("destinationPath: {} ", destinationPath);
    verify(LOGGER, times(1)).info("Successfully moved the Ecpd Sensitive Feed file: {}", sourcePath.getFileName());
  }
}