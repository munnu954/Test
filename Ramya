Sure, here is the Junit5 test class for LuceneCollectionAuditRepository:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class LuceneCollectionAuditRepositoryTest {

    @InjectMocks
    private LuceneCollectionAuditRepository luceneCollectionAuditRepository;

    @Mock
    private LuceneRepository<CollectionAudit, String> luceneRepository;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testFindLatestByFilePaths() {
        List<String> filePaths = Arrays.asList("filePath1", "filePath2");
        CollectionAudit audit = new CollectionAudit();
        when(luceneRepository.findByQuery(any(String.class))).thenReturn(Collections.singletonList(audit));

        List<CollectionAudit> result = luceneCollectionAuditRepository.findLatestByFilePaths(filePaths);

        assertEquals(1, result.size());
        assertEquals(audit, result.get(0));
    }

    @Test
    void testFindTopByKeyFilePathOrderByKeyCreatedAtDesc() {
        String filePath = "filePath";
        CollectionAudit audit = new CollectionAudit();
        when(luceneRepository.findByQuery(any(String.class))).thenReturn(Collections.singletonList(audit));

        CollectionAudit result = luceneCollectionAuditRepository.findTopByKeyFilePathOrderByKeyCreatedAtDesc(filePath);

        assertEquals(audit, result);
    }

    @Test
    void testFindTopByKeyFilePathOrderByKeyCreatedAtDesc_Null() {
        String filePath = "filePath";
        when(luceneRepository.findByQuery(any(String.class))).thenReturn(Collections.emptyList());

        CollectionAudit result = luceneCollectionAuditRepository.findTopByKeyFilePathOrderByKeyCreatedAtDesc(filePath);

        assertNull(result);
    }

    @Test
    void testDeleteByFilePath() {
        String filePath = "filePath";
        CollectionAudit audit = new CollectionAudit();
        audit.setId("id");
        when(luceneRepository.findByQuery(any(String.class))).thenReturn(Collections.singletonList(audit));

        luceneCollectionAuditRepository.deleteByFilePath(filePath);

        verify(luceneRepository).deleteById(audit.getId());
    }

    @Test
    void testDeleteByFilePath_NoMatch() {
        String filePath = "filePath";
        when(luceneRepository.findByQuery(any(String.class))).thenReturn(Collections.emptyList());

        luceneCollectionAuditRepository.deleteByFilePath(filePath);

        verify(luceneRepository, never()).deleteById(any(String.class));
    }
}
```

This test class covers all the methods in your LuceneCollectionAuditRepository. It tests both the happy path and the edge cases, achieving 100% code coverage.