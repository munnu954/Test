To achieve 100% code coverage for the `ArchivalFileMovement` class, including testing private methods using Java Reflection API, you can use the JUnit 5 framework. Below is an example of how you might write the test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.*;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ArchivalFileMovementTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(ArchivalFileMovementTest.class);
    private ArchivalFileMovement archivalFileMovement;

    @BeforeEach
    void setUp() {
        archivalFileMovement = new ArchivalFileMovement();
    }

    @Test
    void testMoveFilesMatchingPattern(@TempDir Path tempDir) throws Exception {
        Path sourceDir = Files.createDirectory(tempDir.resolve("source"));
        Path destinationDir = Files.createDirectory(tempDir.resolve("destination"));

        // Creating test files
        Files.createFile(sourceDir.resolve("test1.txt"));
        Files.createFile(sourceDir.resolve("test2.txt"));

        // Mocking the logger
        Logger mockLogger = Mockito.mock(Logger.class);
        setLoggerField(mockLogger);

        archivalFileMovement.moveFilesMatchingPattern(sourceDir.toString() + "/*.txt", destinationDir.toString());

        // Verify that both files are moved
        assertTrue(Files.exists(destinationDir.resolve("test1.txt")));
        assertTrue(Files.exists(destinationDir.resolve("test2.txt")));

        // Verify logging
        verify(mockLogger, atLeastOnce()).info(anyString(), anyLong());
        verify(mockLogger, never()).error(anyString(), any(), any());
    }

    @Test
    void testMoveFilesMatchingPatternWithException(@TempDir Path tempDir) throws Exception {
        Path sourceDir = Files.createDirectory(tempDir.resolve("source"));
        Path destinationDir = tempDir.resolve("destination"); // Destination does not exist

        // Creating test files
        Files.createFile(sourceDir.resolve("test1.txt"));

        // Mocking the logger
        Logger mockLogger = Mockito.mock(Logger.class);
        setLoggerField(mockLogger);

        archivalFileMovement.moveFilesMatchingPattern(sourceDir.toString() + "/*.txt", destinationDir.toString());

        // Verify logging of error
        verify(mockLogger, atLeastOnce()).error(anyString(), any(), any());
    }

    @Test
    void testGetSourceDirectory() throws Exception {
        String sourcePattern = "file:/tmp/source/*.txt";
        Path expectedPath = Paths.get("/tmp/source");
        Method method = ArchivalFileMovement.class.getDeclaredMethod("getSourceDirectory", String.class);
        method.setAccessible(true);
        Path actualPath = (Path) method.invoke(archivalFileMovement, sourcePattern);
        assertEquals(expectedPath, actualPath);
    }

    @Test
    void testGetFilePattern() throws Exception {
        String sourcePattern = "file:/tmp/source/*.txt";
        String expectedPattern = ".*\\.txt";
        Method method = ArchivalFileMovement.class.getDeclaredMethod("getFilePattern", String.class);
        method.setAccessible(true);
        String actualPattern = (String) method.invoke(archivalFileMovement, sourcePattern);
        assertEquals(expectedPattern, actualPattern);
    }

    // Utility method to set the logger field using reflection
    private void setLoggerField(Logger logger) throws NoSuchFieldException, IllegalAccessException {
        java.lang.reflect.Field loggerField = ArchivalFileMovement.class.getDeclaredField("LOGGER");
        loggerField.setAccessible(true);
        loggerField.set(null, logger);
    }
}
```

### Explanation:

1. **Temporary Directories**: The `@TempDir` annotation is used to create temporary directories for testing file operations.

2. **Logger Mocking**: The logger is mocked to verify logging behavior without polluting the actual logs during tests.

3. **Private Method Testing**: Reflection is used to test private methods `getSourceDirectory` and `getFilePattern`.

4. **Error Handling**: The case where an exception is thrown (such as when the destination directory does not exist) is tested to ensure that errors are logged correctly.

5. **Assertions and Verifications**: Assertions ensure that the files are moved as expected and logging is verified using `verify` from Mockito.

This setup covers all paths, including exceptions, for comprehensive testing of the `ArchivalFileMovement` class.