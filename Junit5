To achieve 100% code coverage for the conditional statement `if(utils.isValidData(mtn) && action.equals("CALLESTABLISHED") && !callTypeValue.equals("0"))` within the `ctionMessage` method, you'll need to write additional test cases to cover all possible branches and edge cases. Here are the necessary test cases:

1. **Invalid MTN (Mobile Transaction Number):** Test what happens when `mtn` is invalid.
2. **Invalid Action:** Test when the `action` is not "CALLESTABLISHED".
3. **CallTypeValue Equals Zero:** Test when `callTypeValue` equals "0".

Below are the additional JUnit 5 test cases to cover these scenarios:

```java
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class EventsMessageListenerAdditionalTest {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @Mock
    private MtnEcpdService mtnEcpdService;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @Mock
    private BatchLoaderUtils utils;

    @Mock
    private CTIEcpdService ctiEcpdService;

    @BeforeEach
    public void setUp() {
        // Initialize mocks
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testCtionMessage_whenInvalidMtn() {
        // Arrange
        String mtn = "invalidMtn";
        String action = "CALLESTABLISHED";
        String callTypeValue = "1"; // Non-zero call type
        String payload = "{\"CV2\": \"invalidMtn\", \"ACTION\": \"CALLESTABLISHED\", \"CALLTYPES\": \"1;2\"}";

        when(utils.isValidData(mtn)).thenReturn(false);

        ConsumerRecord<String, String> record = new ConsumerRecord<>("topic", 0, 0, "key", payload);

        // Act
        eventsMessageListener.ctionMessage(record, payload);

        // Assert
        verifyNoInteractions(kafkaTemplate);
        verify(failedMessageService, never()).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar());
    }

    @Test
    public void testCtionMessage_whenActionNotCallEstablished() {
        // Arrange
        String mtn = "validMtn";
        String action = "NOT_CALLESTABLISHED";
        String callTypeValue = "1"; // Non-zero call type
        String payload = "{\"CV2\": \"validMtn\", \"ACTION\": \"NOT_CALLESTABLISHED\", \"CALLTYPES\": \"1;2\"}";

        when(utils.isValidData(mtn)).thenReturn(true);
        
        ConsumerRecord<String, String> record = new ConsumerRecord<>("topic", 0, 0, "key", payload);

        // Act
        eventsMessageListener.ctionMessage(record, payload);

        // Assert
        verifyNoInteractions(kafkaTemplate);
        verify(failedMessageService, never()).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar());
    }

    @Test
    public void testCtionMessage_whenCallTypeValueIsZero() {
        // Arrange
        String mtn = "validMtn";
        String action = "CALLESTABLISHED";
        String callTypeValue = "0"; // Call type value is zero
        String payload = "{\"CV2\": \"validMtn\", \"ACTION\": \"CALLESTABLISHED\", \"CALLTYPES\": \"0;1\"}";

        when(utils.isValidData(mtn)).thenReturn(true);
        when(utils.callTypeExtraction(anyString())).thenReturn(callTypeValue);

        ConsumerRecord<String, String> record = new ConsumerRecord<>("topic", 0, 0, "key", payload);

        // Act
        eventsMessageListener.ctionMessage(record, payload);

        // Assert
        verifyNoInteractions(kafkaTemplate);
        verify(failedMessageService, never()).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar());
    }
}
```

### Explanation
1. **Invalid MTN Test:** This test case ensures that if `mtn` is invalid, the method does not proceed to send any messages to Kafka.
2. **Invalid Action Test:** This verifies that the method does not proceed when the `action` is not "CALLESTABLISHED".
3. **CallTypeValue Equals Zero Test:** This checks that the method does not proceed when `callTypeValue` equals "0".

These test cases ensure that all logical branches of the condition are tested, and they utilize Mockito to verify that the `kafkaTemplate` and `failedMessageService` are not interacted with when the conditions are not met.