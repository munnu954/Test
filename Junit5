import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest
public class KafkaMessageConsumerTest {

    @Mock
    private KafkaConsumer<String, String> kafkaConsumer;

    @MockBean
    private KafkaMessageConsumer kafkaMessageConsumer;

    @Test
    public void testCreateConsumerConnectionWithTopic() {
        when(kafkaMessageConsumer.createConsumerConnection(any(String.class)))
                .thenReturn(kafkaConsumer);

        Consumer<String, String> result = kafkaMessageConsumer.createConsumerConnection("testTopic");

        assertNotNull(result);
        verify(kafkaConsumer, times(1)).subscribe(any());
    }

    @Test
    public void testCreateConsumerConnectionWithTopicAndGroupId() {
        when(kafkaMessageConsumer.createConsumerConnection(any(String.class), any(String.class)))
                .thenReturn(kafkaConsumer);

        Consumer<String, String> result = kafkaMessageConsumer.createConsumerConnection("testTopic", "testGroupId");

        assertNotNull(result);
        verify(kafkaConsumer, times(1)).subscribe(any());
    }

    @Test
    public void testCreateConsumerConnectionWithProperties() {
        Properties props = new Properties();
        props.put("consumer.topic", "testTopic");

        when(kafkaMessageConsumer.createConsumerConnection(any(Properties.class)))
                .thenReturn(kafkaConsumer);

        Consumer<String, String> result = kafkaMessageConsumer.createConsumerConnection(props);

        assertNotNull(result);
        verify(kafkaConsumer, times(1)).subscribe(any());
    }

    @Test
    public void testPollForMessages() throws ConsumerException {
        ConsumerRecords<String, String> records = mock(ConsumerRecords.class);
        when(kafkaConsumer.poll(any()))
                .thenReturn(records);

        assertEquals(0, kafkaMessageConsumer.pollForMessages().size());
    }

    @Test
    public void testAcknowledgeMessage() throws ConsumerException {
        Message message = new Message("test", "testTopic", 1, 10, 0);
        when(kafkaMessageConsumer.acknowledgeMessage(any()))
                .thenReturn(true);

        boolean result = kafkaMessageConsumer.acknowledgeMessage(message);

        assertEquals(true, result);
        verify(kafkaConsumer, times(1)).commitSync(any());
    }

    @Test
    public void testCloseConsumerConnection() {
        kafkaMessageConsumer.closeConsumerConnection();

        verify(kafkaConsumer, times(1)).close();
    }
}