Here's a set of JUnit 5 test cases designed to cover the specific branches of the `validateIterator` method in the `MtnInsightsValidator` class, focusing on the conditions you've mentioned. These test cases ensure comprehensive coverage while avoiding the specified errors.

```java
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import com.vz.s360.vbg.eventledger.exception.InvalidRequestException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;
    private static final String LOG_VAL = "LogVal ";

    @BeforeEach
    void setUp() {
        validator = new MtnInsightsValidator();
    }

    @Test
    void testValidateIterator_AllFieldsEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("");
        attributes.setInsightCategory("");
        attributes.setInsightName("");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, LOG_VAL);
        });

        assertEquals(LOG_VAL + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_InsightCategoryAndNameEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setInsightCategory("");
        attributes.setInsightName("");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, LOG_VAL);
        });

        assertEquals(LOG_VAL + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_MyBizConditions_NotEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setEcpdId("");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, LOG_VAL);
        });

        assertEquals(LOG_VAL + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_MyBizConditions_EmptyMTN() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setEcpdId("ecpd123");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, LOG_VAL);
        });

        assertEquals(LOG_VAL + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_EmptyInsightCategory() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setInsightCategory("");
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setEcpdId("ecpd123");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, LOG_VAL);
        });

        assertEquals(LOG_VAL + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_EmptyInsightName() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName("");
        attributes.setEcpdId("ecpd123");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, LOG_VAL);
        });

        assertEquals(LOG_VAL + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_AllFieldsPresent() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setEcpdId("ecpd123");

        // This should not throw an exception
        try {
            validator.validateIterator(null, attributes, LOG_VAL);
        } catch (InvalidRequestException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    void testValidateIterator_InsightNameMismatch() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName("WrongName");
        attributes.setEcpdId("ecpd123");

        // This should not throw an exception
        try {
            validator.validateIterator(null, attributes, LOG_VAL);
        } catch (InvalidRequestException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    void testValidateIterator_InsightCategoryMismatch() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setInsightCategory("WrongCategory");
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setEcpdId("ecpd123");

        // This should not throw an exception
        try {
            validator.validateIterator(null, attributes, LOG_VAL);
        } catch (InvalidRequestException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    void testValidateIterator_EmptyEcpdId() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setEcpdId("");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, LOG_VAL);
        });

        assertEquals(LOG_VAL + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }
}
```

### Explanation:

1. **Test Setup:** Each test initializes an instance of `MtnInsightsValidator`.

2. **Test Cases:** The tests cover various scenarios within the `validateIterator` method. They simulate different combinations of empty and non-empty fields to trigger specific logic branches.

3. **Assertions:** The tests use `assertThrows` to verify that the correct exception and message are thrown when validation fails, ensuring that logic branches are correctly covered.

4. **Successful Validation:** The tests also include cases where no exception should be thrown, ensuring that valid input is correctly processed without errors.

This set of test cases should provide 100% code coverage for the specified branches while adhering to the constraints and avoiding the specified errors.