Certainly! To write JUnit test cases that cover all the branches of the `queryBasedOnParameter` method, we can use Java Reflection to access the private method. Here's how you can achieve 100% code coverage for the method:

```java
import com.verizon.uts.coconut.device.service.CoconutServiceVersion3;
import org.junit.Before;
import org.junit.Test;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class CoconutServiceVersion3Test {

    private CoconutServiceVersion3 coconutServiceVersion3;
    private Method queryBasedOnParameterMethod;

    @Before
    public void setUp() throws Exception {
        coconutServiceVersion3 = new CoconutServiceVersion3();
        
        // Access the private method using reflection
        queryBasedOnParameterMethod = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        queryBasedOnParameterMethod.setAccessible(true);
    }

    @Test
    public void testQueryBasedOnParameterWithBothSiteNameAndLocationCLLI() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "TestSite");
        queryParams.put("locationCLLI", "CLLI123");

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS \"unparsedAddress\", site.city as city, site.state AS state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS \"createdBySys\" FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not  null AND LOWER(site.clli_code) like 'clli123' AND LOWER(site.site_name) like 'testsite'";

        String actualQuery = (String) queryBasedOnParameterMethod.invoke(coconutServiceVersion3, queryParams);
        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameterWithOnlySiteName() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "TestSite");

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS \"unparsedAddress\", site.city as city, site.state AS state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS \"createdBySys\" FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not  null AND LOWER(site.site_name) like 'testsite'";

        String actualQuery = (String) queryBasedOnParameterMethod.invoke(coconutServiceVersion3, queryParams);
        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameterWithOnlyLocationCLLI() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "CLLI123");

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS \"unparsedAddress\", site.city as city, site.state AS state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS \"createdBySys\" FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not  null AND LOWER(site.clli_code) like 'clli123'";

        String actualQuery = (String) queryBasedOnParameterMethod.invoke(coconutServiceVersion3, queryParams);
        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameterWithNoParameters() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS \"unparsedAddress\", site.city as city, site.state AS state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS \"createdBySys\" FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not  null";

        String actualQuery = (String) queryBasedOnParameterMethod.invoke(coconutServiceVersion3, queryParams);
        assertEquals(expectedQuery, actualQuery);
    }
}
```

This test suite covers all four branches of the `queryBasedOnParameter` method:

1. Both `siteName` and `locationCLLI` are provided.
2. Only `siteName` is provided.
3. Only `locationCLLI` is provided.
4. Neither `siteName` nor `locationCLLI` is provided.

These tests use Java Reflection to access the private method without changing its access level in the `CoconutServiceVersion3` class.