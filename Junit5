To ensure 100% code coverage for the specified block in the `createAlarm` method of the `AlarmRepositoryImpl` class, and to avoid the `NullPointerException`, we need to create multiple test cases that cover all branches of the conditional statement:

```java
else if ((perceivedSeverity == null || (perceivedSeverity != null && perceivedSeverity.toString().isEmpty())) && (stateValue == postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())))
    alarm.setPerceivedSeverity(-1);
```

Here is the JUnit5 test code to cover all 8 branches of this condition:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.test.util.ReflectionTestUtils;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.env.Environment;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNullAndStateCleared() throws Exception {
        testCreateAlarmHelper(null, "cleared", -1);
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmptyAndStateCleared() throws Exception {
        testCreateAlarmHelper("", "cleared", -1);
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNullAndStateNotCleared() throws Exception {
        testCreateAlarmHelper(null, "new", 1);
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmptyAndStateNotCleared() throws Exception {
        testCreateAlarmHelper("", "new", 1);
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotEmptyAndStateCleared() throws Exception {
        testCreateAlarmHelper("3", "cleared", 3);
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotEmptyAndStateNotCleared() throws Exception {
        testCreateAlarmHelper("3", "new", 3);
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNullAndStateClearedButMapsDifferent() throws Exception {
        Map<String, Integer> stateMap = new HashMap<>();
        stateMap.put("cleared", 0);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(stateMap);
        testCreateAlarmHelper(null, "cleared", 0);
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmptyAndStateClearedButMapsDifferent() throws Exception {
        Map<String, Integer> stateMap = new HashMap<>();
        stateMap.put("cleared", 0);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(stateMap);
        testCreateAlarmHelper("", "cleared", 0);
    }

    private void testCreateAlarmHelper(String perceivedSeverity, String state, int expectedPerceivedSeverity) throws Exception {
        ObjectMapper obj = new ObjectMapper();
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 0);
        stateMap.put("new", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String j = String.format("{ \"externalAlarmId\":\"pqwer\", \"State\":\"%s\",\"sequenceId\":\"23423\", \"perceivedSeverity\":\"%s\"}", state, perceivedSeverity);
        JsonNode json = obj.readTree(j);

        Alarm alarm = alarmRepositoryImpl.createAlarm(j);

        assertNotNull(alarm);
        assertEquals(expectedPerceivedSeverity, alarm.getPerceivedSeverity());
    }
}
```

### Explanation:
1. **Mock Initialization**: We initialize the mocks and inject them into the `AlarmRepositoryImpl` instance.
2. **Test Cases**:
   - **testCreateAlarm_PerceivedSeverityNullAndStateCleared**: Tests the case where `perceivedSeverity` is `null` and `state` is `cleared`.
   - **testCreateAlarm_PerceivedSeverityEmptyAndStateCleared**: Tests the case where `perceivedSeverity` is empty and `state` is `cleared`.
   - **testCreateAlarm_PerceivedSeverityNullAndStateNotCleared**: Tests the case where `perceivedSeverity` is `null` and `state` is not `cleared`.
   - **testCreateAlarm_PerceivedSeverityEmptyAndStateNotCleared**: Tests the case where `perceivedSeverity` is empty and `state` is not `cleared`.
   - **testCreateAlarm_PerceivedSeverityNotEmptyAndStateCleared**: Tests the case where `perceivedSeverity` is not empty and `state` is `cleared`.
   - **testCreateAlarm_PerceivedSeverityNotEmptyAndStateNotCleared**: Tests the case where `perceivedSeverity` is not empty and `state` is not `cleared`.
   - **testCreateAlarm_PerceivedSeverityNullAndStateClearedButMapsDifferent**: Tests the case where `perceivedSeverity` is `null` and `state` is `cleared` but with different map values.
   - **testCreateAlarm_PerceivedSeverityEmptyAndStateClearedButMapsDifferent**: Tests the case where `perceivedSeverity` is empty and `state` is `cleared` but with different map values.
3. **Helper Method**:
   - The `testCreateAlarmHelper` method abstracts the common setup and assertions to reduce code duplication.

By running these tests, you ensure that all branches of the specified condition are covered, and you avoid the `NullPointerException` by ensuring that the `alarm` object is properly created and not null.