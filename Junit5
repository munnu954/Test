```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestTemplate;

@ExtendWith(MockitoExtension.class)
public class GraniteSegmentServiceTest {

    private GraniteSegmentService graniteSegmentService;

    @Mock
    private RestClientUtil restClientUtil;

    @Mock
    private ElassandraConfig elassandraConfig;

    @BeforeEach
    void setUp() {
        graniteSegmentService = new GraniteSegmentService();
        graniteSegmentService.restClientUtil = restClientUtil;
        graniteSegmentService.elassandraConfig = elassandraConfig;
    }

    @Test
    @DisplayName("callCircuitDetailAPI - Circuit name is not empty")
    void testCallCircuitDetailAPIWithCircuitName() throws URISyntaxException {
        // Arrange
        String circuitName = "test-circuit";

        // Stubbing
        when(elassandraConfig.findServiceForName("serviceName")).thenReturn("http://localhost:8080");

        Map<String, String> responseMap = new HashMap<>();
        responseMap.put("id", "test-circuit");
        responseMap.put("view", "INSTALLED");
        responseMap.put("clr", "Y");

        ResponseEntity<Object> responseEntity = new ResponseEntity<>(responseMap, HttpStatus.OK);
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
                .thenReturn(responseEntity);

        // Act
        CircuitDetailResponse circuitDetailResponse = graniteSegmentService.callCircuitDetailAPI(circuitName, false);

        // Assert
        assertNotNull(circuitDetailResponse);
        assertEquals(circuitName, circuitDetailResponse.getCircuitData().getCircuitLst().get(0).getCircuit().get(0).getId());
    }

    @Test
    @DisplayName("callCircuitDetailAPI - Circuit name is empty")
    void testCallCircuitDetailAPIWithoutCircuitName() throws URISyntaxException {
        // Arrange
        String circuitName = "";

        // Act
        CircuitDetailResponse circuitDetailResponse = graniteSegmentService.callCircuitDetailAPI(circuitName, false);

        // Assert
        assertNotNull(circuitDetailResponse);
    }

    @Test
    @DisplayName("callCircuitDetailAPI - service name is empty")
    void testCallCircuitDetailAPIWithEmptyServiceName() throws URISyntaxException {
        // Arrange
        String circuitName = "test-circuit";

        // Stubbing
        when(elassandraConfig.findServiceForName("")).thenThrow(new RuntimeException("Service name cannot be empty"));

        // Act
        CircuitDetailResponse circuitDetailResponse = graniteSegmentService.callCircuitDetailAPI(circuitName, false);

        // Assert
        assertNotNull(circuitDetailResponse);
    }

    @Test
    @DisplayName("getRestObjData - base url is not empty")
    void testGetRestObjDataWithBaseUrl() throws URISyntaxException, IOException {
        // Arrange
        ParameterizedTypeReference<String> typeReference = new ParameterizedTypeReference<>() {};
        Map<String, String> requestParams = new HashMap<>();
        String serviceName = "test-service";
        String appendUrl = "/test-url";

        // Stubbing
        when(elassandraConfig.findServiceForName(serviceName)).thenReturn("http://localhost:8080");
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
                .thenReturn(ResponseEntity.ok("{\"id\":\"test-id\"}"));

        // Act
        String expectedResponse = graniteSegmentService.getRestObjData(requestParams, serviceName, appendUrl, typeReference);

        // Assert
        assertNotNull(expectedResponse);
        assertEquals("{\"id\":\"test-id\"}", expectedResponse);
    }

    @Test
    @DisplayName("getRestObjData - base url is empty")
    void testGetRestObjDataWithEmptyBaseUrl() throws URISyntaxException {
        // Arrange
        ParameterizedTypeReference<String> typeReference = new ParameterizedTypeReference<>() {};
        Map<String, String> requestParams = new HashMap<>();
        String serviceName = "";
        String appendUrl = "/test-url";

        // Stubbing
        when(elassandraConfig.findServiceForName(serviceName)).thenReturn("");

        // Act
        String expectedResponse = graniteSegmentService.getRestObjData(requestParams, serviceName, appendUrl, typeReference);

        // Assert
        assertNotNull(expectedResponse);
        assertEquals("", expectedResponse);
    }

    @Test
    @DisplayName("getRestObjData - error occurred")
    void testGetRestObjDataWithError() throws URISyntaxException {
        // Arrange
        ParameterizedTypeReference<String> typeReference = new ParameterizedTypeReference<>() {};
        Map<String, String> requestParams = new HashMap<>();
        String serviceName = "test-service";
        String appendUrl = "/test-url";

        // Stubbing
        when(elassandraConfig.findServiceForName(serviceName)).thenReturn("http://localhost:8080");
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
                .thenThrow(new ResourceAccessException("Error occurred while calling API"));

        // Act
        CommonWrapperException exception = assertThrows(CommonWrapperException.class,
                () -> graniteSegmentService.getRestObjData(requestParams, serviceName, appendUrl, typeReference));

        // Assert
        assertEquals("Error occurred while calling API", exception.getMessage());
    }

    public HttpHeaders getHttpHeaders() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        String plainCreds = "VREPAIR: VREPAIR123";
        byte[] plainCredsBytes = plainCreds.getBytes();
        byte[] base64CredsBytes = Base64.encodeBase64(plainCredsBytes, false);
        String base64Creds = new String(base64CredsBytes);
        headers.add("Authorization", "Basic" + base64Creds);
        return headers;
    }

    @SuppressWarnings({"unchecked", "rawtypes"})
    public static <T> T convertJsonStringToObject(String jsonString, Class<T> clazz) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(jsonString, clazz);
    }

    @SuppressWarnings({"unchecked", "rawtypes"})
    public static <T> T convertJsonStringToObject(String jsonString, TypeReference<T> typeReference) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(jsonString, typeReference);
    }
}
```