import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;

import com.verizon.vbg.ledger.config.DataSourceConfig;
import com.verizon.vbg.ledger.model.DataSourceModal;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@SpringBootTest(classes = DataSourceConfig.class)
public class DataSourceConfigTest {

    @Autowired
    private DataSourceConfig dataSourceConfig;

    @MockBean
    private DataSourceModal dataSourceModal;

    @Test
    public void testFalloutDataSource() {
        Mockito.when(dataSourceModal.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        Mockito.when(dataSourceModal.getUsername()).thenReturn("user");
        Mockito.when(dataSourceModal.getPassword()).thenReturn("password");
        Mockito.when(dataSourceModal.getDriver()).thenReturn("org.h2.Driver");

        var dataSource = dataSourceConfig.falloutDataSource();

        assertNotNull(dataSource);
        assertEquals("jdbc:h2:mem:testdb", dataSource.getUrl());
        assertEquals("user", dataSource.getUsername());
        assertEquals("password", dataSource.getPassword());
        assertEquals("org.h2.Driver", dataSource.getDriverClassName());
    }

    @Test
    public void testEntityManagerFactoryBean() {
        Mockito.when(dataSourceModal.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        Mockito.when(dataSourceModal.getUsername()).thenReturn("user");
        Mockito.when(dataSourceModal.getPassword()).thenReturn("password");
        Mockito.when(dataSourceModal.getDriver()).thenReturn("org.h2.Driver");

        var entityManagerFactoryBean = dataSourceConfig.entityManagerFactoryBean(null, dataSourceConfig.falloutDataSource());

        assertNotNull(entityManagerFactoryBean);
        assertEquals("com.verizon.vbg.ledger.entity", entityManagerFactoryBean.getPackagesToScan().get(0));
        assertEquals("fallout-db", entityManagerFactoryBean.getPersistenceUnitName());
        assertNotNull(entityManagerFactoryBean.getJpaVendorAdapter());
        assertEquals(HibernateJpaVendorAdapter.class, entityManagerFactoryBean.getJpaVendorAdapter().getClass());
    }

    @Test
    public void testFalloutTransactionManager() {
        Mockito.when(dataSourceModal.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        Mockito.when(dataSourceModal.getUsername()).thenReturn("user");
        Mockito.when(dataSourceModal.getPassword()).thenReturn("password");
        Mockito.when(dataSourceModal.getDriver()).thenReturn("org.h2.Driver");

        var entityManagerFactory = dataSourceConfig.entityManagerFactoryBean(null, dataSourceConfig.falloutDataSource());
        var transactionManager = dataSourceConfig.falloutTransactionManager(entityManagerFactory);

        assertNotNull(transactionManager);
        verify(entityManagerFactory, times(1)).createEntityManager();
    }
}
