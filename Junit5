```java
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

import com.clp.circuitplay.vendor.data.CircuitDetailResponse;
import com.clp.circuitplay.vendor.data.CircuitData;
import com.clp.circuitplay.vendor.data.CircuitLst;
import com.clp.circuitplay.vendor.data.CircuitInfo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

class TrailProcessorTest {

    private TrailProcessor trailProcessor;
    private CircuitDetailsProvider circuitDetailsProvider;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;

    @BeforeEach
    void setUp() {
        circuitDetailsProvider = mock(CircuitDetailsProvider.class);
        trailProcessor = TrailProcessor.getInstance(circuitDetailsProvider);

        nodes = new ArrayList<>();
        nodes.add(new Node());
        nodes.add(new Node());

        links = new ArrayList<>();
        links.add(new Link());
        links.add(new Link());

        clrComponent = new ClrComponent();
        clrComponent.setCircuitComp(Arrays.asList(new CircuitComp()));

        clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);

        clliNodeMap = mock(Map.class);

        ukCount = new AtomicInteger(0);
    }

    @Test
    void testProcess_whenCircuitInfoIsNull() {
        clrComponent.setCircuitComp(null);

        trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(circuitDetailsProvider, times(0)).getCircuitDetails(any(), any());
    }

    @Test
    void testProcess_whenCircuitInfoIsEmpty() {
        clrComponent.setCircuitComp(new ArrayList<>());

        trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(circuitDetailsProvider, times(0)).getCircuitDetails(any(), any());
    }

    @Test
    void testProcess_whenCircuitDetailsProviderThrowsException() {
        when(circuitDetailsProvider.getCircuitDetails(any(), any())).thenThrow(new RuntimeException());

        trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(circuitDetailsProvider, times(1)).getCircuitDetails(any(), any());
    }

    CircuitInfo getCircuitInfo() {
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setLocationA(new ArrayList<>());
        circuitInfo.setLocationz(new ArrayList<>());
        circuitInfo.setAEnd(new ArrayList<>());
        circuitInfo.setZEnd(new ArrayList<>());
        circuitInfo.setCircuitAttributes(new ArrayList<>());
        return circuitInfo;
    }

    @Test
    void testProcess_whenTargetNodeIsFoundInFirstIteration() {
        CircuitDetailResponse circuitDetailResponse = new CircuitDetailResponse();
        circuitDetailResponse.setCircuitData(new CircuitData());
        circuitDetailResponse.getCircuitData().setCircuitLst(Arrays.asList(new CircuitLst()));
        circuitDetailResponse.getCircuitData().getCircuitLst().get(0).setCircuit(Arrays.asList(new Circuit()));
        circuitDetailResponse.getCircuitData().getCircuitLst().get(0).getCircuit().get(0).setCircuitInfo(Arrays.asList(getCircuitInfo()));

        when(circuitDetailsProvider.getCircuitDetails(any(), any())).thenReturn(circuitDetailResponse);

        trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(circuitDetailsProvider, times(1)).getCircuitDetails(any(), any());
    }

    @Test
    void testProcess_whenTargetNodeIsFoundInSecondIteration() {
        CircuitDetailResponse circuitDetailResponse = new CircuitDetailResponse();
        circuitDetailResponse.setCircuitData(new CircuitData());
        circuitDetailResponse.getCircuitData().setCircuitLst(Arrays.asList(new CircuitLst()));
        circuitDetailResponse.getCircuitData().getCircuitLst().get(0).setCircuit(Arrays.asList(new Circuit()));
        circuitDetailResponse.getCircuitData().getCircuitLst().get(0).getCircuit().get(0).setCircuitInfo(Arrays.asList(getCircuitInfo()));

        when(circuitDetailsProvider.getCircuitDetails(any(), any())).thenReturn(null, circuitDetailResponse);

        trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(circuitDetailsProvider, times(2)).getCircuitDetails(any(), any());
    }

    @Test
    void testProcess_whenTargetNodeIsNotFound() {
        when(circuitDetailsProvider.getCircuitDetails(any(), any())).thenReturn(null);

        trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(circuitDetailsProvider, times(2)).getCircuitDetails(any(), any());
    }

}
```