To achieve 100% code coverage for the "for" loop in the applyPostingRule method of the PostingRuleProcessingService class without directly accessing the private fields, you can use Java Reflection to set the necessary dependencies before executing the test cases. Here is an example of how you can write JUnit 5 test cases to achieve this:

```java
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class PostingRuleProcessingServiceTest {

    @Test
    public void testApplyPostingRuleForLoop() throws Exception {
        // Mock necessary dependencies
        PostingRuleProcessingService service = new PostingRuleProcessingService();
        service.setRuleLoadingService(new RuleLoadingService());
        service.setTopoApiClient(new TopologyApiClient());
        service.setAlarmPostingUtils(new AlarmPostingUtils());

        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "Rule 1", 1, 1, "Matching Criteria 1");
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = Mockito.mock(ResponseEntity.class);
        Mockito.when(service.getTopoApiClient().fetchTopologyTraversalDetails(Mockito.any(), Mockito.any(), Mockito.anyString())).thenReturn(responseEntity);

        // Use Java Reflection to set private fields
        MockedStatic<PostingRuleProcessingService> serviceMock = Mockito.mockStatic(PostingRuleProcessingService.class);
        
        serviceMock.when(() -> service.getRuleLoadingService()).thenReturn(service.getRuleLoadingService());
        serviceMock.when(() -> service.getTopoApiClient()).thenReturn(service.getTopoApiClient());
        serviceMock.when(() -> service.getAlarmPostingUtils()).thenReturn(service.getAlarmPostingUtils());

        // Call the method with the for loop
        Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

        // Assert the result
        assertEquals(alarm, result);

        serviceMock.close();
    }
}
```

In this test case, we use Mockito to mock the necessary dependencies and set up the expected behavior for the method calls. We then use Java Reflection through `MockedStatic` to set the private fields of the `PostingRuleProcessingService` class before invoking the method that contains the "for" loop.

Make sure to adjust the test case according to your actual implementation and dependencies. This approach allows you to test the private fields without exposing them as public in your application code.