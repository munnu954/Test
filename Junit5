To segregate wildcard searches and full searches for `locationCLLI` and `siteName`, you'll need to differentiate between whether the search is intended to be a wildcard search (using `LIKE`) or a full match search (using `=`). Hereâ€™s how you can update the code to handle both types of searches:

```java
private String queryBasedOnParameter(Map<String, Object> queryParams) {
    StringJoiner finalQuery = new StringJoiner(" ");

    // Start with the base query
    if ("LOCATION".equalsIgnoreCase((String) queryParams.get("outputControl"))) {
        finalQuery.add(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);
    }

    // Check for locationCLLI
    if (queryParams.containsKey("locationCLLI")) {
        String locationCLLI = (String) queryParams.get("locationCLLI");
        if (locationCLLI.contains("%")) { // Assuming '%' indicates a wildcard search
            finalQuery.add(" AND LOWER(site.clli_code) LIKE :locationCLLI");
        } else {
            finalQuery.add(" AND LOWER(site.clli_code) = :locationCLLI");
        }
    }

    // Check for siteName
    if (queryParams.containsKey("siteName")) {
        String siteName = (String) queryParams.get("siteName");
        if (siteName.contains("%")) { // Assuming '%' indicates a wildcard search
            finalQuery.add(" AND LOWER(site.site_name) LIKE :siteName");
        } else {
            finalQuery.add(" AND LOWER(site.site_name) = :siteName");
        }
    }

    return finalQuery.toString();
}
```

### Explanation:

1. **Base Query**: The code adds the base query if `outputControl` is "LOCATION".

2. **locationCLLI Check**:
   - The code checks if `locationCLLI` is present in `queryParams`.
   - If the `locationCLLI` value contains `%`, it assumes a wildcard search is intended and uses `LIKE`.
   - Otherwise, it performs a full match using `=`.

3. **siteName Check**:
   - Similarly, it checks if `siteName` is in `queryParams`.
   - If the `siteName` value contains `%`, it uses `LIKE` for a wildcard search.
   - Otherwise, it uses `=` for a full match.

This approach allows your query to dynamically handle both wildcard and full searches based on the input parameters provided.