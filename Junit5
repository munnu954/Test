The error you're encountering suggests that the actual `firstActivatedTime` and `lastActivatedTime` in the `CbrsSuppressionAlarm` class are being set to the current time when the test runs, rather than the expected fixed time. This could be happening because the test might be creating a new instance of `CbrsSuppressionAlarm` without setting these timestamps to the expected values.

To resolve this, you can modify the `CbrsSuppressionAlarm` class to include methods that allow setting the `firstActivatedTime` and `lastActivatedTime` to specific values for testing purposes. Here's how you can do it:

```java
public class CbrsSuppressionAlarm {
    // ... existing fields ...

    // Method to set the first activated time for testing
    public void setFirstActivatedTimeForTest(OffsetDateTime dateTime) {
        this.firstActivatedTime = dateTime;
    }

    // Method to set the last activated time for testing
    public void setLastActivatedTimeForTest(OffsetDateTime dateTime) {
        this.lastActivatedTime = dateTime;
    }

    // ... existing methods ...
}
```

In your test case, after creating an instance of `CbrsSuppressionAlarm`, you should set the `firstActivatedTime` and `lastActivatedTime` to the expected timestamp before calling the method that triggers the assertion:

```java
@Test
public void testApplyRootCauseAlarmSuppression_AlarmAfterTimeWindow_BeforeExpiryTime() throws Exception {
    // ... existing test setup code ...

    OffsetDateTime expectedTimestamp = OffsetDateTime.parse("2024-05-14T10:58:55Z", DateTimeFormatter.ISO_OFFSET_DATE_TIME);

    // Set the first and last activated times to the expected timestamp
    cbrsSuppressionAlarm.setFirstActivatedTimeForTest(expectedTimestamp);
    cbrsSuppressionAlarm.setLastActivatedTimeForTest(expectedTimestamp);

    // ... call the method that triggers the assertion ...

    // Assertions to check if the times are set correctly
    assertEquals(expectedTimestamp, cbrsSuppressionAlarm.getFirstActivatedTime());
    assertEquals(expectedTimestamp, cbrsSuppressionAlarm.getLastActivatedTime());

    // ... remaining assertions ...
}
```

By adding these methods and setting the timestamps in the test, you should be able to control the values and make the assertions pass. Remember to only use these methods for testing purposes and not in production code, as they can alter the state of the object in ways that are not intended for normal operation.

Let me know if you need further assistance with this issue! ðŸ˜Š