The error message you're encountering for the `testOnMessage_InvalidPayload` method indicates that the expected interaction with the `failedMessageService.saveFailedRecords` method did not occur. This typically means that the conditions for triggering the saving of a failed record were not met during the test execution.

### Understanding the Issue

In the `onMessage` method of `EventsMessageListener`, if the payload is invalid (e.g., null or improperly formatted), the method should handle the exception and invoke `failedMessageService.saveFailedRecords`. If this isn't happening in your test case, it could be due to several reasons:

1. The `onMessage` method might be catching the exception without invoking `failedMessageService.saveFailedRecords`.
2. The exception thrown during the parsing of the payload might not be handled correctly in the test setup.

### Updating the Test Case

To ensure that the test for an invalid payload is set up correctly, we need to simulate the behavior of the `onMessage` method when it processes an invalid payload. Here's how you can do that:

```java
@Test
public void testOnMessage_InvalidPayload() {
    // Simulate an invalid payload (e.g., a malformed JSON string)
    String invalidPayload = "invalid_json";

    // Call the method with the invalid payload
    eventsMessageListener.onMessage(mockConsumerRecord(invalidPayload), invalidPayload);

    // Verify that the failed message service is invoked due to invalid payload
    verify(failedMessageService, times(1)).saveFailedRecords(anyString(), anyString(), eq(invalidPayload), anyString(), anyChar());
}
```

### Key Changes Made:

1. **Invalid Payload**: The `invalidPayload` is set to a string that simulates a malformed JSON. This should trigger the exception handling in the `onMessage` method.
  
2. **Verification**: After invoking the method, we verify that the `failedMessageService.saveFailedRecords` method is called exactly once with the invalid payload.

### Additional Considerations

- **Exception Handling in `onMessage