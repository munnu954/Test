Here is an example of how to write JUnit 5 test case using Reflection API for the private methods in the MessageReaderService class:

```java
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

@ExtendWith(MockitoExtension.class)
public class MessageReaderServiceTest {

    MessageReaderService messageReaderService;

    @Mock
    VMBParams vmbParams;

    @Mock
    ApolloServiceHealth healthChecker;

    @Mock
    RuleLoadingService rulesLoadingService;
   
    @BeforeEach
    public void setup() {
        messageReaderService = new MessageReaderService();
        messageReaderService.params = vmbParams;
        messageReaderService.healthChecker = healthChecker;
        messageReaderService.rulesLoadingService = rulesLoadingService;
    }

    @Test
    @DisplayName("Test removeOrloadRule method")
    public void testRemoveOrLoadRule() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // Given
        HashMap<String, Object> ruleUpdateMap = new HashMap<>();
        ruleUpdateMap.put("ruleId", 1L);
        ruleUpdateMap.put("operation", "DELETE");

        // When
        Method method = MessageReaderService.class.getDeclaredMethod("removeOrloadRule", HashMap.class);
        method.setAccessible(true);
        method.invoke(messageReaderService, ruleUpdateMap);

        // Then
        // Assert the behavior or state after invoking the private method
    }

    @Test
    @DisplayName("Test retryReaderConnection method")
    public void testRetryReaderConnection() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // When
        Method method = MessageReaderService.class.getDeclaredMethod("retryReaderConnection");
        method.setAccessible(true);
        method.invoke(messageReaderService);

        // Then
        // Assert the behavior or state after invoking the private method
    }

    @Test
    @DisplayName("Test closeReader method")
    public void testCloseReader() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // When
        Method method = MessageReaderService.class.getDeclaredMethod("closeReader");
        method.setAccessible(true);
        method.invoke(messageReaderService);

        // Then
        // Assert the behavior or state after invoking the private method
    }
}
```

In this example, we are using the Reflection API to access and invoke the private methods `removeOrloadRule`, `retryReaderConnection`, and `closeReader` in the `MessageReaderService` class. By setting the methods as accessible, we can call these private methods in our JUnit test cases and ensure that they are covered for 100% code coverage.