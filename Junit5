To achieve 100% code coverage for the `if` statement in the `FalloutMessageScheduler` class, you need to cover all possible branches:

1. Both `getStartTime()` and `getEndTime()` are not null.
2. `getStartTime()` is null.
3. `getEndTime()` is null.
4. Both `getStartTime()` and `getEndTime()` are null.

The existing test cases already cover cases 1, 2, and 4. To complete the coverage, we need a test case where `getStartTime()` is not null, but `getEndTime()` is null. Here's how you can add that test case:

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.time.LocalDateTime;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobLauncher;
import org.springframework.batch.core.JobParameters;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(SpringExtension.class)
@SpringBootTest
public class FalloutMessageSchedulerTest {

    @Mock
    private KafkaFalloutService sqlService;

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private Job job;

    @InjectMocks
    private FalloutMessageScheduler falloutMessageScheduler;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testScheduleByFixedRate_withRecords() throws Exception {
        // Given
        when(sqlService.hasRecords()).thenReturn(true);
        JobExecution jobExecution = mock(JobExecution.class);
        when(jobLauncher.run(any(Job.class), any(JobParameters.class))).thenReturn(jobExecution);
        
        // Set specific behavior for jobExecution
        when(jobExecution.getStartTime()).thenReturn(LocalDateTime.now());
        when(jobExecution.getEndTime()).thenReturn(LocalDateTime.now());

        // When
        falloutMessageScheduler.scheduleByFixedRate();

        // Then
        verify(jobLauncher, times(1)).run(any(Job.class), any(JobParameters.class));
    }

    @Test
    public void testScheduleByFixedRate_withoutRecords() throws Exception {
        // Given
        when(sqlService.hasRecords()).thenReturn(false);

        // When
        falloutMessageScheduler.scheduleByFixedRate();

        // Then
        verify(jobLauncher, never()).run(any(Job.class), any(JobParameters.class));
    }

    @Test
    public void testScheduleByFixedRate_jobExecutionWithNullStartOrEndTime() throws Exception {
        // Given
        when(sqlService.hasRecords()).thenReturn(true);
        JobExecution jobExecution = mock(JobExecution.class);
        when(jobLauncher.run(any(Job.class), any(JobParameters.class))).thenReturn(jobExecution);

        // Set start or end time to null
        when(jobExecution.getStartTime()).thenReturn(null);
        when(jobExecution.getEndTime()).thenReturn(null);

        // When / Then
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            falloutMessageScheduler.scheduleByFixedRate();
        });

        assertEquals("Job Execution Start or End time is null", exception.getMessage());
    }

    @Test
    public void testScheduleByFixedRate_jobExecutionWithEndTimeNull() throws Exception {
        // Given
        when(sqlService.hasRecords()).thenReturn(true);
        JobExecution jobExecution = mock(JobExecution.class);
        when(jobLauncher.run(any(Job.class), any(JobParameters.class))).thenReturn(jobExecution);

        // Set getEndTime() to null
        when(jobExecution.getStartTime()).thenReturn(LocalDateTime.now());
        when(jobExecution.getEndTime()).thenReturn(null);

        // When / Then
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            falloutMessageScheduler.scheduleByFixedRate();
        });

        assertEquals("Job Execution Start or End time is null", exception.getMessage());
    }
}
```

### Explanation of the New Test Case:

- **`testScheduleByFixedRate_jobExecutionWithEndTimeNull()`:** This test case specifically addresses the branch where `getStartTime()` is not null, but `getEndTime()` is null. It ensures that an `IllegalArgumentException` is thrown, covering this path in the conditional logic.

By adding this test, all branches of the `if` statement should be covered, achieving 100% code coverage.