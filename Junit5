To ensure 100% code coverage for the `MtnInsightsValidator` class, we need to write JUnit 5 test cases that cover all branches and possible scenarios. Here's how you can achieve that:

```java
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    void setUp() {
        validator = new MtnInsightsValidator();
    }

    @Test
    void testValidateMtnInsightsRequestInvalidRequestType() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.OTHER); // Set an invalid request type

        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    void testValidateMtnInsightsRequestKeyAttributesNull() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);

        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    void testValidateMtnInsightsRequestWithKeyAttributes() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setMtn("mtn");
        attributes.setInsightCategory("category");
        attributes.setInsightName("name");
        attributes.setOutageId("outageId");
        request.setKeyAttributes(attributes);

        // No exception should be thrown
        validator.validate(request);
    }

    @Test
    void testValidateMtnInsightsRequestWithListKeyAttributes() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setMtn("mtn");
        attributes.setInsightCategory("category");
        attributes.setInsightName("name");
        attributes.setOutageId("outageId");
        request.setListKeyAttributes(new MtnInsightsAttributes[]{attributes});

        // No exception should be thrown
        validator.validate(request);
    }

    @Test
    void testValidateMtnInsightsSearchRequestValid() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        ServiceHeader header = new ServiceHeader();
        header.setClientId("clientId");
        header.setClientTransactionId("transactionId");
        header.setServiceName("serviceName");
        request.setServiceHeader(header);

        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setEcpdId("ecpdId");
        searchParam.setMtn("mtn");
        searchParam.setInsightCategory(new String[]{"category"});
        searchParam.setInsightName(new String[]{"name"});
        request.setServiceRequest(searchParam);

        // No exception should be thrown
        validator.validate(request);
    }

    @Test
    void testValidateMtnInsightsSearchRequestMissingFields() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        ServiceHeader header = new ServiceHeader();
        header.setClientId("clientId");
        header.setClientTransactionId("transactionId");
        header.setServiceName("serviceName");
        request.setServiceHeader(header);

        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        // Missing some required fields
        request.setServiceRequest(searchParam);

        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    void testValidateMtnInsightsSearchRequestEmptyFields() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        ServiceHeader header = new ServiceHeader();
        header.setClientId("clientId");
        header.setClientTransactionId("transactionId");
        header.setServiceName("serviceName");
        request.setServiceHeader(header);

        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setEcpdId("");
        searchParam.setMtn("");
        searchParam.setInsightCategory(new String[]{""});
        searchParam.setInsightName(new String[]{""});
        request.setServiceRequest(searchParam);

        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }
}
```

### Explanation:

1. **Invalid Request Type**: Checks that an `InvalidRequestException` is thrown when the request type is not `INSERTMTNINSIGHTS`.

2. **Key Attributes Null**: Ensures an exception is thrown when both `keyAttributes` and `listKeyAttributes` are null.

3. **Key Attributes Present**: Validates that no exception is thrown when valid `keyAttributes` are present.

4. **List Key Attributes Present**: Validates that no exception is thrown when valid `listKeyAttributes` are present.

5. **Valid MtnInsightsSearchRequest**: Ensures no exceptions are thrown when all required fields are provided in `MtnInsightsSearchRequest`.

6. **Missing Fields in MtnInsightsSearchRequest**: Checks that an exception is thrown when required fields are missing in the search request.

7. **Empty Fields in MtnInsightsSearchRequest**: Ensures an exception is thrown when fields are empty in the search request.

This set of tests covers all branches and should provide full test coverage for the `MtnInsightsValidator` class.