import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.net.URI;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

@ExtendWith(MockitoExtension.class)
public class ApiOperationTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlarmGroupingParams configParams;

    @InjectMocks
    private ApiOperation apiOperation;

    @Test
    void testGetAlarmDetailsById_NotFound() {
        // Mocking the values for AlarmGroupingParams
        when(configParams.getAlarmFetchURL()).thenReturn("http://mocked-url");
        when(configParams.getAlarmFilterKey()).thenReturn("mocked-auth-key");

        String alarmIdentity = "12345";
        String url = configParams.getAlarmFetchURL();
        
        // Setting up HttpHeaders
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", configParams.getAlarmFilterKey());

        // Creating a mock request entity
        HttpEntity<Object> entity = new HttpEntity<>(null, headers);

        // Mocking RestTemplate to throw HttpClientErrorException.NotFound
        when(restTemplate.exchange(eq(url), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND, "Not Found"));

        // Execute method under test
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Assertions
        assertNull(result, "Expected result to be null when NotFound exception occurs");

        // Verify that exchange method was called once
        verify(restTemplate, times(1)).exchange(eq(url), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class));
    }
}