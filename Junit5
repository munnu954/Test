```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.env.Environment;
import io.micrometer.core.instrument.DistributionSummary;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Tags;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

@ExtendWith(MockitoExtension.class)
public class PostingServiceTest {

    @InjectMocks
    private PostingService postingService;

    @Mock
    private Environment env;

    @Mock
    private HistogramBuckets histogramBuckets;

    @Mock
    private MeterRegistry meterRegistry;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInitialize() throws Exception {
        // Mock dependencies
        String activeProfile = "testProfile";
        String applicationName = "testApplication";
        when(env.getProperty(AlarmPostingConstants.ACTIVE_PROFILE)).thenReturn(activeProfile);
        when(env.getProperty(AlarmPostingConstants.APPLICATION_NAME)).thenReturn(applicationName);

        double[] boundaries = { 1.0, 2.0, 4.0, 8.0 }; // Example histogram boundaries
        when(histogramBuckets.histogramBoundaries()).thenReturn(boundaries);

        // Execute
        postingService.initialize();

        // Verify
        verify(histogramBuckets).histogramBoundaries();
        verify(meterRegistry).summary(eq(AlarmPostingConstants.METRIC_BASENAME), any(), any());
        verify(summary).serviceLevelObjectives(boundaries);
        verify(summary).tags(Tags.of(
            Tag.of(AlarmPostingConstants.ENVIRONMENT, activeProfile),
            Tag.of(AlarmPostingConstants.SERVICE, applicationName),
            Tag.of(AlarmPostingConstants.LEVEL, AlarmPostingConstants.STAGE)
        ));
        verify(summary).register(meterRegistry);
    }

    private <T> T getPrivateField(Object object, String fieldName) throws Exception {
        Field field = object.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        return (T) field.get(object);
    }
}
```