import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.ExitStatus;

import java.time.LocalDateTime;

import static org.mockito.Mockito.*;

public class FalloutJobExecutionListenerTest {

    private FalloutJobExecutionListener listener;
    private JobExecution jobExecution;

    @BeforeEach
    public void setUp() {
        listener = new FalloutJobExecutionListener();
        jobExecution = mock(JobExecution.class);
    }

    @Test
    public void testBeforeJob() {
        when(jobExecution.getJobInstance()).thenReturn(mock(JobInstance.class));
        when(jobExecution.getJobInstance().getJobName()).thenReturn("SampleJob");

        listener.beforeJob(jobExecution);

        // Verify that logging occurs (you may need to use a logging framework test utility)
    }

    @Test
    public void testAfterJob_SuccessfulJob() {
        when(jobExecution.getStartTime()).thenReturn(LocalDateTime.now().minusSeconds(5));
        when(jobExecution.getEndTime()).thenReturn(LocalDateTime.now());
        when(jobExecution.getStatus()).thenReturn(BatchStatus.COMPLETED);
        when(jobExecution.getJobInstance()).thenReturn(mock(JobInstance.class));
        when(jobExecution.getJobInstance().getJobName()).thenReturn("SampleJob");
        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.COMPLETED);

        listener.afterJob(jobExecution);

        // Verify logging and that job status remains COMPLETED
        verify(jobExecution, times(1)).getStatus();
    }

    @Test
    public void testAfterJob_NullStartTime() {
        when(jobExecution.getStartTime()).thenReturn(null);
        when(jobExecution.getEndTime()).thenReturn(LocalDateTime.now());

        assertThrows(IllegalArgumentException.class, () -> {
            listener.afterJob(jobExecution);
        });
    }

    @Test
    public void testAfterJob_NullEndTime() {
        when(jobExecution.getStartTime()).thenReturn(LocalDateTime.now());
        when(jobExecution.getEndTime()).thenReturn(null);

        assertThrows(IllegalArgumentException.class, () -> {
            listener.afterJob(jobExecution);
        });
    }

    @Test
    public void testAfterJob_UnsuccessfulJob() {
        when(jobExecution.getStartTime()).thenReturn(LocalDateTime.now().minusSeconds(5));
        when(jobExecution.getEndTime()).thenReturn(LocalDateTime.now());
        when(jobExecution.getStatus()).thenReturn(BatchStatus.FAILED);
        when(jobExecution.getJobInstance()).thenReturn(mock(JobInstance.class));
        when(jobExecution.getJobInstance().getJobName()).thenReturn("SampleJob");
        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.FAILED);

        listener.afterJob(jobExecution);

        // Verify that job status is set to STOPPED
        verify(jobExecution, times(1)).setStatus(BatchStatus.STOPPED);
    }
}
