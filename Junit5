import org.apache.kafka.clients.producer.KafkaProducer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class KafkaProducerServiceTest {

    @Mock
    private KafkaProducer<String, String> mockProducer;

    private KafkaProducerService producerService;

    @BeforeEach
    public void setUp() {
        producerService = new KafkaProducerService(mockProducer);
    }

    @Test
    public void testReadObject() throws IOException, ClassNotFoundException {
        // Create a serialized byte array of KafkaProducerService instance
        byte[] serializedObject = SerializationUtils.serialize(producerService);

        // Deserialize the byte array
        ByteArrayInputStream bais = new ByteArrayInputStream(serializedObject);
        ObjectInputStream ois = new ObjectInputStream(bais);
        KafkaProducerService deserializedService = (KafkaProducerService) ois.readObject();

        assertNotNull(deserializedService);
        assertNotNull(deserializedService.producer);
    }

    @Test
    public void testCreateProducerException() {
        Properties properties = new Properties();
        when(mockProducer.get(producer)).thenThrow(new RuntimeException("Failed to create Kafka producer"));
        RuntimeException exception = org.junit.jupiter.api.Assertions.assertThrows(
                RuntimeException.class,
                () -> producerService.createProducer());

        assertEquals("Failed to create Kafka producer", exception.getMessage());
    }
}