To achieve 100% code coverage for the `removeNullValuesInJsonAttributes` method in the `DeduplicationUtils` class, we need to create JUnit 5 test cases that cover all possible branches in the method. This includes scenarios where the input values are JSON strings, non-JSON objects, and null or empty values.

Below is the JUnit 5 test code that demonstrates how to cover all these branches:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class DeduplicationUtilsTest {

    private DeduplicationUtils deduplicationUtils;

    @BeforeEach
    public void setUp() {
        deduplicationUtils = new DeduplicationUtils();
        // Mocking RulesConstants.getObjectMapper() to return a new ObjectMapper
        RulesConstants.setObjectMapper(new ObjectMapper());
    }

    @Test
    public void testRemoveNullValuesInJsonAttributes_NullValues() {
        Map<String, Object> input = new HashMap<>();
        input.put("type", "RAN");
        input.put("equipmentType", "EBH");
        input.put("RAN", Map.of("nodeId", "", "cellId", "", "du", null, "technology", ""));
        
        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("type", "RAN");
        expectedOutput.put("equipmentType", "EBH");
        expectedOutput.put("RAN", new HashMap<>()); // Empty map for RAN
        
        Map<String, Object> actualOutput = deduplicationUtils.removeNullValuesInJsonAttributes(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testRemoveNullValuesInJsonAttributes_EmptyString() {
        Map<String, Object> input = new HashMap<>();
        input.put("type", "RAN");
        input.put("equipmentType", "EBH");
        input.put("RAN", "{\"nodeId\":\"\", \"cellId\":\"\"}");

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("type", "RAN");
        expectedOutput.put("equipmentType", "EBH");
        expectedOutput.put("RAN", new HashMap<>()); // Empty map for RAN
        
        Map<String, Object> actualOutput = deduplicationUtils.removeNullValuesInJsonAttributes(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testRemoveNullValuesInJsonAttributes_NonJsonObject() {
        Map<String, Object> input = new HashMap<>();
        input.put("type", "RAN");
        input.put("equipmentType", "EBH");
        input.put("RAN", "Non-JSON String");

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("type", "RAN");
        expectedOutput.put("equipmentType", "EBH");
        expectedOutput.put("RAN", "Non-JSON String");
        
        Map<String, Object> actualOutput = deduplicationUtils.removeNullValuesInJsonAttributes(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testRemoveNullValuesInJsonAttributes_JsonObjectWithNull() {
        Map<String, Object> input = new HashMap<>();
        input.put("type", "RAN");
        input.put("equipmentType", "EBH");
        input.put("RAN", Map.of("nodeId", null, "cellId", "someValue"));

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("type", "RAN");
        expectedOutput.put("equipmentType", "EBH");
        expectedOutput.put("RAN", Map.of("cellId", "someValue")); // Remove nodeId since it's null
        
        Map<String, Object> actualOutput = deduplicationUtils.removeNullValuesInJsonAttributes(input);
        assertEquals(expectedOutput, actualOutput);
    }
}
```

### Explanation of Test Cases
1. **testRemoveNullValuesInJsonAttributes_NullValues**: Tests a map with a nested map that contains null/empty values.
   
2. **testRemoveNullValuesInJsonAttributes_EmptyString**: Tests a map with a JSON string that contains empty strings.

3. **testRemoveNullValuesInJsonAttributes_NonJsonObject**: Tests a map where one of the values is a non-JSON string.

4. **testRemoveNullValuesInJsonAttributes_JsonObjectWithNull**: Tests a map containing a nested map with some values as null.

These test cases ensure that all branches of the method are covered, particularly those that involve calling `writeValueAsString` and the different scenarios of handling JSON values. Make sure to adjust the `RulesConstants` class to allow mocking of the `ObjectMapper` as shown in the setup method.