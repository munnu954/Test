import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Method;
import java.nio.file.*;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class ArchivalFileMovementTest {

    @InjectMocks
    private ArchivalFileMovement archivalFileMovement;

    private static final Logger LOGGER = LoggerFactory.getLogger(ArchivalFileMovementTest.class);

    @BeforeEach
    public void setUp() {
        archivalFileMovement = new ArchivalFileMovement();
    }

    @Test
    public void testMoveFilesMatchingPattern() throws Exception {
        String sourcePathPattern = "file:/source/*.txt";
        String destinationPath = "/destination";

        Path sourceDir = Paths.get("/source");
        String filePattern = ".*\\.txt";

        // Mocking Files.list
        Path mockPath = mock(Path.class);
        when(mockPath.getFileName()).thenReturn(Paths.get("test.txt"));
        when(Files.list(sourceDir)).thenReturn(Stream.of(mockPath));

        // Testing moveFilesMatchingPattern
        archivalFileMovement.moveFilesMatchingPattern(sourcePathPattern, destinationPath);

        // Verifying the moveFile method call
        verify(mockPath, times(1)).getFileName();
    }

    @Test
    public void testMoveFilesMatchingPatternWithException() throws Exception {
        String sourcePathPattern = "file:/source/*.txt";
        String destinationPath = "/destination";

        Path sourceDir = Paths.get("/source");
        String filePattern = ".*\\.txt";

        // Mocking Files.list to throw an exception
        when(Files.list(sourceDir)).thenThrow(new RuntimeException("Test Exception"));

        Exception exception = assertThrows(RuntimeException.class, () -> {
            archivalFileMovement.moveFilesMatchingPattern(sourcePathPattern, destinationPath);
        });

        assertEquals("Test Exception", exception.getMessage());
    }

    @Test
    public void testMoveFile() throws Exception {
        Path sourcePath = Paths.get("/source/test.txt");
        String destinationPath = "/destination";

        Path destinationDir = Paths.get(destinationPath);
        Path destination = destinationDir.resolve(sourcePath.getFileName());

        // Mocking Files.move
        doNothing().when(Files.class);
        Files.move(sourcePath, destination, StandardCopyOption.REPLACE_EXISTING);

        // Testing moveFile
        archivalFileMovement.moveFile(sourcePath, destinationPath);

        // Verifying the move method call
        verify(Files.class, times(1)).move(sourcePath, destination, StandardCopyOption.REPLACE_EXISTING);
    }

    @Test
    public void testGetSourceDirectory() throws Exception {
        String sourcePathPattern = "file:/source/*.txt";

        Method method = ArchivalFileMovement.class.getDeclaredMethod("getSourceDirectory", String.class);
        method.setAccessible(true);
        Path result = (Path) method.invoke(archivalFileMovement, sourcePathPattern);

        assertEquals(Paths.get("/source"), result);
    }

    @Test
    public void testGetFilePattern() throws Exception {
        String sourcePathPattern = "file:/source/*.txt";

        Method method = ArchivalFileMovement.class.getDeclaredMethod("getFilePattern", String.class);
        method.setAccessible(true);
        String result = (String) method.invoke(archivalFileMovement, sourcePathPattern);

        assertEquals(".*\\.txt", result);
    }
}
