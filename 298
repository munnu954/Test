To achieve 100% code coverage for the mentioned if statement in the `applyPostingRules` method of the `PostingRuleProcessingService` class without making the fields public, you can use reflection to set the values of the private fields. Here is a sample JUnit 5 test class that covers all 6 branches of the mentioned if statement:

```java
import org.junit.jupiter.api.Test;

import java.lang.reflect.Field;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class PostingRuleProcessingServiceTest {

    @Test
    void testApplyPostingRules() throws Exception {
        PostingRuleProcessingService postingRuleProcessingService = new PostingRuleProcessingService();
        RuleLoadingService ruleLoadingService = mock(RuleLoadingService.class);
        TopologyApiClient topoApiClient = mock(TopologyApiClient.class);

        // Use reflection to set private fields
        Field ruleLoadingServiceField = PostingRuleProcessingService.class.getDeclaredField("ruleLoadingService");
        ruleLoadingServiceField.setAccessible(true);
        ruleLoadingServiceField.set(postingRuleProcessingService, ruleLoadingService);

        Field topoApiClientField = PostingRuleProcessingService.class.getDeclaredField("topoApiClient");
        topoApiClientField.setAccessible(true);
        topoApiClientField.set(postingRuleProcessingService, topoApiClient);

        postingRuleProcessingService.setAlarmedObjectExpression("TestAlarmedObjectExpression");
        postingRuleProcessingService.setTopologyObjectEligibilityCheckValue("TestTopologyObjectEligibilityCheckValue");
        postingRuleProcessingService.setTopologyObjectEligibilityCheckExpression("TestTopologyObjectEligibilityCheckExpression");
        postingRuleProcessingService.setComponentIDAttributeName("TestComponentIDAttributeName");
        postingRuleProcessingService.setTopologyDetailsAlarmedObjectExpression("TestTopologyDetailsAlarmedObjectExpression");

        PostingRule postingRule1 = new PostingRule(1, "Rule1", 1, 1, "MatchingCriteria1");
        PostingRule postingRule2 = new PostingRule(2, "Rule2", 2, 1, "MatchingCriteria2");

        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("key1", "value1");

        when(ruleLoadingService.getRuleMap()).thenReturn(Map.of(1L, postingRule1, 2L, postingRule2));

        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("TestAlarmIdentity");

        Alarm result1 = postingRuleProcessingService.applyPostingRules(alarm);

        // Test when matchResult is true and postingRuleMatch is null
        assertEquals("TestAlarmIdentity", result1.getAlarmIdentity());

        postingRule1.setRulePriority(3);
        Alarm result2 = postingRuleProcessingService.applyPostingRules(alarm);

        // Test when matchResult is true and postingRule1 has higher priority than postingRule2
        assertEquals("TestAlarmIdentity", result2.getAlarmIdentity());

        postingRule2.setRulePriority(4);
        Alarm result3 = postingRuleProcessingService.applyPostingRules(alarm);

        // Test when matchResult is true but postingRule2 has higher priority than postingRule1
        assertEquals("TestAlarmIdentity", result3.getAlarmIdentity());

        postingRule1.setRuleIsActive(false);
        Alarm result4 = postingRuleProcessingService.applyPostingRules(alarm);

        // Test when matchResult is true but postingRule1 is inactive
        assertEquals("TestAlarmIdentity", result4.getAlarmIdentity());

        when(topoApiClient.fetchTopologyTraversalDetails(alarm, postingRule1, "TestComponentId")).thenReturn(null);
        Alarm result5 = postingRuleProcessingService.applyPostingRules(alarm);

        // Test when matchResult is true and topology traversal details are null
        assertEquals("TestAlarmIdentity", result5.getAlarmIdentity());

        when(topoApiClient.fetchTopologyTraversalDetails(alarm, postingRule1, "TestComponentId")).thenReturn(mock(ResponseEntity.class));
        Alarm result6 = postingRuleProcessingService.applyPostingRules(alarm);

        // Test when matchResult is true and topology traversal details are not null
        assertEquals("TestAlarmIdentity", result6.getAlarmIdentity());
    }
}
```

In this test class, we use reflection to set the private fields `ruleLoadingService` and `topoApiClient` of the `PostingRuleProcessingService` class. By mocking the dependencies and setting up the necessary conditions, we are able to cover all 6 branches of the mentioned if statement in the `applyPostingRules` method.