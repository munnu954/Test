```java
@Service
public class CoconutServiceVersion3 {
    @Autowired
    CoconutDeviceDao coconutDeviceDao;

    @Autowired
    EuipmentListCoconutDeviceDao euipmentListCoconutDeviceDao;

    @Autowired
    EquipmentListCoconutDeviceV3Dao equipmentListCoconutDeviceV3Dao;

    @Autowired
    CoconutDeviceMSConstants coconutDeviceMSConstants;

    private static Logger logger = LoggerFactory.getLogger(CoconutServiceVersion3.class);

    //newly created for v3api
    public UTSEquipmentList getCOCONUTEquipListV3(EquipmentInputRequest request, UTSEquipmentList utsEquipmentList) throws InternalServerErrorException, NoDataFoundException, InterruptedException, ExecutionException, DaoException {
        try {
            String qry = null;
            String fullQuery = null;
            Map<String, Object> criteria = request.getRequestParameters();
            qry = queryBasedOnParameter(criteria);
            fullQuery = "select COUNT() from (" + qry + ")";

            Integer skip = 0;
            Integer limit = 10;

            if (criteria.containsKey("pageNo")) {
                if (criteria.get("pageNo").equals("1")) {
                    skip = 0;
                } else {
                    skip = (Integer.parseInt(criteria.get("pageNo").toString())  Integer.parseInt(criteria.get("size").toString()));
                    skip = skip - Integer.parseInt(criteria.get("size").toString());
                }
            } else {
                skip = 0;
            }

            if (criteria.containsKey("size")) {
                limit = skip + Integer.parseInt(criteria.get("size").toString());
            } else {
                limit = 10;
            }

            qry = "select  from (select t., rownum as rn from (" + qry;
            qry = qry.concat(" ) t ) WHERE rn BETWEEN " + skip + " and " + limit + " ");

            if (criteria.containsKey("sortByField")) {
                qry = qry.concat(" order by " + criteria.get("sortByField") + " ");
            }

            if (criteria.containsKey("sortDirection")) {
                qry = qry.concat(" " + criteria.get("sortDirection") + " ");
            }

            UTSEquipmentList response = new UTSEquipmentList();
            response = equipmentListCoconutDeviceV3Dao.getEquipListDaoV3(criteria, qry, fullQuery, utsEquipmentList, request);
            return response;
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            throw new InternalServerErrorException(ex.getMessage());
        }
    }

    private String queryBasedOnParameter(Map<String, Object> queryParams) {
        String query = "";
        StringJoiner finalQuery = new StringJoiner(" "); // Use " " as the delimiter for the final query

        if ("LOCATION".equalsIgnoreCase((String) queryParams.get("outputControl"))) {
            finalQuery.add(coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY); // Start with the base query

            // Append WHERE conditions based on the presence of locationCLLI and siteName
            if (queryParams.containsKey("locationCLLI")) {
                finalQuery.add("AND locationCLLI = '" + queryParams.get("locationCLLI") + "'"); 
            }
            if (queryParams.containsKey("siteName")) {
                finalQuery.add("AND siteName = '" + queryParams.get("siteName") + "'");
            }
        }
        
        return finalQuery.toString();
    }
}
```

Explanation of Changes:

1. Delimiter in `StringJoiner`: The `StringJoiner` is initialized with `" "` as the delimiter to ensure that the resulting query has appropriate spaces between conditions.

2. Conditional `WHERE` Clauses:
   - Inside the `if ("LOCATION".equalsIgnoreCase((String) queryParams.get("outputControl")))` block, the `finalQuery` is started with the base query from `coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY`.
   - We then check for the presence of `locationCLLI` and `siteName` in the `queryParams`. 
   - If `locationCLLI` is present, we