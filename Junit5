import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.CompletableFuture;

import java.util.concurrent.CompletionException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BatchLoaderUtilsTest {

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @InjectMocks
    private BatchLoaderUtils batchLoaderUtils;

    @BeforeEach
    void setUp() {
        // Set up any necessary mocks or test data
    }

    @Test
    void sendMessageAsync_Success() {
        // Arrange
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("topic", "key", "payload");
        SendResult<String, String> sendResult = mock(SendResult.class);
        CompletableFuture<SendResult<String, String>> future = CompletableFuture.completedFuture(sendResult);
        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Act
        batchLoaderUtils.sendMessageAsync(producerRecord, "transactionId", "payload", "topic", "insightName", 'Y', "errorCategory");

        // Assert
        verify(kafkaTemplate, times(1)).send(any(ProducerRecord.class));
        verify(failedMessageService, never()).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar(), anyString(), anyString());
    }

    @Test
    void sendMessageAsync_Failure() {
        // Arrange
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("topic", "key", "payload");
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.completeExceptionally(new RuntimeException("Failed to send message"));
        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Act
        batchLoaderUtils.sendMessageAsync(producerRecord, "transactionId", "payload", "topic", "insightName", 'Y', "errorCategory");

        // Assert
        verify(kafkaTemplate, times(1)).send(any(ProducerRecord.class));
        verify(failedMessageService, times(1)).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar(), anyString(), anyString());
    }

    @Test
    void sendMessageAsync_ExceptionWithLongErrorMessage() {
        // Arrange
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("topic", "key", "payload");
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.completeExceptionally(new CompletionException(new RuntimeException("This is a very long error message that should be truncated to 200 characters")));
        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Act
        batchLoaderUtils.sendMessageAsync(producerRecord, "transactionId", "payload", "topic", "insightName", 'Y', "errorCategory");

        // Assert
        verify(kafkaTemplate, times(1)).send(any(ProducerRecord.class));
        verify(failedMessageService, times(1)).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar(), anyString(), anyString());
    }
}