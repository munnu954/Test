The error you're encountering typically arises when attempting to mock a method that isn't being called on a mock object. In your case, it seems like `MtnInsightsAttributes` might not be properly mocked, or the method calls are not being intercepted as expected. Let's ensure that the `MtnInsightsAttributes` object is a proper mock and that we're calling methods on it correctly. Here's the revised and executable JUnit 5 test code:

```java
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import com.vz.s360.vbg.eventledger.exception.InvalidRequestException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class MtnInsightsValidatorTest {

    @InjectMocks
    private MtnInsightsValidator mtnInsightsValidator;

    @Mock
    private MtnInsightsAttributes mtnInsightsAttributes;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testValidateIterator_AllFieldsNull() {
        when(mtnInsightsAttributes.getEcpdId()).thenReturn("ecpdId");
        when(mtnInsightsAttributes.getMtn()).thenReturn(null);
        when(mtnInsightsAttributes.getInsightCategory()).thenReturn(null);
        when(mtnInsightsAttributes.getInsightName()).thenReturn(null);
        when(mtnInsightsAttributes.getOutageId()).thenReturn("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }

    @Test
    public void testValidateIterator_InsightCategoryAndNameNull() {
        when(mtnInsightsAttributes.getEcpdId()).thenReturn("ecpdId");
        when(mtnInsightsAttributes.getMtn()).thenReturn("mtn");
        when(mtnInsightsAttributes.getInsightCategory()).thenReturn(null);
        when(mtnInsightsAttributes.getInsightName()).thenReturn(null);
        when(mtnInsightsAttributes.getOutageId()).thenReturn("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }

    @Test
    public void testValidateIterator_ValidMyBizAttributes() {
        when(mtnInsightsAttributes.getEcpdId()).thenReturn("ecpdId");
        when(mtnInsightsAttributes.getMtn()).thenReturn(null);
        when(mtnInsightsAttributes.getInsightCategory()).thenReturn(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        when(mtnInsightsAttributes.getInsightName()).thenReturn(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        when(mtnInsightsAttributes.getOutageId()).thenReturn("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }

    @Test
    public void testValidateIterator_MissingMtnOrEcpdId() {
        when(mtnInsightsAttributes.getEcpdId()).thenReturn(null);
        when(mtnInsightsAttributes.getMtn()).thenReturn(null);
        when(mtnInsightsAttributes.getInsightCategory()).thenReturn(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        when(mtnInsightsAttributes.getInsightName()).thenReturn(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        when(mtnInsightsAttributes.getOutageId()).thenReturn("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }
    
    @Test
    public void testValidateIterator_EmptyMtnOrInsightCategoryOrEcpdId() {
        when(mtnInsightsAttributes.getEcpdId()).thenReturn("");
        when(mtnInsightsAttributes.getMtn()).thenReturn("");
        when(mtnInsightsAttributes.getInsightCategory()).thenReturn(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        when(mtnInsightsAttributes.getInsightName()).thenReturn(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        when(mtnInsightsAttributes.getOutageId()).thenReturn("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }
}
```

### Key Changes:

1. **Mock Initialization**: Ensure `MockitoAnnotations.openMocks(this)` is called in the `setUp()` method to initialize the mocks correctly.

2. **Proper Stubbing**: Ensure all method calls on the mock object `mtnInsightsAttributes` are stubbed with `when()` and `thenReturn()`, even if they return `null`.

3. **Exception Message Verification**: Use the `assertThrows` method with the expected message to verify that the correct exception is thrown with the right message.

By following these steps, the test cases should execute without the `MissingMethodInvocationException`, and you will achieve the desired code coverage for the specified branches.