import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.apollo.suppression.repository.model.AlarmDetailsModel;
import com.verizon.apollo.suppression.repository.model.CbrsSuppressionAlarm;
import com.verizon.apollo.suppression.repository.CbrsSuppressionRepository;
import com.verizon.apollo.suppression.repository.AlarmPostingRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EnrichmentServiceTest {

    @Mock
    private CbrsSuppressionRepository cbrsSuppressionRepository;

    @Mock
    private AlarmPostingRepository alarmPostingRepository;

    @InjectMocks
    private EnrichmentService enrichmentService;

    @Test
    void testExecuteEnrichmentTask_WhenActiveCbrsSuppressionAlarmListIsEmpty() {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();
        Boolean isAlarmToBeEnriched = true;

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt())).thenReturn(Optional.empty());

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, isAlarmToBeEnriched);

        assertFalse(result);
        verify(cbrsSuppressionRepository, times(1)).retrieveActiveSuppressionPatterns(anyInt());
        verifyNoInteractions(alarmPostingRepository);
    }

    @Test
    void testExecuteEnrichmentTask_WhenActiveCbrsSuppressionAlarmListIsNotEmpty() throws JsonProcessingException {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();
        Boolean isAlarmToBeEnriched = true;

        List<CbrsSuppressionAlarm> activeCbrsSuppressionAlarmList = new ArrayList<>();
        activeCbrsSuppressionAlarmList.add(new CbrsSuppressionAlarm());

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt())).thenReturn(Optional.of(activeCbrsSuppressionAlarmList));
        when(alarmPostingRepository.findByAlarmIdentity(anyString())).thenReturn(Optional.of(new AlarmDetailsModel("", 1L));
        when(alarmPostingRepository.updateAlarmDetails(anyString(), anyString(), anyLong())).thenReturn(1);
        when(cbrsSuppressionRepository.updateAlarmEnrichmentTime(any(OffsetDateTime.class), anyString())).thenReturn(1);

        ReflectionTestUtils.setField(enrichmentService, "cbrsDBMaxAttempts", 3);

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, isAlarmToBeEnriched);

        assertFalse(result);
        verify(cbrsSuppressionRepository, times(1)).retrieveActiveSuppressionPatterns(anyInt());
        verify(alarmPostingRepository, times(1)).findByAlarmIdentity(anyString());
        verify(alarmPostingRepository, times(1)).updateAlarmDetails(anyString(), anyString(), anyLong());
        verify(cbrsSuppressionRepository, times(1)).updateAlarmEnrichmentTime(any(OffsetDateTime.class), anyString());
    }
}