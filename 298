import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

@SpringBootTest
public class YourTestClass {

    @MockBean
    private Util util;

    @MockBean
    private KafkaConsumer kafkaConsumer;

    @Test
    void consume_ShouldNotWriteToExternalFileAndAuditQueue_WhenInputFileExistsAndTopicAccessible() throws IOException, ExecutionException, InterruptedException {
        // Arrange
        when(util.isKafkaTopicPresent(ArgumentMatchers.any())).thenReturn(false); // Simulating topic accessible
        doNothing().when(kafkaConsumer).writeLogToFile(ArgumentMatchers.any(), ArgumentMatchers.any());

        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setInputFilePath("C:/Temp/input.xml");
        String data = "{\"inputFilePath\":\"C:/Temp/input.xml\"}";

        // Act
        kafkaConsumer.consume(data);

        // Assert
        verify(kafkaConsumer, never()).writeLogToFile(ArgumentMatchers.any(), ArgumentMatchers.any());
        verify(kafkaConsumer.kafkaInputProducer, never()).sendFailureMessage(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    }
}