To write JUnit 5 test cases for the `convertToMtnInsights` method in the `MtnInsightsManager` class, you'll need to cover all possible branches, including the `if`, `else if`, and `else` statements. This involves setting up mock data for the repositories and entities. Below is an example of how you might structure your test class to achieve 100% code coverage for this method:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import com.fasterxml.jackson.databind.ObjectMapper;

public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mtnInsightsManager = new MtnInsightsManager();
    }

    @Test
    public void testConvertToMtnInsights_NetworkOutageCategory_MtnOutageCase() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGECASE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_NetworkOutageCategory_MtnOutage() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue(EventLedgerConstants.OUTAGE_ID + "outage123" + EventLedgerConstants.COMMA_SEPARATOR);

        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(any(), any())).thenReturn(aggregateEntity);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_NetworkOutageCategory_OtherCases() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName("otherInsightName");
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("someValue");

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, false);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_NonNetworkOutageCategory() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName("someOtherCategory");
        pk.setInsightCategory("nonNetworkOutageCategory");
        entity.setPk(pk);
        entity.setInsightValues("someValue");

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, false);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(0, result.getCategoryInsights().length);
    }
}
```

### Explanation:
1. **Mock Setup**: Mockito is used to mock the dependencies of `MtnInsightsManager`, such as `MtnInsightsRepository` and `AggregateInsightsRepository`.

2. **Test Cases**: Each test case covers a different branch of the `if` statement in the `convertToMtnInsights` method:
   - **Network Outage with `MTNOUTAGECASE`**: Tests for the handling of `MTNOUTAGECASE` insights.
   - **Network Outage with `MTNOUTAGE`**: Tests the aggregation logic when `MTNOUTAGE` is involved.
   - **Other Cases within Network Outage**: Tests the generic handling of other insights within the network outage category.
   - **Non-Network Outage Category**: Ensures the method handles non-network outage categories correctly.

3. **Assertions**: Each test case uses assertions to verify that the output of `convertToMtnInsights` is as expected, based on the input data and the logical branches traversed.

This test suite should provide comprehensive coverage of the `convertToMtnInsights` method by testing all possible branches in the specified `if` statement.