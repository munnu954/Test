To achieve 100% code coverage for the specified conditional statement in the `CableProcessor` class, we will write JUnit 5 test cases that cover all branches of the `else if` statement: 

```java
else if(CommonWrapperConstants.CABLE.equalsIgnoreCase(prevType)) {
    // Code to be tested
}
```

Here's the JUnit 5 test class, which creates various scenarios to ensure that all branches are covered. 

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class CableProcessorTest {

    private CableProcessor cableProcessor;

    @BeforeEach
    public void setUp() {
        cableProcessor = CableProcessor.getInstance();
    }

    @Test
    public void testProcess_WhenPrevTypeIsCable() {
        // Prepare test data
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);
        
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CABLE);
        
        CableComp cableComp = new CableComp();
        cableComp.setCableName("TestCable");
        cableComp.setElementId("ElementId");
        cableComp.setCablePairDetails(List.of(new CablePairDetail("1")));
        clrComponent.setCableComp(List.of(cableComp));

        // Add a previous ClrComponent with type CABLE
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.CABLE);
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        Node node = new Node();
        node.setPortId("NodePortId");
        nodes.add(node);

        // Call the method under test
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        // Assertions to check that the link was created correctly
        assertEquals(1, links.size());
        Link createdLink = links.get(0);
        assertEquals("NodePortId", createdLink.getSource());
        assertEquals("ElementId:1", createdLink.getTarget()); // Assuming the target is set correctly
    }

    @Test
    public void testProcess_WhenPrevTypeIsNotCable() {
        // Prepare test data
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);
        
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CABLE);
        
        CableComp cableComp = new CableComp();
        cableComp.setCableName("TestCable");
        cableComp.setElementId("ElementId");
        cableComp.setCablePairDetails(List.of(new CablePairDetail("1")));
        clrComponent.setCableComp(List.of(cableComp));

        // Add a previous ClrComponent with a different type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT); // Not CABLE
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        Node node = new Node();
        node.setPortId("NodePortId");
        nodes.add(node);

        // Call the method under test
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        // Assertions to check that no link was created
        assertEquals(0, links.size());
    }

    // Additional test cases can be added here for other branches or scenarios

}
```

### Explanation:
1. **Setup Method**: Initializes the `CableProcessor` instance before each test.
2. **Test for Cable Type**: 
   - Sets up a scenario where the previous component type is `CABLE`.
   - Verifies a `Link` object is created with the expected properties.
3. **Test for Non-Cable Type**: 
   - Sets up a scenario where the previous component type is something other than `CABLE`.
   - Verifies that no `Link` is created.

### Additional Tests:
You can extend the tests further by adding more scenarios, such as:
- When `prevClrComponent` has attributes that affect the `Link` creation.
- Validating behavior when `cablePairDetails` is empty or null.
- Validating behavior when nodes are missing or invalid.

This ensures a comprehensive coverage of the functionality in the specified conditional statement.