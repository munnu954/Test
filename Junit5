To cover the `catch (Exception ex)` block in the `saveToELTable` method of the `EventLedgerServiceManager` class for 100% code coverage, we can simulate an exception being thrown from the `eventLedgerRepository.save(entity)` method. This can be achieved by using Mockito to mock the behavior of the `eventLedgerRepository`.

Here's an example of how you might write the JUnit 5 test case for this scenario:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.test.util.ReflectionTestUtils;

class EventLedgerServiceManagerTest {

    @Mock
    private EventLedgerRepository eventLedgerRepository;

    @Mock
    private EventLedgerValidator validator;

    @InjectMocks
    private EventLedgerServiceManager eventLedgerServiceManager;

    private static final Logger LOGGER = LoggerFactory.getLogger(EventLedgerServiceManagerTest.class);

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSaveToELTable_catchException() {
        // Arrange
        EventLedgerRequest request = createRequest();
        EventLedgerEntity entity = new EventLedgerEntity(); // Assuming you have a suitable constructor or builder

        // Mock the behavior of convert to return a valid entity
        EventLedgerServiceManager spyManager = spy(eventLedgerServiceManager);
        doReturn(entity).when(spyManager).convert(request);

        // Mock the behavior to throw a generic Exception when save is called
        doThrow(new RuntimeException("Database error")).when(eventLedgerRepository).save(entity);

        // Act & Assert
        assertDoesNotThrow(() -> {
            spyManager.saveToELTable(request);
        });

        // Verify that the error logging occurred
        verify(spyManager, times(1)).saveToELTable(request);
        verify(eventLedgerRepository, times(1)).save(entity);

        // Here, we could assert that the log contains specific entries if we capture logs
        // This would typically require a logging framework with capture support, such as Logback with ListAppender
    }

    private EventLedgerRequest createRequest() {
        EventLedgerAttributes attributes = new EventLedgerAttributes();
        attributes.setEventCategory("someCategory");
        attributes.setEventChannel("someChannel");

        EventLedgerRequest request = new EventLedgerRequest();
        request.setKeyAttributes(attributes);
        return request;
    }
}
```

### Explanation:
- **Spy on `EventLedgerServiceManager`**: We spy on the `EventLedgerServiceManager` instance to mock the `convert` method, ensuring it returns a valid `EventLedgerEntity`.
- **Mock Exception**: We use `doThrow` to simulate a `RuntimeException` when the `eventLedgerRepository.save(entity)` method is called. This allows us to enter the `catch (Exception ex)` block.
- **Assertions**: We assert that no exceptions are thrown up to the test level with `assertDoesNotThrow`, indicating that the exception was caught and handled internally.
- **Verification**: We verify that the `saveToELTable` and `eventLedgerRepository.save` methods were called.

This test ensures that the `catch (Exception ex)` block is executed and that any generic exception is handled correctly by the method. If you want to assert the message logged, additional setup is needed to capture and verify log outputs.