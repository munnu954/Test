import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class TrunkProcessorTest {

    @Test
    void testProcessWithNotNullPrevClrComponentTrail() {
        // Mock objects
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = mock(ClrComponent.class);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger();
        String sourceSys = "TestSourceSys";

        // Mock prevClrComponent
        ClrComponent prevClrComponent = mock(ClrComponent.class);
        when(prevClrComponent.getType()).thenReturn("TRAIL");

        // Mock CircuitInfo
        CircuitInfo circuitInfo = mock(CircuitInfo.class);
        List<CircuitInfo> circuitInfoList = new ArrayList<>();
        circuitInfoList.add(circuitInfo);
        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        CktLst cktLst = new CktLst();
        cktLst.setCircuitInfo(circuitInfoList);
        trunkGroupComp.setCktLst(Collections.singletonList(cktLst));
        when(clrComponent.getTrunkGroupComp()).thenReturn(Collections.singletonList(trunkGroupComp));

        // TrunkProcessor instance
        TrunkProcessor trunkProcessor = TrunkProcessor.getInstance();
        // Call the process method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Add your assertions here to verify the behavior based on the input data
        // For example, verify that certain nodes or links were added or modified
        assertEquals(1, links.size()); // Assuming a link is added after processing
    }

    @Test
    void testProcessWithNullPrevClrComponentTrail() {
        // Similar setup as the previous test case, but with a null prevClrComponent of type TRAIL

        // Mock objects
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = mock(ClrComponent.class);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger();
        String sourceSys = "TestSourceSys";

        // Mock prevClrComponent to return null
        ClrComponent prevClrComponent = null;

        // Mock CircuitInfo to be null
        CircuitInfo circuitInfo = null;
        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        CktLst cktLst = new CktLst();
        cktLst.setCircuitInfo(Collections.emptyList());
        trunkGroupComp.setCktLst(Collections.singletonList(cktLst));
        when(clrComponent.getTrunkGroupComp()).thenReturn(Collections.singletonList(trunkGroupComp));

        // TrunkProcessor instance
        TrunkProcessor trunkProcessor = TrunkProcessor.getInstance();
        // Call the process method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Add your assertions here to verify the behavior based on the input data for the null case
        // For example, verify that no link was added in this case
        assertEquals(0, links.size());
    }
}