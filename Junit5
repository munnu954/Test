To achieve 100% code coverage in JUnit 5 for the provided `CBRSSuppressionConstants` class, you can write test cases to ensure that each constant is accessed at least once in your test methods. Here is an example of how you can write JUnit test cases for the `CBRSSuppressionConstants` class using Mockito for verifying the static constants:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

public class CBRSSuppressionConstantsTest {

    @Test
    public void testConstantsAccess() {
        // Mocking the class to verify static constant access
        CBRSSuppressionConstants mockedConstants = mock(CBRSSuppressionConstants.class);

        String infieldOperator = CBRSSuppressionConstants.INFIELDOPERATOR;
        String outfieldOperator = CBRSSuppressionConstants.OUTFIELDOPERATOR;
        String field = CBRSSuppressionConstants.FIELD;
        String value = CBRSSuppressionConstants.VALUE;
        String ruleType = CBRSSuppressionConstants.RULETYPE;
        String equal = CBRSSuppressionConstants.EQUAL;
        String andOperator = CBRSSuppressionConstants.AND_OPERATOR;
        String ruleTypeRMF = CBRSSuppressionConstants.RULETYPE_RMF;
        String ruleIsActive = CBRSSuppressionConstants.RULEISACTIVE;
        String ruleCriteria = CBRSSuppressionConstants.RULECRITERIA;
        String ruleIDRMF = CBRSSuppressionConstants.RULEID_RMF;
        String ruleMatchingCriteriaRMF = CBRSSuppressionConstants.RULEMATCHINGCRITERIA;
        String ruleFunctionParametersRMF = CBRSSuppressionConstants.RULEFUNCTIONPARAMETERS_RMF;
        String ruleActionParametersRMF = CBRSSuppressionConstants.RULEACTIONPARAMETERS_RMF;
        String ruleDetailsRMF = CBRSSuppressionConstants.RULEDETAILS_RMF;
        String ruleNameRMF = CBRSSuppressionConstants.RULENAME_RMF;
        String rulePriorityRMF = CBRSSuppressionConstants.RULEPRIORITY_RMF;
        String ruleVersionRMF = CBRSSuppressionConstants.RULEVERSION_RMF;
        String ruleDetailsIDRMF = CBRSSuppressionConstants.RULE_DETAILS_ID_RMF;
        String timeWindow = CBRSSuppressionConstants.TIME_WINDOW;
        String timeWindowUnits = CBRSSuppressionConstants.TIME_WINDOW_UNITS;
        String suppressionThresholdCount = CBRSSuppressionConstants.SUPPRESSION_THRESHOLD_COUNT;
        String suppressionKey = CBRSSuppressionConstants.SUPPRESSION_KEY;
        String suppressionInterval = CBRSSuppressionConstants.SUPPRESSION_INTERVAL;
        String suppressionIntervalUnits = CBRSSuppressionConstants.SUPPRESSION_INTERVAL_UNITS;
        String suppressParentAlarms = CBRSSuppressionConstants.SUPPRESS_PARENT_ALARMS;
        String suppressChildAlarms = CBRSSuppressionConstants.SUPPRESS_CHILD_ALARMS;
        String alarmTemplate = CBRSSuppressionConstants.ALARM_TEMPLATE;
        String logSuppressionEvent = CBRSSuppressionConstants.LOG_SUPPRESSION_EVENT;
        
        // Verify that each constant was accessed at least once
        verify(mockedConstants).equals(infieldOperator);
        verify(mockedConstants).equals(outfieldOperator);
        verify(mockedConstants).equals(field);
        verify(mockedConstants).equals(value);
        verify(mockedConstants).equals(ruleType);
        verify(mockedConstants).equals(equal);
        verify(mockedConstants).equals(andOperator);
        verify(mockedConstants).equals(ruleTypeRMF);
        verify(mockedConstants).equals(ruleIsActive);
        verify(mockedConstants).equals(ruleCriteria);
        verify(mockedConstants).equals(ruleIDRMF);
        verify(mockedConstants).equals(ruleMatchingCriteriaRMF);
        verify(mockedConstants).equals(ruleFunctionParametersRMF);
        verify(mockedConstants).equals(ruleActionParametersRMF);
        verify(mockedConstants).equals(ruleDetailsRMF);
        verify(mockedConstants).equals(ruleNameRMF);
        verify(mockedConstants).equals(rulePriorityRMF);
        verify(mockedConstants).equals(ruleVersionRMF);
        verify(mockedConstants).equals(ruleDetailsIDRMF);
        verify(mockedConstants).equals(timeWindow);
        verify(mockedConstants).equals(timeWindowUnits);
        verify(mockedConstants).equals(suppressionThresholdCount);
        verify(mockedConstants).equals(suppressionKey);
        verify(mockedConstants).equals(suppressionInterval);
        verify(mockedConstants).equals(suppressionIntervalUnits);
        verify(mockedConstants).equals(suppressParentAlarms);
        verify(mockedConstants).equals(suppressChildAlarms);
        verify(mockedConstants).equals(alarmTemplate);
        verify(mockedConstants).equals(logSuppressionEvent);
    }
}
```

Make sure to add the necessary dependencies in your project to use JUnit 5 and Mockito for running the test cases. Additionally, you may need to modify the test case based on how the functionality of `CBRSSuppressionConstants` is consumed in your actual application.