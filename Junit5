To write JUnit 5 test cases for the `GraniteSegmentService` class with 100% code coverage, we'll need to mock the dependencies and cover all branches. The main dependencies in this class are `RestClientUtil` and `Gson`. We'll use `Mockito` to mock these dependencies.

Here is how you might write the JUnit 5 test cases for the `GraniteSegmentService` class:

```java
import com.google.gson.Gson;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class GraniteSegmentServiceTest {

    @InjectMocks
    private GraniteSegmentService graniteSegmentService;

    @Mock
    private RestClientUtil restClientUtil;

    @Mock
    private Gson gson;

    @Mock
    private RestTemplate restTemplate;

    @BeforeEach
    void setUp() {
        // Initialize the objects if needed
    }

    @Test
    void testCallCircuitDetailAPI_CndFlagTrue() throws Exception {
        // Arrange
        String circuitName = "testCircuit";
        boolean cnd = true;
        Map<String, String> reqParams = new HashMap<>();
        reqParams.put("id", circuitName);
        reqParams.put("view", "INSTALLED");
        reqParams.put("clr", "Y");

        CircuitDetailResponse expectedResponse = new CircuitDetailResponse();
        String responseStr = "{}";

        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
                .thenReturn(responseStr);
        when(gson.toJson(any())).thenReturn(responseStr);
        when(gson.fromJson(responseStr, CircuitDetailResponse.class)).thenReturn(expectedResponse);

        // Act
        CircuitDetailResponse actualResponse = graniteSegmentService.callcircuitDetailAPI(circuitName, cnd);

        // Assert
        assertNotNull(actualResponse);
        verify(restClientUtil, times(1)).exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class));
    }

    @Test
    void testCallCircuitDetailAPI_CndFlagFalse() throws Exception {
        // Arrange
        String circuitName = "testCircuit";
        boolean cnd = false;
        Map<String, String> reqParams = new HashMap<>();
        reqParams.put("id", circuitName);
        reqParams.put("view", "INSTALLED");
        reqParams.put("clr", "Y");

        CircuitDetailResponse expectedResponse = new CircuitDetailResponse();
        String responseStr = "{}";

        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
                .thenReturn(responseStr);
        when(gson.toJson(any())).thenReturn(responseStr);
        when(gson.fromJson(responseStr, CircuitDetailResponse.class)).thenReturn(expectedResponse);

        // Act
        CircuitDetailResponse actualResponse = graniteSegmentService.callcircuitDetailAPI(circuitName, cnd);

        // Assert
        assertNotNull(actualResponse);
        verify(restClientUtil, times(1)).exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class));
    }

    @Test
    void testCallCircuitDetailAPI_ExceptionHandling() {
        // Arrange
        String circuitName = "testCircuit";
        boolean cnd = false;

        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
                .thenThrow(new RuntimeException("Test Exception"));

        // Act
        CircuitDetailResponse actualResponse = graniteSegmentService.callcircuitDetailAPI(circuitName, cnd);

        // Assert
        assertNotNull(actualResponse);
        assertNull(actualResponse.getMessage());
    }

    @Test
    void testGetRestObjData() throws CommonWrapperException {
        // Arrange
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("key", "value");
        String serviceName = "testService";
        String appendUrl = "/testUrl";
        ParameterizedTypeReference<String> typeReference = new ParameterizedTypeReference<>() {};

        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
                .thenReturn("response");

        // Act
        String result = graniteSegmentService.getRestObjData(requestParams, serviceName, appendUrl, typeReference);

        // Assert
        assertNotNull(result);
        verify(restClientUtil, times(1)).exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class));
    }
}
```

### Explanation:

1. **Setup**: The test class is annotated with `@ExtendWith(MockitoExtension.class)` to enable Mockito annotations.
2. **Mocks**: We mock the `RestClientUtil`, `Gson`, and `RestTemplate` classes to simulate their behavior and dependencies.
3. **Test Methods**: 
   - `testCallCircuitDetailAPI_CndFlagTrue` and `testCallCircuitDetailAPI_CndFlagFalse`: Test the `callcircuitDetailAPI` method for both branches of the `cndFlag`.
   - `testCallCircuitDetailAPI_ExceptionHandling`: Tests the exception handling within the `callcircuitDetailAPI` method.
   - `testGetRestObjData`: Tests the `getRestObjData` method to ensure it behaves as expected.
4. **Assertions**: We verify that the methods return expected results and that interactions with mocked dependencies are correctly executed.

These tests aim to cover all logical branches of the `GraniteSegmentService` class.