Sure, let's add the JUnit5 test cases for the missed branches:

1. `perceivedSeverity == null` and `stateValue != postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())`
2. `perceivedSeverity != null` and `!perceivedSeverity.toString().isEmpty()` and `stateValue != postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())`

These cases will ensure that we cover all possible branches of the `else if` condition.

Here is the updated `AlarmRepositoryTest` with the additional test cases:

```java
@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
        env = mock(Environment.class);
        alarmPostingUtils = mock(AlarmPostingUtils.class);
        alarmPostingConstants = mock(AlarmPostingConstants.class);
        when(env.getProperty(Mockito.anyString())).thenReturn("testValue");
        ReflectionTestUtils.setField(alarmPostingUtils, "env", env);
    }

    @Test
    void testCreateAlarm_withNullFields() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String nullFieldsJson = "{ \"externalAlarmId\":null, \"State\":null, \"alarmType\":null, \"clearTime\":null, \"perceivedSeverity\":null, \"sequenceId\":null }";
        JsonNode json = obj.readTree(nullFieldsJson);

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("New", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(nullFieldsJson);
    }

    @Test
    void testCreateAlarm_withEmptyAlarmType() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String emptyAlarmTypeJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"alarmType\":\"\"}";
        JsonNode json = obj.readTree(emptyAlarmTypeJson);

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(emptyAlarmTypeJson);
    }

    @Test
    void testCreateAlarm_withEmptyPerceivedSeverity() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String emptyPerceivedSeverityJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"perceivedSeverity\":\"\"}";
        JsonNode json = obj.readTree(emptyPerceivedSeverityJson);

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(emptyPerceivedSeverityJson);
    }

    @Test
    void testCreateAlarm_withNullPerceivedSeverityAndClearedState() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String nullPerceivedSeverityJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"perceivedSeverity\":null}";
        JsonNode json = obj.readTree(nullPerceivedSeverityJson);

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(nullPerceivedSeverityJson);
    }

    @Test
    void testCreateAlarm_withEmptyPerceivedSeverityAndClearedState() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String emptyPerceivedSeverityJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"perceivedSeverity\":\"\"}";
        JsonNode json = obj.readTree(emptyPerceivedSeverityJson);

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(emptyPerceivedSeverityJson);
    }

    @Test
    void testCreateAlarm_withNullPerceivedSeverityAndNonClearedState() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String nullPerceivedSeverityJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\", \"sequenceId\":\"23423\", \"perceivedSeverity\":null}";
        JsonNode json = obj.readTree(nullPerceivedSeverityJson);

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("new", 2);  // Non-cleared state
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(nullPerceivedSeverityJson);
    }

    @Test
    void testCreateAlarm_withNonEmptyPerceivedSeverityAndNonClearedState() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String nonEmptyPerceivedSeverityJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\", \"sequenceId\":\"23423\", \"perceivedSeverity\":\"2\"}";
        JsonNode