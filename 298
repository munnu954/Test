@Component
public class AlarmReceiverTest {

@Mock
private AlarmPostGreService alarm;

@InjectMocks
@Spy
private AlarmReceiver alarmReceiver;

@Mock
private Consumer<byte[]> consumer;

@Mock
private Message<byte[]> msg;

@Mock
private VMBConfig vmbConfig;

@Mock
private PostingService alarmPointLookupService;

private static JsonReader jsonReader;

private static ObjectMapper mapper;

@Mock
private VMBParams params;

@Value("${queueSizeToStartThrottlingMsg:2000}")
private int queueSizeToStartThrotlingMsg;

@Value("${throttlingIntervalInMillis:500}")
private int throtlingIntervalInMillis;

@Value("${transactionRetryCount:3}")
private int transactionRetryCount;

@BeforeAll
static void initialize() {
    jsonReader = new JsonReader();
    mapper = new ObjectMapper();

    Consumer<byte[]> consumer = mock(Consumer.class);

    VMBParams p = mock(VMBParams.class);
    PostingService postingService = mock(PostingService.class);
    p.set_subscription_name("am");
    Environment env = mock(Environment.class);
    
    try(MockedStatic<VMBUtil> VMBUtilMock = Mockito.mockStatic(VMBUtil.class)) {
        VMBUtilMock.when(()-> VMBUtil.createConsumerConnection(Mockito.any(), Mockito.any())).thenReturn(consumer);
        alarmReceiver = new AlarmReceiver(p, alarm, postingService);
    }
}

@Test
void testReceiveMessages() throws PulsarClientException {
    when(msg.getData()).thenReturn(new byte[]{1, 2, 3});
    when(_consumer.getStats()).thenReturn(mock(ConsumerStats.class));
    
    alarmReceiver.receiveMessages();
    
    verify(_consumer, times(1)).getStats();
    verify(alarmPointLookupService, times(1)).addMsgToQueue(msg, any(Instant.class));
}

@Test
void testRun() throws PulsarClientException {
    when(alarmPostGreService.getAlarmTypeList()).thenReturn(someList);
    doNothing().doThrow(new PulsarClientException("exception")).when(alarmReceiver).receiveMessages();
    
    alarmReceiver.run();
    
    verify(alarmPostGreService, times(1)).getAlarmTypeList();
    verify(alarmReceiver, atLeastOnce()).receiveMessages();
}

}