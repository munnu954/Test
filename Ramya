import org.apache.flink.api.common.functions.RichFlatMapFunction;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.util.Collector;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CsvtoJsonConversion extends RichFlatMapFunction<String, String> {

    private JSONObject currentObject;
    private String currentObjectName;

    @Override
    public void open(Configuration parameters) throws Exception {
        currentObject = null;
        currentObjectName = null;
    }

    @Override
    public void flatMap(String input, Collector<String> collector) throws Exception {
        String[] arr = input.split(",");

        if (arr.length > 2 && arr[2] != null && !arr[2].isEmpty()) {
            handleMainObject(arr);
        } else if (arr.length > 1 && arr[0] != null && !arr[0].isEmpty()) {
            handleSubObject(arr);
        }
    }

    private void handleMainObject(String[] arr) {
        if (currentObject != null) {
            collector.collect(currentObject.toString());
        }

        currentObjectName = arr[2].trim();
        currentObject = new JSONObject();
        currentObject.put("ObjectName", currentObjectName);
        setCurrentObjectDetails(arr);
    }

    private void handleSubObject(String[] arr) {
        if (currentObject == null) {
            return; // Skip rows with sub-objects if no main object is set
        }

        if (currentObject.has(arr[0].trim())) {
            // Sub-object already exists, add values
            JSONObject subObject = currentObject.getJSONObject(arr[0].trim());
            addValuesToSubObject(subObject, arr);
        } else {
            // Sub-object doesn't exist, create and add values
            JSONObject subObject = new JSONObject();
            addValuesToSubObject(subObject, arr);
            currentObject.put(arr[0].trim(), subObject);
        }
    }

    private void setCurrentObjectDetails(String[] arr) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yy HH:mm:ss a");
            Date beginDate = sdf.parse(arr[0].trim());
            Date endDate = sdf.parse(arr[1].trim());

            currentObject.put("Begin date", beginDate.toString());
            currentObject.put("End date", endDate.toString());
            currentObject.put("Ticket number", arr[3].trim());
        } catch (ParseException e) {
            // Handle parsing exception
        }
    }

    private void addValuesToSubObject(JSONObject subObject, String[] arr) {
        subObject.put("Min", arr[4].trim());
        subObject.put("Average", arr[5].trim());
        subObject.put("Max", arr[6].trim());
        subObject.put("Cumulative counter value", arr[7].trim());
    }

    @Override
    public void close() {
        if (currentObject != null) {
            collector.collect(currentObject.toString());
        }
    }
}
