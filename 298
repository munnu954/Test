Apologies for the oversight. To achieve 100% code coverage for the `if` block you mentioned, we need to cover the scenario where the exception message contains "404" and "No data found for the requested ComponentId and TBL".

Here's an additional test case to cover that scenario:

```java
@Test
public void testFetchTopologyTraversalDetails_ExceptionWith404StatusAndNoDataFoundMessage() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    String componentIdReq = "123";

    HttpHeaders headers = new HttpHeaders();
    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
    headers.setContentType(MediaType.APPLICATION_JSON);
    HttpEntity<String> requestEntity = new HttpEntity<>(getRequestJson(alarm, rule, componentIdReq), headers);

    String exceptionMessage = "404 - No data found for the requested ComponentId and TBL";
    HttpClientErrorException exception = new HttpClientErrorException(HttpStatus.NOT_FOUND, exceptionMessage);

    when(restTemplate.exchange(eq(TOPOLOGYTRAVERSAL_URL), eq(HttpMethod.POST), eq(requestEntity),
            eq(String.class))).thenThrow(exception);

    ResponseEntity<String> response = topologyApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq);

    assertNotNull(response);
    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    assertEquals(exceptionMessage, response.getBody());
    verify(restTemplate, times(1)).exchange(eq(TOPOLOGYTRAVERSAL_URL), eq(HttpMethod.POST), eq(requestEntity),
            eq(String.class));
}
```

This test case covers the scenario where an exception is thrown with a 404 status code and the message contains "No data found for the requested ComponentId and TBL".

With the addition of this test case, all branches of the mentioned `if` block are covered, resulting in 100% code coverage for the `fetchTopologyTraversalDetails` method.