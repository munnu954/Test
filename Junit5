import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;

    @Mock
    private ClrComponent prevClrComponent;

    @BeforeEach
    void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
    }

    @Test
    void testProcessWhenPrevClrComponentIsTrail() {
        // Arrange
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "testSource";

        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.TRAIL);
        when(prevClrComponent.getCircuitComp()).thenReturn(new ArrayList<>());
        when(prevClrComponent.getCircuitComp().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size());
        Link circuit = links.get(0);
        assertEquals(CommonWrapperConstants.CIRCUIT, circuit.getLinkType());
        assertEquals(CommonWrapperConstants.UNKNOWN + 0, circuit.getSource());
        assertEquals(CommonWrapperConstants.UNKNOWN + 1, circuit.getTarget());
    }
}