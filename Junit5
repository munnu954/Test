import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class AlarmRepositoryImplTest {

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Test
    public void testCreateAlarm_PerceivedSeverityNullAndStateCleared() throws Exception {
        // Setup
        String msg = "{\"externalAlarmId\":\"123\",\"sourceSystemId\":\"sys1\",\"alarmType\":\"Type1\",\"clearTime\":\"time1\",\"state\":\"Cleared\",\"alarmRaisedTime\":\"time2\",\"alarmReportingTime\":\"time3\",\"alarmUpdatedTime\":\"time4\",\"alarmDetails\":\"Details\",\"alarmIdentity\":\"ID1\",\"alarmedObject\":\"Object1\",\"alarmedObjectType\":\"Type1\",\"TID\":\"tid1\",\"specificProblem\":\"Problem1\",\"AID\":\"aid1\",\"componentID\":\"comp1\",\"rawMessage\":\"raw1\",\"extTopologyDetails\":\"extDetails\",\"topologyDetails\":\"topDetails\",\"Count\":\"2\",\"sequenceID\":\"123\",\"tag\":[\"tag1\",\"tag2\"]}";

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(Map.of("Any", 1));
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("New", 1, "Cleared", 2));
        when(postgresConf.getAlarmTypeMap()).thenReturn(Map.of("Any", 1, "Other", 2));
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");

        // Execute
        Alarm result = alarmRepository.createAlarm(msg);

        // Verify
        assertEquals(-1, result.getPerceivedSeverity());
    }
}
// Write similar test cases for other branches.