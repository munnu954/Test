@Test
public void testTriggerJob_SuccessfulSubmission() {
    // Prepare test data
    String fileType = ".csv";
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    // ... (initialize other fields)

    // Create mock objects for dependencies
    RestTemplate restTemplate = Mockito.mock(RestTemplate.class);
    ResponseEntity<String> successResponse = Mockito.mock(ResponseEntity.class);
    KafkaAuditProducer kafkaAuditProducer = Mockito.mock(KafkaAuditProducer.class);
    FlinkApiController flinkApiController = Mockito.spy(new FlinkApiController(restTemplate, kafkaAuditProducer));

    // Mock external dependencies
    Mockito.when(restTemplate.postForEntity(Mockito.anyString(), Mockito.any(), Mockito.eq(String.class)))
            .thenReturn(successResponse);
    Mockito.when(successResponse.getStatusCode()).thenReturn(HttpStatus.OK);
    Mockito.when(successResponse.getBody()).thenReturn("{\"jobid\":\"12345\"}");

    // Execute the method
    String result = flinkApiController.triggerJob(auditMsg, fileType);

    // Verify the results
    InOrder inOrder = Mockito.inOrder(kafkaAuditProducer, flinkApiController);
    inOrder.verify(kafkaAuditProducer).createMessageAndLog(
            // ... (verify arguments)
    );
    inOrder.verify(flinkApiController).updateJobStatus(auditMsg, "12345");
    Assert.assertEquals("Job submitted", result);
}