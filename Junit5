To achieve 100% code coverage for the if block "if((new File(sourceFilePath).exists()) && !util.isKafkaTopicPresent(topic))", you would need to write test cases covering all possible scenarios:

1. Test case when source file path exists and Kafka topic is not present:
```java
@Test
void testSourceFileExistsAndKafkaTopicNotPresent() {
    // Mocking dependencies
    when(util.isKafkaTopicPresent(anyString())).thenReturn(false);
    
    // Creating CollectionAudit object with existing file path
    CollectionAudit message = new CollectionAudit();
    message.setInputFilePath("existingFile.txt");

    // Calling the method under test
    kafkaConsumer.consume("someDataContainingFilePath", message);

    // Asserting that the file name and exception message are set in the message
    assertEquals("existingFile.txt", message.getFile_name());
    assertEquals("Input file path doesn't exists/Invalid file", message.getExceptions());
}
```

2. Test case when source file path doesn't exist and Kafka topic is not present:
```java
@Test
void testSourceFileNotExistsAndKafkaTopicNotPresent() {
    // Mocking dependencies
    when(util.isKafkaTopicPresent(anyString())).thenReturn(false);
    
    // Creating CollectionAudit object with non-existing file path
    CollectionAudit message = new CollectionAudit();
    message.setInputFilePath("nonExistingFile.txt");

    // Calling the method under test
    kafkaConsumer.consume("someDataContainingFilePath", message);

    // Asserting that the file name and exception message are not set in the message
    assertNull(message.getFile_name());
    assertNull(message.getExceptions());
}
```

3. Test case when source file path exists and Kafka topic is present:
```java
@Test
void testSourceFileExistsAndKafkaTopicPresent() {
    // Mocking dependencies
    when(util.isKafkaTopicPresent(anyString())).thenReturn(true);
    
    // Creating CollectionAudit object with existing file path
    CollectionAudit message = new CollectionAudit();
    message.setInputFilePath("existingFile.txt");

    // Calling the method under test
    kafkaConsumer.consume("someDataContainingFilePath", message);

    // Asserting that the file name and exception message are not set in the message
    assertNull(message.getFile_name());
    assertNull(message.getExceptions());
}
```

4. Test case when source file path doesn't exist and Kafka topic is present:
```java
@Test
void testSourceFileNotExistsAndKafkaTopicPresent() {
    // Mocking dependencies
    when(util.isKafkaTopicPresent(anyString())).thenReturn(true);
    
    // Creating CollectionAudit object with non-existing file path
    CollectionAudit message = new CollectionAudit();
    message.setInputFilePath("nonExistingFile.txt");

    // Calling the method under test
    kafkaConsumer.consume("someDataContainingFilePath", message);

    // Asserting that the file name and exception message are not set in the message
    assertNull(message.getFile_name());
    assertNull(message.getExceptions());
}
```

By writing and running these test cases, you should be able to achieve 100% code coverage for the if block in your KafkaConsumer class.