import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

class CollectorControllerTest {
    
    private CollectorController collectorController;
    
    @Mock
    private KafkaProducerService kafkaProducer;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        collectorController = new CollectorController();
        collectorController.kafkaProducer = kafkaProducer;
    }

    // Positive Scenario 1
    @Test
    void testPushSpaceCollectorData_Success() {
        SpaceCollector spaceCollector = new SpaceCollector();
        
        ResponseEntity<String> response = collectorController.pushSpaceCollectorData(spaceCollector);
        
        assertNotNull(response);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals("SpaceCollector data pushed to Kafka topic successfully", response.getBody());
        verify(kafkaProducer).sendJsonMessage(spaceCollector);
    }

    // Negative Scenario 1
    @Test
    void testPushSpaceCollectorData_Fail() {
        SpaceCollector spaceCollector = new SpaceCollector();
        
        when(kafkaProducer.sendJsonMessage(spaceCollector)).thenReturn("Validation failed");
        
        ResponseEntity<String> response = collectorController.pushSpaceCollectorData(spaceCollector);
        
        assertNotNull(response);
        assertEquals(400, response.getStatusCodeValue());
        assertEquals("Validation failed", response.getBody());
    }
}

class CollectorInitializerServiceTest {

    private CollectorInitializerService collectorInitializerService;

    @Mock
    private CollectorApiReader collectorApiReader;

    @Mock
    private Validator validator;
    
    @Mock
    private KafkaProducerService kafkaProducer;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        collectorInitializerService = new CollectorInitializerService(collectorApiReader, validator);
        collectorInitializerService.kafkaProducer = kafkaProducer;
    }

    // Positive Scenario 1
    @Test
    void testConsume_Success() {
        SpaceCollector spaceCollector = new SpaceCollector();
        
        collectorInitializerService.consume(spaceCollector);
        
        verify(collectorApiReader).initialize(spaceCollector);
    }

    // Negative Scenario 1
    @Test
    void testConsume_Fail() {
        SpaceCollector spaceCollector = new SpaceCollector();
        
        collectorInitializerService.consume(spaceCollector);
        
        verify(collectorApiReader).initialize(spaceCollector);
    }
}

class KafkaProducerServiceTest {
    
    private KafkaProducerService kafkaProducerService;

    @Mock
    private KafkaTemplate<String, Object> kafkaTemplate;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        kafkaProducerService = new KafkaProducerService(kafkaTemplate);
    }

    // Positive Scenario 1
    @Test
    void testSendJsonMessage_Success() {
        SpaceCollector spaceCollector = new SpaceCollector();
        
        String result = kafkaProducerService.sendJsonMessage(spaceCollector);
        
        assertEquals("jsonMessage sent successfully", result);
        verify(kafkaTemplate).send("topicName", spaceCollector);
    }

    // Negative Scenario 1
    @Test
    void testSendJsonMessage_Fail_InvalidId() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId(null);
        
        String result = kafkaProducerService.sendJsonMessage(spaceCollector);
        
        assertEquals("SpaceCollector json must have an id", result);
        verify(kafkaTemplate).send("topicName", spaceCollector);
    }
}