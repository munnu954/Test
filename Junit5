To achieve 100% code coverage of the specified conditional statement in the `validateIterator` method of the `MtnInsightsValidator` class, we need to write JUnit 5 test cases that specifically test the conditions in the `if` statement.

Here's the corrected version of the JUnit 5 test cases that will properly cover the branches of the conditional statement:

```java
import com.vz.s360.vbg.eventledger.exception.InvalidRequestException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        validator = new MtnInsightsValidator();
    }

    @Test
    public void testValidateIterator_MtnAndCategoryAndNameAreEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null); // Assuming isEmpty checks for null
        attributes.setInsightCategory(null); // Assuming isEmpty checks for null
        attributes.setInsightName(null); // Assuming isEmpty checks for null

        String logVal = "Test Log: ";

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        String expectedMessage = logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ;
        assertEquals(expectedMessage, exception.getMessage());
    }

    @Test
    public void testValidateIterator_MtnIsNotEmpty_CategoryAndNameAreEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("123456"); // Not empty
        attributes.setInsightCategory(null); // Assuming isEmpty checks for null
        attributes.setInsightName(null); // Assuming isEmpty checks for null

        String logVal = "Test Log: ";

        // No exception should be thrown since not all are empty
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_CategoryIsNotEmpty_MtnAndNameAreEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null); // Assuming isEmpty checks for null
        attributes.setInsightCategory("Category"); // Not empty
        attributes.setInsightName(null); // Assuming isEmpty checks for null

        String logVal = "Test Log: ";

        // No exception should be thrown since not all are empty
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_NameIsNotEmpty_MtnAndCategoryAreEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null); // Assuming isEmpty checks for null
        attributes.setInsightCategory(null); // Assuming isEmpty checks for null
        attributes.setInsightName("Some Insight"); // Not empty

        String logVal = "Test Log: ";

        // No exception should be thrown since not all are empty
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_MtnIsNotEmpty_CategoryIsNotEmpty_NameIsEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("123456"); // Not empty
        attributes.setInsightCategory("Category"); // Not empty
        attributes.setInsightName(null); // Assuming isEmpty checks for null

        String logVal = "Test Log: ";

        // No exception should be thrown since not all are empty
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_MtnIsNotEmpty_CategoryIsEmpty_NameIsNotEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("123456"); // Not empty
        attributes.setInsightCategory(null); // Assuming isEmpty checks for null
        attributes.setInsightName("Some Insight"); // Not empty

        String logVal = "Test Log: ";

        // No exception should be thrown since not all are empty
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_MtnIsEmpty_CategoryIsNotEmpty_NameIsNotEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null); // Assuming isEmpty checks for null
        attributes.setInsightCategory("Category"); // Not empty
        attributes.setInsightName("Some Insight"); // Not empty

        String logVal = "Test Log: ";

        // No exception should be thrown since not all are empty
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }
}
```

### Explanation of Each Test Case:
1. **testValidateIterator_MtnAndCategoryAndNameAreEmpty**: Tests the specific case where `mtn`, `insightCategory`, and `insightName` are all empty or null, which should throw an `InvalidRequestException` with the specified error message.

2. **testValidateIterator_MtnIsNotEmpty_CategoryAndNameAreEmpty**: Tests when `mtn` is not empty but both `insightCategory` and `insightName` are empty. No exception should be thrown.

3. **testValidateIterator_CategoryIsNotEmpty_MtnAndNameAreEmpty**: Tests when `insightCategory` is not empty while `mtn` and `insightName` are empty. No exception should be thrown.

4. **testValidateIterator_NameIsNotEmpty_MtnAndCategoryAreEmpty**: Tests when `insightName` is not empty but both `mtn` and `insightCategory` are empty. No exception should be thrown.

5. **testValidateIterator_MtnIsNotEmpty_CategoryIsNotEmpty_NameIsEmpty**: Tests when both `mtn` and `insightCategory` are not empty, while `insightName` is empty. No exception should be thrown.

6. **testValidateIterator_MtnIsNotEmpty_CategoryIsEmpty_NameIsNotEmpty**: Tests when `mtn` is not empty and `insightName` is not empty, while `insightCategory` is empty. No exception should be thrown.

7. **testValidateIterator_MtnIsEmpty_CategoryIsNotEmpty_NameIsNotEmpty**: Tests when `mtn` is empty, but both `insightCategory` and `insightName` are not empty. No exception should be thrown.

These test cases will thoroughly cover the branches of the specified `if` statement to ensure complete code coverage for that section of the method.