To cover the branches of the `isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL)` condition in the `process` method of the `TrunkProcessor` class, we need to set up two scenarios: one where `prevClrComponent` is not null and another where it is null. Below is an example of how to write JUnit 5 test cases to achieve 100% code coverage for that specific logic.

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;

    @BeforeEach
    public void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
    }

    @Test
    public void testProcess_WithTrailComponent() {
        // Setup
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.SEGMENT); // Simulating a segment type
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("Test Circuit");
        
        // Mocking the behavior for prevClrComponent to have a trail
        List<CircuitComp> circuitCompList = new ArrayList<>();
        CircuitComp circuitComp = new CircuitComp();
        circuitComp.setCircuitInfo(List.of(circuitInfo));
        prevClrComponent.setCircuitComp(circuitCompList);
        clrComponentList.add(prevClrComponent);

        // Adding the current CLR component
        clrComponent.setType(CommonWrapperConstants.TRAIL);
        clrComponentList.add(clrComponent);

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        // Assert
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertNotNull(link.getSource());
        assertEquals("Test Circuit", link.getAttributes().get(0).getValue());
    }

    @Test
    public void testProcess_WithoutTrailComponent() {
        // Setup
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.SEGMENT); // Simulating a segment type
        clrComponentList.add(prevClrComponent);

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        // Assert
        assertTrue(links.isEmpty());
    }
}
```

### Explanation:
1. **Setup Method**: Initializes the `TrunkProcessor` and other necessary variables before each test case.
2. **Test Case 1 (`testProcess_WithTrailComponent`)**: This test simulates a scenario where the `prevClrComponent` has a `TRAIL` type and verifies that the link is correctly populated.
3. **Test Case 2 (`testProcess_WithoutTrailComponent`)**: This scenario checks the case where the `prevClrComponent` does not have a `TRAIL`, and ensures no links are created.

### Important Notes:
- Make sure that the mocked objects and methods reflect the actual implementations and behaviors in your codebase.
- Adjust the tests based on the actual logic of your application and any additional dependencies that may exist.
- The test cases avoid `IndexOutOfBoundsException` by ensuring that we only access lists that have been properly populated.