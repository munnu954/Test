The error you're encountering is due to the fact that Mockito's `doThrow` is used to throw checked exceptions from methods that don't declare such exceptions in their `throws` clause. Since `eventLedgerRepository.insert(...)` doesn't declare throwing `SystemException`, we need to adjust our approach.

One way to handle this is to mock the `convert` method to throw a `SystemException` since it is internal and can be made to throw exceptions for testing purposes. If you have control over the `EventLedgerServiceManager` class, you might consider making `convert` a separate method or mocking a different area that can simulate this exception.

Here's the updated test case code:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.util.ReflectionTestUtils;

class EventLedgerServiceManagerTest {

    @Mock
    private EventLedgerRepository eventLedgerRepository;

    @Mock
    private EventLedgerValidator validator;

    @InjectMocks
    private EventLedgerServiceManager eventLedgerServiceManager;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(eventLedgerServiceManager, "insertToEventLedger", "true");
    }

    @Test
    void testSaveEventLedger_throwsSystemExceptionInConvert() throws Exception {
        // Arrange
        EventLedgerRequest request = createRequest(EventLedgerConstants.EVENT_CATEGORY_INTERACTIONS, EventLedgerConstants.EVENT_CHANNEL_MYBIZ);
        
        // Mock the convert method to throw SystemException
        EventLedgerServiceManager spyManager = spy(eventLedgerServiceManager);
        doThrow(new SystemException("System error")).when(spyManager).convert(any(EventLedgerRequest.class));

        // Act
        EventLedgerResponse response = spyManager.saveEventLedger(request);

        // Assert
        assertEquals(FAILURE_CODE, response.getStatus().getCode());
        assertEquals("System error", response.getStatus().getMessage());
    }

    private EventLedgerRequest createRequest(String eventCategory, String eventChannel) {
        EventLedgerAttributes attributes = new EventLedgerAttributes();
        attributes.setEventCategory(eventCategory);
        attributes.setEventChannel(eventChannel);

        EventLedgerRequest request = new EventLedgerRequest();
        request.setKeyAttributes(attributes);
        return request;
    }
}
```

### Explanation:
- **Spying**: We use `spy` on `eventLedgerServiceManager` to mock the `convert` method. This allows us to simulate an exception during the conversion process.
- **Mock Exception**: We use `doThrow` to simulate the `SystemException` being thrown from the `convert` method.
- **Assertions**: We ensure that the `FAILURE_CODE` and the appropriate error message are returned when the exception is thrown.

This approach requires that you have access to mock methods like `convert`. If you cannot mock `convert` or it is not a method you control, you might need to adjust which methods can be mocked to throw exceptions fitting within your test framework.