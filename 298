Certainly! Below is an example of JUnit 5 test cases for the `AlarmRepositoryImpl` class's `mergeArrayMethod` method that ensures 100% code coverage for the specified lines:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.HashSet;
import java.util.Set;

class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private Alarm alarm;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testMergeArrayMethodWithTagFromDbNotNull() {
        // Arrange
        Object tagFromDb = "tag1,tag2,tag3"; // assuming it's a comma-separated string
        String[] expectedArray = {"tag1", "tag2", "tag3"};
        Set<String> expectedSet = new HashSet<>(Set.of("tag1", "tag2", "tag3"));

        // Mock the methods
        when(alarm.getTag()).thenReturn(new String[]{"tag4", "tag5"});

        // Spy on the alarmRepository to mock private methods
        AlarmRepositoryImpl spyRepository = spy(alarmRepository);
        doReturn(expectedArray).when(spyRepository).convertTagToStringArray(tagFromDb);
        doReturn(expectedSet).when(spyRepository).addTagsToSet(expectedArray);

        // Act
        Set<String> result = spyRepository.mergeArrayMethod(tagFromDb, alarm);

        // Assert
        assertNotNull(result);
        assertTrue(result.containsAll(expectedSet));
        assertTrue(result.contains("tag4"));
        assertTrue(result.contains("tag5"));
    }

    @Test
    void testMergeArrayMethodWithTagFromDbNull() {
        // Arrange
        Object tagFromDb = null;
        Set<String> expectedSet = new HashSet<>();

        // Mock the methods
        when(alarm.getTag()).thenReturn(new String[]{"tag4", "tag5"});
        doReturn(expectedSet).when(alarmRepository).addTagsToSet(new String[]{"tag4", "tag5"});

        // Act
        Set<String> result = alarmRepository.mergeArrayMethod(tagFromDb, alarm);

        // Assert
        assertNotNull(result);
        assertTrue(result.contains("tag4"));
        assertTrue(result.contains("tag5"));
    }
}
```

In this test class:
1. We use `Mockito` to mock dependencies and private method calls.
2. `setUp` initializes the Mockito framework.
3. `testMergeArrayMethodWithTagFromDbNotNull` tests the scenario where `tagFromDb` is not null, ensuring the specified lines are executed.
4. `testMergeArrayMethodWithTagFromDbNull` tests the scenario where `tagFromDb` is null, ensuring the method behaves correctly in this case.

Note: Since `convertTagToStringArray` and `addTagsToSet` are private methods, we use a `spy` on the `alarmRepository` to mock their behavior. Ensure you have the necessary Mockito dependencies and imports in your project.