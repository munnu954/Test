Sure! Here is an example of how you can write JUnit 5 test cases to achieve 100% code coverage for the `LuceneCollectionAuditRepository` class:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class LuceneCollectionAuditRepositoryTest {

    @Mock
    private LuceneCollectionAuditRepository luceneRepo;

    private LuceneCollectionAuditRepository repository;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        repository = new LuceneCollectionAuditRepository();
    }

    @Test
    void testFindLatestByFilePaths() {
        // Prepare test data
        List<String> filePaths = new ArrayList<>();
        filePaths.add("file1");
        filePaths.add("file2");

        // Mock the findByQuery method
        when(luceneRepo.findByQuery(anyString())).thenReturn(new ArrayList<>());

        // Call the method under test
        List<CollectionAudit> auditData = repository.findLatestByFilePaths(filePaths);

        // Verify the result
        assertNotNull(auditData);
        assertEquals(0, auditData.size());
        verify(luceneRepo, times(1)).findByQuery(anyString());
    }

    @Test
    void testFindTopByKeyFilePathOrderByKeyCreatedAtDesc() {
        // Prepare test data
        String filePath = "file1";

        // Mock the findByQuery method
        when(luceneRepo.findByQuery(anyString())).thenReturn(new ArrayList<>());

        // Call the method under test
        CollectionAudit auditData = repository.findTopByKeyFilePathOrderByKeyCreatedAtDesc(filePath);

        // Verify the result
        assertNull(auditData);
        verify(luceneRepo, times(1)).findByQuery(anyString());
    }

    @Test
    void testDeleteByFilePath() {
        // Prepare test data
        String filePath = "file1";
        List<CollectionAudit> auditData = new ArrayList<>();
        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setId("audit1");
        auditData.add(collectionAudit);

        // Mock the findByQuery and deleteById methods
        when(luceneRepo.findByQuery(anyString())).thenReturn(auditData);
        doNothing().when(luceneRepo).deleteById(anyString());

        // Call the method under test
        repository.deleteByFilePath(filePath);

        // Verify the result
        verify(luceneRepo, times(1)).findByQuery(anyString());
        verify(luceneRepo, times(1)).deleteById(anyString());
    }
}
```

In these test cases, we are using Mockito to mock the `LuceneCollectionAuditRepository` dependency and stub its methods to return the desired results. We are then calling the methods under test and verifying the expected behavior using assertions and Mockito's verification methods.

Please note that these test cases cover the basic scenarios and branches of the `LuceneCollectionAuditRepository` class. You may need to add more test cases to cover additional edge cases or specific requirements of your application.