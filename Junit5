To achieve 100% code coverage for the mentioned lines in the `applyPostingRule` method of the `PostingRuleProcessingService` class, we need to write JUnit5 test cases that cover all possible scenarios. Below is the sample code for JUnit5 test cases:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @BeforeEach
    public void setup() {
        // Setup any mock data or configurations needed before each test
    }

    @Test
    public void testApplyPostingRule() throws Exception {
        // Mocking necessary data and dependencies
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        JsonNode topologyObjectsNode = new ObjectMapper().createArrayNode();
        when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, "componentIdReq")).thenReturn(ResponseEntity.ok("topologyData"));
        when(utils.evaluateExpression("topologyObjectEligibilityCheckValue", alarmMap)).thenReturn("eligible");
        when(utils.evaluateExpression("alarmedObjectExpression", alarmMap)).thenReturn("alarmedObject");
        when(utils.evaluateExpression("topologyDetailsAlarmedObjectExpression", alarmMap)).thenReturn("alarmedObjectTopoDet");

        // Call the method under test
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions
        assertNotNull(result);
        assertEquals("alarmedObject", result.getAlarmedObject());
        // Add more assertions as per your specific logic

        // Verify any interactions if needed
    }

    // Add more test cases to cover different scenarios and edge cases

}
```

In the above test case, we have covered a basic scenario where we are mocking the required dependencies and validating the behavior of the `applyPostingRule` method.

You can expand on this test by adding more test cases to cover various scenarios and edge cases like handling null values, exceptions, different mappings, etc. Covering all possible scenarios will ensure 100% code coverage for the mentioned lines.