To achieve 100% code coverage for the `IVAPPDeviceUtil` class, we need to write unit tests for all of its methods, covering different branches and edge cases. Below is an example of how you might write JUnit test cases for this class:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;

import java.util.Arrays;

import static org.junit.Assert.*;

public class IVAPPDeviceUtilTest {

    private IVAPPDeviceUtil ivappDeviceUtil;
    private ObjectMapper objectMapper;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        ivappDeviceUtil = new IVAPPDeviceUtil();
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testGetHttpHeaders() {
        HttpHeaders headers = ivappDeviceUtil.getHttpHeaders();
        assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());
        assertEquals(Arrays.asList(MediaType.APPLICATION_JSON), headers.getAccept());
    }

    @Test
    public void testFindServiceByNameWithHttp() {
        String serviceName = "http://exampleService";
        String result = ivappDeviceUtil.findServiceByName(serviceName);
        assertEquals("http://exampleservice", result);
    }

    @Test
    public void testFindServiceByNameWithoutHttp() {
        String serviceName = "exampleService";
        String result = ivappDeviceUtil.findServiceByName(serviceName);
        assertEquals("http://exampleservice", result);
    }

    @Test
    public void testCovertv3formatWithData() throws Exception {
        String json = "{ \"equipmentLst\": { \"equipmentContainer\": [{ \"location\": { \"locationClli\": \"clli\", \"locationName\": \"name\", \"locationId\": \"id\", \"state\": \"state\" }, \"virtualNE\": { \"name\": \"neName\", \"status\": \"active\", \"type\": \"type\", \"vendor\": \"vendor\", \"model\": \"model\", \"tid\": \"tid\", \"createdBySys\": \"system\" } }] } }";
        JsonNode deviceResponse = objectMapper.readTree(json);

        UTSEquipmentList result = ivappDeviceUtil.covertv3format(deviceResponse);

        assertNotNull(result);
        assertNotNull(result.getEquipmentLst());
        assertEquals(1, result.getEquipmentLst().getEquipmentContainer().size());
        
        // Further assertions can be added to verify content
    }

    @Test(expected = NoDataFoundException.class)
    public void testCovertv3formatWithNoData() throws Exception {
        JsonNode deviceResponse = objectMapper.readTree("{}");
        ivappDeviceUtil.covertv3format(deviceResponse);
    }
}
```

### Explanation:
1. **Test Setup**: 
   - Initialize the `IVAPPDeviceUtil` and `ObjectMapper` instances before each test.
   
2. **Test `getHttpHeaders()`**: 
   - Verify that the method returns `HttpHeaders` with content type and accept headers set to `application/json`.

3. **Test `findServiceByName(String name)`**: 
   - Test both scenarios where the input string contains "http" and where it doesn't, to ensure it properly formats the URL.

4. **Test `covertv3format(JsonNode deviceResponse)`**:
   - Test with valid data to ensure it processes the JSON correctly and returns a populated `UTSEquipmentList`.
   - Test with empty data to verify that the `NoDataFoundException` is thrown, covering the exception branch.

This test suite should cover all the branches of the `IVAPPDeviceUtil` class for 100% code coverage. Make sure to adjust and expand the test cases as necessary to match the exact behavior and requirements of your application.