```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.env.Environment;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;

@ExtendWith(MockitoExtension.class)
public class AlarmPostingUtilsTest {

    @Test
    void testParse_InvalidAttribute_NoMatch() throws JsonMappingException, JsonProcessingException {
        Environment env = mock(Environment.class);
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("testKey", "testValue");
        String value = "%testKey:invalidAttribute%"; 
        
        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        
        assertEquals("", result); // The else block should replace the expression with an empty string.
    }

    @Test
    void testParse_InvalidAttribute_NestedJson_NoMatch() throws JsonMappingException, JsonProcessingException {
        Environment env = mock(Environment.class);
        Map<String, Object> srcMap = new HashMap<>();
        Map<String, Object> nestedMap = new HashMap<>();
        nestedMap.put("innerKey", "innerValue");
        srcMap.put("testKey", nestedMap);
        String value = "%testKey:invalidNestedAttribute%"; 

        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        
        assertEquals("", result); // The else block should replace the expression with an empty string.
    }

    @Test
    void testParse_InvalidAttribute_ArrayIndex_NoMatch() throws JsonMappingException, JsonProcessingException {
        Environment env = mock(Environment.class);
        Map<String, Object> srcMap = new HashMap<>();
        List<String> array = List.of("element1", "element2");
        srcMap.put("testArray", array);
        String value = "%testArray:invalidIndex[1]%" ; 

        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        
        assertEquals("", result); // The else block should replace the expression with an empty string.
    }

    @Test
    void testParse_InvalidAttribute_ArrayIndex_InvalidIndex() throws JsonMappingException, JsonProcessingException {
        Environment env = mock(Environment.class);
        Map<String, Object> srcMap = new HashMap<>();
        List<String> array = List.of("element1", "element2");
        srcMap.put("testArray", array);
        String value = "%testArray:testArray[-1]%" ; // Invalid index

        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        
        assertEquals("", result); // The else block should replace the expression with an empty string.
    }

    @Test
    void testParse_InvalidAttribute_NestedJson_ArrayIndex_NoMatch() throws JsonMappingException, JsonProcessingException {
        Environment env = mock(Environment.class);
        Map<String, Object> srcMap = new HashMap<>();
        Map<String, Object> nestedMap = new HashMap<>();
        List<String> nestedArray = List.of("nestedElement1", "nestedElement2");
        nestedMap.put("nestedArray", nestedArray);
        srcMap.put("testKey", nestedMap);
        String value = "%testKey:nestedArray:invalidIndex[0]%" ; 

        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        
        assertEquals("", result); // The else block should replace the expression with an empty string.
    }

    