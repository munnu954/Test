To achieve 100% code coverage for the `exchange` method in the `RestClientUtil` class, you need to write test cases that cover different scenarios, such as when the response is not null and when it is null. Below is an example of how you can write JUnit 5 test cases for this method:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.net.URI;

@RunWith(MockitoExtension.class)
public class RestClientUtilTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private RestClientUtil restClientUtil;

    @BeforeEach
    void setUp() {
        restClientUtil = new RestClientUtil();
        restClientUtil.restTemplate = restTemplate;
    }

    @Test
    public void testExchangeWithNonNullResponse() throws Exception {
        URI uri = new URI("http://example.com");
        HttpEntity<String> entity = new HttpEntity<>("body");

        ResponseEntity<Object> mockResponse = ResponseEntity.ok("responseBody");
        when(restTemplate.exchange(eq(uri), eq(HttpMethod.GET), eq(entity), eq(Object.class)))
                .thenReturn(mockResponse);

        String response = restClientUtil.exchange(uri, HttpMethod.GET, entity, Object.class);

        assertNotNull(response);
        assertEquals("responseBody", response);
    }

    @Test
    public void testExchangeWithNullResponse() throws Exception {
        URI uri = new URI("http://example.com");
        HttpEntity<String> entity = new HttpEntity<>("body");

        when(restTemplate.exchange(eq(uri), eq(HttpMethod.GET), eq(entity), eq(Object.class)))
                .thenReturn(null);

        String response = restClientUtil.exchange(uri, HttpMethod.GET, entity, Object.class);

        assertNull(response);
    }
}
```

### Explanation:

1. **Mocks and InjectMocks**: 
   - `@Mock` is used to create a mock object of `RestTemplate`.
   - `@InjectMocks` is used to inject the mock `RestTemplate` into the `RestClientUtil` instance.

2. **Test Setup**:
   - The `setUp` method initializes the `RestClientUtil` with the mocked `RestTemplate`.

3. **Test Cases**:
   - **testExchangeWithNonNullResponse**: This test case checks the scenario where the `exchange` method of `RestTemplate` returns a non-null `ResponseEntity`. We assert that the method returns the expected response body.
   - **testExchangeWithNullResponse**: This test case checks the scenario where the `exchange` method of `RestTemplate` returns null. We assert that the method returns null.

These test cases should provide 100% code coverage for the `exchange` method, covering both branches of the `if` statement.