import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

public class KafkaConsumerServiceTest {

    @Test
    public void testConsumeKafkaFeedCollectionAuditEntity() {
        KafkaConsumerService kafkaConsumerService = new KafkaConsumerService();
        
        // Mocking dependencies
        Consumer<String, String> mockConsumer = Mockito.mock(Consumer.class);
        when(mockConsumer.poll(any())).thenAnswer(new Answer<ConsumerRecords<String, String>>() {
            @Override
            public ConsumerRecords<String, String> answer(InvocationOnMock invocation) throws Throwable {
                List<ConsumerRecord<String, String>> records = new ArrayList<>();
                records.add(new ConsumerRecord<>("topicName", 0, 0, "key", "value"));
                return new ConsumerRecords<>(records);
            }
        });
        kafkaConsumerService.setMockConsumer(mockConsumer);
        
        List<String> result = kafkaConsumerService.consumeKafkaFeedCollectionAuditEntity("topicName");
        
        // Verify the method behavior and result
        assertEquals(1, result.size());
        assertEquals("success", result.get(0));
        verify(mockConsumer, times(1)).subscribe(anyList());
        verify(mockConsumer, times(1)).close();
    }
}