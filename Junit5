To achieve 100% code coverage for the `getDeviceDetailsv3` method in the `IVAPPDeviceService` class, you need to write JUnit test cases that cover all possible execution paths. This includes normal execution, handling exceptions, and verifying outcomes under different conditions. Below is an example of how you might write these test cases using JUnit and Mockito.

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.doThrow;

import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private IVAPPDeviceService iVAPPDeviceService;

    private DeviceListInputRequest request;
    private UTSEquipmentList utsEquipmentList;

    @Before
    public void setUp() {
        request = new DeviceListInputRequest();
        Map<String, Object> requestParams = new HashMap<>();
        requestParams.put("key", "value");
        request.setRequestParameters(requestParams);

        utsEquipmentList = new UTSEquipmentList();
    }

    @Test
    public void testGetDeviceDetailsv3_Success() throws Exception {
        String serviceUrl = "http://mockServiceUrl";
        UTSEquipmentList responseList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn(serviceUrl);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class), any(Class.class)))
                .thenReturn(ResponseEntity.ok(responseList));
        when(iVAPPDeviceUtil.convertV3Format(any(UTSEquipmentList.class))).thenReturn(new UTSEquipmentList());

        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        // Add assertions here as needed
    }

    @Test
    public void testGetDeviceDetailsv3_HttpServerErrorException() throws Exception {
        String serviceUrl = "http://mockServiceUrl";

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn(serviceUrl);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        doThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR))
                .when(restTemplate).exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class), any(Class.class));

        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        // Add assertions here as needed
    }

    @Test
    public void testGetDeviceDetailsv3_Exception() throws Exception {
        String serviceUrl = "http://mockServiceUrl";

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn(serviceUrl);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        doThrow(new RuntimeException("Runtime exception"))
                .when(restTemplate).exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class), any(Class.class));

        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        // Add assertions here as needed
    }
}
```

### Explanation:
1. **Setup:** We initialize the necessary mock objects and test data. The `@Mock` and `@InjectMocks` annotations are used to create mock instances and inject them into the service under test.

2. **Test Cases:**
   - **Success Path:** Test the normal execution path where the remote service call is successful.
   - **HttpServerErrorException Path:** Simulate an `HttpServerErrorException` to test the error handling path for server errors.
   - **Generic Exception Path:** Simulate a generic `RuntimeException` to test the error handling path for unexpected exceptions.

3. **Mocks and Stubbing:** Use Mockito to define the behavior of the mock objects. For example, use `when(...).thenReturn(...)` to specify return values and `doThrow(...).when(...)` to simulate exceptions.

4. **Assertions:** You can add assertions to verify the expected output or behavior, such as checking the return value or ensuring certain methods were called.

This code will help ensure that all branches of the `getDeviceDetailsv3` method are tested, providing a comprehensive test coverage.