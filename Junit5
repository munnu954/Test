import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;

class PathProcessorTest {

    private PathProcessor pathProcessor = PathProcessor.getInstance();

    @Test
    public void testProcess_whenFirstComponent() {
        // Arrange
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("TRAIL");
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("Test Circuit");
        List<CircuitInfo> circuitInfoList = new ArrayList<>();
        circuitInfoList.add(circuitInfo);
        clrComponent.getCircuitComp().addAll(Collections.singletonList(new CircuitComp(circuitInfoList)));
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "Test System";

        // Act
        pathProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals("TRAIL", link.getLinkType());
        assertEquals("Test Circuit", link.getAttributeValue("circuitName"));
        assertEquals(CommonWrapperConstants.DOUBLE_DASH, link.getAttributeValue("type"));
        assertEquals(CommonWrapperConstants.DOUBLE_DASH, link.getAttributeValue("serviceType"));
        assertEquals(CommonWrapperConstants.DOUBLE_DASH, link.getAttributeValue("bandwidth"));
        assertEquals(CommonWrapperConstants.DOUBLE_DASH, link.getAttributeValue("status"));
        assertEquals(CommonWrapperConstants.UNKNOWN + 0, link.getSource());
        assertNull(link.getTarget());
    }

    @Test
    public void testProcess_whenPreviousPort_withShelfId() {
        // Arrange
        List<Node> nodes = new ArrayList<>();
        Node node = new Node();
        node.setShelfId("Shelf1");
        nodes.add(node);
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("PORT");
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(new ClrComponent()); // Previous component
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "Test System";

        // Act
        pathProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals("PORT", link.getLinkType());
        assertEquals(node.getPortId(), link.getSource());
        assertEquals("Shelf1", link.getShelf0());
        assertNull(link.getTarget());
    }

    
