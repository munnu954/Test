import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class CableProcessorTest {

    private CableProcessor cableProcessor;

    @Mock
    private ClrComponent clrComponent;

    @Mock
    private AbstractClrComponentProcessor abstractClrComponentProcessor;

    @Mock
    private CableComp cabObject;

    @BeforeEach
    public void setUp() {
        cableProcessor = CableProcessor.getInstance();
    }

    @Test
    public void testProcessWithEmptyLocationAList() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        when(clrComponent.getCableComp()).thenReturn(Arrays.asList(cabObject));
        when(cabObject.getLocationA()).thenReturn("");
        when(cabObject.getCableName()).thenReturn("");
        when(cabObject.getType()).thenReturn("");

        cableProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), new ArrayList<>(), 0, new AtomicInteger(), "");

        verify(cabObject, never()).getLocationA();
    }

    @Test
    public void testProcessWithPreviousTypePort() {
        List<PortRef> portRefList = new ArrayList<>();
        PortRef portRef = new PortRef();
        portRefList.add(portRef);
        when(cabObject.getLocationA()).thenReturn("alo");
        when(cabObject.getCableName()).thenReturn("");
        when(cabObject.getType()).thenReturn("");
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        when(clrComponent.getCableComp()).thenReturn(Arrays.asList(cabObject));
        when(clrComponent.getEquipmentComp()).thenReturn(Arrays.asList(new EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(portRefList);
        when(portRef.getPortID()).thenReturn("1");
        when(portRef.getShelfID()).thenReturn("1");
        cableProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), new ArrayList<>(), 0, new AtomicInteger(), "");
    }

    @Test
    public void testProcessWithPreviousTypeEquipment() {
        when(cabObject.getLocationA()).thenReturn("");
        when(cabObject.getCableName()).thenReturn("");
        when(cabObject.getType()).thenReturn("");
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        when(clrComponent.getCableComp()).thenReturn(Arrays.asList(cabObject));
        when(clrComponent.getEquipmentComp()).thenReturn(Arrays.asList(new EquipmentComp()));
        cableProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), new ArrayList<>(), 0, new AtomicInteger(), "");
    }

    @Test
    public void testProcessWithPreviousTypeSegment() {
        List<EquipmentComp> equipmentCompList = new ArrayList<>();
        equipmentCompList.add(new EquipmentComp());
        when(cabObject.getLocationA()).thenReturn("");
        when(cabObject.getCableName()).thenReturn("");
        when(cabObject.getType()).thenReturn("");
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        when(clrComponent.getCableComp()).thenReturn(Arrays.asList(cabObject));
        when(clrComponent.getCircuitComp()).thenReturn(Arrays.asList(new CircuitComp()));
        when(clrComponent.getEquipmentComp()).thenReturn(equipmentCompList);
        cableProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), new ArrayList<>(), 0, new AtomicInteger(), "");
    }

    @Test
    public void testProcessWithPreviousTypeCircuit() {
        List<EquipmentComp> equipmentCompList = new ArrayList<>();
        equipmentCompList.add(new EquipmentComp());
        when(cabObject.getLocationA()).thenReturn("");
        when(cabObject.getCableName()).thenReturn("");
        when(cabObject.getType()).thenReturn("");
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        when(clrComponent.getCableComp()).thenReturn(Arrays.asList(cabObject));
        when(clrComponent.getEquipmentComp()).thenReturn(equipmentCompList);
        cableProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), new ArrayList<>(), 0, new AtomicInteger(), "");
    }

    @Test
    public void testProcessWithPreviousTypePath() {
        List<EquipmentComp> equipmentCompList = new ArrayList<>();
        equipmentCompList.add(new EquipmentComp());
        when(cabObject.getLocationA()).thenReturn("");
        when(cabObject.getCableName()).thenReturn("");
        when(cabObject.getType()).thenReturn("");
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        when(clrComponent.getCableComp()).thenReturn(Arrays.asList(cabObject));
        when(clrComponent.getEquipmentComp()).thenReturn(equipmentCompList);
        cableProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), new ArrayList<>(), 0, new AtomicInteger(), "");
    }

    @Test
    public void testProcessWithPreviousTypeTrail() {
        when(cabObject.getLocationA()).thenReturn("");
        when(cabObject.getCableName()).thenReturn("");
        when(cabObject.getType()).thenReturn("");
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        when(clrComponent.getCableComp()).thenReturn(Arrays.asList(cabObject));
        when(clrComponent.getCircuitComp()).thenReturn(Arrays.asList(new CircuitComp()));
        cableProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), new ArrayList<>(), 0, new AtomicInteger(), "");
    }

    @Test
    public void testProcessWithPreviousTypeChannel() {
        EquipmentComp equipmentComp = new EquipmentComp();
        List<EquipmentComp> equipmentCompList = new ArrayList<>();
        equipmentCompList.add(equipmentComp);
        when(cabObject.getLocationA()).thenReturn("");
        when(cabObject.getCableName()).thenReturn("");
        when(cabObject.getType()).thenReturn("");
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        when(clrComponent.getCableComp()).thenReturn(Arrays.asList(cabObject));
        when(clrComponent.getEquipmentComp()).thenReturn(equipmentCompList);
        cableProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), new ArrayList<>(), 0, new AtomicInteger(), "");
    }
}