To write JUnit 5 test cases for the specified `if` statement in the `validateIterator` method of the `MtnInsightsValidator` class, you need to cover all the conditions that lead to setting the `errorMessage` variable. Here's how you can do it:

```java
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.vz.s360.vbg.eventledger.exception.InvalidRequestException;
import com.vz.s360.vbg.eventledger.model.MtnInsightsAttributes;
import com.vz.s360.vbg.eventledger.validator.MtnInsightsValidator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    void setUp() {
        validator = new MtnInsightsValidator();
    }

    @Test
    void testValidateIterator_AllAttributesEmpty_ThrowsInvalidRequestException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("");
        attributes.setInsightCategory("");
        attributes.setInsightName("");

        String logVal = "LogVal ";

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_InsightCategoryAndInsightNameEmpty_ThrowsInvalidRequestException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("123");
        attributes.setInsightCategory("");
        attributes.setInsightName("");

        String logVal = "LogVal ";

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_EmptyMtnAndEcpdId_ThrowsInvalidRequestException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("");
        attributes.setEcpdId("");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));

        String logVal = "LogVal ";

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_EmptyMtn_ThrowsInvalidRequestException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));

        String logVal = "LogVal ";

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_EmptyInsightCategory_ThrowsInvalidRequestException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("123");
        attributes.setInsightCategory("");
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));

        String logVal = "LogVal ";

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    void testValidateIterator_EmptyInsightName_ThrowsInvalidRequestException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("123");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName("");

        String logVal = "LogVal ";

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }
}
```

### Explanation:

1. **Setup**: A `MtnInsightsValidator` object is created before each test using the `@BeforeEach` annotation.

2. **Test Cases**: Each test case checks a different branch of the `if` statement:
    - **All attributes empty**: Ensures that an exception is thrown when all fields (`mtn`, `insightCategory`, and `insightName`) are empty.
    - **InsightCategory and InsightName empty**: Checks for empty `insightCategory` and `insightName`.
    - **Empty MTN and EcpdId with specific InsightCategory and InsightName**.
    - **Empty MTN**: Tests the scenario where only the `mtn` is empty.
    - **Empty InsightCategory**: Tests the scenario with an empty `insightCategory`.
    - **Empty InsightName**: Tests the scenario with an empty `insightName`.

3. **Assertions**: Each test uses `assertThrows` to check if the `InvalidRequestException` is thrown, and then it verifies that the exception message is as expected.

These tests ensure 100% coverage of the specified conditional branches in the method.