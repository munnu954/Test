@Mock
private Consumer<byte[]> consumer;

@Mock
private Message<byte[]> message;

@Mock
private PulsarClientException pulsarClientException;

@Mock
private Exception exception;

@InjectMocks
private AlarmReceiver alarmReceiver;

@BeforeEach
void setup() {
    MockitoAnnotations.openMocks(this);
}

@Test
void testRunMethodWithPulsarClientException() {
    // Arrange
    when(VMBUtil.receiveMessageThrowsPulsarClientException(any(Consumer.class), anyInt(), any(TimeUnit.class))).thenThrow(pulsarClientException);
    ReflectionTestUtils.setField(alarmReceiver, "_consumer", consumer);
    ReflectionTestUtils.setField(alarmReceiver, "reconnectStage", new AtomicInteger(AlarmPostingConstants.VMB_INITIATE_RECONNECT));

    // Act
    alarmReceiver.run();

    // Assert
    verify(alarmReceiver, times(1)).syncReconnect();
    verify(alarmReceiver, times(1)).health();
    verify(alarmReceiver.LOGGER, times(1)).error(anyString(), eq(pulsarClientException.getLocalizedMessage()));
}

@Test
void testRunMethodWithException() {
    // Arrange
    when(VMBUtil.receiveMessageThrowsPulsarClientException(any(Consumer.class), anyInt(), any(TimeUnit.class))).thenThrow(exception);
    ReflectionTestUtils.setField(alarmReceiver, "_consumer", consumer);

    // Act
    alarmReceiver.run();

    // Assert
    verify(alarmReceiver, times(1)).health();
    verify(alarmReceiver.LOGGER, times(1)).error(anyString(), eq(exception.getLocalizedMessage()));
}

@Test
void testRunMethodWithException_ConsumerThreadError() {
    // Arrange
    doThrow(exception).when(alarmReceiver).run();

    // Act
    alarmReceiver.run();

    // Assert
    verify(alarmReceiver.LOGGER, times(1)).error(anyString(), eq(exception.getMessage()));
}

@Test
void testRunMethodWithException_ConsumerClose() {
    // Arrange
    doThrow(PulsarClientException.class).when(VMBUtil).closeConsumer(any(Consumer.class));
    ReflectionTestUtils.setField(alarmReceiver, "_run", false);
    ReflectionTestUtils.setField(alarmReceiver, "_consumer", consumer);

    // Act
    alarmReceiver.run();

    // Assert
    verify(alarmReceiver.LOGGER, times(1)).error(anyString(), any(PulsarClientException.class));
    verify(alarmReceiver.LOGGER, times(1)).info(anyString());
}