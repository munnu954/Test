To write JUnit 5 test cases that achieve 100% code coverage for the `PulsarSslConfiguration` class without making `certificatesLoc` public, you can use Java reflection to access the private field. Below is an example of how you might structure these test cases:

```java
import org.apache.pulsar.client.api.ClientBuilder;
import org.apache.pulsar.client.api.PulsarClientException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.pulsar.core.PulsarClientBuilderCustomizer;

import java.io.File;
import java.lang.reflect.Field;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PulsarSslConfigurationTest {

    private PulsarSslConfiguration pulsarSslConfiguration;
    private String certificatesLoc;

    @BeforeEach
    void setUp() throws Exception {
        pulsarSslConfiguration = new PulsarSslConfiguration();

        // Using reflection to set the private field 'certificatesLoc'
        Field field = PulsarSslConfiguration.class.getDeclaredField("certificatesLoc");
        field.setAccessible(true);
        certificatesLoc = "/path/to/certificates"; // Use a valid path for your environment
        field.set(pulsarSslConfiguration, certificatesLoc);
    }

    @Test
    void testPulsarClientPemSslCustomizer() throws PulsarClientException {
        PulsarClientBuilderCustomizer customizer = pulsarSslConfiguration.pulsarClientPemSslCustomizer();
        assertNotNull(customizer, "The customizer should not be null");

        ClientBuilder clientBuilder = mock(ClientBuilder.class);

        // When the customizer is applied
        customizer.customize(clientBuilder);

        // Then verify that the correct methods are called on the clientBuilder with expected values
        verify(clientBuilder).allowTlsInsecureConnection(false);
        verify(clientBuilder).enableTlsHostnameVerification(false);

        String expectedCertPath = certificatesLoc + File.separator + "jpsv.cert.pem";
        String expectedKeyPath = certificatesLoc + File.separator + "jpsv.key-pk8.pem";
        String expectedCaCertPath = certificatesLoc + File.separator + "ca.cert.pem";

        verify(clientBuilder).authentication(any());
        verify(clientBuilder).tlsTrustCertsFilePath(expectedCaCertPath);
        verify(clientBuilder).tlsKeyFilePath(expectedKeyPath);
        verify(clientBuilder).tlsCertificateFilePath(expectedCertPath);
    }
}
```

### Explanation:
- **Reflection**: The `Field` class from Java reflection is used to access and modify the private `certificatesLoc` field in `PulsarSslConfiguration`.
- **Mocking**: The `ClientBuilder` is mocked using a mocking framework (e.g., Mockito) to verify that the methods are called with the expected arguments.
- **Assertions**: The test includes assertions to ensure that the `PulsarClientBuilderCustomizer` is not null and that the correct methods are invoked.

Ensure that you have Mockito and JUnit 5 dependencies in your `pom.xml` or build file to run these tests. Adjust paths as necessary to fit your testing environment.