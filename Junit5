Sure! Below are the sample JUnit test cases for uploading a job to the Flink Cluster using the given request URL:

```java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@TestPropertySource(locations = "classpath:application-test.properties")
public class JobUploadTest {

    @Test
    public void positiveTestUploadJob() {
        try {
            RestTemplate restTemplate = new RestTemplate();

            String filePath = "path/to/your/job.jar";
            Path path = Paths.get(filePath);
            FileInputStream fis = new FileInputStream(path.toFile());
            MockMultipartFile mockMultipartFile = new MockMultipartFile("file", fis);

            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("file", mockMultipartFile);
            body.add("input", "input-value");
            body.add("topic", "topic-value");
            body.add("bootstrapServer", "bootstrapServer-value");

            restTemplate.postForObject("http://localhost:8081/Jars/upload", body, String.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void negativeTestUploadJobWithMissingParameters() {
        try {
            RestTemplate restTemplate = new RestTemplate();

            String filePath = "path/to/your/job.jar";
            Path path = Paths.get(filePath);
            FileInputStream fis = new FileInputStream(path.toFile());
            MockMultipartFile mockMultipartFile = new MockMultipartFile("file", fis);

            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("file", mockMultipartFile);

            restTemplate.postForObject("http://localhost:8081/Jars/upload", body, String.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void negativeTestUploadJobWithInvalidFile() {
        try {
            RestTemplate restTemplate = new RestTemplate();

            String filePath = "path/to/non-existing-file.jar";
            Path path = Paths.get(filePath);
            FileInputStream fis = new FileInputStream(path.toFile());
            MockMultipartFile mockMultipartFile = new MockMultipartFile("file", fis);

            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("file", mockMultipartFile);
            body.add("input", "input-value");
            body.add("topic", "topic-value");
            body.add("bootstrapServer", "bootstrapServer-value");

            restTemplate.postForObject("http://localhost:8081/Jars/upload", body, String.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void negativeTestUploadJobWithInvalidEndpoint() {
        try {
            RestTemplate restTemplate = new RestTemplate();

            String filePath = "path/to/your/job.jar";
            Path path = Paths.get(filePath);
            FileInputStream fis = new FileInputStream(path.toFile());
            MockMultipartFile mockMultipartFile = new MockMultipartFile("file", fis);

            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("file", mockMultipartFile);
            body.add("input", "input-value");
            body.add("topic", "topic-value");
            body.add("bootstrapServer", "bootstrapServer-value");

            restTemplate.postForObject("http://localhost:8081/InvalidEndpoint", body, String.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

For the above code to work, you need to add the following dependencies to your `pom.xml` file:

```xml
<dependencies>
    <!-- Spring Boot Starter -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <!-- Spring Boot Test -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
    <!-- Spring Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- Mockito -->
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <scope>test</scope>
    </dependency>
    <!-- Spring Boot Test Property Source -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-test-autoconfigure</artifactId>
    </dependency>
    <!-- Spring Boot Test Configuration -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-test</artifactId>
    </dependency>
    <!-- Spring Boot Test Starter -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>
```

Make sure to replace the placeholders like `path/to/your/job.jar` with the actual path and file name of your job.jar file.