Sure, here is the JUnit 5 test code to cover each branch of the MessageReaderService class:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class MessageReaderServiceTest {

    private MessageReaderService messageReaderService;
    private VMBConfig ruleUpdateNotifierVmbConfig;
    private Reader<byte[]> reader;
    private ApolloServiceHealth healthChecker;
    private RuleLoadingService rulesLoadingService;

    @BeforeEach
    public void setup() {
        ruleUpdateNotifierVmbConfig = mock(VMBConfig.class);
        reader = mock(Reader.class);
        healthChecker = mock(ApolloServiceHealth.class);
        rulesLoadingService = mock(RuleLoadingService.class);

        messageReaderService = new MessageReaderService();
        messageReaderService.ruleUpdateNotifierVmbConfig = ruleUpdateNotifierVmbConfig;
        messageReaderService.reader = reader;
        messageReaderService.healthChecker = healthChecker;
        messageReaderService.rulesLoadingService = rulesLoadingService;
    }

    @Test
    public void testInitializeMessageReaderService_whenReaderConnectionIsNull_shouldSetHealthCheckerUnhealthyAndExit() {
        doReturn(null).when(ruleUpdateNotifierVmbConfig).getTopic();

        messageReaderService.intialializeMessageReaderService();

        verify(healthChecker).setHealthy(false, "RuleUpdateNotifier is not created");
        assertEquals(1, getFailureRuleUpdateVMBConnectionCount());
    }

    @Test
    public void testInitializeMessageReaderService_whenReaderConnectionIsNotNull_shouldNotSetHealthCheckerUnhealthy() {
        doReturn("topic").when(ruleUpdateNotifierVmbConfig).getTopic();

        messageReaderService.intialializeMessageReaderService();

        verify(healthChecker, never()).setHealthy(false, "RuleUpdateNotifier is not created");
        assertEquals(0, getFailureRuleUpdateVMBConnectionCount());
    }

    @Test
    public void testProcessMessageFromRuleNotifierVMB_whenReaderIsConnectedAndMessageIsNotNull_shouldProcessMessage() throws Exception {
        Message<byte[]> message = mock(Message.class);
        doReturn(true).when(reader).isConnected();
        doReturn(message).when(reader).readMessage(Mockito.anyInt(), Mockito.any());

        messageReaderService.processMessageFromRuleNotifierVMB();

        verify(messageReaderService, times(1)).removeOrloadRule(Mockito.any());
        verify(messageReaderService, never()).retryReaderConnection();
        assertEquals(0, getFailureRuleUpdateVMBConnectionCount());
    }

    @Test
    public void testProcessMessageFromRuleNotifierVMB_whenReaderIsNotConnected_shouldRetryReaderConnection() throws Exception {
        doReturn(false).when(reader).isConnected();

        messageReaderService.processMessageFromRuleNotifierVMB();

        verify(messageReaderService, never()).removeOrloadRule(Mockito.any());
        verify(messageReaderService, times(1)).retryReaderConnection();
    }

    @Test
    public void testProcessMessageFromRuleNotifierVMB_whenPulsarClientExceptionOccurs_shouldRetryReaderConnection() throws Exception {
        doThrow(PulsarClientException.class).when(reader).readMessage(Mockito.anyInt(), Mockito.any());

        messageReaderService.processMessageFromRuleNotifierVMB();

        verify(messageReaderService, never()).removeOrloadRule(Mockito.any());
        verify(messageReaderService, times(1)).retryReaderConnection();
    }

    private int getFailureRuleUpdateVMBConnectionCount() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Method method = MessageReaderService.class.getDeclaredMethod("getFailureRuleUpdateVMBConnectionCount");
        method.setAccessible(true);
        return (int) method.invoke(messageReaderService);
    }
}
```

Note: The test code uses Mockito to mock dependencies and uses reflection to access private methods. Make sure to include the necessary dependencies (e.g., Mockito, JUnit Jupiter) in your project.