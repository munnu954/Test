To cover the specific block of code in the `createAlarm` method of `AlarmRepositoryImpl` class for 100% code coverage, you can write a JUnit 5 test case as follows:

```java
import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;

class AlarmRepositoryImplTest {

    @Test
    void testCreateAlarmPerceivedSeverityNullAndStateCleared() throws Exception {
        // Mocking the necessary objects
        ObjectMapper obj = new ObjectMapper();
        PostGreDataBaseConfig postgresConf = mock(PostGreDataBaseConfig.class);
        AlarmRepositoryImpl alarmRepositoryImpl = new AlarmRepositoryImpl();
        Alarm alarm = new Alarm();
        
        // Mocking the behavior of dependent methods
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(Collections.singletonMap("Indeterminate", 1));
        when(postgresConf.getAlarmStateMap()).thenReturn(Collections.singletonMap("cleared", 6));
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        
        // Providing necessary input for the test scenario
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";

        // Invoking the method under test
        alarmRepositoryImpl.setPostgresConf(postgresConf);
        Alarm result = alarmRepositoryImpl.createAlarm(msg);

        // Verifying the behavior
        assertEquals(-1, result.getPerceivedSeverity());
    }
}
```

In this test case, we are initializing the `AlarmRepositoryImpl` and `PostGreDataBaseConfig` instances, setting up the required behavior for the mocked objects, providing input data in the form of a message, and then verifying that the `perceivedSeverity` of the `Alarm` object is set to `-1` when the condition `perceivedSeverity == null` and `stateValue == postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())` is met.

Make sure to adjust the test case according to your actual implementation details and dependencies. This test case focuses on covering the specific block of code you mentioned for 100% code coverage.