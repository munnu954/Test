import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import java.util.concurrent.TimeUnit;

@ExtendWith(MockitoExtension.class)
public class CTIEcpdServiceTest {

    @Mock
    private RedisTemplate<String, CTIDataStore> redisTemplate;

    @Mock
    private ValueOperations<String, CTIDataStore> valueOperations;

    @InjectMocks
    private CTIEcpdService ctiEcpdService;

    private CTIDataStore dataStore;

    @BeforeEach
    public void setUp() {
        dataStore = new CTIDataStore();
        dataStore.setCiscoCallId(12345L);
        dataStore.setEcpd("ecpd");
        dataStore.setMtn("mtn");
        dataStore.setSensitivity("sensitivity");
        dataStore.setIvrCallId("ivrCallId");

        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
    }

    @Test
    public void testSaveCTIData() {
        String key = "CTIDataStore: " + dataStore.getCiscoCallId();
        ctiEcpdService.saveCTIData(dataStore);
        verify(valueOperations).set(key, dataStore);
        verify(redisTemplate).expire(key, 3600L, TimeUnit.SECONDS); // Assuming ttl is 3600 seconds
    }

    @Test
    public void testFindById() {
        String key = "CTIDataStore: " + dataStore.getCiscoCallId();
        when(valueOperations.get(key)).thenReturn(dataStore);
        CTIDataStore result = ctiEcpdService.findById(String.valueOf(dataStore.getCiscoCallId()));
        assertEquals(dataStore, result);
    }

    @Test
    public void testDeleteById() {
        String key = "CTIDataStore: " + dataStore.getCiscoCallId();
        when(redisTemplate.delete(key)).thenReturn(true);
        Boolean result = ctiEcpdService.deleteById(String.valueOf(dataStore.getCiscoCallId()));
        assertTrue(result);
    }
}
