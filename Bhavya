The error message you're encountering indicates that the `when()` method in Mockito is being given an argument that isn't a method call on a mock object. This typically happens when you try to call methods on real objects or on objects that aren't mocks.

### Analyzing the Issue

In the context of the `testOnMessage_NullRequestJSONString` test case, it seems that there may be an issue with how the mocks are set up, specifically with the `ServiceMessage` and its methods. If `getRequestJSONString()` is called on a real instance instead of a mock, it will throw the `MissingMethodInvocationException`.

### Updating the Test Case

To resolve this issue, we need to ensure that we're correctly mocking all involved objects, particularly the `ServiceMessage` and its dependencies. Here's the updated test case with appropriate mocking:

```java
@Test
public void testOnMessage_NullRequestJSONString() {
    // Create a mock of ServiceMessage
    ServiceMessage serviceMessage = mock(ServiceMessage.class);

    // Set up the mock to return the service message
    when(utils.convert(anyString(), eq(ServiceMessage.class))).thenReturn(serviceMessage);
    
    // Set up the service message to return null for RequestJSONString
    when(serviceMessage.getRequestJSONString()).thenReturn(null);

    // Call the method with a valid payload
    eventsMessageListener.onMessage(mockConsumerRecord(validPayload), validPayload);

    // Verify that the failed message service is invoked due to null RequestJSONString
    verify(failedMessageService, times(1)).saveFailedRecords(anyString(), anyString(), eq(validPayload), anyString(), anyChar());
}
```

### Key Changes Made:

1. **Mocking `ServiceMessage`**: Instead of creating a real instance of `ServiceMessage`, we're now creating a mock of it. This way, when we set up its behavior (like returning null for `getRequestJSONString()`), it will work as expected.

2. **Using `anyString()`**: This matcher is used to verify that the method is called with any string argument, which is less strict and more flexible for testing purposes.

### Conclusion

After applying these changes, run the test again. This should resolve the `MissingMethodInvocationException` error, as we're now properly mocking the `ServiceMessage` and ensuring that all method calls on it are valid. If you still encounter issues, make sure to check all other parts of the test setup and the `onMessage` method logic to ensure everything aligns properly.