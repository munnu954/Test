AI ðŸ¤–:
Sure, here is the updated code:


public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        JSONObject jsonObject = new JSONObject();

        for (int lineIndex = 0; lineIndex < lines.length; lineIndex++) {
            String line = lines[lineIndex];
            String[] arr = line.split(",");

            if (lineIndex < 3) {
                // Process the 1st, 2nd, and 3rd lines as headers
                if (lineIndex == 0) {
                    headers = arr; // Store the header row for key names
                } else if (lineIndex == 1) {
                    jsonObject.putAll(Arrays.stream(arr).collect(Collectors.toMap(String::trim, String::trim)));
                } else {
                    JSONObject obj = new JSONObject();
                    for (int j = 0; j < arr.length; j++) {
                        String jsonkey = arr[j].trim().replace("\"", "");
                        String jsonvalue = arr[j].trim().replace("\"", "");
                        obj.put(jsonkey, jsonvalue);
                    }
                    this.successIntCounter.add(1);
                    collector.collect(obj.toString());
                }
            }
        }
    }
}


This code removes the SystemId and NodeIP jsonkeys, does not hardcode the jsonkeys for line1's header SystemId and line2's header NodeIP, instead processes them as line3's jsonkeys. It also reads and processes the jsonvalues of line1 and line2 from left to right approach. It does not split into 2 separate JSON objects, instead reads and processes them in one go.