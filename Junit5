To achieve 100% code coverage of the try block in the `processAlarmThread()` method of the `PostingService` class, we can write JUnit5 test cases using reflection to access private fields such as `alarms`, `alarmReceiver`, `threadList`, `processThreadWaitTime`, and `alarmReceivedTimeValues`. Here is a sample JUnit test class to cover the mentioned try block:

```java
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.lang.reflect.Field;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.Hashtable;
import java.util.ArrayList;

public class PostingServiceTest {

    @Test
    public void testProcessAlarmThread() throws Exception {
        // Mock objects and initialize PostingService
        PostingService postingService = new PostingService();
        
        ConcurrentLinkedDeque<Message<byte[]>> mockAlarms = new ConcurrentLinkedDeque<>();
        mockAlarms.add(new Message<>("Test data".getBytes()));
        setPrivateField(postingService, "alarms", mockAlarms);

        AlarmRepository mockAlarmRepository = Mockito.mock(AlarmRepository.class);
        setPrivateField(postingService, "alarmRepository", mockAlarmRepository);

        AlarmReceiver mockAlarmReceiver = Mockito.mock(AlarmReceiver.class);
        setPrivateField(postingService, "alarmReceiver", mockAlarmReceiver);

        Hashtable<MessageId, Instant> mockAlarmReceivedTimeValues = new Hashtable<>();
        mockAlarmReceivedTimeValues.put(Mockito.mock(MessageId.class), Instant.now());
        setPrivateField(postingService, "alarmReceivedTimeValues", mockAlarmReceivedTimeValues);

        ArrayList<Thread> mockThreadList = new ArrayList<>();
        setPrivateField(postingService, "threadList", mockThreadList);

        setPrivateField(postingService, "shutdown", false);

        // Invoke the method
        postingService.processAlarmThread();

        // Add assertions here as needed
    }

    private void setPrivateField(Object target, String fieldName, Object value) throws NoSuchFieldException, IllegalAccessException {
        Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }
}
```

In this test class, we are using reflection to set the private fields of the `PostingService` object before invoking the `processAlarmThread()` method. Make sure to add appropriate assertions in the test method to validate the behavior of the method under test.

You can extend this test class to cover more scenarios and edge cases based on your requirements.