Certainly! If you want to avoid using `@SpringBootTest`, you can use Mockito to create a mock for the `AlarmGroupingParams` class and manually set the values you need for testing. Hereâ€™s how you can do that:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

@ExtendWith(MockitoExtension.class)
public class ApiOperationTest {

    @InjectMocks
    private ApiOperation apiOperation;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlarmGroupingParams configParams;

    @BeforeEach
    public void setUp() {
        // Mocking the behavior of AlarmGroupingParams
        when(configParams.getAlarmFetchURL()).thenReturn("http://mock-url");
        when(configParams.getAlarmFilterKey()).thenReturn("mock-api-key");
    }

    @Test
    public void testGetAlarmDetailsById_NotFound() {
        String alarmIdentity = "12345";

        // Simulate HttpClientErrorException.NotFound
        when(restTemplate.exchange(eq("http://mock-url"), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));

        // Call the method
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Verify the result is null since the alarm was not found
        assertNull(result);

        // Optionally, verify that the logger was called (if you have a logger)
        // verify(logger).warn("Alarm Identity not found in the DB. ErrorCode: 1003, ErrorMessage: Alarm Identity not found");
    }
}
```

### Explanation:
1. **Mockito Setup**: We use `@ExtendWith(MockitoExtension.class)` to enable Mockito for this test class.
2. **Mocking Dependencies**: The `AlarmGroupingParams` and `RestTemplate` are mocked using `@Mock`.
3. **Behavior Definition**: In the `setUp` method, we define the behavior of the `configParams` mock to return specific values when its methods are called.
4. **Test Method**: The `testGetAlarmDetailsById_NotFound` simulates the `HttpClientErrorException.NotFound` exception when the `restTemplate.exchange` method is called, allowing us to test the catch block without needing the full Spring context.

This approach keeps your tests isolated from the Spring container while still allowing you to effectively test your method's behavior in response to exceptions.