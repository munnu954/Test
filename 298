To achieve 100% code coverage in your JUnit 5 test cases for the `AlarmReceiver` class without making the `getConnection()` method public, we can utilize Java Reflection APIs. Here's a rough outline of how you can approach this:

1. Use Reflection to access the private `getConnection()` method in the `AlarmReceiver` class.
2. Mock the dependencies needed for the `getConnection()` method, such as `VMBConfig` and the Logger.
3. Write JUnit 5 test cases to cover all the branches and lines of code in the `getConnection()` method.

Here's a simplified example to get you started:

```java
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Spy;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

public class AlarmReceiverTest {

    @Spy
    private AlarmReceiver alarmReceiver;

    @Mock
    private VMBParams vmbParams;

    @Mock
    private AlarmPostGreService alarmPostGreService;

    @Mock
    private PostingService postingService;

    @Mock
    private Consumer<byte[]> consumer;

    @Mock
    private VMBConfig vmbConfig;

    @Test
    void testGetConnection() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // Mock dependencies
        when(vmbParams.getConsumerVMBConfig()).thenReturn(vmbConfig);
        when(VMBUtil.createConsumerConnection(vmbConfig, null)).thenReturn(consumer);

        // Use reflection to access private method
        Method getConnectionMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        getConnectionMethod.setAccessible(true);
        getConnectionMethod.invoke(alarmReceiver);

        // Validate the behavior - Add more specific validations based on your actual implementation
        assertThat(alarmReceiver.get_consumer()).isEqualTo(consumer);
    }

    // Write more test cases to cover other scenarios in the getConnection() method

}
```

In this example, we use Mockito to mock the dependencies required for testing the `getConnection()` method. We also use Java Reflection to access the private method and invoke it for testing purposes.

Remember to add more test cases to cover various scenarios, error handling, and edge cases within the `getConnection()` method to ensure comprehensive code coverage.

Feel free to expand upon this example and add more detailed test cases as needed to cover each branch and line of code effectively.