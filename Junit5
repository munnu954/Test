To ensure the test cases handle null values correctly, we must update the `DatabaseHealthContributor` class to explicitly check if the `Connection` or `Statement` is null before using them. Hereâ€™s how you can modify the `DatabaseHealthContributor` class and the test cases:

### DatabaseHealthContributor

Ensure that the `health` method in the `DatabaseHealthContributor` class checks for null values. Here is an example of how you might implement this:

```java
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

@Component
public class DatabaseHealthContributor implements HealthIndicator {

    private DataSource ds;

    public DatabaseHealthContributor(DataSource ds) {
        this.ds = ds;
    }

    @Override
    public Health health() {
        try (Connection conn = ds.getConnection()) {
            if (conn == null) {
                return Health.down().withDetail("Error", "Connection is null").build();
            }
            try (Statement stmt = conn.createStatement()) {
                if (stmt == null) {
                    return Health.down().withDetail("Error", "Statement is null").build();
                }
                stmt.execute("SELECT 1");
            }
            return Health.up().build();
        } catch (SQLException e) {
            return Health.down(e).build();
        }
    }
}
```

### Test Cases

Now, update the test cases to ensure they handle null values correctly:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.actuate.health.Health;

@ExtendWith(MockitoExtension.class)
public class DatabaseHealthContributorTest {

    @InjectMocks
    DatabaseHealthContributor databaseHealthContributor;

    @Mock
    DataSource ds;

    @BeforeEach
    void setUp() {
        databaseHealthContributor = new DatabaseHealthContributor(ds);
    }

    @Test
    void testHealth() throws SQLException {
        Connection conn = mock(Connection.class);
        when(ds.getConnection()).thenReturn(conn);
        Statement stmt = mock(Statement.class);
        when(conn.createStatement()).thenReturn(stmt);
        when(stmt.execute(anyString())).thenReturn(true);
        Health health = databaseHealthContributor.health();
        assertEquals("UP", health.getStatus().getCode());
    }

    @Test
    void testHealthWithNullConnection() throws SQLException {
        when(ds.getConnection()).thenReturn(null);
        Health health = databaseHealthContributor.health();
        assertEquals("DOWN", health.getStatus().getCode());
    }

    @Test
    void testHealthWithNullStatement() throws SQLException {
        Connection conn = mock(Connection.class);
        when(ds.getConnection()).thenReturn(conn);
        when(conn.createStatement()).thenReturn(null);
        Health health = databaseHealthContributor.health();
        assertEquals("DOWN", health.getStatus().getCode());
    }
}
```

### Explanation

1. **DatabaseHealthContributor**: 
   - Added null checks for `Connection` and `Statement`.
   - If a null connection is returned, it reports the health as `DOWN` with a specific error message.
   - If a null statement is returned, it similarly reports the health as `DOWN`.

2. **Test Cases**:
   - **testHealth**: Mocks a successful health check by ensuring a non-null connection and statement.
   - **testHealthWithNullConnection**: Mocks the data source to return a null connection and expects the health status to be `DOWN`.
   - **testHealthWithNullStatement**: Mocks a non-null connection but returns a null statement, expecting the health status to be `DOWN`.

These changes ensure that null values are handled correctly, and the test cases will pass successfully without any `NullPointerException` errors.