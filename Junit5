Certainly! To achieve 100% code coverage for the `validateIterator` method in the `MtnInsightsValidator` class, we need to test all branches of the method. Below are the JUnit 5 test cases focusing exclusively on the `validateIterator` method, ensuring that we cover various scenarios, including both valid and invalid inputs.

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    public void setup() {
        validator = new MtnInsightsValidator();
    }

    @Test
    public void testValidateIterator_ValidInput_NoException() {
        MtnInsightsAttributes attributes = createValidMtnInsightsAttributes();
        assertDoesNotThrow(() -> validator.validateIterator(null, attributes, "Test Log"));
    }

    @Test
    public void testValidateIterator_EmptyMtnAndInsightCategoryAndName_ThrowsException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("123");
        attributes.setMtn(""); // Empty MTN
        attributes.setInsightCategory(""); // Empty Insight Category
        attributes.setInsightName(""); // Empty Insight Name

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "Test Log"));
    }

    @Test
    public void testValidateIterator_EmptyInsightCategoryAndName_ThrowsException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("123");
        attributes.setMtn("456");
        attributes.setInsightCategory(""); // Empty Insight Category
        attributes.setInsightName(""); // Empty Insight Name

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "Test Log"));
    }

    @Test
    public void testValidateIterator_ValidMyBizConditions_NoException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("123");
        attributes.setMtn("456");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0)); // "MyBizReg"

        assertDoesNotThrow(() -> validator.validateIterator(null, attributes, "Test Log"));
    }

    @Test
    public void testValidateIterator_MissingMtnAndEcpdIdForMyBiz_ThrowsException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId(null); // Missing ECPD ID
        attributes.setMtn(null); // Missing MTN
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0)); // "MyBizReg"

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "Test Log"));
    }

    @Test
    public void testValidateIterator_NetworkOutageConditions_NoException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("123");
        attributes.setMtn("456");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0)); // "mtnoutage"

        assertDoesNotThrow(() -> validator.validateIterator(null, attributes, "Test Log"));
    }

    @Test
    public void testValidateIterator_MissingOutageIdForNetworkOutage_ThrowsException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("123");
        attributes.setMtn("456");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0)); // "mtnoutage"
        attributes.setOutageId(null); // Missing Outage ID

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "Test Log"));
    }

    @Test
    public void testValidateIterator_MissingEcpdIdForNetworkOutage_ThrowsException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId(null); // Missing ECPD ID
        attributes.setMtn("456");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0)); // "mtnoutage"
        attributes.setOutageId("789"); // Outage ID provided

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "Test Log"));
    }

    // Helper method to create valid instances for testing
    private MtnInsightsAttributes createValidMtnInsightsAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("123");
        attributes.setMtn("456");
        attributes.setInsightCategory("ValidCategory");
        attributes.setInsightName("ValidName");
        attributes.setOutageId("789");
        return attributes;
    }
}
```

### Explanation of the Test Cases:

1. **Valid Input**: Tests that a valid `MtnInsightsAttributes` object does not throw an exception.

2. **Empty MTN, Insight Category, and Name**: Tests that when all three fields are empty, an exception is thrown.

3. **Empty Insight Category and Name**: Tests that when only the Insight Category and Name are empty, an exception is thrown.

4. **Valid MyBiz Conditions**: Tests a valid scenario for MyBiz conditions where all required fields are filled, ensuring no exception is thrown.

5. **Missing MTN and ECPD ID for MyBiz**: Tests that if the MTN and ECPD ID are missing while the Insight Category and Name are valid, an exception is thrown.

6. **Valid Network Outage Conditions**: Tests a valid scenario for network outage conditions where all required fields are filled, ensuring no exception is thrown.

7. **Missing Outage ID for Network Outage**: Tests that if the Outage ID is missing while other fields are valid, an exception is thrown.

8. **Missing ECPD ID for Network Outage**: Tests that if the ECPD ID is missing while other fields are valid, an exception is thrown.

These test cases aim to cover the various branches of the `validateIterator` method, ensuring comprehensive testing and achieving 100% code coverage.