To achieve 100% code coverage for the specified block in the `createAlarm` method, you need to write JUnit 5 test cases that cover all the possible branches of the `else if` condition. Here are the test cases:

1. `perceivedSeverity` is `null` and `stateValue` equals `postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())`.
2. `perceivedSeverity` is an empty string and `stateValue` equals `postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())`.
3. `perceivedSeverity` is not `null`, not an empty string, and `stateValue` equals `postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())`.
4. `perceivedSeverity` is `null` and `stateValue` does not equal `postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())`.
5. `perceivedSeverity` is an empty string and `stateValue` does not equal `postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())`.
6. `perceivedSeverity` is not `null`, not an empty string, and `stateValue` does not equal `postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())`.

Here's the JUnit 5 test code for the `createAlarm` method:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.HashMap;
import java.util.Map;

class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 0);
        perceivedSeverityMap.put("Cleared", -1);

        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 0);
        alarmStateMap.put("Uncleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
    }

    @Test
    void testCreateAlarm_perceivedSeverityNullAndStateCleared() throws Exception {
        String msg = "{\"alarmState\": \"Cleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "perceivedSeverity")).thenReturn(null);
        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "State")).thenReturn("Cleared");

        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityEmptyAndStateCleared() throws Exception {
        String msg = "{\"alarmState\": \"Cleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "perceivedSeverity")).thenReturn("");
        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "State")).thenReturn("Cleared");

        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityNotNullAndStateCleared() throws Exception {
        String msg = "{\"alarmState\": \"Cleared\", \"perceivedSeverity\": \"Indeterminate\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "perceivedSeverity")).thenReturn("Indeterminate");
        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "State")).thenReturn("Cleared");

        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityNullAndStateNotCleared() throws Exception {
        String msg = "{\"alarmState\": \"Uncleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "perceivedSeverity")).thenReturn(null);
        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "State")).thenReturn("Uncleared");

        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityEmptyAndStateNotCleared() throws Exception {
        String msg = "{\"alarmState\": \"Uncleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "perceivedSeverity")).thenReturn("");
        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "State")).thenReturn("Uncleared");

        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityNotNullAndStateNotCleared() throws Exception {
        String msg = "{\"alarmState\": \"Uncleared\", \"perceivedSeverity\": \"Indeterminate\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "perceivedSeverity")).thenReturn("Indeterminate");
        when(alarmRepositoryImpl.getValueFromNormalizedMsg(jsonNode, "State")).thenReturn("Uncleared");

        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }
}
```

This test class uses Mockito to mock the dependencies and the `createAlarm` method behavior, ensuring that all branches of the specified block are covered.