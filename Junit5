Sure, let's complete the `testCreateAlarm_withNonEmptyPerceivedSeverityAndNonClearedState` method. Here is the completed version of the test case along with the necessary imports and class setup:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;
    private static Environment env;
    private static AlarmPostingUtils alarmPostingUtils;
    private static AlarmPostingConstants alarmPostingConstants;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
        env = mock(Environment.class);
        alarmPostingUtils = mock(AlarmPostingUtils.class);
        alarmPostingConstants = mock(AlarmPostingConstants.class);
        when(env.getProperty(Mockito.anyString())).thenReturn("testValue");
        ReflectionTestUtils.setField(alarmPostingUtils, "env", env);
    }

    // Existing test cases...

    @Test
    void testCreateAlarm_withNonEmptyPerceivedSeverityAndNonClearedState() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String nonEmptyPerceivedSeverityJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\", \"sequenceId\":\"23423\", \"perceivedSeverity\":\"2\"}";
        JsonNode json = obj.readTree(nonEmptyPerceivedSeverityJson);

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        percMap.put("2", 2);  // Adding perceived severity value that is non-empty
        stateMap.put("new", 2);  // Non-cleared state
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(nonEmptyPerceivedSeverityJson);
    }
}
```

This test case covers the scenario where `perceivedSeverity` is not empty and `stateValue` is not equal to `postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())`. This should help achieve 100% code coverage for the specified branch condition.