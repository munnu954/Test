Certainly! Below is an example of a JUnit 5 test case that covers the specific `if` block in the `createAlarm` method of the `AlarmRepositoryImpl` class. This test case ensures 100% code coverage for that particular block:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    private ObjectMapper objectMapper;

    @BeforeEach
    public void setUp() {
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testCreateAlarm_BothReportingAndAlarmedObjectNull() throws Exception {
        // Mock JSON message
        String jsonMessage = "{ \"tid\": \"testTid\" }";

        // Create Alarm
        Alarm alarm = alarmRepository.createAlarm(jsonMessage);

        // Assertions
        assertNotNull(alarm);
        assertEquals("testTid", alarm.getReportingObject());
    }

    @Test
    public void testCreateAlarm_ReportingObjectEmptyAndAlarmedObjectNull() throws Exception {
        // Mock JSON message
        String jsonMessage = "{ \"tid\": \"testTid\", \"reportingObject\": \"\" }";

        // Create Alarm
        Alarm alarm = alarmRepository.createAlarm(jsonMessage);

        // Assertions
        assertNotNull(alarm);
        assertEquals("testTid", alarm.getReportingObject());
    }

    @Test
    public void testCreateAlarm_ReportingObjectNullAndAlarmedObjectEmpty() throws Exception {
        // Mock JSON message
        String jsonMessage = "{ \"tid\": \"testTid\", \"alarmedObject\": \"\" }";

        // Create Alarm
        Alarm alarm = alarmRepository.createAlarm(jsonMessage);

        // Assertions
        assertNotNull(alarm);
        assertEquals("testTid", alarm.getReportingObject());
    }

    @Test
    public void testCreateAlarm_BothReportingAndAlarmedObjectEmpty() throws Exception {
        // Mock JSON message
        String jsonMessage = "{ \"tid\": \"testTid\", \"reportingObject\": \"\", \"alarmedObject\": \"\" }";

        // Create Alarm
        Alarm alarm = alarmRepository.createAlarm(jsonMessage);

        // Assertions
        assertNotNull(alarm);
        assertEquals("testTid", alarm.getReportingObject());
    }
}
```

### Explanation:
1. **Mocks and Setup**:
   - An instance of `AlarmRepositoryImpl` is created.

2. **Mock Data**:
   - The JSON message is set up with different combinations of `reportingObject` and `alarmedObject` values.

3. **Test Cases**:
   - **`testCreateAlarm_BothReportingAndAlarmedObjectNull`**: Tests the scenario where both `reportingObject` and `alarmedObject` are `null`.
   - **`testCreateAlarm_ReportingObjectEmptyAndAlarmedObjectNull`**: Tests the scenario where `reportingObject` is an empty string and `alarmedObject` is `null`.
   - **`testCreateAlarm_ReportingObjectNullAndAlarmedObjectEmpty`**: Tests the scenario where `reportingObject` is `null` and `alarmedObject` is an empty string.
   - **`testCreateAlarm_BothReportingAndAlarmedObjectEmpty`**: Tests the scenario where both `reportingObject` and `alarmedObject` are empty strings.

4. **Assertions**:
   - `assertNotNull(alarm)`: Ensures an `Alarm` object is created.
   - `assertEquals("testTid", alarm.getReportingObject())`: Confirms that the `reportingObject` is set to the expected value.

These test cases cover the specific `if` block by testing different combinations of `reportingObject` and `alarmedObject` values to ensure the correct assignment of `reportingObject` when either or both are `null` or empty strings.