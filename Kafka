import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.text.SimpleDateFormat;
import java.util.Date;

@SpringBootTest
public class FlinkApiControllerTests {

    private FlinkApiController flinkApiController;
    private RestTemplate restTemplate;

    @BeforeEach
    public void setUp() {
        restTemplate = mock(RestTemplate.class);
        flinkApiController = new FlinkApiController(restTemplate);
    }

    @Test
    public void testTriggerJobSuccessful() throws Exception {
        // Mocking the required dependencies
        String flinkJobJarid = "b9b4c3b9-5cee-43a9-a911-6a23b9d2ad91_custom-csv-data-transformer-0.0.1-SNAPSHOT-jar-with-dependencies.jar";
        String programArgs = "-input input -fileType csv -bootstarpServer localhost:9092 -Topic COLLECTION-OUTPUT";
        UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
        auditMsg.setInputFilePath("C:/Temp/Device.csv");
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        String jobSubmitUrl = "http://localhost:8081/jars/" + flinkJobJarid + "/run";
        String responseBody = "{\"jobid\": \"12345\"}";

        // Mocking the response entity
        ResponseEntity<String> responseEntity = new ResponseEntity<>(responseBody, HttpStatus.FOUND);
        when(restTemplate.postForEntity(Mockito.eq(jobSubmitUrl), any(HttpEntity.class), Mockito.eq(String.class))).thenReturn(responseEntity);
        // Mocking the status response from getForObject
        JsonNode jsonNode = new ObjectMapper().readTree("{\"state\": \"FINISHED\"}");
        when(restTemplate.getForObject(Mockito.eq("http://localhost:8081/jobs/12345"), Mockito.eq(JsonNode.class))).thenReturn(jsonNode);

        // Triggering the job
        String result = flinkApiController.triggerJob(auditMsg, ".csv");

        // Asserting the result
        assertEquals("Job submitted", result);
    }

    @Test
    public void testTriggerJobNotSuccessful() throws Exception {
        // Mocking the required dependencies
        String flinkJobJarid = "b9b4c3b9-5cee-43a9-a911-6a23b9d2ad91_custom-csv-data-transformer-0.0.1-SNAPSHOT-jar-with-dependencies.jar";
        String programArgs = "-input input -fileType csv -bootstarpServer localhost:9092 -Topic COLLECTION-OUTPUT";
        UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
        auditMsg.setInputFilePath("C:/Temp/Device.csv");
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        String jobSubmitUrl = "http://localhost:8081/jars/" + flinkJobJarid + "/run";
        String responseBody = "{\"jobid\": \"12345\"}";

        // Mocking the response entity
        ResponseEntity<String> responseEntity = new ResponseEntity<>(responseBody, HttpStatus.OK);
        when(restTemplate.postForEntity(Mockito.eq(jobSubmitUrl), any(HttpEntity.class), Mockito.eq(String.class))).thenReturn(responseEntity);
        // Mocking the status response from getForObject
        JsonNode jsonNode = new ObjectMapper().readTree("{\"state\": \"RUNNING\"}");
        when(restTemplate.getForObject(Mockito.eq("http://localhost:8081/jobs/12345"), Mockito.eq(JsonNode.class))).thenReturn(jsonNode);

        // Triggering the job
        String result = flinkApiController.triggerJob(auditMsg, ".csv");

        // Asserting the result
        assertEquals("Job is not triggered", result);
    }

    @Test
    public void testUpdateJobStatusFinished() throws Exception {
        // Mocking the required dependencies
        RestTemplate restTemplate = mock(RestTemplate.class);
        FlinkApiController flinkApiController = new FlinkApiController(restTemplate);
        ObjectMapper objectMapper = new ObjectMapper();
        String jobID = "12345";
        JsonNode jsonNode = objectMapper.readTree("{\"state\": \"FINISHED\"}");
        when(restTemplate.getForObject(Mockito.eq("http://localhost:8081/jobs/12345"), Mockito.eq(JsonNode.class))).thenReturn(jsonNode);

        // Updating job status
        UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
        flinkApiController.updateJobStatus(auditMsg, jobID);

        // Asserting the job status
        assertEquals(JobStatus.FLINK_JOB_SUBMITTED.toString(), auditMsg.getJobStatus());
    }

    @Test
    public void testUpdateJobStatusFailed() throws Exception {
        // Mocking the required dependencies
        RestTemplate restTemplate = mock(RestTemplate.class);
        FlinkApiController flinkApiController = new FlinkApiController(restTemplate);
        ObjectMapper objectMapper = new ObjectMapper();
        String jobID = "12345";
        JsonNode jsonNode = objectMapper.readTree("{\"state\": \"FAILED\"}");
        when(restTemplate.getForObject(Mockito.eq("http://localhost:8081/jobs/12345"), Mockito.eq(JsonNode.class))).thenReturn(jsonNode);

        // Updating job status
        UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
        flinkApiController.updateJobStatus(auditMsg, jobID);

        // Asserting the job status
        assertEquals(JobStatus.FLINK_JOB_FAILED.toString(), auditMsg.getJobStatus());
    }
}