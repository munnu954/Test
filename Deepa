Here is the sample JUnit5 test case code for the above scenarios:

Positive Test Cases:

1\. Create Operation:

```
@Test
void testCreateRecord() {
    // Initialize input data
    Record record = new Record("John", "Doe", "john.doe@example.com");

    // Call create method to insert record into database
    Record createdRecord = dao.create(record);

    // Verify that a new record is created successfully
    assertNotNull(createdRecord.getId());
    assertEquals(record.getFirstName(), createdRecord.getFirstName());
    assertEquals(record.getLastName(), createdRecord.getLastName());
    assertEquals(record.getEmail(), createdRecord.getEmail());
}
```

2\. Read Operation:

```
@Test
void testReadRecord() {
    // Initialize input data
    Record record = new Record("John", "Doe", "john.doe@example.com");

    // Insert record into database
    Record createdRecord = dao.create(record);

    // Call read method to retrieve record from database
    Record retrievedRecord = dao.read(createdRecord.getId());

    // Verify that the retrieved record matches the expected data
    assertNotNull(retrievedRecord);
    assertEquals(createdRecord.getId(), retrievedRecord.getId());
    assertEquals(createdRecord.getFirstName(), retrievedRecord.getFirstName());
    assertEquals(createdRecord.getLastName(), retrievedRecord.getLastName());
    assertEquals(createdRecord.getEmail(), retrievedRecord.getEmail());
}
```

3\. Update Operation:

```
@Test
void testUpdateRecord() {
    // Initialize input data
    Record record = new Record("John", "Doe", "john.doe@example.com");

    // Insert record into database
    Record createdRecord = dao.create(record);

    // Update the record with new data
    createdRecord.setFirstName("Jane");
    createdRecord.setLastName("Smith");
    createdRecord.setEmail("jane.smith@example.com");

    // Call update method to update the record in database
    Record updatedRecord = dao.update(createdRecord);

    // Verify that the updated record matches the new data
    assertNotNull(updatedRecord);
    assertEquals(createdRecord.getId(), updatedRecord.getId());
    assertEquals(createdRecord.getFirstName(), updatedRecord.getFirstName());
    assertEquals(createdRecord.getLastName(), updatedRecord.getLastName());
    assertEquals(createdRecord.getEmail(), updatedRecord.getEmail());
}
```

4\. Delete Operation:

```
@Test
void testDeleteRecord() {
    // Initialize input data
    Record record = new Record("John", "Doe", "john.doe@example.com");

    // Insert record into database
    Record createdRecord = dao.create(record);

    // Call delete method to delete the record from database
    dao.delete(createdRecord.getId());

    // Call read method to retrieve the deleted record from database
    Record deletedRecord = dao.read(createdRecord.getId());

    // Verify that the record is no longer present in the database after deletion
    assertNull(deletedRecord);
}
```

Negative Test Cases:

1\. Create Operation:

```
@Test
void testCreateRecordWithInvalidData() {
    // Initialize input data with invalid email address
    Record record = new Record("John", "Doe", "invalid_email");

    // Call create method to insert record into database
    assertThrows(InvalidDataException.class, () -> dao.create(record));

    // Verify that no record is added to the database when an error occurs
    List<Record> records = dao.getAll();
    assertFalse(records.contains(record));
}
```

2\. Read Operation:

```
@Test
void testReadNonExistentRecord() {
    // Call read method to retrieve non-existent record from database
    assertThrows(RecordNotFoundException.class, () -> dao.read(999));

    // Verify that an appropriate exception is thrown when attempting to read a non-existent record
}
```

3\. Update Operation:

```
@Test
void testUpdateNonExistentRecord() {
    // Initialize input data with non-existent record ID
    Record record = new Record(999, "John", "Doe", "john.doe@example.com");

    // Call update method to update non-existent record in database
    assertThrows(RecordNotFoundException.class, () -> dao.update(record));

    // Verify that an appropriate exception is thrown when attempting to update a non-existent record
}
```

4\. Delete Operation:

```
@Test
void testDeleteNonExistentRecord() {
    // Call delete method to delete non-existent record from database
    assertThrows(RecordNotFoundException.class, () -> dao.delete(999));

    // Verify that an appropriate exception is thrown when attempting to delete a non-existent record
}
```