Here is a revised version of the JUnit5 test cases for the `AlarmRepositoryImpl` class:

```java
public class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Test
    public void testPerformUpdateforACK_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforACK("appliedaction", "alarmupdatedtime", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformUpdateforOpNote_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforOpNote("opNoteText", "alarmupdatedtime", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformClearbyfeed_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performClearbyfeed(1, "cleartime", "alarmupdatedtime", "appliedaction", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformUpdateforHandleEvent_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforHandleEvent("handledByidIMPACT", "alarmupdatedtime", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformUpdateforHandleTicket_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforHandleTicket("ticket", "ticketStatus", "alarmupdatedtime", "alarmidentity", 1);
        });
    }
}
```

In this revised version, I have explicitly thrown a `BadSqlGrammarException` with a custom message in the `when` clause of the mock setup. This should ensure that the exception is thrown as expected during the test execution. Please make sure to adjust the custom message as needed for your testing scenario.