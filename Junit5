@Service
public class CoconutServiceVersion3 {

    @Autowired
    CoconutDeviceDao coconutDeviceDao;

    @Autowired
    EuipmentListCoconutDeviceDao euipmentListCoconutDeviceDao;

    @Autowired
    EquipmentListCoconutDeviceV3Dao equipmentListCoconutDeviceV3Dao;

    private CoconutDeviceMSConstants coconutDeviceMSConstants;

    private static Logger logger = LoggerFactory.getLogger(CoconutServiceVersion3.class);

    //newly created for v3api
    public UTSEquipmentList getCOCONUTEquipListV3(EquipmentInputRequest request, UTSEquipmentList utsEquipmentList) throws InternalServerErrorException, NoDataFoundException, InterruptedException, ExecutionException, DaoException {
        try {
            String sqlQuery = null;
            StringJoiner sqlQueryString = new StringJoiner("");
            Map<String, Object> criteria = request.getRequestParameters();

            if ("LOCATION".equalsIgnoreCase((String) criteria.get("outputControl"))) {
                sqlQueryString.add(coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);

                if ("%".equalsIgnoreCase((String) criteria.get("locationCLLI"))) {
                    sqlQueryString.add(coconutDeviceMSConstants.COCONUT_V3_DEVICE_LIST_SITE_NAME_QUERY);
                }

                if ("%".equalsIgnoreCase((String) criteria.get("siteName"))) {
                    sqlQueryString.add(coconutDeviceMSConstants.COCONUT_V3_DEVICE_LIST_LOCATION_CLLI_QUERY);
                }
            } else {
                sqlQueryString.add(coconutDeviceMSConstants.COCONUT_V3_DEVICE_LIST_QUERY);
            }

            sqlQuery = sqlQueryString.toString();

            Integer skip = 0;
            Integer limit = 10;
            if (criteria.containsKey("pageNo")) {
                if (criteria.get("pageNo").equals("1")) {
                    skip = 0;
                } else {
                    skip = (Integer.parseInt(criteria.get("pageNo").toString()) * Integer.parseInt(criteria.get("size").toString()));
                    skip = skip - Integer.parseInt(criteria.get("size").toString());
                }
            } else {
                skip = 0;
            }
            if (criteria.containsKey("size")) {
                limit = skip + Integer.parseInt(criteria.get("size").toString());
            } else {
                limit = 10;
            }
            sqlQuery = "select * from (select t.*, rownum as rn from (" + sqlQuery;
            sqlQuery = sqlQuery.concat(" ) t ) WHERE rn BETWEEN " + skip + " and " + limit + " ");
            if (criteria.containsKey("sortByField")) {
                sqlQuery = sqlQuery.concat(" order by " + criteria.get("sortByField") + " ");
            }
            if (criteria.containsKey("sortDirection")) {
                sqlQuery = sqlQuery.concat(" " + criteria.get("sortDirection") + " ");
            }

            String fullQuery = "select COUNT(*) from (" + sqlQuery + ")";

            UTSEquipmentList response = new UTSEquipmentList();
            response = equipmentListCoconutDeviceV3Dao.getEquipListDaoV3(criteria, sqlQuery, fullQuery, utsEquipmentList, request);
            return response;
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            throw new InternalServerErrorException(ex.getMessage());
        }
    }

    private String queryBasedOnParameter(Map<String, Object> queryParams) {
        String query = "";
        StringJoiner finalQuery = new StringJoiner("");
        finalQuery.add(coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);

        if (queryParams.containsKey("locationCLLI") && !"%".equalsIgnoreCase((String) queryParams.get("locationCLLI"))) {
            finalQuery.add(coconutDeviceMSConstants.COCONUT_V3_DEVICE_LIST_LOCATION_CLLI_QUERY);
        }

        if (queryParams.containsKey("siteName") && !"%".equalsIgnoreCase((String) queryParams.get("siteName"))) {
            finalQuery.add(coconutDeviceMSConstants.COCONUT_V3_DEVICE_LIST_SITE_NAME_QUERY);
        }

        return finalQuery.toString();
    }
}