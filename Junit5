To achieve 100% code coverage for the `RelationAPIResponse` class, we need to test the getter method `getResponseMessage` as well as validate the behavior when the `responseMessage` is set via reflection or a constructor. In this case, since `responseMessage` is private and has no setter, I'll use reflection to set the private field for testing purposes.

Here is a JUnit 5 test case for the `RelationAPIResponse` class:

1. **POM or build.gradle dependencies** (add Jackson annotations and JUnit 5 dependencies if not already present):
   ```xml
   <!-- For Maven (pom.xml) -->
   <dependency>
       <groupId>org.junit.jupiter</groupId>
       <artifactId>junit-jupiter-engine</artifactId>
       <version>LATEST_VERSION</version>
       <scope>test</scope>
   </dependency>
   <dependency>
       <groupId>com.fasterxml.jackson.core</groupId>
       <artifactId>jackson-databind</artifactId>
       <version>YOUR_VERSION</version>
   </dependency>
   ```

2. **JUnit 5 Test class:**
   ```java
   import static org.junit.jupiter.api.Assertions.assertEquals;

   import java.lang.reflect.Field;

   import org.junit.jupiter.api.BeforeEach;
   import org.junit.jupiter.api.Test;
   
   public class RelationAPIResponseTest {
   
       private RelationAPIResponse response;
   
       @BeforeEach
       public void setUp() {
           response = new RelationAPIResponse();
       }
   
       @Test
       public void testGetResponseMessage() throws NoSuchFieldException, IllegalAccessException {
           // Use reflection to set 'responseMessage' field as it's private and has no setter
           Field field = RelationAPIResponse.class.getDeclaredField("responseMessage");
           field.setAccessible(true);
           String expectedMessage = "Success!";
           field.set(response, expectedMessage);
   
           assertEquals(expectedMessage, response.getResponseMessage());
       }
   }
   
   // Assuming your original class is in the same package for simplicity
   import com.fasterxml.jackson.annotation.JsonProperty;

   public class RelationAPIResponse {

       @JsonProperty("responseMessage") 
       private String responseMessage;

       public String getResponseMessage() { 
           return responseMessage; 
       }
   }
   ```

### Explanation:
1. **Dependencies**:
   - Ensure that you have the dependencies for JUnit 5 (`junit-jupiter-engine`) and Jackson (`jackson-databind`).

2. **Test Class `RelationAPIResponseTest`**:
   - **Setup Method `setUp`**: Initializes the `RelationAPIResponse` object.
   - **Test Method `testGetResponseMessage`**: Uses reflection to set the private field `responseMessage` directly and then verifies the getter method.

By running these tests, you will achieve 100% code coverage for the `RelationAPIResponse` class. This ensures that the getter method is tested, and because the field is private and has no setter, we use reflection to set its value for the test.