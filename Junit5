To achieve 100% code coverage for the `queryBasedOnParameter` method in the `CoconutServiceVersion3` class using JUnit, we need to create a test case that uses reflection to access the private method. Here's how you can write a JUnit test case to cover all branches of the conditional statements:

```java
import static org.junit.Assert.assertEquals;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;

public class CoconutServiceVersion3Test {

    private CoconutServiceVersion3 coconutServiceVersion3;

    @Before
    public void setUp() {
        coconutServiceVersion3 = new CoconutServiceVersion3();
    }

    @Test
    public void testQueryBasedOnParameter_withBothConditions() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("locationCLLI", "NYCLLI");
        params.put("siteName", "New York Site");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY
                + " AND LOWER(site.clli_code) like 'nyclli'"
                + " AND LOWER(site.site_name) like 'new york site'";

        String actualQuery = invokeQueryBasedOnParameter(params);
        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_withLocationCLLIOnly() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("locationCLLI", "NYCLLI");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY
                + " AND LOWER(site.clli_code) like 'nyclli'";

        String actualQuery = invokeQueryBasedOnParameter(params);
        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_withSiteNameOnly() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("siteName", "New York Site");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY
                + " AND LOWER(site.site_name) like 'new york site'";

        String actualQuery = invokeQueryBasedOnParameter(params);
        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_withNoConditions() throws Exception {
        Map<String, Object> params = new HashMap<>();

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;

        String actualQuery = invokeQueryBasedOnParameter(params);
        assertEquals(expectedQuery, actualQuery);
    }

    private String invokeQueryBasedOnParameter(Map<String, Object> params) throws Exception {
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        return (String) method.invoke(coconutServiceVersion3, params);
    }
}
```

### Explanation:
- **Reflection**: The test uses Java Reflection to access the private `queryBasedOnParameter` method. The `setAccessible(true)` method allows us to bypass the access control checks.
- **Test Cases**:
  1. **Both Conditions**: Tests the scenario where both `locationCLLI` and `siteName` are provided.
  2. **LocationCLLI Only**: Tests where only `locationCLLI` is provided.
  3. **SiteName Only**: Tests where only `siteName` is provided.
  4. **No Conditions**: Tests where neither condition is provided, ensuring the base query is returned.

This setup ensures that all branches in the `queryBasedOnParameter` method are covered, achieving 100% code coverage for that method.