That was my mistake. It looks like I've made a mistake in the response. If the sendMessage method is undefined for the KafkaProducer class, it's possible that the KafkaProducer class doesn't have that method. 

To fix this, you'd need to add the sendMessage method to the KafkaProducer class or use an appropriate method that sends the message to the Kafka topic. If the KafkaProducer class is provided by a library or framework, you may need to consult the documentation to find the correct method for sending messages.

Assuming you are using Spring Kafka, you can use the KafkaTemplate to send messages to the topic. Here's how you can do that:

Update the KafkaProducer class to use KafkaTemplate:
```java
@Component
public class KafkaProducer {

    @Autowired
    private KafkaTemplate<String, SpaceCollector> kafkaTemplate;

    @Value("${topic.name}")
    private String topicName;

    public void sendMessage(SpaceCollector message) {
        kafkaTemplate.send(topicName, message);
    }
}
```

With this change, your test case should work as expected:
```java
@Test
public void testKafkaProducer() {
    SpaceCollector message = new SpaceCollector(1, "url", 8080, "input.csv", "output.csv", ",", "CSV");

    doNothing().when(kafkaTemplate).send(eq(topicName), eq(message));
    kafkaProducer.sendMessage(message);

    verify(kafkaTemplate, times(1)).send(eq(topicName), eq(message);

    // Assertions
    assertNotNull(message);
    assertEquals(1, message.getId());
    assertEquals("url", message.getUrl());
    assertEquals(8080, message.getPort());
    assertEquals("input.csv", message.getInputFilePath());
    assertEquals("output.csv", message.getOutputFilePath());
    assertEquals(",", message.getDelimiter());
    assertEquals("CSV", message.getFileType());
}
```

I hope this fixes the issue for you.