Feature: Polling Service Thread Creation

Scenario: One thread created for one space collector record present in repo
  Given One record in space collector repository
  When the scheduler runs
  Then the poller should create 1 thread
  And validate that one thread is created and it is running

**Step Definitions:**

public class PollingServiceSteps {

    private PollingServiceImpl pollingService;
    private LuceneSpaceCollectorRepository luceneSpaceCollectorRepository;
    private int initialThreadCount;
    private int finalThreadCount;

    @Given("One record in space collector repository")
    public void givenOneRecordInSpaceCollectorRepository() {
        // Initialize the repository with one record
        luceneSpaceCollectorRepository = new LuceneSpaceCollectorRepository();
        luceneSpaceCollectorRepository.addRecord(new SpaceCollector());
    }

    @When("the scheduler runs")
    public void whenTheSchedulerRuns() {
        pollingService = new PollingServiceImpl();
        initialThreadCount = Thread.activeCount();
        pollingService.pollDeviceDB();
        finalThreadCount = Thread.activeCount();
    }

    @Then("the poller should create 1 thread")
    public void thenThePollerShouldCreateOneThread() {
        Assert.assertEquals(initialThreadCount + 1, finalThreadCount);
    }

    @And("validate that one thread is created and it is running")
    public void andValidateOneThreadIsRunning() {
        boolean threadFound = false;
        Thread[] threads = new Thread[Thread.activeCount()];
        Thread.enumerate(threads);
        for (Thread thread : threads) {
            if (thread.getName().startsWith("collection-orchestrator-id-")) {
                threadFound = true;
                Assert.assertTrue(thread.isAlive());
                break;
            }
        }
        Assert.assertTrue(threadFound);
    }
}


This step implementation assumes that you have a LuceneSpaceCollectorRepository class with the necessary methods to add a record. You can adjust the step definitions based on your actual implementation.