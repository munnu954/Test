import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.BadSqlGrammarException;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Test
    void testPerformUpdateforACK_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class)))
            .thenThrow(new BadSqlGrammarException("Bad SQL grammar", "SELECT * FROM"));
        
        int result = alarmRepository.performUpdateforACK("action", "time", "identity", 1L);
        assertEquals(0, result);
    }

    @Test
    void testPerformUpdateforOpNote_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class)))
            .thenThrow(new BadSqlGrammarException("Bad SQL grammar", "SELECT * FROM"));
        
        int result = alarmRepository.performUpdateforOpNote("note", "time", "identity", 1L);
        assertEquals(0, result);
    }

    @Test
    void testPerformClearbyfeed_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class)))
            .thenThrow(new BadSqlGrammarException("Bad SQL grammar", "SELECT * FROM"));
        
        int result = alarmRepository.performClearbyfeed(1, "clearTime", "updateTime", "action", "identity", 1L);
        assertEquals(0, result);
    }

    @Test
    void testPerformUpdateforHandleEvent_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class)))
            .thenThrow(new BadSqlGrammarException("Bad SQL grammar", "SELECT * FROM"));
        
        int result = alarmRepository.performUpdateforHandleEvent("handeledBy", "time", "identity", 1L);
        assertEquals(0, result);
    }

    @Test
    void testPerformUpdateforHandleTicket_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class)))
            .thenThrow(new BadSqlGrammarException("Bad SQL grammar", "SELECT * FROM"));
        
        int result = alarmRepository.performUpdateforHandleTicket("ticket", "status", "time", "identity", 1L);
        assertEquals(0, result);
    }
}