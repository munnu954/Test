import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.newwaylabs.commonwrapper.model.ClrComponent;
import com.newwaylabs.commonwrapper.model.Link;
import com.newwaylabs.commonwrapper.model.Node;
import com.newwaylabs.commonwrapper.model.PortRef;
import com.newwaylabs.commonwrapper.util.CommonWrapperConstants;

@ExtendWith(MockitoExtension.class)
public class PortProcessorTest {

    private PortProcessor portProcessor;

    @Mock
    private ClrComponent clrComponent;

    @Mock
    private PortRef portRef;

    @BeforeEach
    void setUp() {
        portProcessor = PortProcessor.getInstance();
    }

    @Test
    void testProcessWithNullPreviousClrComponent() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        AtomicInteger ukCount = new AtomicInteger(0);

        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(List.of(new com.newwaylabs.commonwrapper.model.EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(List.of(portRef));
        when(portRef.getPortID()).thenReturn("port-id");

        portProcessor.process(nodes, links, clrComponent, clrComponentList, null, 0, ukCount, "source-system");

        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals(CommonWrapperConstants.PORT, link.getLinkType());
        assertEquals("undefined", link.getSource());
        assertEquals("port-id", link.getTarget());
    }

    @Test
    void testProcessWithNullPreviousClrComponentAndNullPortRef() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        AtomicInteger ukCount = new AtomicInteger(0);

        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(List.of(new com.newwaylabs.commonwrapper.model.EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(null);

        portProcessor.process(nodes, links, clrComponent, clrComponentList, null, 0, ukCount, "source-system");

        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals(CommonWrapperConstants.PORT, link.getLinkType());
        assertEquals("undefined", link.getSource());
        assertEquals(CommonWrapperConstants.PORT_UNDEFINED, link.getTarget());
    }

    @Test
    void testProcessWithNullPreviousClrComponentAndDecommissionedPortRef() {
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        AtomicInteger ukCount = new AtomicInteger(0);

        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(List.of(new com.newwaylabs.commonwrapper.model.EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(List.of(portRef));
        when(portRef.getNeStatus()).thenReturn(CommonWrapperConstants.DECOMMISSIONED);
        when(portRef.getNeName()).thenReturn("ne-name");

        portProcessor.process(nodes, links, clrComponent, clrComponentList, null, 0, ukCount, "source-system");

        assertTrue(links.isEmpty());
    }
}