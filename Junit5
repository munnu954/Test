import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class AlarmRepositoryImplTest {

    @Test
    void testSetPerceivedSeverityWhenPerceivedSeverityIsNullAndStateIsCleared() {
        AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
        Alarm alarm = new Alarm();
        alarm.setPerceivedSeverity(1);
        alarm.setState(3); // Assuming state value for Cleared
        alarmRepository.setPerceivedSeverity(alarm, null);

        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testSetPerceivedSeverityWhenPerceivedSeverityIsEmptyAndStateIsCleared() {
        AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
        Alarm alarm = new Alarm();
        alarm.setPerceivedSeverity(1);
        alarm.setState(3); // Assuming state value for Cleared
        alarmRepository.setPerceivedSeverity(alarm, "");

        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testSetPerceivedSeverityWhenPerceivedSeverityIsNotEmptyAndStateIsCleared() {
        AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
        Alarm alarm = new Alarm();
        alarm.setPerceivedSeverity(1);
        alarm.setState(3); // Assuming state value for Cleared
        alarmRepository.setPerceivedSeverity(alarm, "major");

        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testSetPerceivedSeverityWhenPerceivedSeverityIsNotNullAndStateIsNotCleared() {
        AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
        Alarm alarm = new Alarm();
        alarm.setPerceivedSeverity(1);
        alarm.setState(1); // Assuming state value for New
        alarmRepository.setPerceivedSeverity(alarm, "critical");

        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testSetPerceivedSeverityWhenPerceivedSeverityIsNullAndStateIsNotCleared() {
        AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
        Alarm alarm = new Alarm();
        alarm.setPerceivedSeverity(1);
        alarm.setState(1); // Assuming state value for New
        alarmRepository.setPerceivedSeverity(alarm, null);

        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testSetPerceivedSeverityWhenPerceivedSeverityIsEmptyAndStateIsNotCleared() {
        AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
        Alarm alarm = new Alarm();
        alarm.setPerceivedSeverity(1);
        alarm.setState(1); // Assuming state value for New
        alarmRepository.setPerceivedSeverity(alarm, "");

        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testSetPerceivedSeverityWhenPerceivedSeverityIsNotEmptyAndStateIsNotCleared() {
        AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
        Alarm alarm = new Alarm();
        alarm.setPerceivedSeverity(1);
        alarm.setState(1); // Assuming state value for New
        alarmRepository.setPerceivedSeverity(alarm, "critical");

        assertEquals(1, alarm.getPerceivedSeverity());
    }
}