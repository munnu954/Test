Certainly! Here's a complete and executable JUnit test case code for achieving 100% code coverage of the `ValidationErrorResponse` class:

```java
import org.junit.Test;
import static org.junit.Assert.*;

public class ValidationErrorResponseTest {

    @Test
    public void testGetStatus() {
        ValidationErrorResponse errorResponse = new ValidationErrorResponse();
        errorResponse.setStatus(400);
        assertEquals(400, errorResponse.getStatus());
    }

    @Test
    public void testSetStatus() {
        ValidationErrorResponse errorResponse = new ValidationErrorResponse();
        errorResponse.setStatus(400);
        assertEquals(400, errorResponse.getStatus());
    }

    @Test
    public void testGetMessage() {
        ValidationErrorResponse errorResponse = new ValidationErrorResponse();
        errorResponse.setMessage("Invalid request");
        assertEquals("Invalid request", errorResponse.getMessage());
    }

    @Test
    public void testSetMessage() {
        ValidationErrorResponse errorResponse = new ValidationErrorResponse();
        errorResponse.setMessage("Invalid request");
        assertEquals("Invalid request", errorResponse.getMessage());
    }

    @Test
    public void testGetTimeStamp() {
        ValidationErrorResponse errorResponse = new ValidationErrorResponse();
        long timeStamp = System.currentTimeMillis();
        errorResponse.setTimeStamp(timeStamp);
        assertEquals(timeStamp, errorResponse.getTimeStamp());
    }

    @Test
    public void testSetTimeStamp() {
        ValidationErrorResponse errorResponse = new ValidationErrorResponse();
        long timeStamp = System.currentTimeMillis();
        errorResponse.setTimeStamp(timeStamp);
        assertEquals(timeStamp, errorResponse.getTimeStamp());
    }
}
```

This test case covers all the methods in the `ValidationErrorResponse` class, ensuring that they are working correctly.