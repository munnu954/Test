Here is an example of how you can write JUnit 5 test cases to cover all branches of the `applyPostingRules(Alarm alarm)` method in the `PostingRuleProcessingService` class for 100% code coverage:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.Mockito;

class PostingRuleProcessingServiceTest {

    @Test
    void testApplyPostingRulesWithMatchingRule() {
        // Create test data
        Alarm alarm = new Alarm();
        PostingRule postingRule = new PostingRule();
        postingRule.setRulePriority(1); // Set rule priority to be higher
        RuleLoadingService ruleLoadingService = Mockito.mock(RuleLoadingService.class);
        Mockito.when(ruleLoadingService.getRuleMap()).thenReturn(Map.of("rule1", postingRule));

        // Create the PostingRuleProcessingService instance
        PostingRuleProcessingService service = new PostingRuleProcessingService();
        service.ruleLoadingService = ruleLoadingService;

        // Call applyPostingRules method
        Alarm resultAlarm = service.applyPostingRules(alarm);

        // Assert that the result is correct
        assertNotNull(resultAlarm);
        // Add more assertions to cover other branches
    }

    @Test
    void testApplyPostingRulesWithoutMatchingRule() {
        // Create test data
        Alarm alarm = new Alarm();
        
        // Create the PostingRuleProcessingService instance
        PostingRuleProcessingService service = new PostingRuleProcessingService();

        // Call applyPostingRules method
        Alarm resultAlarm = service.applyPostingRules(alarm);

        // Assert that the result is correct
        assertNotNull(resultAlarm);
        // Add more assertions to cover other branches
    }

    // Add more test methods to cover other branches of applyPostingRules method

}
```

In the above example, we use Mockito to mock the `RuleLoadingService` dependency and set up the necessary test data to cover the different branches of the `applyPostingRules` method. You can add more test methods to cover other branches based on your specific requirements.