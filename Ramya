import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.util.Collector;
import org.json.JSONArray;
import org.json.JSONObject;

public class CsvtoJsonConversion implements FlatMapFunction<String, String> {

    private JSONObject currentObject;
    private Collector<String> collector;

    @Override
    public void flatMap(String input, Collector<String> collector) {
        this.collector = collector;
        String[] columns = input.split("\t"); // Assuming tab-separated values

        if (columns.length > 1 && !columns[1].isEmpty()) {
            handleMainObject(columns);
        } else if (columns.length > 3 && !columns[3].isEmpty()) {
            handleSubObject(columns);
        }
    }

    private void handleMainObject(String[] columns) {
        if (currentObject != null) {
            collector.collect(currentObject.toString());
        }

        currentObject = new JSONObject();
        currentObject.put("ObjectName", columns[0].trim());
    }

    private void handleSubObject(String[] columns) {
        if (currentObject == null) {
            return; // Skip sub-objects if there's no current main object
        }

        String[] keys = columns[0].split("\\s+");
        String[] values = columns[1].split("\\s+");

        JSONObject subObject = currentObject;

        for (int i = 0; i < keys.length; i++) {
            String key = keys[i].trim();
            String value = values[i].trim();

            if (subObject.has(key)) {
                subObject = subObject.getJSONObject(key);
            } else {
                if (i == keys.length - 1) {
                    // Last key, add value
                    subObject.put(key, value);
                } else {
                    // Create nested JSONObject
                    JSONObject nestedObject = new JSONObject();
                    subObject.put(key, nestedObject);
                    subObject = nestedObject;
                }
            }
        }
    }

    @Override
    public void close() {
        if (currentObject != null) {
            collector.collect(currentObject.toString());
            currentObject = null;
        }
    }
}



import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.util.Collector;
import org.json.JSONObject;

public class CsvtoJsonConversion implements FlatMapFunction<String, String> {

    private JSONObject jsonObject;
    private Collector<String> collector;

    @Override
    public void flatMap(String input, Collector<String> collector) {
        this.collector = collector;
        String[] columns = input.split("\t"); // Assuming tab-separated values

        if (columns.length > 1 && !columns[1].isEmpty()) {
            handleMainObject(columns);
        } else if (columns.length > 3 && !columns[3].isEmpty()) {
            handleSubObject(columns);
        }
    }

    private void handleMainObject(String[] columns) {
        if (jsonObject != null) {
            collector.collect(jsonObject.toString());
        }

        jsonObject = new JSONObject();
        jsonObject.put("ObjectName", columns[0].trim());
    }

    private void handleSubObject(String[] columns) {
        if (jsonObject == null) {
            return; // Skip sub-objects if there's no current main object
        }

        String[] keys = columns[0].split("\\s+");
        String[] values = columns[1].split("\\s+");

        JSONObject subObject = jsonObject;

        for (int i = 0; i < keys.length; i++) {
            String key = keys[i].trim();
            String value = values[i].trim();

            if (subObject.has(key)) {
                subObject = subObject.getJSONObject(key);
            } else {
                if (i == keys.length - 1) {
                    // Last key, add value
                    subObject.put(key, value);
                } else {
                    // Create nested JSONObject
                    JSONObject nestedObject = new JSONObject();
                    subObject.put(key, nestedObject);
                    subObject = nestedObject;
                }
            }
        }
    }

    @Override
    public void close() {
        if (jsonObject != null) {
            collector.collect(jsonObject.toString());
            jsonObject = null;
        }
    }
}
