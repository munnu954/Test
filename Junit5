import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class CoconutServiceVersion3Test {

    @InjectMocks
    private CoconutServiceVersion3 coconutServiceVersion3;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testQueryBasedOnParameter_WithLocationCLLI() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("locationCLLI", "testCLLI");

        String result = invokePrivateQueryMethod(params);

        String expectedQueryPart = " AND LOWER(site.clli_code) like 'testclli'";
        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY + expectedQueryPart;

        System.out.println("Expected: " + expectedQuery);
        System.out.println("Actual: " + result);
        
        assertEquals(expectedQuery, result);
    }

    @Test
    public void testQueryBasedOnParameter_WithSiteName() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("siteName", "testSite");

        String result = invokePrivateQueryMethod(params);

        String expectedQueryPart = " AND LOWER(site.site_name) like 'testsite'";
        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY + expectedQueryPart;

        System.out.println("Expected: " + expectedQuery);
        System.out.println("Actual: " + result);
        
        assertEquals(expectedQuery, result);
    }

    @Test
    public void testQueryBasedOnParameter_WithBothLocationCLLIAndSiteName() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("locationCLLI", "testCLLI");
        params.put("siteName", "testSite");

        String result = invokePrivateQueryMethod(params);

        String expectedQueryPart = " AND LOWER(site.clli_code) like 'testclli' AND LOWER(site.site_name) like 'testsite'";
        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY + expectedQueryPart;

        System.out.println("Expected: " + expectedQuery);
        System.out.println("Actual: " + result);
        
        assertEquals(expectedQuery, result);
    }

    @Test
    public void testQueryBasedOnParameter_WithoutAnyParameters() throws Exception {
        Map<String, Object> params = new HashMap<>();

        String result = invokePrivateQueryMethod(params);

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;

        System.out.println("Expected: " + expectedQuery);
        System.out.println("Actual: " + result);
        
        assertEquals(expectedQuery, result);
    }

    private String invokePrivateQueryMethod(Map<String, Object> queryParams) throws Exception {
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        return (String) method.invoke(coconutServiceVersion3, queryParams);
    }
}