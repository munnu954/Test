To achieve 100% code coverage for the `GraniteSegmentService` class using JUnit 5, we need to write test cases that cover all possible execution paths, including various branches and exceptions. Below, you'll find a detailed example of how you might write these test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class GraniteSegmentServiceTest {

    @InjectMocks
    private GraniteSegmentService graniteSegmentService;

    @Mock
    private RestClientUtil restClientUtil;

    @Mock
    private RestTemplate restTemplate;

    private static final String CIRCUIT_NAME = "circuit123";
    private static final String SERVICE_NAME = "someService";
    private static final String URL_PATH = "/some/url";

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testCallCircuitDetailAPIWhenCircuitNameIsEmpty() {
        CircuitDetailResponse response = graniteSegmentService.callcircuitDetailAPI("", false);
        assertNotNull(response);
    }

    @Test
    public void testCallCircuitDetailAPIWithCndTrue() {
        CircuitDetailResponse mockResponse = new CircuitDetailResponse();
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(), eq(Object.class)))
                .thenReturn(mockResponse);

        CircuitDetailResponse response = graniteSegmentService.callcircuitDetailAPI(CIRCUIT_NAME, true);
        assertNotNull(response);
    }

    @Test
    public void testCallCircuitDetailAPIWithCndFalse() {
        CircuitDetailResponse mockResponse = new CircuitDetailResponse();
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(), eq(Object.class)))
                .thenReturn(mockResponse);

        CircuitDetailResponse response = graniteSegmentService.callcircuitDetailAPI(CIRCUIT_NAME, false);
        assertNotNull(response);
    }

    @Test
    public void testCallCircuitDetailAPIExceptionHandling() {
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(), eq(Object.class)))
                .thenThrow(new RuntimeException("Test Exception"));

        CircuitDetailResponse response = graniteSegmentService.callcircuitDetailAPI(CIRCUIT_NAME, true);
        assertNotNull(response);
    }

    @Test
    public void testGetRestObjData() throws Exception {
        ResponseEntity<Object> responseEntity = mock(ResponseEntity.class);
        when(responseEntity.getBody()).thenReturn(new Object());
        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(), eq(Object.class)))
                .thenReturn(responseEntity);

        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("key", "value");

        Object result = graniteSegmentService.getRestObjData(requestParams, SERVICE_NAME, URL_PATH, new ParameterizedTypeReference<Object>() {});
        assertNotNull(result);
    }

    @Test
    public void testGetRestObjDataExceptionHandling() {
        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(), eq(Object.class)))
                .thenThrow(new RuntimeException("Test Exception"));

        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("key", "value");

        assertThrows(CommonWrapperException.class, () -> {
            graniteSegmentService.getRestObjData(requestParams, SERVICE_NAME, URL_PATH, new ParameterizedTypeReference<Object>() {});
        });
    }

    @Test
    public void testAddSecurityDtlsToMSHeaders() {
        HttpHeaders headers = graniteSegmentService.addSecurityDtlsToMSHeaders();
        assertNotNull(headers);
        assertTrue(headers.containsKey("Authorization"));
    }

    @Test
    public void testFindServiceForName() throws CommonWrapperException {
        String serviceUrl = graniteSegmentService.findServiceForName(SERVICE_NAME);
        assertEquals("http://" + SERVICE_NAME.toLowerCase(), serviceUrl);
    }
}
```

### Explanation:

1. **Mockito**: We use Mockito to mock dependencies like `RestClientUtil` and `RestTemplate`.

2. **Test Cases**:
   - **testCallCircuitDetailAPIWhenCircuitNameIsEmpty**: Tests the method when the circuit name is empty.
   - **testCallCircuitDetailAPIWithCndTrue/False**: Tests the method with `cnd` as true and false.
   - **testCallCircuitDetailAPIExceptionHandling**: Tests how exceptions are handled during API calls.
   - **testGetRestObjData**: Tests the `getRestObjData` method for successful data retrieval.
   - **testGetRestObjDataExceptionHandling**: Checks exception handling in `getRestObjData`.
   - **testAddSecurityDtlsToMSHeaders**: Ensures headers are correctly added.
   - **testFindServiceForName**: Verifies the correct URL formation.

This comprehensive test suite should achieve full coverage of all paths and exceptions in the `GraniteSegmentService` class.