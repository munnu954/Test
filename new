To fix the error and make the provided JUnit 5 test case code workable, you should modify the code as follows:

```java
@Test
@DisplayName("Test for invalid id in SpaceCollector")
void testInvalidId() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("");
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setUsername("admin");
    spaceCollector.setPassword("password");
    spaceCollector.setSshPublicKey("publicKey");
    spaceCollector.setSshPrivateKey("privateKey");
    spaceCollector.setConnectionType("SSH");
    spaceCollector.setEnabled(true);
    spaceCollector.setInputFilePath("/input/file/path");
    spaceCollector.setOutputFilePath("/output/file/path");
    spaceCollector.setPollingDuration(60);

    IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
        spaceCollector.getId();
    });

    String expectedMessage = "Error: Invalid id";
    String actualMessage = exception.getMessage();
    assertTrue(actualMessage.contains(expectedMessage));
}
```

In the modified code, we assign the `assertThrows` result to an `IllegalArgumentException` variable `exception`. Then, we can perform further assertions on this exception, such as checking the expected error message using the `contains` method. This ensures that the desired exception is thrown and also verifies its error message.