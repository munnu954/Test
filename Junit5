To achieve 100% code coverage for the `intialializeMessageReaderService()` method in the `MessageReaderService` class using JUnit5 test cases, we can write tests for both branches of the method. We will use Reflection APIs to access and test the private methods without making them public.

Here's an example of how you can write JUnit5 test cases to cover both branches of the `intialializeMessageReaderService()` method:

```java
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class MessageReaderServiceTest {

    @Test
    public void testIntialializeMessageReaderService_Success() throws Exception {
        MessageReaderService messageReaderService = new MessageReaderService();

        // Setting up the necessary dependencies for the test
        VMBConfig vmbConfig = new VMBConfig();
        Field field = MessageReaderService.class.getDeclaredField("ruleUpdateNotifierVmbConfig");
        field.setAccessible(true);
        field.set(messageReaderService, vmbConfig);

        VMBParams params = Mockito.mock(VMBParams.class);
        ApolloServiceHealth healthChecker = Mockito.mock(ApolloServiceHealth.class);
        RuleLoadingService rulesLoadingService = Mockito.mock(RuleLoadingService.class);
        field = MessageReaderService.class.getDeclaredField("params");
        field.setAccessible(true);
        field.set(messageReaderService, params);
        field = MessageReaderService.class.getDeclaredField("healthChecker");
        field.setAccessible(true);
        field.set(messageReaderService, healthChecker);
        field = MessageReaderService.class.getDeclaredField("rulesLoadingService");
        field.setAccessible(true);
        field.set(messageReaderService, rulesLoadingService);

        // Use reflection to invoke the private method
        Method method = MessageReaderService.class.getDeclaredMethod("intialializeMessageReaderService");
        method.setAccessible(true);
        method.invoke(messageReaderService);

        // Verify the initialization
        assertNotNull(field.get(messageReaderService), "RuleUpdateNotifierVMBConfig should not be null after initialization");
    }

    @Test
    public void testIntialializeMessageReaderService_NullReader() throws Exception {
        MessageReaderService messageReaderService = new MessageReaderService();

        // Setting up the necessary dependencies for the test

        // Use reflection to set reader to null
        Field field = MessageReaderService.class.getDeclaredField("reader");
        field.setAccessible(true);
        field.set(messageReaderService, null);

        // Use reflection to invoke the private method
        Method method = MessageReaderService.class.getDeclaredMethod("intialializeMessageReaderService");
        method.setAccessible(true);

        // Run the method that should exit the program due to null reader
        method.invoke(messageReaderService);

        // Perform assertions based on the exit logic
        // Add your assertions here for the exit conditions
    }
}
```

In the above test class, we have written two test methods to cover the success and failure branches of the `intialializeMessageReaderService()` method. By using Reflection APIs, we are able to access and test the private methods and fields of the `MessageReaderService` class without making them public.

Feel free to adjust the test cases based on your specific requirements and add more assertions or verifications as needed.