import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class PollingServiceSteps {

    private PollingServiceImpl pollingService;
    private LuceneSpaceCollectorRepository luceneSpaceCollectorRepository;
    private int initialThreadCount;
    private int finalThreadCount;

    @Given("there is one record in the space collector repository")
    public void thereIsOneRecordInTheSpaceCollectorRepository() {
        luceneSpaceCollectorRepository = mock(LuceneSpaceCollectorRepository.class);
        when(luceneSpaceCollectorRepository.findByQuery(anyString())).thenReturn(Collections.singletonList(new SpaceCollector()));
        pollingService = new PollingServiceImpl(luceneSpaceCollectorRepository);
        initialThreadCount = Thread.getAllStackTraces().keySet().size();
    }

    @When("the scheduler runs")
    public void theSchedulerRuns() {
        pollingService.pollDeviceDB();
        finalThreadCount = Thread.getAllStackTraces().keySet().size();
    }

    @Then("the poller should create {int} thread")
    public void thePollerShouldCreateThread(int threadCount) {
        assertEquals(initialThreadCount + threadCount, finalThreadCount);
    }

    @And("validate that one thread is created and it is running")
    public void validateThatOneThreadIsCreatedAndItIsRunning() {
        assertTrue(finalThreadCount > initialThreadCount);
    }
}
