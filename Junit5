public HashMap<String, Object> mergeUpdateJsonValues(Map<String, Object> incomingMsg, Map<String, Object> cachedMsg, boolean isLateAlarm) {
    try {
        for (Map.Entry<String, Object> iterate : incomingMsg.entrySet()) {
            if (!isLateAlarm) {
                if (iterate.getValue() != null && !iterate.getValue().toString().isEmpty()) {
                    if (checkIfJsonValue(iterate.getValue())) {
                        if (cachedMsg.containsKey(iterate.getKey())) {
                            // Handle incoming value
                            HashMap<String, Object> incomingValueMap;
                            if (iterate.getValue() instanceof String) {
                                incomingValueMap = RulesConstants.getObjectMapper().readValue((String) iterate.getValue(), HashMap.class);
                            } else {
                                incomingValueMap = (HashMap<String, Object>) iterate.getValue();
                            }

                            // Handle cached value: parse if it's a String
                            Object cachedValue = cachedMsg.get(iterate.getKey());
                            HashMap<String, Object> cachedValueMap;
                            if (cachedValue instanceof String) {
                                cachedValueMap = RulesConstants.getObjectMapper().readValue((String) cachedValue, HashMap.class);
                            } else {
                                cachedValueMap = (HashMap<String, Object>) cachedValue;
                            }

                            HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(incomingValueMap, cachedValueMap, isLateAlarm);
                            cachedMsg.put(iterate.getKey(), updatedMsg);
                        } else {
                            // Key not present in cache, deserialize and remove nulls
                            HashMap<String, Object> newValueMap;
                            if (iterate.getValue() instanceof String) {
                                newValueMap = removeNullValuesInJsonAttributes(RulesConstants.getObjectMapper().readValue((String) iterate.getValue(), HashMap.class));
                            } else {
                                newValueMap = removeNullValuesInJsonAttributes((HashMap<String, Object>) iterate.getValue());
                            }
                            cachedMsg.put(iterate.getKey(), newValueMap);
                        }
                    } else {
                        cachedMsg.put(iterate.getKey(), iterate.getValue());
                    }
                }
            } else { // Late alarm
                if (iterate.getValue() != null && !iterate.getValue().toString().isEmpty()) {
                    Object cachedValue = cachedMsg.get(iterate.getKey());
                    if (cachedValue != null && checkIfJsonValue(cachedValue)) {
                        // Handle incoming value
                        HashMap<String, Object> incomingValueMap;
                        if (iterate.getValue() instanceof String) {
                            incomingValueMap = RulesConstants.getObjectMapper().readValue((String) iterate.getValue(), HashMap.class);
                        } else {
                            incomingValueMap = (HashMap<String, Object>) iterate.getValue();
                        }

                        // Handle cached value: parse if it's a String
                        HashMap<String, Object> cachedValueMap;
                        if (cachedValue instanceof String) {
                            cachedValueMap = RulesConstants.getObjectMapper().readValue((String) cachedValue, HashMap.class);
                        } else {
                            cachedValueMap = (HashMap<String, Object>) cachedValue;
                        }

                        HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(incomingValueMap, cachedValueMap, isLateAlarm);
                        cachedMsg.put(iterate.getKey(), updatedMsg);
                    } else if (cachedValue == null) {
                        cachedMsg.put(iterate.getKey(), iterate.getValue());
                    }
                }
            }
        }
    } catch (Exception e) {
        logger.error("Exception occurred while trying to merge update JsonValues: {} and incoming message : {} and cached message : {}", e, incomingMsg, cachedMsg);
    }
    return (HashMap<String, Object>) cachedMsg;
}