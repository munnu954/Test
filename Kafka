Based on the error message, it seems that Jackson is unable to deserialize the JSON message into the UnifiedAuditMessage object because it requires a String-argument constructor or factory method. To fix this issue, you can add a constructor to the UnifiedAuditMessage class that takes a String argument or use a factory method to create the object from a JSON string.

Here's an updated version of the UnifiedAuditMessage class with a constructor that takes a JSON string as a parameter:

UnifiedAuditMessage.java:

```java
@Data
@AllArgsConstructor
@NoArgsConstructor
public class UnifiedAuditMessage {
    // existing fields and methods
    
    public static UnifiedAuditMessage fromJson(String json) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        return objectMapper.readValue(json, UnifiedAuditMessage.class);
    }
}
```

In the KafkaConsumer class, you can update the consume method to use the fromJson factory method to create the UnifiedAuditMessage object:

KafkaConsumer.java:

```java
@Service
public class KafkaConsumer {
    // other code
    
    @Autowired
    private KafkaAuditProducer kafkaAuditProducer;
    
    @KafkaListener(topics="${spring.kafka.producer.topic-name}", groupId = "${spring.kafka.consumer.group-id}", errorHandler = "kafkaEventErrorHandler")
    public void consume(String json) throws IOException {
        LocalDateTime dateReceived = LocalDateTime.now();
        UnifiedAuditMessage auditMsg = null;
        String fileType = null;
        
        try {
            auditMsg = UnifiedAuditMessage.fromJson(json);
            // rest of the code
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("Error triggering job: {}", e.getMessage());
            
            UnifiedAuditMessage auditData = logAuditData(auditMsg, fileType, e);
            kafkaAuditProducer.createMessageAndLog(auditData.getInputFilePath(), auditData.getUrl(), auditData.getPort(), auditData.getOutputFilePath(), auditData.getDelimiters(), auditData.getFileType(), auditData.getDate_received(), auditData.getNo_of_records_in_the_file(), auditData.getNo_of_records_processed(), auditData.getNo_of_records_failed(), auditData.getJob_id(), auditData.getJar_id(), auditData.getExceptions(), auditData.getCollector_id(), auditData.getJob_status());
        }
    }
    
    // other code
}
```

With these changes, the Kafka consumer should be able to deserialize the JSON message into a UnifiedAuditMessage object without any errors.