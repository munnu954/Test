It seems that the `createAlarm` method might be returning `null` due to some exception being thrown inside the method. To properly diagnose and handle this, we need to ensure that all required dependencies and mock data are configured correctly. Here is an updated version of the JUnit 5 test cases, including more comprehensive mocking to ensure the `createAlarm` method works as expected:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private Logger LOG;

    private Map<String, Integer> perceivedSeverityMap;
    private Map<String, Integer> alarmStateMap;

    @BeforeEach
    void setUp() {
        perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        perceivedSeverityMap.put("Critical", 2);
        perceivedSeverityMap.put("Major", 3);

        alarmStateMap = new HashMap<>();
        alarmStateMap.put("New", 1);
        alarmStateMap.put("Cleared", 2);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
    }

    @Test
    void testPerceivedSeverityNullAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":null,\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityEmptyAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"\",\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNotNullAndNotEmptyAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"Critical\",\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNullAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":null,\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    void testPerceivedSeverityEmptyAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"\",\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    void testPerceivedSeverityNotNullAndNotEmptyAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"Major\",\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(3, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNotInMapAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"NonExistentSeverity\",\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNotInMapAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"NonExistentSeverity\",\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity()); // Indeterminate
    }
}
```

In this version, I've ensured the following:

1. **Mockito Extension**: Added the `@ExtendWith(MockitoExtension.class)` annotation to enable Mockito in JUnit 5.
2. **Mock Logger**: Mocked the `Logger` to avoid any issues related to logging.
3. **Dependency Setup**: Ensured that all necessary dependencies and configurations are properly mocked and returned expected values.
4. **Test Messages**: Used valid JSON strings that the `ObjectMapper` can parse without throwing exceptions.

These changes should help ensure that the `createAlarm` method does not return `null` and that the test cases can assert the expected values.