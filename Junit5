import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CBRSSuppressionConstantsTest {

    @Test
    public void testInfieldOperator() {
        assertEquals("infieldOperator", CBRSSuppressionConstants.INFIELDOPERATOR);
    }

    @Test
    public void testOutfieldOperator() {
        assertEquals("outfieldOperator", CBRSSuppressionConstants.OUTFIELDOPERATOR);
    }

    @Test
    public void testField() {
        assertEquals("field", CBRSSuppressionConstants.FIELD);
    }

    @Test
    public void testValue() {
        assertEquals("value", CBRSSuppressionConstants.VALUE);
    }

    @Test
    public void testRuleType() {
        assertEquals("ruletype", CBRSSuppressionConstants.RULETYPE);
    }

    // Add similar tests for all the constants in CBRSSuppressionConstants class

    @Test
    public void testSuppressionKey() {
        assertEquals("suppressionKey", CBRSSuppressionConstants.SUPPRESSION_KEY);
    }

    @Test
    public void testSuppressionInterval() {
        assertEquals("suppressionInterval", CBRSSuppressionConstants.SUPPRESSION_INTERVAL);
    }

    @Test
    public void testSuppressParentAlarms() {
        assertEquals("suppressParentAlarms", CBRSSuppressionConstants.SUPPRESS_PARENT_ALARMS);
    }

    @Test
    public void testSuppressChildAlarms() {
        assertEquals("suppressChildAlarms", CBRSSuppressionConstants.SUPPRESS_CHILD_ALARMS);
    }

    @Test
    public void testAlarmUpdatedTime() {
        assertEquals("alarmUpdatedTime", CBRSSuppressionConstants.ALARM_UPDATEDTIME);
    }

    @Test
    public void testAlarmIdentity() {
        assertEquals("alarmidentity", CBRSSuppressionConstants.ALARM_IDENTITY);
    }

    @Test
    public void testAlarmState() {
        assertEquals("State", CBRSSuppressionConstants.ALARM_STATE);
    }

    @Test
    public void testAlarmType() {
        assertEquals("alarmType", CBRSSuppressionConstants.ALARM_TYPE);
    }

    @Test
    public void testEnvironment() {
        assertEquals("environment", CBRSSuppressionConstants.ENVIRONMENT);
    }

    @Test
    public void testService() {
        assertEquals("apolloservice", CBRSSuppressionConstants.SERVICE);
    }

    @Test
    public void testStage() {
        assertEquals("stage", CBRSSuppressionConstants.STAGE);
    }

    @Test
    public void testLevel() {
        assertEquals("level", CBRSSuppressionConstants.LEVEL);
    }

    @Test
    public void testMetricBasename() {
        assertEquals("alarm_latency", CBRSSuppressionConstants.METRIC_BASENAME);
    }

    @Test
    public void testActiveProfile() {
        assertEquals("spring.profiles.active", CBRSSuppressionConstants.ACTIVE_PROFILE);
    }

    @Test
    public void testApplicationName() {
        assertEquals("spring.application.name", CBRSSuppressionConstants.APPLICATION_NAME);
    }

    @Test
    public void testUnknownHost() {
        assertEquals("UnknownHost", CBRSSuppressionConstants.UNKONOWN_HOST);
    }

    @Test
    public void testRuleName() {
        assertEquals("RULENAME", CBRSSuppressionConstants.RULENAME);
    }

    @Test
    public void testTimestamp() {
        assertEquals("TIMESTAMP", CBRSSuppressionConstants.TIMESTAMP);
    }

    @Test
    public void testSkipAlarm() {
        assertEquals("Skipping/Ignoring alarm as a contributor", CBRSSuppressionConstants.SKIP_ALARM);
    }

    @Test
    public void testSuppressionKeyGenerationFailed() {
        assertEquals("Suppressionkey generation failed due to null/empty required suppression attributes for alarm : ", CBRSSuppressionConstants.SUPPRESSIONKEY_GENERATIONFAILED);
    }

    @Test
    public void testAlarmGenerationFailed() {
        assertEquals("Error occured! Failed to generate CBRS Suppression alarm", CBRSSuppressionConstants.ALARM_GENERATION_FAILED);
    }

    // Add tests for the remaining constants

}