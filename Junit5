To write JUnit 5 test cases for the `ArchivalFileMovement` class and achieve 100% code coverage, we need to:

1. Test the `moveFilesMatchingPattern` method, including scenarios for both successful file moves and exceptions during file moves.
2. Use reflection to access the private methods `getSourceDirectory` and `getFilePattern`.

Below is an example of how you might achieve this:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.lang.reflect.Method;
import java.nio.file.*;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class ArchivalFileMovementTest {

    private ArchivalFileMovement archivalFileMovement;
    private static final Logger LOGGER = LoggerFactory.getLogger(ArchivalFileMovement.class);

    @BeforeEach
    public void setUp() {
        archivalFileMovement = new ArchivalFileMovement();
    }

    @Test
    public void testMoveFilesMatchingPattern(@TempDir Path tempDir) throws Exception {
        // Setup source and destination directories
        Path sourceDir = tempDir.resolve("source");
        Path destinationDir = tempDir.resolve("destination");
        Files.createDirectory(sourceDir);
        Files.createDirectory(destinationDir);

        // Create test files
        Files.createFile(sourceDir.resolve("test1.txt"));
        Files.createFile(sourceDir.resolve("test2.txt"));

        // Mock logging
        Logger loggerMock = mock(Logger.class);
        ArchivalFileMovement.LOGGER = loggerMock;

        // Test file movement
        String sourcePattern = "glob:" + sourceDir.toString() + "/*.txt";
        archivalFileMovement.moveFilesMatchingPattern(sourcePattern, destinationDir.toString());

        // Verify files moved
        assertTrue(Files.exists(destinationDir.resolve("test1.txt")));
        assertTrue(Files.exists(destinationDir.resolve("test2.txt")));
        assertFalse(Files.exists(sourceDir.resolve("test1.txt")));
        assertFalse(Files.exists(sourceDir.resolve("test2.txt")));

        // Verify logger calls
        verify(loggerMock, times(1)).info("Number of files found with Matching pattern: {}", 2L);
        verify(loggerMock, times(2)).info("Successfully moved the Ecpd Sensitive Feed file: {}", any());
    }

    @Test
    public void testMoveFilesWithException(@TempDir Path tempDir) throws Exception {
        // Setup source and destination directories
        Path sourceDir = tempDir.resolve("source");
        Path destinationDir = tempDir.resolve("destination");
        Files.createDirectory(sourceDir);
        Files.createDirectory(destinationDir);

        // Create a test file
        Path testFile = sourceDir.resolve("test1.txt");
        Files.createFile(testFile);

        // Mock Files.move to throw an exception
        ArchivalFileMovement archivalFileMovementSpy = spy(archivalFileMovement);
        doThrow(IOException.class).when(archivalFileMovementSpy).moveFile(any(), anyString());

        // Mock logging
        Logger loggerMock = mock(Logger.class);
        ArchivalFileMovement.LOGGER = loggerMock;

        // Test file movement with exception
        String sourcePattern = "glob:" + sourceDir.toString() + "/*.txt";
        archivalFileMovementSpy.moveFilesMatchingPattern(sourcePattern, destinationDir.toString());

        // Verify logger calls
        verify(loggerMock, times(1)).error("Error moving file::", testFile.getFileName(), "null");
    }

    @Test
    public void testGetSourceDirectory() throws Exception {
        Method method = ArchivalFileMovement.class.getDeclaredMethod("getSourceDirectory", String.class);
        method.setAccessible(true);

        // Test the private method with reflection
        Path result = (Path) method.invoke(archivalFileMovement, "glob:/mydir/*.txt");
        assertEquals(Paths.get("/mydir"), result);
    }

    @Test
    public void testGetFilePattern() throws Exception {
        Method method = ArchivalFileMovement.class.getDeclaredMethod("getFilePattern", String.class);
        method.setAccessible(true);

        // Test the private method with reflection
        String pattern = (String) method.invoke(archivalFileMovement, "glob:/mydir/*.txt");
        assertEquals(".*\\.txt", pattern);
    }
}
```

### Explanation:
1. **Test Setup**: Use `@TempDir` to create temporary directories for testing file operations.
2. **Reflection**: Use Java's reflection API to access the private methods `getSourceDirectory` and `getFilePattern`.
3. **Mocking**: Mock the logger to verify logging calls.
4. **Exception Handling**: Use Mockito to simulate exceptions when moving files.
5. **Assertions**: Validate the results of file operations and ensure exceptions are logged properly.