Here is an example of a JUnit5 test case that covers the else block mentioned in the code:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class AlarmPostingUtilsTest {

    @Test
    public void testParseElseBlock() {
        // Given
        String value = "Test %value%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("value", "TestValue");
        String ruleName = "TestRule";

        // When
        String result = null;
        try {
            result = AlarmPostingUtils.parse(value, srcMap, ruleName);
        } catch (JsonMappingException | JsonProcessingException e) {
            e.printStackTrace();
        }

        // Then
        assertEquals("Test TestValue", result);
    }
}
```

You can create additional test cases by varying the input values and making assertions based on the expected output. This will help in achieving 100% code coverage for the else block in the `parse` method of `AlarmPostingUtils` class.