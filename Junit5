import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;

class UWAUpdatesHandlerApplicationTest {

    @Test
    void testMain() {
        // Mocking the required objects
        SpringApplication app = mock(SpringApplication.class);
        ConfigurableApplicationContext appContext = mock(ConfigurableApplicationContext.class);
        MessageConsumer messageConsumerService = mock(MessageConsumer.class);

        // Mocking the behavior of objects
        when(app.run(any(String[].class))).thenReturn(appContext);
        doNothing().when(appContext).start();
        doNothing().when(messageConsumerService).start();

        // Test the main method
        UWAUpdatesHandlerApplication.main(new String[]{"arg1", "arg2"});

        // Verify the interactions
        verify(app, times(1)).run(any(String[].class));
        verify(appContext, times(1)).start();
        verify(messageConsumerService, times(1)).start();
    }

    @Test
    void testMainWithException() {
        // Mocking the required objects
        SpringApplication app = mock(SpringApplication.class);
        when(app.run(any(String[].class))).thenThrow(new RuntimeException("Test Exception"));

        // Test the main method with exception
        UWAUpdatesHandlerApplication.main(new String[]{"arg1", "arg2"});
    }

    @Test
    void testShutdownHook() {
        // Mocking the required objects
        MessageConsumer messageConsumerService = mock(MessageConsumer.class);
        ConfigurableApplicationContext appContext = mock(ConfigurableApplicationContext.class);

        // Test the shutdown hook
        Thread shutdownThread = new Thread(() -> {
            UWAUpdatesHandlerApplication.log = mock(org.apache.logging.log4j.Logger.class);
            UWAUpdatesHandlerApplication.log.info("Shutting down");
            messageConsumerService.shutdown();
            appContext.stop();
        });
        shutdownThread.start();
    }
}