Certainly! Below is the updated `queryBasedOnParameter` method that allows for both conventional full searches and wildcard searches for `locationCLLI` and `siteName`. 

I've added parameters to distinguish between full searches and wildcard searches. You can specify whether to perform a full search or a wildcard search using a new key in the `queryParams` map (e.g., `searchType`).

```java
private String queryBasedOnParameter(Map<String, Object> queryParams) {
    String query = "";
    StringJoiner finalQuery = new StringJoiner(" ");
    
    if ("LOCATION".equalsIgnoreCase((String) queryParams.get("outputControl"))) {
        finalQuery.add(coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);
        
        // Check for conventional full search
        if (queryParams.containsKey("locationCLLI")) {
            if ("full".equalsIgnoreCase((String) queryParams.get("searchType"))) {
                finalQuery.add("AND site.clli_code = :locationCLLI");
            } else {
                finalQuery.add("AND site.clli_code LIKE '%' || :locationCLLI || '%'");
            }
        }
        
        if (queryParams.containsKey("siteName")) {
            if ("full".equalsIgnoreCase((String) queryParams.get("searchType"))) {
                finalQuery.add("AND site.site_name = :siteName");
            } else {
                finalQuery.add("AND site.site_name LIKE '%' || :siteName || '%'");
            }
        }
    }
    
    return finalQuery.toString();
}
```

### Explanation:
- The method checks for the presence of `locationCLLI` and `siteName` in the `queryParams`.
- It uses a new parameter `searchType` to determine whether to perform a full search or a wildcard search.
  - If `searchType` is set to `"full"`, it performs an exact match using the `=` operator.
  - If `searchType` is not `"full"`, it performs a wildcard search using the `LIKE` operator with `%` wildcards.

This way, you can have a flexible query that adapts to your search requirements.