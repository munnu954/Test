UnifiedAuditMessage.java:-
```java
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Data
@AllArgsConstructor
@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
public class UnifiedAuditMessage {
    private String inputFilePath;
    private String url;
    private Integer port;
    private String outputFilePath;
    private String delimiters;
    private String fileType;
    private LocalDateTime date_received;
    private LocalDateTime date_processed;
    private Integer no_of_records_in_the_file;
    private Integer no_of_records_processed;
    private Integer no_of_records_failed;
    private UUID job_id;
    private UUID jar_id;
    private List<String> exceptions;
    private UUID collector_id;
    private JobStatus job_status;

    public enum JobStatus {
        COLLECTION_NEW,
        COLLECTION_IN_PROGRESS,
        COLLECTION_SUCCESSFUL,
        COLLECTION_FAILED,
        FLINK_JOB_NEW,
        FLINK_JOB_SUBMITTED,
        FLINK_JOB_IN_PROGRESS,
        FLINK_JOB_SUCCESSFUL,
        FLINK_JOB_FAILED
    }
}
```

KafkaAuditProducer class:
```java
@Service
public class KafkaAuditProducer {
    private static final Logger logger = LoggerFactory.getLogger(KafkaAuditProducer.class);
    
    private final KafkaTemplate<String, UnifiedAuditMessage> kafkaTemplate;

    @Value("${spring.kafka.producer.topic-name}")
    private String topicName;

    @Autowired
    public KafkaAuditProducer(KafkaTemplate<String, UnifiedAuditMessage> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public void writeMessage(UnifiedAuditMessage auditMsg) {
        try {
            this.kafkaTemplate.send(topicName, auditMsg);
            logger.info("Kafka status message sent");
        } catch (Exception e) {
            logger.error("Failed to send Kafka message: {}", e.getMessage());
        }
    }
}
```

KafkaController class:
```java
@RestController
public class KafkaController {
    @Autowired
    private KafkaAuditProducer kafkaAuditProducer;

    @PostMapping("/kafkaPush")
    public ResponseEntity<Boolean> writeMessage(@RequestBody UnifiedAuditMessage auditMsg) {
        kafkaAuditProducer.writeMessage(auditMsg);
        return ResponseEntity.ok(true);
    }
}
```

KafkaConsumer class:
```java
@Service
public class KafkaConsumer {
    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumer.class);
    
    @Value("${file.txtsource}")
    private String sourceFilePath;
    
    @Value("${file.destination}")
    private String destinationFolderPath;
    
    @Autowired
    private KafkaTopicUtil util;
    
    @Autowired
    private FlinkApiController flinkApi;
    
    @Autowired
    private KafkaAuditProducer kafkaAuditProducer;

    @KafkaListener(topics = "${spring.kafka.producer.topic-name}", groupId = "${spring.kafka.consumer.group-id}", errorHandler = "kafkaEventErrorHandler")
    public void consume(UnifiedAuditMessage auditMsg) {
        LocalDateTime dateReceived = LocalDateTime.now();
        String fileType = null;

        try {
            if (auditMsg.getInputFilePath() != null) {
                logger.info("Message Received: {}", auditMsg);

                String sourceFilePath = auditMsg.getInputFilePath();
                String response = null;

                if ((new File(sourceFilePath).exists()) && !util.isKafkaTopicPresent(topic)) {
                    UnifiedAuditMessage auditData = new UnifiedAuditMessage();
                    auditData.setInputFilePath(sourceFilePath);
                    auditData.setExceptions(Collections.singletonList("Input file path doesn't exist/Invalid file"));
                    writeLogToFile(auditData, destinationFolderPath);
                }

                if (validateFile(sourceFilePath)) {
                    writeFile(sourceFilePath, destinationFolderPath);
                    String fileType = getExtension(sourceFilePath);

                    if (fileType != null && fileType.equalsIgnoreCase(".xml")) {
                        logger.info("XML FILE()");
                        retrieveXmlFile(sourceFilePath);
                    } else if (fileType != null && fileType.equalsIgnoreCase(".csv")) {
                        logger.info("CSV FILE()");
                        retrieveCsvFile(sourceFilePath);
                    } else if (fileType != null && fileType.equalsIgnoreCase(".txt")) {
                        logger.info("TEXT FILE()");
                        retrieveTxtFile(sourceFilePath);
                    }
                    response = getFlinkResponse();
                    logger.info("Flink Response: {}", response);
                } else {
                    kafkaAuditProducer.sendErrorMessage("File does not exist");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Error triggering job: {}", e.getMessage());
            
            UnifiedAuditMessage auditData = logAuditData(auditMsg, fileType, e);
            kafkaAuditProducer.createMessageAndLog(auditData);
        }
    }
    
    public UnifiedAuditMessage logAuditData(UnifiedAuditMessage auditMsg, String fileType, Exception e) {
        LocalDateTime currentDate = LocalDateTime.now();
        return new UnifiedAuditMessage(
                auditMsg.getInputFilePath(),
                auditMsg.getUrl(),
                auditMsg.getPort(),
                auditMsg.getOutputFilePath(),
                auditMsg.getDelimiters(),
                fileType,
                currentDate,
                currentDate,
                auditMsg.getNo_of_records_in_the_file(),
                auditMsg.getNo_of_records_processed(),
                auditMsg.getNo_of_records_failed(),
                UUID.randomUUID(),
                UUID.randomUUID(),
                Collections.singletonList(e.getMessage()),
                auditMsg.getCollector_id(),
                UnifiedAuditMessage.JobStatus.COLLECTION_FAILED
        );
    }

    // Other methods and logAuditData method goes here...
}
```

Note: I couldn't find code snippets related to some methods like `writeLogToFile`, `validateFile`, `writeFile`, `retrieveXmlFile`, `retrieveCsvFile`, `retrieveTxtFile`, `getFlinkResponse`, `sendErrorMessage`, etc. You will need to provide their implementations.