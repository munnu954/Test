Here is the JUnit5 test class for UserInsightsValidator with 100% code coverage using Reflection APIs:

```java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class UserInsightsValidatorTest {

    @InjectMocks
    private UserInsightsValidator userInsightsValidator;

    @Mock
    private UserInsightsRequest userInsightsRequest;

    @Mock
    private UserInsightsSearchRequest userInsightsSearchRequest;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testValidate() {
        doNothing().when(userInsightsValidator).validate(eq(userInsightsRequest.getServiceHeader()));
        doNothing().when(userInsightsValidator).validateIterator(eq(null), eq(userInsightsRequest.getKeyAttributes()), eq("KeyAttributes"));

        userInsightsValidator.validate(userInsightsRequest);
    }

    @Test
    public void testValidate_invalidRequestType() {
        doThrow(new InvalidRequestException("Invalid request type")).when(userInsightsValidator).validate(eq(userInsightsRequest.getServiceHeader()));
        doNothing().when(userInsightsValidator).validateIterator(eq(null), eq(userInsightsRequest.getKeyAttributes()), eq("KeyAttributes"));

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validate(userInsightsRequest);
        });

        assertEquals("Invalid request type", exception.getMessage());
    }

    @Test
    public void testValidate_missingKeyAttributes() {
        doNothing().when(userInsightsValidator).validate(eq(userInsightsRequest.getServiceHeader()));

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validate(userInsightsRequest);
        });

        assertEquals("Either KeyAttributes (Single) or ListKeyAttributes (Multiple) are required.", exception.getMessage());
    }

    @Test
    public void testValidateIterator() {
        UserInsightsAttributes userInsightsAttributes = new UserInsightsAttributes();
        userInsightsAttributes.setUserId("");
        userInsightsAttributes.setEcpdId("");
        userInsightsAttributes.setInsightCategory("");
        userInsightsAttributes.setInsightName("");

        doNothing().when(userInsightsValidator).validateIterator(eq(null), eq(userInsightsAttributes), eq("KeyAttributes"));

        userInsightsValidator.validateIterator(null, userInsightsAttributes, "KeyAttributes");
    }

    @Test
    public void testValidateIterator_invalidAttributes() {
        UserInsightsAttributes userInsightsAttributes = new UserInsightsAttributes();

        doThrow(new InvalidRequestException("KeyAttributes " + LOGGER_MESSAGE_USER_INSIGHTS)).when(userInsightsValidator).validateIterator(eq(null), eq(userInsightsAttributes), eq("KeyAttributes"));
        
        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validateIterator(null, userInsightsAttributes, "KeyAttributes");
        });

        assertEquals("KeyAttributes " + LOGGER_MESSAGE_USER_INSIGHTS, exception.getMessage());
    }

    @Test
    public void testValidate_userInsightsSearchRequest() {
        doNothing().when(userInsightsValidator).validate(eq(userInsightsSearchRequest.getServiceHeader()));

        userInsightsValidator.validate(userInsightsSearchRequest);
    }

    @Test
    public void testValidate_missingSearchParam() {
        doNothing().when(userInsightsValidator).validate(eq(userInsightsSearchRequest.getServiceHeader()));

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validate(userInsightsSearchRequest);
        });

        assertEquals("ServiceRequest Ecpd Id, User Id, Insight Category and Insight Name are required.", exception.getMessage());
    }
}
```

Please make sure to replace `LOGGER_MESSAGE_USER_INSIGHTS` with the actual value defined in your codebase. Also, ensure that the necessary dependencies such as Mockito are included in your project.