**getAEnd() method:**

```java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.stubbing.Answer;

import com.google.gson.Gson;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.when;

class CircuitDetailsProviderTest_getAEnd_More {

    @Mock
    private RestClientUtil restClientUtil;
    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    private static final String CIRCUIT_ID = "12345";
    private static final String CLLI = "12345";
    private static final String FINAL_URL = "http://cktDetServiceName:port/cktDetailuri?circuitId=12345";

    @Test
    void getAEnd_whenSizeLessThan2() {
        // Given
        Circuit circuit = new Circuit();
        circuit.setAEnd(List.of(new AEnd()));
        Clr clr = new Clr();
        clr.setClrComponent(List.of(new ClrComponent()));
        circuit.setClr(List.of(clr));
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(List.of(new CircuitLst(List.of(circuit))));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        String json = "{\"circuitData\": {\"circuitLst\": [{\"circuit\": [{\"clr\": [{\"clrComponent\": [{\"type\": \"PORT\"}]}]}]}]}}";
        Gson gson = new Gson();
        CircuitDetailResponse circuitDetailResponse = gson.fromJson(json, CircuitDetailResponse.class);

        // When
        AEnd returnedAEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, circuitDetailResponse);

        // Then
        assertNull(returnedAEnd);
    }

    @Test
    void getAEnd_whenSizeGreaterThan2_and_secClrComponentPortType() {
        // Given
        PortRef portRef = new PortRef();
        portRef.setClliCode(CLLI);
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setEquipmentComp(List.of(new EquipmentComp(List.of(portRef))));
        ClrComponent secClrComponent = new ClrComponent();
        secClrComponent.setEquipmentComp(List.of(new EquipmentComp(List.of(portRef))));
        Circuit circuit = new Circuit();
        circuit.setAEnd(List.of(new AEnd()));
        Clr clr = new Clr();
        clr.setClrComponent(List.of(clrComponent, secClrComponent));
        circuit.setClr(List.of(clr));
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(List.of(new CircuitLst(List.of(circuit))));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        String json = "{\"circuitData\": {\"circuitLst\": [{\"circuit\": [{\"clr\": [{\"type\": \"PORT\"}, {\"type\": \"PORT\"}]}]}]}}";
        Gson gson = new Gson();
        CircuitDetailResponse circuitDetailResponse = gson.fromJson(json, CircuitDetailResponse.class);

        // When
        AEnd returnedAEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, circuitDetailResponse);

        // Then
        assertNull(returnedAEnd);
    }

    @Test
    void getAEnd_whenSizeGreaterThan2_and_secClrComponentChannelType() {
        // Given
        PortRef portRef = new PortRef();
        portRef.setClliCode(CLLI);
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(List.of(portRef));
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setEquipmentComp(List.of(new EquipmentComp(List.of(portRef))));
        ClrComponent secClrComponent = new ClrComponent();
        secClrComponent.setEquipmentComp(List.of(new EquipmentComp(List.of(portChannel))));
        Circuit circuit = new Circuit();
        circuit.setAEnd(List.of(new AEnd()));
        Clr clr = new Clr();
        clr.setClrComponent(List.of(clrComponent, secClrComponent));
        circuit.setClr(List.of(clr));
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(List.of(new CircuitLst(List.of(circuit))));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        String json = "{\"circuitData\": {\"circuitLst\": [{\"circuit\": [{\"clr\": [{\"type\": \"PORT\"}, {\"type\": \"CHANNEL\"}]}]}]}}";
        Gson gson = new Gson();
        CircuitDetailResponse circuitDetailResponse = gson.fromJson(json, CircuitDetailResponse.class);

        // When
        AEnd returnedAEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, circuitDetailResponse);

        // Then
        assertNull(returnedAEnd);
    }
}
```

**getZEnd() method:**

```java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.stubbing.Answer;

import com.google.gson.Gson;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.when;

class CircuitDetailsProviderTest_getZEnd {

    @Mock
    private RestClientUtil restClientUtil;
    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    private static final String CIRCUIT_ID = "12345";
    private static final String CLLI = "12345";
    private static final String FINAL_URL = "http://cktDetServiceName:port/cktDetailuri?circuitId=12345";

    @Test
    void getZEnd_whenCircuitIdIsNull() {
        // Given
        CircuitDetailResponse response = new CircuitDetailResponse();

        // When
        ZEnd zEnd = circuitDetailsProvider.getZEnd(null, CLLI, response);

        // Then
        assertNull(zEnd);
    }

    @Test
    void getZEnd_whenResponseIsNull() {
        // Given

        // When
        ZEnd zEnd = circuitDetailsProvider.getZEnd(CIRCUIT_ID, CLLI, null);

        // Then
        assertNull(zEnd);
    }

    @Test
    void getZEnd_whenCircuitDataIsNull() {
        // Given
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(null);

        // When
        ZEnd zEnd = circuitDetailsProvider.getZEnd(CIRCUIT_ID, CLLI, response);

        // Then
        assertNull(zEnd);
    }

    @Test
    void getZEnd_whenCircuitLstIsNull() {
        // Given
        CircuitData circuitData = new CircuitData();
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        // When
        ZEnd zEnd = circuitDetailsProvider.getZEnd(CIRCUIT_ID, CLLI, response);

        // Then
        assertNull(zEnd);
    }

    @Test
    void getZEnd_whenCircuitIsNull() {
        // Given
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);
        circuitData.setCircuitLst(List.of(circuitLst));

        // When
        ZEnd zEnd = circuitDetailsProvider.getZEnd(CIRCUIT_ID, CLLI, response);

        // Then
        assertNull(zEnd);
    }

    