import org.junit.jupiter.api.Test;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.beans.factory.UnsatisfiedDependencyException;
import org.springframework.core.env.Environment;

import static org.mockito.Mockito.*;

public class CBRSSuppressionApplicationTest {

    @Test
    void testMainSuccess() {
        // Mocking the required objects
        SpringApplication app = mock(SpringApplication.class);
        ConfigurableApplicationContext appContext = mock(ConfigurableApplicationContext.class);
        AlarmConsumer alarmConsumer = mock(AlarmConsumer.class);
        MessageReaderService messageReaderService = mock(MessageReaderService.class);

        when(app.run(any(String[].class))).thenReturn(appContext);
        when(appContext.getBean(AlarmConsumer.class)).thenReturn(alarmConsumer);
        when(appContext.getBean(MessageReaderService.class)).thenReturn(messageReaderService);

        // Creating a mock environment with the required property
        Environment env = mock(Environment.class);
        when(env.getProperty("RDB_BAD_QUERY")).thenReturn("mocked_bad_query");

        // Creating an instance of CBRSSuppressionApplication and passing the mock environment
        CBRSSuppressionApplication appInstance = new CBRSSuppressionApplication(env);

        // Invoking the main method
        appInstance.main(new String[]{"arg1", "arg2"});

        // Verifying the interactions
        verify(app).setBannerMode(Banner.Mode.OFF);
        verify(appContext).getBean(AlarmConsumer.class);
        verify(appContext).getBean(MessageReaderService.class);
    }

    @Test
    void testMainUnsatisfiedDependencyException() {
        // Mocking the required objects
        SpringApplication app = mock(SpringApplication.class);
        ConfigurableApplicationContext appContext = mock(ConfigurableApplicationContext.class);

        when(app.run(any(String[].class))).thenThrow(new UnsatisfiedDependencyException("Validation failed for query"));

        // Creating a mock environment with the required property
        Environment env = mock(Environment.class);
        when(env.getProperty("RDB_BAD_QUERY")).thenReturn("mocked_bad_query");

        // Creating an instance of CBRSSuppressionApplication and passing the mock environment
        CBRSSuppressionApplication appInstance = new CBRSSuppressionApplication(env);

        // Invoking the main method
        appInstance.main(new String[]{"arg1", "arg2"});

        // Verifying the error logging
        // Note: Since we cannot directly verify the log output, we can only verify that the logger.error method is called
        verify(logger).error(anyString());
    }
}