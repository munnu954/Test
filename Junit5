To write JUnit 5 test cases for the `MtnInsightsValidator` class, we need to cover all the branches of each method for 100% code coverage. Below is an example of how you might write these test cases, considering various scenarios and potential edge cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    public void setup() {
        validator = new MtnInsightsValidator();
    }

    @Test
    public void testValidate_InsertMtnInsights_Success() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        request.setKeyAttributes(createValidMtnInsightsAttributes());

        assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidate_InvalidRequestType_ThrowsException() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.OTHER);

        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidate_MissingKeyAttributes_ThrowsException() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        
        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidate_MtnInsightsSearchRequest_Success() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        request.setServiceRequest(createValidMtnInsightsSearchParam());

        assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidate_MtnInsightsSearchRequest_MissingFields_ThrowsException() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setEcpdId(null); // Missing field

        request.setServiceRequest(searchParam);

        assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    // Helper methods to create valid instances for testing
    private MtnInsightsAttributes createValidMtnInsightsAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("123");
        attributes.setMtn("456");
        attributes.setInsightCategory("ValidCategory");
        attributes.setInsightName("ValidName");
        attributes.setOutageId("789");
        return attributes;
    }

    private MtnInsightsSearchParam createValidMtnInsightsSearchParam() {
        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setEcpdId("123");
        searchParam.setMtn("456");
        searchParam.setInsightCategory(new String[]{"Category"});
        searchParam.setInsightName(new String[]{"Name"});
        return searchParam;
    }
}
```

### Explanation:

1. **Setup**: We initialize the `MtnInsightsValidator` instance before each test.

2. **Tests for `validate(MtnInsightsRequest request)`**:
   - **Success Case**: Test with a valid `MtnInsightsRequest` to ensure no exception is thrown.
   - **Invalid Request Type**: Test with an invalid request type to check if the exception is thrown.
   - **Missing Key Attributes**: Test when key attributes are missing to ensure the exception is thrown.

3. **Tests for `validate(MtnInsightsSearchRequest request)`**:
   - **Success Case**: Test with a valid `MtnInsightsSearchRequest` to ensure no exception is thrown.
   - **Missing Fields**: Test when required fields are missing to check if the exception is thrown.

4. **Helper Methods**: These methods help create valid instances of `MtnInsightsAttributes` and `MtnInsightsSearchParam` for use in the tests.

The test cases are designed to cover different branches and scenarios of the `MtnInsightsValidator` class, ensuring comprehensive coverage.