To achieve 100% code coverage for the `sendLoggerMessage` method, you need to write JUnit5 test cases that cover both the try and catch blocks in the provided method. Here is an example of how you can write JUnit5 test cases for the mentioned try-catch block:

```java
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;

@ExtendWith(MockitoExtension.class)
public class LoggerTest {

    @Mock
    private RestTemplate restTemplate;

    @Test
    public void testSendLoggerMessage_HttpClientErrorException() {
        Logger logger = new Logger();
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "testAlarmIdentity");

        Mockito.when(restTemplate.exchange(Mockito.anyString(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))
                .thenThrow(new HttpClientErrorException(null));

        logger.sendLoggerMessage("testRule", alarmMap);

        // You can add assertions or verification based on the behavior you expect
    }

    @Test
    public void testSendLoggerMessage_SuccessResponse() {
        Logger logger = new Logger();
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "testAlarmIdentity");

        ResponseEntity<String> mockResponse = ResponseEntity.ok("Success");
        Mockito.when(restTemplate.exchange(Mockito.anyString(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))
                .thenReturn(mockResponse);

        logger.sendLoggerMessage("testRule", alarmMap);

        // You can add assertions or verification based on the behavior you expect
    }
}
```

In the provided test cases, we mock the behavior of the `restTemplate.exchange` method to throw a `HttpClientErrorException` in one test case and return a successful response in another test case. This will help you cover both the try and catch blocks, ensuring 100% code coverage for the mentioned part of the `sendLoggerMessage` method.