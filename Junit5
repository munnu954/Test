Sure, let's write JUnit 5 test cases to cover both branches of the `if` and `else if` blocks in the `SegmentProcessor` class that check for `clliNodeMap.containsKey(aclli)` and `clliNodeMap.containsKey(zclli)`.

Here is the test code:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class SegmentProcessorTest {

    private SegmentProcessor segmentProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;

    @Mock
    private CircuitInfo circuitInfo;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        segmentProcessor = SegmentProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = mock(ClrComponent.class);
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);

        when(clrComponent.getCircuitComp()).thenReturn(List.of(mock(CircuitComp.class)));
        when(clrComponent.getCircuitComp().get(0).getCircuitInfo()).thenReturn(List.of(circuitInfo));
    }

    @Test
    public void testProcess_WithAclliKey() {
        String aclli = "aclli";
        String zclli = "zclli";
        List<Node> aclliNodes = List.of(new Node());
        clliNodeMap.put(aclli, aclliNodes);

        when(circuitInfo.getType()).thenReturn("NON-NAUTILUS SEGMENT");
        when(circuitInfo.getCircuitName()).thenReturn("circuitName");
        when(circuitInfo.getBw()).thenReturn("100Gbps");
        when(circuitInfo.getServiceType()).thenReturn("serviceType");
        when(circuitInfo.getStatus()).thenReturn("Active");
        when(circuitInfo.getTcomsSegment()).thenReturn("tcomsSegment");

        segmentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);

        assertEquals(1, links.size());
        Link link = links.get(0);
        // Validate that source information is added to the link from aclliNodes
        assertEquals(aclliNodes, link.getSource());
    }

    @Test
    public void testProcess_WithZclliKey() {
        String aclli = "aclli";
        String zclli = "zclli";
        List<Node> zclliNodes = List.of(new Node());
        clliNodeMap.put(zclli, zclliNodes);

        when(circuitInfo.getType()).thenReturn("NON-NAUTILUS SEGMENT");
        when(circuitInfo.getCircuitName()).thenReturn("circuitName");
        when(circuitInfo.getBw()).thenReturn("100Gbps");
        when(circuitInfo.getServiceType()).thenReturn("serviceType");
        when(circuitInfo.getStatus()).thenReturn("Active");
        when(circuitInfo.getTcomsSegment()).thenReturn("tcomsSegment");

        segmentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);

        assertEquals(1, links.size());
        Link link = links.get(0);
        // Validate that source information is added to the link from zclliNodes
        assertEquals(zclliNodes, link.getSource());
    }

    @Test
    public void testProcess_WithoutAclliOrZclliKey() {
        String aclli = "aclli";
        String zclli = "zclli";

        when(circuitInfo.getType()).thenReturn("NON-NAUTILUS SEGMENT");
        when(circuitInfo.getCircuitName()).thenReturn("circuitName");
        when(circuitInfo.getBw()).thenReturn("100Gbps");
        when(circuitInfo.getServiceType()).thenReturn("serviceType");
        when(circuitInfo.getStatus()).thenReturn("Active");
        when(circuitInfo.getTcomsSegment()).thenReturn("tcomsSegment");

        segmentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);

        assertEquals(1, links.size());
        Link link = links.get(0);
        // Validate that source information is not added to the link from aclliNodes or zclliNodes
        assertEquals("--", link.getSource());
    }
}
```

### Explanation:

1. **Setup**: The setup is similar to the previous tests where we initialize objects and mock data.
2. **Test for `clliNodeMap` containing `aclli` key**:
   - We add `aclli` to the `clliNodeMap` with a list of nodes.
   - We validate that the source information is added to the link from `aclliNodes`.
3. **Test for `clliNodeMap` containing `zclli` key**:
   - We add `zclli` to the `clliNodeMap` with a list of nodes.
   - We validate that the source information is added to the link from `zclliNodes`.
4. **Test for `clliNodeMap` not containing `aclli` or `zclli` key**:
   - We do not add `aclli` or `zclli` to the `clliNodeMap`.
   - We validate that the source information is not added to the link, and the source remains as `--`.

This ensures that both branches of the `if` and `else if` blocks are covered, achieving 100% code coverage for those blocks.