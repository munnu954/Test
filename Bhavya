Here is a test case code for the negative scenario:


import org.apache.flink.api.common.functions.MapFunction;
import org.apache.flink.api.common.serialization.SimpleStringSchema;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.datastream.DataStreamSource;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.sink.SinkFunction;
import org.apache.flink.streaming.connectors.kafka.KafkaSink;
import org.apache.flink.streaming.connectors.kafka.KafkaSink.Record;
import org.apache.flink.streaming.connectors.kafka.KafkaSink.SinkProducer;
import org.apache.flink.util.Collector;

import java.util.Properties;

public class NegativeTest {

    public static void main(String[] args) throws Exception {

        // Set up the execution environment
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        // Create a source of data
        DataStreamSource<String> source = env.fromElements("1", "2", "3");

        // Create a sink to Kafka
        KafkaSink<String> sink = new KafkaSink<>(
                "localhost:9092",
                "3459-DEV-COLLECTION-JSON-DATA-QUEUE",
                new SimpleStringSchema()
        );

        // Set up the sink
        sink.setProducer(new SinkProducer<String>() {
            @Override
            public void produce(Record record, Collector<Void> collector) throws Exception {
                throw new RuntimeException("The topic is not accessible");
            }
        });

        // Write the data to Kafka
        source.sinkTo(sink);

        // Execute the program
        env.execute();
    }
}


This test case code will fail with the following exception:


java.lang.RuntimeException: The topic is not accessible


This is because the sink is configured to write to a topic that does not exist