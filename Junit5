import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.kafka.core.KafkaTemplate;

import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class KafkaProducerConsumerTest {

    @Mock
    private KafkaTemplate<String, SpaceCollector> kafkaTemplate;

    @InjectMocks
    private KafkaProducer kafkaProducer;

    @InjectMocks
    private KafkaConsumer kafkaConsumer;

    @Mock
    private FlinkApiController flinkApiController;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // Positive test case for sending message to Kafka topic
    @Test
    void testSendMessage() {
        SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
        Mockito.when(kafkaTemplate.send(spaceCollector.getUrl(), spaceCollector)).thenReturn(null);
        kafkaProducer.sendMessage(spaceCollector);
        Mockito.verify(kafkaTemplate, Mockito.times(1)).send(spaceCollector.getUrl(), spaceCollector);
    }

    // Positive test case for logger logging the message sent
    @Test
    void testLogger() {
        SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
        kafkaProducer.sendMessage(spaceCollector);
        Mockito.verify(Logger, Mockito.times(1)).info("Message sent ", spaceCollector);
    }

    // Positive test case for logger logging the message received
    @Test
    void testConsume() throws IOException, CsvValidationException {
        SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
        Mockito.when(flinkApiController.runFlink(spaceCollector)).thenReturn("success");
        kafkaConsumer.consume(spaceCollector);
        Mockito.verify(Logger, Mockito.times(1)).info("Message received -> ", spaceCollector);
    }

    // Positive test case for successfully reading the CSV file
    @Test
    void testRetrieveCsvFile() throws IOException, CsvValidationException {
        SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
        List<String[]> rows = kafkaConsumer.retrieveCsvFile(spaceCollector);
        String[] expectedRow1 = new String[] {"1", "John", "Doe"};
        String[] expectedRow2 = new String[] {"2", "Jane", "Doe"};
        Assertions.assertEquals(rows.size(), 2);
        Assertions.assertArrayEquals(rows.get(0), expectedRow1);
        Assertions.assertArrayEquals(rows.get(1), expectedRow2);
    }

    // Negative test case for sending message to invalid Kafka topic
    @Test
    void testSendMessageInvalidTopic() {
        SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
        Mockito.when(kafkaTemplate.send(spaceCollector.getUrl(), spaceCollector)).thenThrow(new RuntimeException());
        kafkaProducer.sendMessage(spaceCollector);
        Mockito.verify(kafkaTemplate, Mockito.times(1)).send(spaceCollector.getUrl(), spaceCollector);
    }

    // Negative test case for logger not logging null message sent
    @Test
    void testLoggerNullMessage() {
        kafkaProducer.sendMessage(null);
        Mockito.verify(Logger, Mockito.times(0)).info("Message sent ", null);
    }
}




@Test
void testConsumeNullMessage() throws IOException, CsvValidationException {
    kafkaConsumer.consume(null);
    Mockito.verify(LOGGER, Mockito.times(0)).info("Message received -> ", null);
}

@Test
void testRetrieveCsvFileInvalidFilePath() throws IOException, CsvValidationException {
    SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "invalid.csv", "output.csv", ",", "csv");
    List<String[]> rows = kafkaConsumer.retrieveCsvFile(spaceCollector);
    Assertions.assertEquals(rows.size(), 0);
}

@Test
void testWriteCsvFile() throws IOException {
    Path sourcePath = Paths.get("input.csv");
    Path destinationPath = Paths.get("output.csv");
    Files.createFile(sourcePath);
    kafkaConsumer.writeCsvFile(sourcePath, destinationPath);
    Assertions.assertTrue(Files.exists(destinationPath));
}

@Test
void testDeleteCsvFile() throws IOException {
    Path path = Paths.get("input.csv");
    Files.createFile(path);
    kafkaConsumer.deleteCsvFile(path);
    Assertions.assertFalse(Files.exists(path));
}