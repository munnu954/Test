import org.apache.flink.api.common.functions.RichFlatMapFunction;
import org.apache.flink.api.common.accumulators.IntCounter;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.util.Collector;
import org.json.JSONArray;
import org.json.JSONObject;

public class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    private String[] headers;

    @Override
    public void open(Configuration parameters) {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap (String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        JSONObject obj = new JSONObject();
        boolean headerProcessed = false;

        for (String line : lines) {
            String[] arr = line.split(",");

            if (headers == null || headers.length != arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }

            if (!headerProcessed) {
                handleHeaderLine(arr); // Process line 1 and line 2 to set keys
                headerProcessed = true;
                continue;
            }

            for (int j = 0; j < arr.length; j++) {
                String jsonkey = headers[j].trim().replace("\"", "");
                String jsonvalue = arr[j].trim().replace("\"", "");
                obj.put(jsonkey, jsonvalue);
            }

            this.successIntCounter.add(1);
        }

        collector.collect(obj.toString());
    }

    private void handleHeaderLine(String[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (i == 0) {
                String key = getKeyString(arr[i]);
                if (key != null) {
                    obj.put(key, getValueString(arr[i+1]));
                }
            } else if (i == 1) {
                String key = getKeyString(arr[i]);
                if (key != null) {
                    obj.put(key, jsonArrayFromString(arr[i+1]));
                }
            }
        }
    }

    private String getKeyString(String str) {
        if (str.contains("SystemId")) {
            return "SystemId";
        } else if (str.contains("NodeIP")) {
            return "NodeIP";
        }
        return null;
    }

    private String getValueString(String str) {
        // Process values as needed
        return str;
    }

    private JSONArray jsonArrayFromString(String str) {
        String[] values = str.split(",");
        JSONArray jsonArray = new JSONArray();
        for (String val : values) {
            val = val.trim();
            // Additional processing if necessary
            jsonArray.put(val);
        }
        return jsonArray;
    }
}