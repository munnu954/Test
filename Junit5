import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

@ExtendWith(MockitoExtension.class)
public class KafkaConsumerTest {

    @Mock
    private KafkaConsumer kafkaConsumer;

    @Test
    public void testWriteFile_SuccessfulCopy() throws IOException {
        // Arrange
        String sourceFilePath = "src/test/resources/files/indian_cities.csv";
        String destinationFolderPath = "src/test/resources/destinationFolder";

        Path sourcePath = Paths.get(sourceFilePath);
        Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString());

        // Act
        kafkaConsumer.writeFile(sourceFilePath, destinationFolderPath);

        // Assert
        assertTrue(Files.exists(destinationPath));
    }

    @Test
    public void testWriteFile_FileNotFound() {
        // Arrange
        String nonExistentFilePath = "non_existent_file.csv";
        String destinationFolderPath = "src/test/resources/destinationFolder";

        // Act & Assert
        assertThrows(IOException.class, () -> kafkaConsumer.writeFile(nonExistentFilePath, destinationFolderPath));
    }

    @Test
    public void testWriteFile_NullSourcePath() {
        // Arrange
        String destinationFolderPath = "src/test/resources/destinationFolder";

        // Act & Assert
        assertThrows(NullPointerException.class, () -> kafkaConsumer.writeFile(null, destinationFolderPath));
    }

    @Test
    public void testWriteFile_NullDestinationPath() {
        // Arrange
        String sourceFilePath = "src/test/resources/files/indian_cities.csv";

        // Act & Assert
        assertThrows(NullPointerException.class, () -> kafkaConsumer.writeFile(sourceFilePath, null));
    }

    @Test
    public void testWriteFile_ReplaceExisting() throws IOException {
        // Arrange
        String sourceFilePath = "src/test/resources/files/indian_cities.csv";
        String destinationFolderPath = "src/test/resources/destinationFolder";

        Path sourcePath = Paths.get(sourceFilePath);
        Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString());

        // Mock behavior to simulate existing file at destination path
        when(Files.exists(destinationPath)).thenReturn(true);

        // Act
        kafkaConsumer.writeFile(sourceFilePath, destinationFolderPath);

        // Assert
        verify(Files.class, times(1)).copy(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);
    }
}