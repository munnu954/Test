Here is an example of JUnit5 test cases for the CsvtoJsonMRFCnTransformer class covering all branches:

```java
import org.apache.flink.api.common.accumulators.IntCounter;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.util.Collector;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.Collections;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class CsvtoJsonMRFCnTransformerTest {

    private CsvtoJsonMRFCnTransformer csvTransformer;
    private PublishAuditMessage pubAuditMsg;

    @BeforeEach
    void setup() {
        pubAuditMsg = mock(PublishAuditMessage.class);
        csvTransformer = new CsvtoJsonMRFCnTransformer(pubAuditMsg);
        csvTransformer.open(new Configuration());
    }

    @Test
    void testFlatMap_WhenMessageAndContentNotNull() throws Exception {
        CollectionAudit message = CollectionAudit.builder()
                .inputFilePath("sample.csv")
                .fileType("csv")
                .build();

        String csvContent = "SystemId: 123\nNodeIP: 1.1.1.1\n\"header1\",\"header2\"\n\"value1\",\"value2\"";

        Tuple2<String, CollectionAudit> inputTuple = Tuple2.of(csvContent, message);
        Collector<Tuple2<String, CollectionAudit>> collector = mock(Collector.class);

        csvTransformer.flatMap(inputTuple, collector);

        verify(collector, times(1)).collect(any());
    }

    @Test
    void testFlatMap_WhenHeadersLengthNotMatch() throws Exception {
        CollectionAudit message = CollectionAudit.builder().build();
        String csvContent = "SystemId: 123\nNodeIP: 1.1.1.1\n\"header1\",\"header2\"\n\"value1\"";

        Tuple2<String, CollectionAudit> inputTuple = Tuple2.of(csvContent, message);
        Collector<Tuple2<String, CollectionAudit>> collector = mock(Collector.class);

        csvTransformer.flatMap(inputTuple, collector);

        verify(pubAuditMsg, times(1)).publishFlinkConversionStatus(message, null, JobStatus.FLINK_JOB_FAILED);
    }

    @Test
    void testGetSuccessIntCounter() {
        assertEquals(0, csvTransformer.getSuccessIntCounter());
    }

    @Test
    void testGetFailureIntCounter() {
        assertEquals(0, csvTransformer.getFailureIntCounter());
    }

}
```

In this test class, we have covered scenarios where the flatMap method processes messages with not null content, handles cases where headers lengths do not match, and verifies the success and failure counters. We have also set up mocking for the `PublishAuditMessage` class. 

Please note that you might need to adjust the test cases based on the actual behavior of your classes and methods.