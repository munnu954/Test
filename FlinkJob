Sure, here are the JUnit5 test cases for the mentioned class:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.ArgumentMatchers.any;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

public class LuceneSpaceCollectorRepositoryTest {

    @Mock
    private LuceneSpaceCollectorRepository luceneSpaceCollectorRepositoryMock;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateClusterStateToConnecting() {
        String id = "testId";
        when(luceneSpaceCollectorRepositoryMock.updateClusterStateToConnecting(id)).thenReturn(1);
        int result = luceneSpaceCollectorRepositoryMock.updateClusterStateToConnecting(id);
        verify(luceneSpaceCollectorRepositoryMock).updateClusterStateToConnecting(id);
        assertEquals(1, result);
    }

    @Test
    public void testFindTerminatedDevices() {
        String nTimeAgo = "10";
        List<SpaceCollector> expected = Arrays.asList(new SpaceCollector());
        when(luceneSpaceCollectorRepositoryMock.findTerminatedDevices(nTimeAgo)).thenReturn(expected);
        List<SpaceCollector> result = luceneSpaceCollectorRepositoryMock.findTerminatedDevices(nTimeAgo);
        verify(luceneSpaceCollectorRepositoryMock).findTerminatedDevices(nTimeAgo);
        assertEquals(expected, result);
    }

    @Test
    public void testFindAllByEnabledAndNotRunning() {
        List<SpaceCollector> expected = Arrays.asList(new SpaceCollector());
        when(luceneSpaceCollectorRepositoryMock.findAllByEnabledAndNotRunning()).thenReturn(expected);
        List<SpaceCollector> result = luceneSpaceCollectorRepositoryMock.findAllByEnabledAndNotRunning();
        verify(luceneSpaceCollectorRepositoryMock).findAllByEnabledAndNotRunning();
        assertEquals(expected, result);
    }

}
```

This code initializes a mock of the `LuceneSpaceCollectorRepository` class and uses it to test the methods. It checks that the methods are called with the correct parameters and that they return the expected results. Note that this is a basic test setup and may need to be adjusted based on your actual implementation and requirements.

Also, make sure you handle all exceptions properly in your `LuceneSpaceCollectorRepository` methods to avoid "java.lang.IllegalArgumentException: URI is not absolute" errors.