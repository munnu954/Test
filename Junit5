To achieve 100% code coverage for the `convertToMtnInsights(List<MtnInsightsEntity> entities, boolean flag)` method in the `MtnInsightsManager` class, you need to write comprehensive JUnit 5 test cases. These test cases should cover all branches, conditions, and potential exceptions within the method. Here's a sample test class that aims to cover all the branches and exception scenarios:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;

@ExtendWith(MockitoExtension.class)
public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Value("${requested_by}")
    private String requested_by;

    private List<MtnInsightsEntity> entities;

    @BeforeEach
    public void setUp() {
        entities = new ArrayList<>();

        // Setting up mock data and entities for testing.
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightCategory("NETWORK_OUTAGE");
        pk.setInsightName("MTNOUTAGE");
        entity.setPk(pk);
        entity.setInsightValues("someValue");
        entity.setProdId("1234");
        entities.add(entity);
    }

    @Test
    public void testConvertToMtnInsights_NetworkOutage_WithFlag() {
        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue("OUTAGE_ID1234,");

        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId("NETWORK_OUTAGE", "1234"))
            .thenReturn(aggregateEntity);

        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("NETWORK_OUTAGE", result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_NetworkOutage_WithoutFlag() {
        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue("OUTAGE_ID1234,");

        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId("NETWORK_OUTAGE", "1234"))
            .thenReturn(aggregateEntity);

        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, false);

        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("NETWORK_OUTAGE", result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_NoEligibleData() {
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightCategory("NETWORK_OUTAGE");
        pk.setInsightName("MTNOUTAGE");
        entity.setPk(pk);
        entity.setInsightValues("EVENT_CUSTOMER_STATUS");
        entity.setProdId("1234");
        entities.add(entity);

        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
    }

    @Test
    public void testConvertToMtnInsights_ExceptionHandling() {
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightCategory("NETWORK_OUTAGE");
        pk.setInsightName("MTNOUTAGE");
        entity.setPk(pk);
        entity.setInsightValues("someInvalidValue");
        entity.setProdId("invalid_id");
        entities.add(entity);

        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(anyString(), anyString()))
            .thenThrow(new RuntimeException("Database error"));

        Exception exception = assertThrows(RuntimeException.class, () -> {
            mtnInsightsManager.convertToMtnInsights(entities, true);
        });

        assertEquals("Database error", exception.getMessage());
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes mock data and entities required for testing.
- **Tests**:
  - **Network Outage With and Without Flag**: Tests scenarios where the flag is `true` and `false`.
  - **No Eligible Data**: Tests the condition where no eligible data is available.
  - **Exception Handling**: Tests the exception scenario by mocking a repository method to throw an exception.

These tests aim to cover all logical branches and potential exceptions in the method, ensuring thorough coverage. Adjust the mock data and expected results as necessary based on your actual logic and requirements.