import org.apache.flink.api.common.accumulators.IntCounter;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.util.StreamCollector;
import org.json.JSONObject;
import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class MainTest {
    @Mock
    private ParameterTool parameterTool;
    
    @Mock
    private StreamExecutionEnvironment env;
    
    @Mock
    private DataStream<String> stream;
    
    @Mock
    private DataStream<String> jsonStream;
    
    @InjectMocks
    private UnifiedAuditMessage unifiedAuditMessage;
    
    @Spy
    private ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    
    @Spy
    private ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    
    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    // Positive test case for MRFC file transformation
    @Test
    public void testMRFCFileTransformation_Positive() throws Exception {
        // Arrange
        String csvRecords = "SystemId: SOLKTXE1100.101\r\n" +
                             "NodeIP: \r\n" +
                             "header1,header2,header3\r\n" +
                             "value1,value2,value3\r\n";
        when(ParameterTool.fromArgs(ArgumentMatchers.any(String[].class))).thenReturn(parameterTool);
        when(parameterTool.get("auditTopic")).thenReturn("audit_topic");
        when(parameterTool.get("bootstrapServer")).thenReturn("bootstrap_server");
        when(parameterTool.get("outputTopic")).thenReturn("output_topic");
        when(parameterTool.get("fileType").toUpperCase()).thenReturn("MRFC");
        when(parameterTool.get("filePath")).thenReturn("file_path");
        when(parameterTool.get("flink_url")).thenReturn("flink_url");
        when(parameterTool.get("delimiters")).thenReturn(",");
        when(StreamExecutionEnvironment.getExecutionEnvironment()).thenReturn(env);
        when(env.fromElements(csvRecords)).thenReturn(stream);
        when(stream.flatMap(any(CsvtoJsonMRFCnTransformer.class))).thenReturn(jsonStream);
        
        // Act
        Main.main(new String[]{});

        // Assert
        verify(env, times(1)).execute();
        assertEquals("{}", outContent.toString()); // Verify that the JSON content is empty in this case
    }
    
    // Negative test case for MRFC file transformation with missing headers
    @Test
    public void testMRFCFileTransformation_Negative_MissingHeaders() throws Exception {
        // Arrange
        String csvRecords = "SystemId: SOLKTXE1100.101\r\n" +
                             "NodeIP: \r\n" +
                             "header1,header2,header3\r\n" +
                             "value1,value2\r\n"; // Missing one header
        when(ParameterTool.fromArgs(ArgumentMatchers.any(String[].class))).thenReturn(parameterTool);
        when(parameterTool.get("auditTopic")).thenReturn("audit_topic");
        when(parameterTool.get("bootstrapServer")).thenReturn("bootstrap_server");
        when(parameterTool.get("outputTopic")).thenReturn("output_topic");
        when(parameterTool.get("fileType").toUpperCase()).thenReturn("MRFC");
        when(parameterTool.get("filePath")).thenReturn("file_path");
        when(parameterTool.get("flink_url")).thenReturn("flink_url");
        when(parameterTool.get("delimiters")).thenReturn(",");
        when(StreamExecutionEnvironment.getExecutionEnvironment()).thenReturn(env);
        when(env.fromElements(csvRecords)).thenReturn(stream);
        when(stream.flatMap(any(CsvtoJsonMRFCnTransformer.class))).thenReturn(jsonStream);
        
        // Act
        Main.main(new String[]{});

        // Assert
        verify(env, times(0)).execute(); // ExecutionEnvironment should not be executed
        assertEquals("No records found", errContent.toString().trim()); // Verify the correct error message
    }
    
    // Positive test case for CsvtoJsonConversion transformer
    @Test
    public void testCsvtoJsonConversionTransformer_Positive() throws Exception {
        // Arrange
        String csvRecords = "header1,header2,header3\r\n" +
                            "value1,value2,value3\r\n";
        when(ParameterTool.fromArgs(ArgumentMatchers.any(String[].class))).thenReturn(parameterTool);
        when(parameterTool.get("auditTopic")).thenReturn("audit_topic");
        when(parameterTool.get("bootstrapServer")).thenReturn("bootstrap_server");
        when(parameterTool.get("outputTopic")).thenReturn("output_topic");
        when(parameterTool.get("fileType").toUpperCase()).thenReturn("OTHER");
        when(parameterTool.get("filePath")).thenReturn("file_path");
        when(parameterTool.get("flink_url")).thenReturn("flink_url");
        when(parameterTool.get("delimiters")).thenReturn(",");
        when(StreamExecutionEnvironment.getExecutionEnvironment()).thenReturn(env);
        when(env.fromElements(csvRecords)).thenReturn(stream);
        when(stream.flatMap(any(CsvtoJsonConversion.class))).thenReturn(jsonStream);
        
        // Act
        Main.main(new String[]{});

        // Assert
        verify(env, times(1)).execute();
        assertEquals("{}", outContent.toString()); // Verify that the JSON content is empty in this case
    }
    
    // Negative test case for CsvtoJsonConversion transformer with invalid file type
    @Test
    public void testCsvtoJsonConversionTransformer_Negative_InvalidFileType() throws Exception {
        // Arrange
        String csvRecords = "header1,header2,header3\r\n" +
                            "value1,value2,value3\r\n";
        when(ParameterTool.fromArgs(ArgumentMatchers.any(String[].class))).thenReturn(parameterTool);
        when(parameterTool.get("auditTopic")).thenReturn("audit_topic");
        when(parameterTool.get("bootstrapServer")).thenReturn("bootstrap_server");
        when(parameterTool.get("outputTopic")).thenReturn("output_topic");
        when(parameterTool.get("fileType").toUpperCase()).thenReturn("INVALID_FILE_TYPE");
        when(parameterTool.get("filePath")).thenReturn("file_path");
        when(parameterTool.get("flink_url")).thenReturn("flink_url");
        when(parameterTool.get("delimiters")).thenReturn(",");
        when(StreamExecutionEnvironment.getExecutionEnvironment()).thenReturn(env);
        when(env.fromElements(csvRecords)).thenReturn(stream);
        when(stream.flatMap(any(CsvtoJsonConversion.class))).thenReturn(jsonStream);
        
        // Act
        Main.main(new String[]{});

        // Assert
        verify(env, times(0)).execute(); // ExecutionEnvironment should not be executed
        assertEquals("Invalid file type", errContent.toString().trim()); // Verify the correct error message
    }
}