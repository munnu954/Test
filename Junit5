To write JUnit 5 test cases for the `AbstractClrComponentProcessor` class, specifically targeting the conditional statements involving `CommonwWrapperConstants.TRUNK` and `clrComponent.getTrunkGroupComp()`, we need to define test scenarios that cover all branches of these conditions. Below is an example of how the test cases might look:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;

class AbstractClrComponentProcessorTest {

    private AbstractClrComponentProcessor processor;
    private ClrComponent clrComponent;
    
    @BeforeEach
    void setUp() {
        processor = new AbstractClrComponentProcessor() {
            @Override
            public void process(List<Node> nodes, List<Link> links, ClrComponent clrComponent,
                                List<ClrComponent> clrComponentList, Map<String, List<Node>> clliNodeMap, int i,
                                AtomicInteger ukCount, String sourceSys) {
                // Test implementation
            }
        };
        clrComponent = new ClrComponent();
    }
    
    @Test
    void testIsNotNull_TrunkTypeWithNullTrunkGroupComp() {
        clrComponent.setType("TRUNK");
        clrComponent.setTrunkGroupComp(null);
        assertFalse(processor.isNotNull(clrComponent, "TRUNK"));
    }
    
    @Test
    void testIsNotNull_TrunkTypeWithEmptyTrunkGroupComp() {
        clrComponent.setType("TRUNK");
        clrComponent.setTrunkGroupComp(new ArrayList<>());
        assertFalse(processor.isNotNull(clrComponent, "TRUNK"));
    }
    
    @Test
    void testIsNotNull_TrunkTypeWithNonEmptyTrunkGroupComp() {
        clrComponent.setType("TRUNK");
        List<TrunkGroupComp> trunkGroupCompList = new ArrayList<>();
        trunkGroupCompList.add(new TrunkGroupComp());
        clrComponent.setTrunkGroupComp(trunkGroupCompList);
        assertTrue(processor.isNotNull(clrComponent, "TRUNK"));
    }
    
    @Test
    void testIsNotNull_NonTrunkTypeWithNonEmptyTrunkGroupComp() {
        clrComponent.setType("NON_TRUNK");
        List<TrunkGroupComp> trunkGroupCompList = new ArrayList<>();
        trunkGroupCompList.add(new TrunkGroupComp());
        clrComponent.setTrunkGroupComp(trunkGroupCompList);
        assertFalse(processor.isNotNull(clrComponent, "TRUNK"));
    }
    
    @Test
    void testIsNotNull_TrunkTypeWithTrunkGroupCompContainingEmptyCktLst() {
        clrComponent.setType("TRUNK");
        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        trunkGroupComp.setCktLst(new ArrayList<>());
        List<TrunkGroupComp> trunkGroupCompList = new ArrayList<>();
        trunkGroupCompList.add(trunkGroupComp);
        clrComponent.setTrunkGroupComp(trunkGroupCompList);
        assertTrue(processor.isNotNull(clrComponent, "TRUNK"));
    }
    
    @Test
    void testIsNotNull_TrunkTypeWithTrunkGroupCompContainingNonEmptyCktLst() {
        clrComponent.setType("TRUNK");
        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        List<CktLst> cktLst = new ArrayList<>();
        CktLst ckt = new CktLst();
        cktLst.add(ckt);
        trunkGroupComp.setCktLst(cktLst);
        List<TrunkGroupComp> trunkGroupCompList = new ArrayList<>();
        trunkGroupCompList.add(trunkGroupComp);
        clrComponent.setTrunkGroupComp(trunkGroupCompList);
        assertTrue(processor.isNotNull(clrComponent, "TRUNK"));
    }
}
```

### Explanation:

1. **Setup**: We create an anonymous subclass of `AbstractClrComponentProcessor` because it is abstract and cannot be instantiated directly. We override the `process` method with an empty implementation, as it's not needed for this specific test.

2. **Test Cases**:
   - **`testIsNotNull_TrunkTypeWithNullTrunkGroupComp`**: Verifies that `isNotNull` returns `false` when the type is `TRUNK` but `trunkGroupComp` is `null`.
   - **`testIsNotNull_TrunkTypeWithEmptyTrunkGroupComp`**: Checks `false` for an empty list.
   - **`testIsNotNull_TrunkTypeWithNonEmptyTrunkGroupComp`**: Confirms `true` for a non-empty `trunkGroupComp`.
   - **`testIsNotNull_NonTrunkTypeWithNonEmptyTrunkGroupComp`**: Ensures `false` when type is not `TRUNK`, regardless of `trunkGroupComp` content.
   - **`testIsNotNull_TrunkTypeWithTrunkGroupCompContainingEmptyCktLst`**: Tests `true` for a `TrunkGroupComp` with an empty `cktLst`.
   - **`testIsNotNull_TrunkTypeWithTrunkGroupCompContainingNonEmptyCktLst`**: Confirms `true` with a `TrunkGroupComp` containing a non-empty `cktLst`.

These tests aim to cover all possible branches and scenarios for the given conditional statements to achieve 100% code coverage.