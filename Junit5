Certainly! Here are additional JUnit 5 test cases that cover different branches of the `createAlarm(String msg)` method for achieving 100% code coverage of the `AlarmRepositoryImpl` class:

```java
@Test
void testCreateAlarmWithClearedState() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    
    Alarm alarm = mock(Alarm.class);
    when(alarm.getPerceivedSeverity()).thenReturn(1);
    
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    
    percMap.put("Other", 6);
    percMap.put("Indeterminate", 1);
    stateMap.put("cleared", 6);
    
    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    
    String jsonMsg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
    
    alarmRepositoryImpl.createAlarm(jsonMsg);
    
    // Add assertions as needed to verify the behavior of the method
}

@Test
void testCreateAlarmWithIndeterminatePerceivedSeverity() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    
    Alarm alarm = mock(Alarm.class);
    when(alarm.getPerceivedSeverity()).thenReturn(6); // Assuming Indeterminate perceived severity
    
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    
    percMap.put("Other", 6);
    percMap.put("Indeterminate", 1);
    stateMap.put("cleared", 6);
    
    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    
    String jsonMsg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"raised\",\"severity\":\"Indeterminate\",\"sequenceId\":\"23423\"}";

    alarmRepositoryImpl.createAlarm(jsonMsg);
    
    // Add assertions as needed to verify the behavior of the method
}

// Add more test cases for covering other branches and scenarios
```

You can add similar test cases for covering other branches and scenarios, ensuring that each branch of the `createAlarm(String msg)` method in the `AlarmRepositoryImpl` class is tested for full code coverage.