To achieve 100% code coverage for the `process` method in the `TrunkProcessor` class, we need to create JUnit 5 test cases that cover all possible branches and scenarios described in the method.

Here’s an example of how you can structure your JUnit 5 test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;

class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "source";
    }

    @Test
    void testProcessWithNullClrComponent() {
        trunkProcessor.process(nodes, links, null, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);
        assertTrue(links.isEmpty());
    }

    @Test
    void testProcessWithTrunkTypeAndEmptyCircuitList() {
        clrComponent.setType(CommonWrapperConstants.TRUNK);
        clrComponent.setTrunkGroupComp(Collections.singletonList(new TrunkGroupComp()));
        clrComponentList.add(clrComponent);
        
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);
        assertEquals(1, links.size());
    }

    @Test
    void testProcessWithTrunkTypeAndCircuitInfo() {
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("Circuit1");
        circuitInfo.setType("Type1");
        circuitInfo.setServiceType("Service1");
        circuitInfo.setBw("100");
        circuitInfo.setStatus("Active");

        CktLst cktLst = new CktLst();
        cktLst.setCircuitInfo(Collections.singletonList(circuitInfo));

        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        trunkGroupComp.setCktLst(Collections.singletonList(cktLst));
        clrComponent.setTrunkGroupComp(Collections.singletonList(trunkGroupComp));
        clrComponent.setType(CommonWrapperConstants.TRUNK);
        clrComponentList.add(clrComponent);

        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);
        assertEquals(1, links.size());
    }

    @Test
    void testProcessWithMultipleClrComponents() {
        // Add the first CLR component
        clrComponent.setType(CommonWrapperConstants.TRUNK);
        clrComponent.setTrunkGroupComp(Collections.singletonList(new TrunkGroupComp()));
        clrComponentList.add(clrComponent);
        
        // Add a second CLR component
        ClrComponent secondComponent = new ClrComponent();
        secondComponent.setType(CommonWrapperConstants.TRUNK);
        secondComponent.setTrunkGroupComp(Collections.singletonList(new TrunkGroupComp()));
        clrComponentList.add(secondComponent);

        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);
        assertEquals(2, links.size());
    }

    @Test
    void testProcessWithPreviousLinkTypes() {
        // Setup previous link
        Link previousLink = new Link();
        previousLink.setTarget("someTarget");
        links.add(previousLink);
        
        // Set up CLR component
        clrComponent.setType(CommonWrapperConstants.TRUNK);
        clrComponent.setTrunkGroupComp(Collections.singletonList(new TrunkGroupComp()));
        clrComponentList.add(clrComponent);
        
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);
        assertEquals(2, links.size());
    }

    @Test
    void testProcessWithLastComponent() {
        clrComponent.setType(CommonWrapperConstants.TRUNK);
        clrComponent.setTrunkGroupComp(Collections.singletonList(new TrunkGroupComp()));
        clrComponentList.add(clrComponent);

        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, clrComponentList.size() - 1, ukCount, sourceSys);
        assertEquals(1, links.size());
        assertNotNull(links.get(0).getTarget());
    }

    @Test
    void testProcessWithMultipleCircuitInfos() {
        CircuitInfo circuitInfo1 = new CircuitInfo();
        circuitInfo1.setCircuitName("Circuit1");
        circuitInfo1.setType("Type1");
        circuitInfo1.setServiceType("Service1");
        circuitInfo1.setBw("100");
        circuitInfo1.setStatus("Active");

        CircuitInfo circuitInfo2 = new CircuitInfo();
        circuitInfo2.setCircuitName("Circuit2");
        circuitInfo2.setType("Type2");
        circuitInfo2.setServiceType("Service2");
        circuitInfo2.setBw("200");
        circuitInfo2.setStatus("Inactive");

        CktLst cktLst1 = new CktLst();
        cktLst1.setCircuitInfo(Collections.singletonList(circuitInfo1));
        
        CktLst cktLst2 = new CktLst();
        cktLst2.setCircuitInfo(Collections.singletonList(circuitInfo2));
        
        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        trunkGroupComp.setCktLst(Arrays.asList(cktLst1, cktLst2));
        clrComponent.setTrunkGroupComp(Collections.singletonList(trunkGroupComp));
        clrComponent.setType(CommonWrapperConstants.TRUNK);
        clrComponentList.add(clrComponent);

        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);
        assertEquals(1, links.size());
    }
}
```

### Explanation:
1. **Initialization**: The `setUp` method initializes common variables used in the tests.
2. **Testing Different Scenarios**:
   - **Null `ClrComponent`**: Ensures that processing a null component does not create links.
   - **Empty Circuit Info and Valid Trunk Type**: Tests the case where a trunk type is valid but has no circuit information.
   - **Valid Circuit Info**: Tests the case of having valid circuit information and checks whether a link is created.
   - **Multiple CLR Components**: Validates the processing of multiple CLR components.
   - **Previous Link Types**: Checks the behavior when there’s a previous link present in the list.
   - **Last Component**: Ensures that the last CLR component in the list behaves correctly.
   - **Multiple Circuit Infos**: Validates the processing of multiple circuit information within a trunk.

### Notes:
- The tests avoid `IndexOutOfBoundsException` by ensuring that the index used when accessing `clrComponentList` is valid (i.e., checking conditions appropriately).
- You may need to adjust the tests according to your actual method implementations and expected behaviors, especially considering the specifics of your `CommonWrapperConstants`.