To create JUnit 5 test cases for the `AccountEcpdStoreController` class, we'll need to use Mockito to mock the dependencies and test each endpoint to ensure 100% code coverage. Here's how you can write the test cases:

```java
import static org.mockito.Mockito.*;
import static org.springframework.test.web.reactive.server.WebTestClient.bindToController;
import static org.springframework.http.MediaType.APPLICATION_JSON;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.web.reactive.function.BodyInserters;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.web.reactive.function.client.WebClient;

public class AccountEcpdStoreControllerTest {

    @InjectMocks
    private AccountEcpdStoreController accountEcpdStoreController;

    @Mock
    private AccountEcpdService accountService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllAccountEcpdStore() {
        // Mocking the service response
        when(accountService.getAllAccountEcpds()).thenReturn(Flux.just("account1", "account2"));

        // Testing the endpoint
        bindToController(accountEcpdStoreController)
            .build()
            .get()
            .uri("/account-ecpd-store/all")
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectBodyList(String.class)
            .hasSize(2)
            .contains("account1", "account2");
    }

    @Test
    public void testGetEcpdByAcctId() {
        String accountId = "123";
        // Mocking the service response
        when(accountService.getEcpdByAcctId(accountId)).thenReturn(Mono.just("accountDetails"));

        // Testing the endpoint
        bindToController(accountEcpdStoreController)
            .build()
            .get()
            .uri("/account-ecpd-store/account/{accountid}", accountId)
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectBody(String.class)
            .isEqualTo("accountDetails");
    }

    @Test
    public void testGetCount() {
        // Mocking the service response
        when(accountService.accountEcpdStoreCount()).thenReturn(Mono.just(5L));

        // Testing the endpoint
        bindToController(accountEcpdStoreController)
            .build()
            .get()
            .uri("/account-ecpd-store/count")
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectBody(Long.class)
            .isEqualTo(5L);
    }

    @Test
    public void testGetEcpdByAcctId_NotFound() {
        String accountId = "999";
        // Mocking the service response for a non-existent account
        when(accountService.getEcpdByAcctId(accountId)).thenReturn(Mono.empty());

        // Testing the endpoint
        bindToController(accountEcpdStoreController)
            .build()
            .get()
            .uri("/account-ecpd-store/account/{accountid}", accountId)
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isNotFound();
    }

    @Test
    public void testGetAllAccountEcpdStore_Empty() {
        // Mocking the service response to return an empty Flux
        when(accountService.getAllAccountEcpds()).thenReturn(Flux.empty());

        // Testing the endpoint
        bindToController(accountEcpdStoreController)
            .build()
            .get()
            .uri("/account-ecpd-store/all")
            .accept(APPLICATION_JSON)
            .exchange()
            .expectStatus().isOk()
            .expectBodyList(String.class)
            .hasSize(0);
    }
}
```

### Explanation:
- **Mockito** is used to create mock instances for `AccountEcpdService`.
- **WebTestClient** is used to simulate HTTP requests and test your controller endpoints.
- Each method in the controller is covered:
  - `getAllAccountEcpdStore`: Tests for a successful response and an empty response.
  - `getEcpdByAcctId`: Tests both a successful retrieval and a not found scenario.
  - `getCount`: Tests for a successful count retrieval.

These tests ensure that every code path in the controller is tested, providing 100% code coverage.