Here's the Junit5 test cases code covering all the 8 branches of the "else if((perceivedSeverity==null || (perceivedSeverity!= null && perceivedSeverity.toString().isEmpty()))&&(stateValue==postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared()))) alarm.setPerceivedSeverity(-1);" block of the createAlarm(String msg) method in the AlarmRepositoryImpl class:

```java
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryImplTest {

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Test
    void testCreateAlarm_PerceivedSeverityNotFound_StateCleared() throws Exception {
        // Arrange
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("cleared", 6);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotFound_StateNotCleared() throws Exception {
        // Arrange
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\",\"sequenceId\":\"23423\"}";
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("new", 1);
        alarmStateMap.put("cleared", 6);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityFound() throws Exception {
        // Arrange
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\",\"sequenceId\":\"23423\", \"perceivedSeverity\":\"major\"}";
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("major", 3);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("new", 1);
        alarmStateMap.put("cleared", 6);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(3, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNull_StateCleared() throws Exception {
        // Arrange
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\", \"perceivedSeverity\":null}";
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("cleared", 6);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmpty_StateCleared() throws Exception {
        // Arrange
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\", \"perceivedSeverity\":\"\"}";
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("cleared", 6);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotEmpty_StateNotCleared() throws Exception {
        // Arrange
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\",\"sequenceId\":\"23423\", \"perceivedSeverity\":\"\"}";
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("new", 1);
        alarmStateMap.put("cleared", 6);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNull_StateNotCleared() throws Exception {
        // Arrange
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\",\"sequenceId\":\"23423\", \"perceivedSeverity\":null}";
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("new", 1);
        alarmStateMap.put("cleared", 6);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmpty_StateNotCleared() throws Exception {
        // Arrange
        String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\",\"sequenceId\":\"23423\", \"perceivedSeverity\":\"\"}";
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("new", 1);
        alarmStateMap.put("cleared", 6);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity());
    }
}
```

In this test suite, we have covered all the 8 branches of the "else if((perceivedSeverity==null || (perceivedSeverity!= null && perceivedSeverity.toString().isEmpty()))&&(stateValue==postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared()))) alarm.setPerceivedSeverity(-1);" block in the createAlarm(String msg) method of the AlarmRepositoryImpl class.

The key points to note are:

1. We use the `@ExtendWith(MockitoExtension.class)` and `@MockitoSettings(strictness = Strictness.LENIENT)` annotations to set up the Mockito environment for testing.
2. We mock the `PostGreDataBaseConfig` object using the `@Mock` annotation and inject it into the `AlarmRepositoryImpl` class using the `@InjectMocks` annotation.
3. We create separate test cases for each branch of the condition, setting up the appropriate mocked responses for the `PostGreDataBaseConfig` methods.
4. In each test case, we call the `createAlarm(String msg)` method and assert that the resulting `Alarm` object has the expected `perceivedSeverity` value.

By running these test cases, you should achieve 100% code coverage for the specified block of the `createAlarm(String msg)` method.