import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RMFApiClientTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private RMFApiClient rmfApiClient;

    @Test
    void fetchRuleDetails_SuccessfulResponse() {
        // Arrange
        Object requestParam = new Object();
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "mockedAuthKey");
        HttpEntity<Object> httpEntity = new HttpEntity<>(requestParam, headers);

        ResponseEntity<Object> mockedResponse = new ResponseEntity<>(HttpStatus.OK);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class)))
                .thenReturn(mockedResponse);

        // Act
        ResponseEntity<Object> response = rmfApiClient.fetchRuleDetails(requestParam);

        // Assert
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class));
    }

    @Test
    void fetchRuleDetails_ExceptionWithRetryBelowThreshold() {
        // Arrange
        Object requestParam = new Object();
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "mockedAuthKey");
        HttpEntity<Object> httpEntity = new HttpEntity<>(requestParam, headers);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class)))
                .thenThrow(new RestClientException("Simulated Exception"));

        // Act
        ResponseEntity<Object> response = rmfApiClient.fetchRuleDetails(requestParam);

        // Assert
        assertNull(response);
        verify(restTemplate, times(2)).exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class));
    }

    @Test
    void fetchRuleDetails_ExceptionWithRetryAtThreshold() {
        // Arrange
        Object requestParam = new Object();
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "mockedAuthKey");
        HttpEntity<Object> httpEntity = new HttpEntity<>(requestParam, headers);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class)))
                .thenThrow(new RestClientException("Simulated Exception"));

        // Set rmfAPIRetry to threshold count
        rmfApiClient.setRmfAPIRetry(5);

        // Act
        ResponseEntity<Object> response = rmfApiClient.fetchRuleDetails(requestParam);

        // Assert
        assertNull(response);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class));
    }

    @Test
    void fetchRuleDetails_SuccessfulResponseWithRetry() {
        // Arrange
        Object requestParam = new Object();
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "mockedAuthKey");
        HttpEntity<Object> httpEntity = new HttpEntity<>(requestParam, headers);

        ResponseEntity<Object> mockedResponse = new ResponseEntity<>(HttpStatus.OK);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class)))
                .thenThrow(new RestClientException("Simulated Exception"))
                .thenReturn(mockedResponse);

        // Act
        ResponseEntity<Object> response = rmfApiClient.fetchRuleDetails(requestParam);

        // Assert
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        verify(restTemplate, times(2)).exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class));
    }
}

Note: Make sure to adjust the imports and customize the test cases as needed based on the actual behavior of the RMFApiClient class.