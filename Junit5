@Test
void parseWithValidJsonFieldContainingArrayIndex() throws Exception {
    // Arrange
    String expression = "%attribute1:details.name[1]%";
    srcMap.put("details", Map.of("name", List.of("John", "Jane")));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("Jane", result);
}

@Test
void parseWithInvalidJsonFieldContainingArrayIndex() throws Exception {
    // Arrange
    String expression = "%attribute1:details.unknown[1]%";
    srcMap.put("details", Map.of("name", List.of("John", "Jane")));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void parseWithValidJsonFieldButInvalidArrayIndex() throws Exception {
    // Arrange
    String expression = "%attribute1:details.name[2]%";
    srcMap.put("details", Map.of("name", List.of("John", "Jane")));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void parseWithValidJsonFieldButNegativeArrayIndex() throws Exception {
    // Arrange
    String expression = "%attribute1:details.name[-1]%";
    srcMap.put("details", Map.of("name", List.of("John", "Jane")));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void parseWithValidJsonFieldNotContainingArrayIndex() throws Exception {
    // Arrange
    String expression = "%attribute1:details.name%";
    srcMap.put("details", Map.of("name", List.of("John", "Jane")));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("John", result);
}

@Test
void parseWithInvalidJsonFieldAndArrayIndex() throws Exception {
    // Arrange
    String expression = "%attribute1:details.unknown[1]%";
    srcMap.put("details", Map.of("name", "John"));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void parseWithInvalidJsonFieldAndInvalidArrayIndex() throws Exception {
    // Arrange
    String expression = "%attribute1:details.unknown[2]%";
    srcMap.put("details", Map.of("name", "John"));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void parseWithInvalidJsonFieldAndNegativeArrayIndex() throws Exception {
    // Arrange
    String expression = "%attribute1:details.unknown[-1]%";
    srcMap.put("details", Map.of("name", "John"));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void parseWithValidJsonFieldAndInvalidArrayIndexInSrcMap() throws Exception {
    // Arrange
    String expression = "%attribute1:details.name[2]%";
    srcMap.put("details", Map.of("name", List.of("John")));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}