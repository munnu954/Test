Here is the JUnit5 test case code covering the SystemException catch block of the saveEvents method of the EventManager class:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class EventManagerTest {

    @InjectMocks
    private EventManager eventManager;

    @Mock
    private EventsRepository eventsRepository;

    @Mock
    private EventsValidator validator;

    @Test
    public void testSaveEventsSystemException() throws SystemException {
        // Arrange
        EventSaveRequest request = new EventSaveRequest();
        doThrow(new SystemException("System Exception")).when(validator).validateInsert(request);

        // Act
        EventResponse response = eventManager.saveEvents(request);

        // Assert
        assertEquals(FAILURE_CODE, response.getStatus().getCode());
        assertEquals("System Exception", response.getStatus().getMessage());
        verify(eventsRepository, never()).save(any(EventsEntity.class));
    }
}
```

This test case covers the scenario where the `validator.validateInsert(request)` method throws a `SystemException`. The test mocks the behavior of the validator to throw a `SystemException`, and then verifies that the expected status code and message are set in the response object. Additionally, it ensures that the `eventsRepository.save` method is not called when a `SystemException` occurs.

You can write similar test cases for the catch block of the renderEvents method of the EventManager class to achieve 100% code coverage.