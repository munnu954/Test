To achieve 100% code coverage for the `isValidData` method in the `BatchUtils` class, you'll want to write JUnit 5 test cases that cover the following scenarios:

1. When the input is `null`.
2. When the input is an empty string (`""`).
3. When the input consists only of whitespace (e.g., `" "`).
4. When the input is a non-empty string (e.g., `"valid"`).

Here's how you can write the JUnit 5 test cases to cover these scenarios:

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BatchUtilsTest {

    private BatchUtils batchUtils;

    @BeforeEach
    public void setUp() {
        batchUtils = new BatchUtils();
    }

    @Test
    public void testIsValidData_NullInput() {
        // Test when input is null
        assertFalse(batchUtils.isValidData(null), "Expected false for null input");
    }

    @Test
    public void testIsValidData_EmptyString() {
        // Test when input is an empty string
        assertFalse(batchUtils.isValidData(""), "Expected false for empty string input");
    }

    @Test
    public void testIsValidData_WhitespaceInput() {
        // Test when input is a string with only whitespace
        assertFalse(batchUtils.isValidData("   "), "Expected false for whitespace input");
    }

    @Test
    public void testIsValidData_ValidInput() {
        // Test when input is a valid non-empty string
        assertTrue(batchUtils.isValidData("valid"), "Expected true for valid input");
    }
}
```

### Explanation of the Test Cases
- **testIsValidData_NullInput**: Tests the method with a `null` input and asserts that the result is `false`.
- **testIsValidData_EmptyString**: Tests the method with an empty string and asserts that the result is `false`.
- **testIsValidData_WhitespaceInput**: Tests the method with a string that contains only whitespace and asserts that the result is `false`.
- **testIsValidData_ValidInput**: Tests the method with a valid non-empty string and asserts that the result is `true`.

These test cases effectively cover all branches of the `isValidData` method, ensuring that you achieve 100% code coverage.