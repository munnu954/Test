To make the below JUnit 5 test cases workable and executable without throwing exceptions or errors during execution, let's use the correct syntax for assertion and exception handling. Here is the refactored test cases:

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

class YourTestClass {

    private EmployeeRepository employeeRepo; // Assuming you have a valid instance of EmployeeRepository injected or created

    @Test
    void testDeleteNonExistentRecord() {
        Exception exception = assertThrows(ResourceNotFoundException.class, () -> {
            employeeRepo.deleteById(999);
        });

        String expectedMessage = "Employee not found";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testUpdateNonExistentRecord() {
        // Initialize input data with non-existent record ID
        Employee record = new Employee();
        record.setId(12);

        Exception exception = assertThrows(ResourceNotFoundException.class, () -> {
            employeeRepo.save(record);
        });

        String expectedMessage = "Employee not found";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testReadNonExistentRecord() {
        Exception exception = assertThrows(ResourceNotFoundException.class, () -> {
            employeeRepo.findById(999);
        });

        String expectedMessage = "Employee not found";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}


In the refactored code:
- I've used the assertThrows method for handling exceptions and added additional assertTrue check to verify the exception message.
- The exceptions are caught and compared against the expected message to ensure the correct exception type and message are being thrown.
- All tests now should be workable and executable without throwing any unexpected exceptions or errors during execution.