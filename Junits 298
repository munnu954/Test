Main.java class:-
```java
public static void main(String[] args) throws Exception {
    String primaryKey;
    UnifiedAuditMessage unifiedAuditMessage = new UnifiedAuditMessage();
    unifiedAuditMessage.setProcessType(ProcessType.Transformer.toString());
    ParameterTool parameters = ParameterTool.fromArgs(args);
    String filePath = parameters.getRequired("filePath");
    String delimeter = parameters.getRequired("primaryKey");
    String fileType = parameters.getRequired("fileType");

    // Extract the FILENAME from filePath
    String[] pathArr = filePath.split("/");
    String fileName = pathArr[pathArr.length - 1];

    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
    filePath = parameters.getRequired("filePath");
    unifiedAuditMessage.setInputFilePath(filePath);
    unifiedAuditMessage.setFileType("XML_" + fileType);
    DataStream<String> xmlDataStream = null;
    DataStream<String> jsonStream = null;
    switch (fileType) {
        case "NETAСТ":
            primaryKey = "measInfo";
            break;
        case "IMS-CCF":
            primaryKey = "mi";
            break;
        case "ETAS":
            primaryKey = "measInfo";
            break;
        default:
            primaryKey = "";
    }
    xmlDataStream = env.fromElements(readXMLFile(filePath));
    jsonStream = xmlDataStream.flatMap(new XmlToJsonConverter(primaryKey, filePath, fileName)).name("XmlToJsonFlatMap");
    jsonStream.sinkTo(sink);
    JobExecutionResult jobExecutionResult = env.execute("Xml to JSON Transformer: " + fileType);
}
```

XmlToJsonConverter.java class:-
```java
public class XmlToJsonConverter extends RichFlatMapFunction<String, String> {
    private List<String> outerList = new ArrayList<String>();
    private List<JsonNode> primaryNodeList = new ArrayList<JsonNode>();
    private List<String> primaryKeyList = new ArrayList<String>();
    public String primaryKey;
    public String filePath;
    public String fileName; // Newly added
    private int successCount = 0;
    private int failureCount = 0;
    public int getSuccessCount() {
        return successCount;
    }
    public int getFailureCount() {
        return failureCount;
    }
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    
    public XmlToJsonConverter() {
        super();
    }

    public XmlToJsonConverter(String primaryKey, String filePath, String fileName) {
        super();
        this.primaryKey = primaryKey;
        this.filePath = filePath;
        this.fileName = fileName;
    }

    @Override
    public void flatMap(String value, Collector<String> out) throws Exception {
        // Add FILENAME key in each JSON Response
        ObjectNode rootNode = JsonNodeFactory.instance.objectNode();
        rootNode.put("FILENAME", fileName);

        XmlMapper xmlMapper = new XmlMapper();
        JsonNode node = xmlMapper.readTree(value.getBytes());
        KafkaProducerService kProducerService = new KafkaProducerService();
        // Get all elements path
        this.processJsonPointer("", node);
        List<Object> removeList = new ArrayList<Object>();
        
        // Get the primary key elements
        for (String obj : outerList) {
            if (obj != null) {
                // Add the primary key elements path
                if (("/" + obj).endsWith(("/" + primaryKey))) {
                    primaryKeyList.add(obj);
                }
                // Add the primary key child elements path into remove list
                if (("/" + obj).contains(("/" + primaryKey + "/")) {
                    removeList.add(obj);
                }
            }
        }
        
        // Continue with the rest of the logic for JSON conversion
        // ...
    }
}
```