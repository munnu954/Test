import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import javax.sql.DataSource;
import javax.persistence.EntityManagerFactory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

@ExtendWith(MockitoExtension.class)
public class DataSourceConfigTest {

    @Mock
    private DataSourceModal dataSourceModal;

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @BeforeEach
    void setUp() {
        when(dataSourceModal.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        when(dataSourceModal.getUsername()).thenReturn("sa");
        when(dataSourceModal.getPassword()).thenReturn("");
        when(dataSourceModal.getDriver()).thenReturn("org.h2.Driver");
    }

    @Test
    void testFalloutDataSource() {
        DataSource dataSource = dataSourceConfig.falloutDataSource();
        assertNotNull(dataSource);
    }

    @Test
    void testEntityManagerFactoryBean() {
        DataSource dataSource = dataSourceConfig.falloutDataSource();
        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = dataSourceConfig.entityManagerFactoryBean(new EntityManagerFactoryBuilder(new HibernateJpaVendorAdapter(), null, null), dataSource);
        assertNotNull(entityManagerFactoryBean);
    }

    @Test
    void testFalloutTransactionManager() {
        EntityManagerFactory entityManagerFactory = mock(EntityManagerFactory.class);
        JpaTransactionManager transactionManager = dataSourceConfig.falloutTransactionManager(entityManagerFactory);
        assertNotNull(transactionManager);
    }
}
