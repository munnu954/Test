import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class AlarmPostingUtilsTest {

    @Test
    void testParse() throws JsonProcessingException {
        // Initialize test data
        String value = "%key1%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("key1", "value1");

        // Call parse method
        String result = AlarmPostingUtils.parse(value, srcMap, "ruleName");

        // Validate result
        assertEquals("value1", result);
    }

    @Test
    void testParseWithNestedMap() throws JsonProcessingException {
        // Initialize test data
        String value = "%key1.key2%";
        Map<String, Object> innerMap = new HashMap<>();
        innerMap.put("key2", "value2");
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("key1", innerMap);

        // Call parse method
        String result = AlarmPostingUtils.parse(value, srcMap, "ruleName");

        // Validate result
        assertEquals("value2", result);
    }

    @Test
    void testParseWithArrayIndex() throws JsonProcessingException {
        // Initialize test data
        String value = "%key1[0]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("key1", new String[]{"value1", "value2"});

        // Call parse method
        String result = AlarmPostingUtils.parse(value, srcMap, "ruleName");

        // Validate result
        assertEquals("value1", result);
    }

    @Test
    void testParseWithInvalidArrayIndex() throws JsonProcessingException {
        // Initialize test data
        String value = "%key1[-1]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("key1", new String[]{"value1", "value2"});

        // Call parse method
        String result = AlarmPostingUtils.parse(value, srcMap, "ruleName");

        // Validate result
        assertEquals("", result);
    }

    @Test
    void testParseWithInvalidKey() throws JsonProcessingException {
        // Initialize test data
        String value = "%invalidKey%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("key1", "value1");

        // Call parse method
        String result = AlarmPostingUtils.parse(value, srcMap, "ruleName");

        // Validate result
        assertEquals("", result);
    }
}