import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.Map;
import java.util.Properties;

public class XmlTransformerApplicationTest {

    private static final String FLINK_HOST = "localhost:8081"; // Replace with actual Flink host

    @Test
    public void testXmlTransformation() throws FileNotFoundException {
        String filePath = "ETAS.xml";
        String fileType = "ETAS";
        int expectedNoOfRecords = 40;

        RestTemplate restTemplate = new RestTemplate();

        // Given a running kafka server
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092"); // Replace with actual Kafka server
        AdminClient client = AdminClient.create(props);
        Collection<Node> nodes = client.describeCluster().nodes().get();
        boolean kafkaServerRunning = nodes != null && !nodes.isEmpty();
        Assertions.assertTrue(kafkaServerRunning);

        // With file path and file type provided
        String path = filePath;
        String type = fileType;

        // The server has two topics
        Properties properties = new Properties();
        properties.put("bootstrap.servers", "localhost:9092"); // Replace with actual Kafka server
        AdminClient adminClient = AdminClient.create(properties);
        ListTopicsResult topics = adminClient.listTopics();
        Set<String> topicsSet = topics.names().get();
        boolean dataTopicExists = topicsSet.contains("3459-DEV-COLLECTION-JSON-DATA-QUEUE");
        boolean auditTopicExists = topicsSet.contains("3459-DEV-COLLECTION-AUDIT-QUEUE");
        Assertions.assertTrue(dataTopicExists);
        Assertions.assertTrue(auditTopicExists);
      
        // Jar id of uploaded jar file
        // Code not found in the Gherkin steps
        Map<String, String> data = getConfig();
        String flinkHost = data.get("flink-host");
        JsonNode jsonNode = restTemplate.getForObject(flinkHost + "/jars", JsonNode.class);
        String jarId = jsonNode.get("files").get(0).get("id").textValue();

        // Job is submitted with programArgs in body
        String programArgs = "programArgs"; // Set the programArgs as per the test case
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        JSONObject requestBody = new JSONObject();
        // Set the request body according to the program args
        String userDirectory = System.getProperty("user.dir");
        userDirectory = userDirectory.replace("\\", "/");
        path = userDirectory + "/src/test/resources/files/" + path;
        programArgs = programArgs.replace("|filePath|", path);
        programArgs = programArgs.replace("|fileType|", type);
        requestBody.put("programArgs", programArgs);
        String jobSubmitUrl = flinkHost + "/jars/" + jarId + "/run";
        HttpEntity<String> request = new HttpEntity<>(requestBody.toString(), headers);
        ResponseEntity<String> response = restTemplate.postForEntity(jobSubmitUrl, request, String.class);
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode responseBody = objectMapper.readTree(response.getBody());
        String jobId = responseBody.get("jobid").textValue();
        Assertions.assertNotNull(jobId);

        // Returned job id should provide accumulator details with success and failure count and SuccessCount should match with <noofRecords>
        String jobId = this.jobId;
        JsonNode jsonNode = restTemplate.getForObject(FLINK_HOST + "/jobs/" + jobId + "/accumulators", JsonNode.class);
        Assertions.assertNotNull(jsonNode);
        String accumalatorName = jsonNode.get("user-task-accumulators").get(0).get("name").textValue();
        if (Objects.equals(accumalatorName, "successIntCounter")) {
            String successCounter = jsonNode.get("user-task-accumulators").get(0).get("value").textValue();
            Assertions.assertEquals(Integer.toString(expectedNoOfRecords), successCounter);
        } else {
            String failureCounter = jsonNode.get("user-task-accumulators").get(0).get("value").textValue();
            Assertions.assertEquals("0", failureCounter);
        }
    }

    private Map<String, String> getConfig() throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(new File("src/test/resources/application-test.yml"));
        Yaml yaml = new Yaml();
        return yaml.load(inputStream);
    }
}