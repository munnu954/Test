
Positive JUnit5 Test Case for KafkaProducer:

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
class KafkaProducerTest {

  @Mock
  private KafkaTemplate<String, SpaceCollector> kafkaTemplate;

  @InjectMocks
  private KafkaProducer kafkaProducer;

  @Test
  void testSendMessage() {
    SpaceCollector message = new SpaceCollector(1, "http://example.com", 8080, "input.csv", "output.csv", ",", "csv");

    kafkaProducer.sendMessage(message);

    verify(kafkaTemplate).send("test-topic", message);
  }
}


Negative JUnit5 Test Case for KafkaProducer:

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
class KafkaProducerTest {

  @Mock
  private KafkaTemplate<String, SpaceCollector> kafkaTemplate;

  @InjectMocks
  private KafkaProducer kafkaProducer;

  @Test
  void testSendMessageWithInvalidData() {
    SpaceCollector message = new SpaceCollector(1, "http://example.com", 10000, "input.csv", "output.csv", ",", "csv");

    kafkaProducer.sendMessage(message);

    verify(kafkaTemplate, never()).send(any(), any());
  }
}


Positive JUnit5 Test Case for KafkaConsumer:

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
class KafkaConsumerTest {

  @Mock
  private FlinkApiController flinkApiController;

  @InjectMocks
  private KafkaConsumer kafkaConsumer;

  @Test
  void testConsume() throws IOException, CsvValidationException {
    SpaceCollector message = new SpaceCollector(1, "http://example.com", 8080, "input.csv", "output.csv", ",", "csv");

    when(flinkApiController.triggerJob(any())).thenReturn("Job completed successfully");

    kafkaConsumer.consume(message);

    verify(flinkApiController).triggerJob(message);
  }
}


Negative JUnit5 Test Case for KafkaConsumer:

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
class KafkaConsumerTest {

  @Mock
  private FlinkApiController flinkApiController;

  @InjectMocks
  private KafkaConsumer kafkaConsumer;

  @Test
  void testConsumeWithNonExistentFile() {
    SpaceCollector message = new SpaceCollector(1, "http://example.com", 8080, "nonexistent.csv", "output.csv", ",", "csv");

    assertThrows(IOException.class, () -> kafkaConsumer.consume(message));
  }
}

Positive JUnit5 Test Case for KafkaProducer:

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
class KafkaProducerTest {

  @Mock
  private KafkaTemplate<String, SpaceCollector> kafkaTemplate;

  @InjectMocks
  private KafkaProducer kafkaProducer;

  @Test
  void testSendMessageWithValidData() {
    SpaceCollector message = new SpaceCollector(1, "http://example.com", 8080, "input.csv", "output.csv", ",", "csv");

    kafkaProducer.sendMessage(message);

    verify(kafkaTemplate).send("test-topic", message);
  }
}


Negative JUnit5 Test Case for KafkaProducer:

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
class KafkaProducerTest {

  @Mock
  private KafkaTemplate<String, SpaceCollector> kafkaTemplate;

  @InjectMocks
  private KafkaProducer kafkaProducer;

  @Test
  void testSendMessageWithNullMessage() {
    SpaceCollector message = null;

    assertThrows(IllegalArgumentException.class, () -> kafkaProducer.sendMessage(message));
    verify(kafkaTemplate, never()).send(any(), any());
  }
}


Positive JUnit5 Test Case for KafkaConsumer:

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
class KafkaConsumerTest {

  @Mock
  private FlinkApiController flinkApiController;

  @InjectMocks
  private KafkaConsumer kafkaConsumer;

  @Test
  void testConsumeWithValidMessage() throws IOException, CsvValidationException {
    SpaceCollector message = new SpaceCollector(1, "http://example.com", 8080, "input.csv", "output.csv", ",", "csv");

    when(flinkApiController.triggerJob(any())).thenReturn("Job completed successfully");

    kafkaConsumer.consume(message);

    verify(flinkApiController).triggerJob(message);
  }
}


Negative JUnit5 Test Case for KafkaConsumer:

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
class KafkaConsumerTest {

  @Mock
  private FlinkApiController flinkApiController;

  @InjectMocks
  private KafkaConsumer kafkaConsumer;

  @Test
  void testConsumeWithInvalidMessage() {
    SpaceCollector message = new SpaceCollector(1, "http://example.com", 8080, "input.csv", "output.csv", ",", "invalid_format");

    assertThrows(CsvValidationException.class, () -> kafkaConsumer.consume(message));
    verify(flinkApiController, never()).triggerJob(any());
  }
}