Sure, here's how you can write JUnit 5 test cases to cover all branches of the specified `if` statement in the `applyPostingRules` method of the `PostingRuleProcessingService` class using reflection APIs without making the fields public.

First, you need to add the necessary dependencies for JUnit 5 and Mockito in your `pom.xml` if they are not already present:
```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>3.12.4</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-junit-jupiter</artifactId>
    <version>3.12.4</version>
    <scope>test</scope>
</dependency>
```

Now, let's write the JUnit 5 test cases:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.lang.reflect.Field;

// ExtendWith allows us to use Mockito with JUnit 5
@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    private static final String ALARM_IDENTITY = "testAlarmId";

    @BeforeEach
    public void setUp() throws Exception {
        // Using reflection to set private fields
        setPrivateField("alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");
        setPrivateField("topologyDetailsAlarmedObjectExpression", "{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}");
        setPrivateField("topologyObjectEligibilityCheckValue", "%TopoObject:OSS_Names[0]%");
        setPrivateField("topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        setPrivateField("componentIDAttributeName", "reportingObject");
    }

    private void setPrivateField(String fieldName, Object value) throws Exception {
        Field field = PostingRuleProcessingService.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(postingRuleProcessingService, value);
    }

    @Test
    public void testApplyPostingRules_MatchResultTrue_PriorityHigher() {
        // Create an alarm object
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity(ALARM_IDENTITY);
        
        // Create a map of posting rules with different priorities
        Map<Long, PostingRule> ruleMap = new ConcurrentHashMap<>();
        
        PostingRule rule1 = new PostingRule(1L, "Rule1", 1, 1, "criteria1");
        rule1.setRulePriority(1);
        ruleMap.put(1L, rule1);
        
        PostingRule rule2 = new PostingRule(2L, "Rule2", 2, 1, "criteria2");
        rule2.setRulePriority(2);
        ruleMap.put(2L, rule2);
        
        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(true);
        when(rule2.matchFilter(any())).thenReturn(true);
        
        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);
        
        assertNotNull(result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_MatchResultTrue_PriorityLower() {
        // Create an alarm object
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity(ALARM_IDENTITY);
        
        // Create a map of posting rules with different priorities
        Map<Long, PostingRule> ruleMap = new ConcurrentHashMap<>();
        
        PostingRule rule1 = new PostingRule(1L, "Rule1", 1, 1, "criteria1");
        rule1.setRulePriority(2);
        ruleMap.put(1L, rule1);
        
        PostingRule rule2 = new PostingRule(2L, "Rule2", 2, 1, "criteria2");
        rule2.setRulePriority(1);
        ruleMap.put(2L, rule2);
        
        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(true);
        when(rule2.matchFilter(any())).thenReturn(true);
        
        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);
        
        assertNotNull(result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_MatchResultFalse() {
        // Create an alarm object
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity(ALARM_IDENTITY);
        
        // Create a map of posting rules
        Map<Long, PostingRule> ruleMap = new ConcurrentHashMap<>();
        
        PostingRule rule1 = new PostingRule(1L, "Rule1", 1, 1, "criteria1");
        ruleMap.put(1L, rule1);
        
        PostingRule rule2 = new PostingRule(2L, "Rule2", 2, 1, "criteria2");
        ruleMap.put(2L, rule2);
        
        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(false);
        when(rule2.matchFilter(any())).thenReturn(false);
        
        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);
        
        assertNotNull(result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_MatchResultFirstTrue_SecondFalse() {
        // Create an alarm object
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity(ALARM_IDENTITY);
        
        // Create a map of posting rules
        Map<Long, PostingRule> ruleMap = new ConcurrentHashMap<>();
        
        PostingRule rule1 = new PostingRule(1L, "Rule1", 1, 1, "criteria1");
        ruleMap.put(1L, rule1);
        
        PostingRule rule2 = new PostingRule(2L, "Rule2", 2, 1, "criteria2");
        ruleMap.put(2L, rule2);
        
        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(true);
        when(rule2.matchFilter(any())).thenReturn(false);
        
        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);
        
        assertNotNull(result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_MatchResultSecondTrue_FirstFalse() {
        // Create an alarm object
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity(ALARM_IDENTITY);
        
        // Create a map of posting rules
        Map<Long, PostingRule> ruleMap = new ConcurrentHashMap<>();
        
        PostingRule rule1 = new PostingRule(1L, "Rule1", 1, 1, "criteria1");
        ruleMap.put(1L, rule1);
        
        PostingRule rule2 = new PostingRule(2L, "Rule2", 2, 1, "criteria2");
        ruleMap.put(2L, rule2);
        
        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(false);
        when(rule2.matchFilter(any())).thenReturn(true);
        
        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);
        
        assertNotNull(result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_MatchResultFirstTrue_SecondTrue_PriorityLower() {
        // Create an alarm object
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity(ALARM_IDENTITY);
        
        // Create a map of posting rules with different priorities
        Map<Long, PostingRule> ruleMap = new ConcurrentHashMap<>();
        
        PostingRule rule1 = new PostingRule(1L, "Rule1", 1, 1, "criteria1");
        rule1.setRulePriority(1);
        ruleMap.put(1L, rule1);
        
        PostingRule rule2 = new PostingRule(2L, "Rule2", 2, 1, "