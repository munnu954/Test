import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import com.common.commonwrapperconstants.CommonWrapperConstants;
import com.common.clrcomponent.ClrComponent;
import com.common.clrcomponent.PortRef;
import com.common.node.Link;
import com.common.node.Node;

class TrunkProcessorTest_AddOrUpdateNode_Circuit_Trail {

    @Mock
    TrunkProcessor trunkProcessor;

    @Mock
    StaticMethods staticMethods;

    @Mock
    AbstractClrComponentProcessor abstractClrComponentProcessor;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testAddOrUpdateNode_Circuit_Trail_CheckAddTargetInfoToLink_Called_When_CircuitInfo_NotNull_Prev_Node_Trail_Target_Null() {

        // Given
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        ClrComponent clrComponent = getClrComponentWithCircuit(true);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = null;
        PortRef eqtObject1 = new PortRef();
        eqtObject1.setPortID(CommonWrapperConstants.UNKNOWN + ukCount.getAndIncrement());
        PortRef eqtObject2 = getEmptyEquipment();

        Node prevNode = getNodeWithShelfId("shelfId");
        Node node = new Node();
        node.setShelfId(eqtObject2.getShelfID());

        List<Attribute> attributeList = new ArrayList<>();

        Link link = getLink();
        link.setTarget(CommonWrapperConstants.DOUBLE_DASH);
        link.setSource(eqtObject1.getPortID());

        Mockito.when(trunkProcessor.addOrUpdateNode(Mockito.any(PortRef.class), Mockito.anyListOf(Node.class),
                Mockito.anyMap())).thenReturn(node);

        Mockito.when(trunkProcessor.getNode(Mockito.anyString(), Mockito.anyListOf(Node.class))).thenReturn(prevStateNode);

        Mockito.when(abstractClrComponentProcessor.addSourceInfoToLink(Mockito.any(Link.class), Mockito.anyListOf(Node.class)))
                .thenReturn(link);

        Mockito.when(abstractClrComponentProcessor.addTargetInfoToLink(Mockito.any(Link.class), Mockito.anyListOf(Node.class)))
                .thenReturn(link);
        // When
        abstractClrComponentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);
        // Then
        Mockito.verify(abstractClrComponentProcessor).addTargetInfoToLink(link,
                Mockito.anyListOf(Node.class));

    }

    @Test
    void testAddOrUpdateNode_Circuit_Trail_CheckAddSourceInfoToLink_Called_For_First_Iteration_When_CircuitInfo_NotNull_Prev_Node_Trail_Target_NotNull() {

        // Given
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        ClrComponent clrComponent = getClrComponentWithCircuit(true);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = null;
        PortRef eqtObject1 = new PortRef();
        eqtObject1.setPortID(CommonWrapperConstants.UNKNOWN + ukCount.getAndIncrement());
        PortRef eqtObject2 = getEmptyEquipment();

        Node prevStateNode = getNodeWithShelfId("shelfId");
        Node node = new Node();
        node.setShelfId(eqtObject2.getShelfID());

        List<Attribute> attributeList = new ArrayList<>();

        Link link = getLink();
        link.setTarget("target");
        link.setSource(eqtObject1.getPortID());

        Mockito.when(trunkProcessor.addOrUpdateNode(Mockito.any(PortRef.class), Mockito.anyListOf(Node.class),
                Mockito.anyMap())).thenReturn(node);

        Mockito.when(trunkProcessor.getNode(Mockito.anyString(), Mockito.anyListOf(Node.class))).thenReturn(prevStateNode);

        Mockito.when(abstractClrComponentProcessor.addSourceInfoToLink(Mockito.any(Link.class), Mockito.anyListOf(Node.class)))
                .thenReturn(link);

        Mockito.when(abstractClrComponentProcessor.addTargetInfoToLink(Mockito.any(Link.class), Mockito.anyListOf(Node.class)))
                .thenReturn(link);

        // When
        abstractClrComponentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);
        // Then
        Mockito.verify(abstractClrComponentProcessor).addSourceInfoToLink(link,
                Mockito.anyListOf(Node.class));

    }

    @Test
    void testAddOrUpdateNode_Circuit_Trail_CheckAddTargetInfoToLink_Called_For_Last_Iteration_When_CircuitInfo_NotNull_Prev_Node_Trail_Target_NotNull() {

        // Given
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        ClrComponent clrComponent = getClrComponentWithCircuit(true);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        int i = clrComponentList.size() - 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = null;
        PortRef eqtObject1 = new PortRef();
        eqtObject1.setPortID(CommonWrapperConstants.UNKNOWN + ukCount.getAndIncrement());
        PortRef eqtObject2 = getEmptyEquipment();

        Node prevStateNode = getNodeWithShelfId("shelfId");
        Node node = new Node();
        node.setShelfId(eqtObject2.getShelfID());

        List<Attribute> attributeList = new ArrayList<>();

        Link link = getLink();
        link.setTarget("target");
        link.setSource(eqtObject1.getPortID());

        Mockito.when(trunkProcessor.addOrUpdateNode(Mockito.any(PortRef.class), Mockito.anyListOf(Node.class),
                Mockito.anyMap())).thenReturn(node);

        Mockito.when(trunkProcessor.getNode(Mockito.anyString(), Mockito.anyListOf(Node.class))).thenReturn(prevStateNode);

        Mockito.when(abstractClrComponentProcessor.addSourceInfoToLink(Mockito.any(Link.class), Mockito.anyListOf(Node.class)))
                .thenReturn(link);

        Mockito.when(abstractClrComponentProcessor.addTargetInfoToLink(Mockito.any(Link.class), Mockito.anyListOf(Node.class)))
                .thenReturn(link);

        // When
        abstractClrComponentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);
        // Then
        Mockito.verify(abstractClrComponentProcessor).addTargetInfoToLink(link,
                Mockito.anyListOf(Node.class));

    }

    private ClrComponent getClrComponentWithCircuit(boolean isCircuitInfoNotNull) {
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.TRUNK);
        List<TrunkGroupComp> trunkGroupcomps = new ArrayList<>();
        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        List<CktLst> cktlsts = new ArrayList<>();
        CktLst cktlst = new CktLst();
        List<CircuitInfo> circuitInfos = new ArrayList<>();
        if (isCircuitInfoNotNull) {
            circuitInfos.add(new CircuitInfo());
        }
        cktlst.setCircuitInfo(circuitInfos);
        ctklsts.add(cktlst);
        trunkGroupComp.setCktLst(ctklsts);
        trunkGroupcomps.add(trunkGroupComp);
        clrComponent.setTrunkGroupComp(trunkGroupcomps);
        return clrComponent;
    }

    private PortRef getEmptyEquipment() {
        PortRef eqtObject2 = new PortRef();
        eqtObject2.setPortID(CommonWrapperConstants.UNKNOWN + "1");
        eqtObject2.setShelfID(CommonWrapperConstants.UNKNOWN + "1");
        return eqtObject2;
    }

    private Node getNodeWithShelfId(String shelfId) {
        Node prevNode = new Node();
        prevStateNode.setShelfId(shelfId);
        return prevNode;
    }

    private Link getLink() {
        Link link = new Link();
        link.setLinkType(CommonWrapperConstants.CIRCUIT);
        return link;
    }

}