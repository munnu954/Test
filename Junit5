import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.jupiter.api.Test;

class TrunkProcessorTest {

    @Test
    public void testProcess_withSegment_prevHasTrail() {
        // Create mock data
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRAIL);
        List<ClrComponent> clrComponentList = Collections.singletonList(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Collections.emptyMap();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);

        // Simulate logic to set prevTrail with a target
        Link prevTrail = new Link();
        prevTrail.setTarget("target-id");
        links.add(prevTrail);

        // Call the method under test
        TrunkProcessor.getInstance().process(nodes, links, null, clrComponentList, clliNodeMap, i, ukCount, null);

        // Verify link is created with source from prevTrail target
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals(CommonWrapperConstants.CIRCUIT, link.getLinkType());
        assertEquals("target-id", link.getSource());
    }

    @Test
    public void testProcess_withSegment_prevHasNoTarget() {
        // Create mock data
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRAIL);
        List<ClrComponent> clrComponentList = Collections.singletonList(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Collections.emptyMap();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);

        // Simulate logic to set prevTrail with no target
        Link prevTrail = new Link();
        links.add(prevTrail);

        // Call the method under test
        TrunkProcessor.getInstance().process(nodes, links, null, clrComponentList, clliNodeMap, i, ukCount, null);

        // Verify a new equipment is created and link is created with source from new equipment
        assertEquals(1, nodes.size());
        Node node = nodes.get(0);
        assertEquals(CommonWrapperConstants.UNKNOWN + ukCount.get(), node.getPortId());
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals(CommonWrapperConstants.CIRCUIT, link.getLinkType());
        assertEquals(node.getPortId(), link.getSource());
    }
}
