@Test
    public void testValidateCircuits_Success() {
        // Mock input data
        List<String> circuitNameList = Arrays.asList("Circuit1", "Circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(Arrays.asList("Circuit1", "Circuit3"));

        // Mock response from the external service
        CircuitDetailResponse mockResponse = new CircuitDetailResponse();
        CircuitData mockCircuitData = new CircuitData();
        CircuitList mockCircuitList = new CircuitList();
        Circuit mockCircuit = new Circuit();
        mockCircuit.setCircuitName("Circuit1");

        mockCircuitList.setCircuit(Arrays.asList(mockCircuit));
        mockCircuitData.setCircuitList(Arrays.asList(mockCircuitList));
        mockResponse.setCircuitData(mockCircuitData);

        ResponseEntity<CircuitDetailResponse> responseEntity =
                new ResponseEntity<>(mockResponse, HttpStatus.OK);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(), eq(CircuitDetailResponse.class)))
                .thenReturn(responseEntity);

        // Call the method under test
        List<String> result = circuitService.validateCircuits(circuitNameList, toValidateCircuitNameList);

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.size());
        assertTrue(result.contains("Circuit1"));
        assertFalse(toValidateCircuitNameList.contains("Circuit1"));
    }

    @Test
    public void testValidateCircuits_NoDataFoundException() {
        // Mock input data
        List<String> circuitNameList = Arrays.asList("Circuit1");
        List<String> toValidateCircuitNameList = Arrays.asList("Circuit1");

        // Mock empty response
        CircuitDetailResponse mockResponse = new CircuitDetailResponse();
        mockResponse.setCircuitData(new CircuitData()); // No circuit list

        ResponseEntity<CircuitDetailResponse> responseEntity =
                new ResponseEntity<>(mockResponse, HttpStatus.OK);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(), eq(CircuitDetailResponse.class)))
                .thenReturn(responseEntity);

        // Assertions for exception
        assertThrows(NoDataFoundException.class, () -> {
            circuitService.validateCircuits(circuitNameList, toValidateCircuitNameList);
        });
    }

    @Test
    public void testValidateCircuits_InternalServerErrorException() {
        // Mock input data
        List<String> circuitNameList = Arrays.asList("Circuit1");
        List<String> toValidateCircuitNameList = Arrays.asList("Circuit1");

        // Mock exception
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(), eq(CircuitDetailResponse.class)))
                .thenThrow(new ResourceAccessException("Server error"));

        // Assertions for exception
        assertThrows(InternalServerErrorException.class, () -> {
            circuitService.validateCircuits(circuitNameList, toValidateCircuitNameList);
        });
    }
}