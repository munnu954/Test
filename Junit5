To achieve 100% code coverage, you need to cover the branch where `cnd` is not blank and equals "Y". Here's an additional test case:

```
@Test
void testGetClrGraphicsWithCndEqualsY() throws Exception {
    String circuitId = "12345";
    String sourceSys = "test";
    String cnd = "Y";
    String phyModel = "testModel";
    String response = "test response";

    when(service.getClrGraphics(circuitId, sourceSys, cnd, phyModel)).thenReturn(response);

    mockMvc.perform(get("/api/v1/clr/graphics")
            .param("circuitId", circuitId)
            .param("sourceSys", sourceSys)
            .param("cnd", cnd)
            .param("phyModel", phyModel))
            .andExpect(status().isOk())
            .andExpect(content().string(response));

    verify(service, times(1)).getClrGraphics(circuitId, sourceSys, "Y", phyModel);
}
```

However, since you already have a test case `testGetClrGraphicsWithValidFields` that covers this scenario, you might not need this additional test.

To further improve your tests, consider testing:

1. `circuitId` being null or empty.
2. `UnsupportedEncodingException` being thrown.
3. Service layer throwing exceptions.

Here's how you can test these:

```
@Test
void testGetClrGraphicsWithInvalidCircuitId() throws Exception {
    String circuitId = "";
    String sourceSys = "test";
    String cnd = "Y";
    String phyModel = "testModel";

    mockMvc.perform(get("/api/v1/clr/graphics")
            .param("circuitId", circuitId)
            .param("sourceSys", sourceSys)
            .param("cnd", cnd)
            .param("phyModel", phyModel))
            .andExpect(status().isBadRequest());
}

@Test
void testGetClrGraphicsWithUnsupportedEncodingException() throws Exception {
    String circuitId = "12345";
    String sourceSys = "test";
    String cnd = "Y";
    String phyModel = "testModel";

    doThrow(new UnsupportedEncodingException()).when(service).getClrGraphics(anyString(), anyString(), anyString(), anyString());

    mockMvc.perform(get("/api/v1/clr/graphics")
            .param("circuitId", circuitId)
            .param("sourceSys", sourceSys)
            .param("cnd", cnd)
            .param("phyModel", phyModel))
            .andExpect(status().isInternalServerError());
}

@Test
void testGetClrGraphicsWithServiceException() throws Exception {
    String circuitId = "12345";
    String sourceSys = "test";
    String cnd = "Y";
    String phyModel = "testModel";

    doThrow(new RuntimeException()).when(service).getClrGraphics(anyString(), anyString(), anyString(), anyString());

    mockMvc.perform(get("/api/v1/clr/graphics")
            .param("circuitId", circuitId)
            .param("sourceSys", sourceSys)
            .param("cnd", cnd)
            .param("phyModel", phyModel))
            .andExpect(status().isInternalServerError());
}
```