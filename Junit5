To achieve 100% code coverage for the `for` loop in the `applyPostingRule` method of the `PostingRuleProcessingService` class using JUnit 5 test cases without making the required fields public, we can leverage Java Reflection APIs. Here's how you can write the JUnit 5 test cases:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

class PostingRuleProcessingServiceTest {

    @Test
    void testApplyPostingRuleForLoopCoverage() throws Exception {
        // Prepare test data
        PostingRuleProcessingService service = new PostingRuleProcessingService();
        service.ruleLoadingService = Mockito.mock(RuleLoadingService.class);
        service.topoApiClient = Mockito.mock(TopologyApiClient.class);
        service.utils = Mockito.mock(AlarmPostingUtils.class);
        PostingRule rule = new PostingRule(1, "Rule1", 1, 1, "MatchingCriteria");
        Map<String, Object> alarmMap = new HashMap<>();

        // Mock the necessary dependencies
        try (MockedStatic<RulesConstants> rulesConstantsMockedStatic = Mockito.mockStatic(RulesConstants.class);
             MockedStatic<AlarmPostingConstants> alarmPostingConstantsMockedStatic = Mockito.mockStatic(AlarmPostingConstants.class)) {

            // Mock objectMapper to create JsonNode
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode jsonNode = objectMapper.readTree("{ \"key\": \"value\" }");

            // Mock getObjectMapper method of RulesConstants
            rulesConstantsMockedStatic.when(RulesConstants::getObjectMapper)
                                      .thenReturn(objectMapper);

            // Mock getObjectMapper method of AlarmPostingConstants
            alarmPostingConstantsMockedStatic.when(AlarmPostingConstants::getObjectMapper)
                                             .thenReturn(objectMapper);

            // Set accessible fields via Reflection
            Field ruleLoadingServiceField = PostingRuleProcessingService.class.getDeclaredField("ruleLoadingService");
            ruleLoadingServiceField.setAccessible(true);
            ruleLoadingServiceField.set(service, service.ruleLoadingService);

            Field topoApiClientField = PostingRuleProcessingService.class.getDeclaredField("topoApiClient");
            topoApiClientField.setAccessible(true);
            topoApiClientField.set(service, service.topoApiClient);

            Field alarmedObjectExpressionField = PostingRuleProcessingService.class.getDeclaredField("alarmedObjectExpression");
            alarmedObjectExpressionField.setAccessible(true);
            alarmedObjectExpressionField.set(service, service.alarmedObjectExpression);

            Field topologyObjectEligibilityCheckValueField = PostingRuleProcessingService.class.getDeclaredField("topologyObjectEligibilityCheckValue");
            topologyObjectEligibilityCheckValueField.setAccessible(true);
            topologyObjectEligibilityCheckValueField.set(service, service.topologyObjectEligibilityCheckValue);

            Field topologyObjectEligibilityCheckExpressionField = PostingRuleProcessingService.class.getDeclaredField("topologyObjectEligibilityCheckExpression");
            topologyObjectEligibilityCheckExpressionField.setAccessible(true);
            topologyObjectEligibilityCheckExpressionField.set(service, service.topologyObjectEligibilityCheckExpression);

            Field componentIDAttributeNameField = PostingRuleProcessingService.class.getDeclaredField("componentIDAttributeName");
            componentIDAttributeNameField.setAccessible(true);
            componentIDAttributeNameField.set(service, service.componentIDAttributeName);

            Field topologyDetailsAlarmedObjectExpressionField = PostingRuleProcessingService.class.getDeclaredField("topologyDetailsAlarmedObjectExpression");
            topologyDetailsAlarmedObjectExpressionField.setAccessible(true);
            topologyDetailsAlarmedObjectExpressionField.set(service, service.topologyDetailsAlarmedObjectExpression);

            service.applyPostingRule(new Alarm(), rule, alarmMap);
        }
    }
}
```

In this test, we are using Reflection to set the private fields of the `PostingRuleProcessingService` class before calling the `applyPostingRule` method. Make sure to import necessary dependencies like `Mockito`, and modify the test according to your actual project setup.