The error you're encountering indicates that the exception thrown is wrapped in a `java.lang.reflect.InvocationTargetException`, which is common when using reflection to invoke methods. The actual exception (`InvalidRequestException`) is the cause of this `InvocationTargetException`. To properly handle and assert the expected exception, you can unwrap the `InvocationTargetException` to check its cause.

Here's how you can modify the test case to handle this situation:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.opentest4j.AssertionFailedError;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class UserInsightsValidatorTest {

    private UserInsightsValidator validator;

    @BeforeEach
    public void setup() {
        validator = new UserInsightsValidator();
    }

    @Test
    public void testValidateSearchMissingAttributes() throws Exception {
        UserInsightsSearchRequest searchRequest = new UserInsightsSearchRequest();
        searchRequest.setServiceHeader(createValidServiceHeader());

        assertThrows(InvalidRequestException.class, () -> {
            try {
                invokeValidateSearch(searchRequest);
            } catch (InvocationTargetException e) {
                // Re-throw the actual cause of the exception
                throw (Exception) e.getCause();
            }
        }, "ServiceRequest Ecpd Id, User Id, Insight Category and Insight Name are required.");
    }

    // Existing helper methods

    private void invokeValidateSearch(UserInsightsSearchRequest request) throws Exception {
        Method method = UserInsightsValidator.class.getDeclaredMethod("validate", UserInsightsSearchRequest.class);
        method.setAccessible(true);
        method.invoke(validator, request);
    }

    private ServiceHeader createValidServiceHeader() {
        ServiceHeader header = new ServiceHeader();
        header.setClientId("clientId123");
        header.setClientTransactionId("transactionId123");
        header.setServiceName("serviceName123");
        return header;
    }
}
```

### Key Adjustments:
- **Unwrapping Exceptions**: The `InvocationTargetException` is caught and its cause (the original exception) is re-thrown. This allows the test to assert the `InvalidRequestException` directly.
- **assertThrows**: The `assertThrows` method is used to verify that the expected exception type is indeed thrown. This ensures that your test assertions are correctly targeting the `InvalidRequestException`.
- **Detailed Message**: Ensure the error message matches what is expected, aiding in verification.

This approach will ensure that the test checks for the correct exception type and message, achieving the desired behavior without the reflection-related complications.