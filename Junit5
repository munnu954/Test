Certainly! Here's the updated test case that covers the lines you mentioned in the `testInitialize()` method using the `DistributionSummary` class:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.env.Environment;
import io.micrometer.core.instrument.DistributionSummary;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Tag;
import io.micrometer.core.instrument.Tags;
import io.micrometer.core.instrument.distribution.DistributionConfig;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

@ExtendWith(MockitoExtension.class)
public class PostingServiceTest {

    @InjectMocks
    private PostingService postingService;

    @Mock
    private Environment env;

    @Mock
    private DistributionSummary distributionSummary;

    @Mock
    private MeterRegistry meterRegistry;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInitialize() throws Exception {
        // Mock dependencies
        String activeProfile = "testProfile";
        String applicationName = "testApplication";
        when(env.getProperty(AlarmPostingConstants.ACTIVE_PROFILE)).thenReturn(activeProfile);
        when(env.getProperty(AlarmPostingConstants.APPLICATION_NAME)).thenReturn(applicationName);

        // Create example tags
        List<Tag> tags = new ArrayList<>();
        tags.add(Tag.of("tag1", "value1"));
        tags.add(Tag.of("tag2", "value2"));

        // Mock builder methods
        DistributionSummary.Builder builder = mock(DistributionSummary.Builder.class);
        when(distributionSummary.tags(anyString())).thenReturn(builder);
        when(distributionSummary.tags(anyIterable())).thenReturn(builder);
        when(builder.serviceLevelObjectives(any(double[].class))).thenReturn(builder);

        // Execute
        postingService.initialize();

        // Verify
        verify(distributionSummary).register(meterRegistry);
        verify(builder).tags(eq(Tags.empty()));
        verify(builder).tags(eq(tags));
        verify(builder).serviceLevelObjectives(any(double[].class));
    }
}
```

### Explanation:
- The `testInitialize` test case has been updated to use the `DistributionSummary` class and its methods.
- The example tags have been created as a list of `Tag` objects.
- The `tags()` method in the `DistributionSummary` interface is mocked to return a `Builder` object.
- The `serviceLevelObjectives()` method in the `DistributionSummary` interface is mocked to return the `Builder` object.
- After executing the `initialize()` method, the test case verifies that the expected interactions with the `DistributionSummary` object and `MeterRegistry` occur.