To achieve 100% code coverage for the `ApplicationContextProvider` class using JUnit 5 and Reflection APIs, you need to test both the `setApplicationContext` method and the `getBean` methods. Below is a sample implementation of the test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.context.ApplicationContext;

import java.lang.reflect.Field;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;

class ApplicationContextProviderTest {

    private ApplicationContextProvider applicationContextProvider;

    @BeforeEach
    void setUp() {
        applicationContextProvider = new ApplicationContextProvider();
    }

    @Test
    void testSetApplicationContext() throws Exception {
        // Create a mock ApplicationContext
        ApplicationContext mockContext = mock(ApplicationContext.class);

        // Invoke the setApplicationContext method using reflection
        applicationContextProvider.setApplicationContext(mockContext);

        // Use reflection to access the private CONTEXT field
        Field contextField = ApplicationContextProvider.class.getDeclaredField("CONTEXT");
        contextField.setAccessible(true);
        ApplicationContext context = (ApplicationContext) contextField.get(applicationContextProvider);

        // Verify that the CONTEXT field is set
        assertNotNull(context);
    }

    @Test
    void testGetBeanByClass() throws Exception {
        // Create a mock ApplicationContext
        ApplicationContext mockContext = mock(ApplicationContext.class);
        Object mockBean = new Object();
        
        // Set the mock context using reflection
        applicationContextProvider.setApplicationContext(mockContext);
        
        // Define behavior for getBean method
        Mockito.when(mockContext.getBean(Object.class)).thenReturn(mockBean);

        // Call getBean method
        Object bean = applicationContextProvider.getBean(Object.class);

        // Verify that the returned bean is the same as the mockBean
        assertNotNull(bean);
        assertSame(mockBean, bean);
    }

    @Test
    void testGetBeanByName() throws Exception {
        // Create a mock ApplicationContext
        ApplicationContext mockContext = mock(ApplicationContext.class);
        Object mockBean = new Object();
        
        // Set the mock context using reflection
        applicationContextProvider.setApplicationContext(mockContext);
        
        // Define behavior for getBean method by name
        Mockito.when(mockContext.getBean("mockBean")).thenReturn(mockBean);

        // Call getBean method
        Object bean = applicationContextProvider.getBean("mockBean");

        // Verify that the returned bean is the same as the mockBean
        assertNotNull(bean);
        assertSame(mockBean, bean);
    }
}
```

### Explanation:
1. **Mocking**: We use Mockito to create a mock `ApplicationContext` and define the behavior for the `getBean` methods.
2. **Reflection**: We use Java Reflection to access the private static `CONTEXT` field to verify that it was set correctly.
3. **Tests**:
   - `testSetApplicationContext()`: Tests that the `setApplicationContext` method sets the `CONTEXT` correctly.
   - `testGetBeanByClass()`: Tests the `getBean(Class<T> beanClass)` method.
   - `testGetBeanByName()`: Tests the `getBean(String beanName)` method.

### Note:
- Make sure you have the necessary dependencies for JUnit 5 and Mockito in your project to run these tests.