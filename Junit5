import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.AtomicInteger;
import com.lumen.dc.commonwrapper.exception.CircuitDesignException;
import com.lumen.dc.commonwrapper.model.CircuitData;
import com.lumen.dc.commonwrapper.model.CircuitInfo;
import com.lumen.dc.commonwrapper.model.CircuitLst;
import com.lumen.dc.commonwrapper.model.ClrComponent;
import com.lumen.dc.commonwrapper.model.EquipmentComp;
import com.lumen.dc.commonwrapper.model.Link;
import com.lumen.dc.commonwrapper.model.Node;
import com.lumen.dc.commonwrapper.model.PortRef;
import com.lumen.dc.commonwrapper.processor.PathProcessor;
import static com.lumen.dc.commonwrapper.helper.CommonWrapperConstants.CIRCUIT_PATH_LINK;
import static com.lumen.dc.commonwrapper.helper.CommonWrapperConstants.CIRCUIT;
import static com.lumen.dc.commonwrapper.helper.CommonWrapperConstants.DOUBLE_DASH;
import static com.lumen.dc.commonwrapper.helper.CommonWrapperConstants.EMTPY;
import static com.lumen.dc.commonwrapper.helper.CommonWrapperConstants.PORT;
import static com.lumen.dc.commonwrapper.helper.CommonWrapperConstants.SEGEMENT;
import static com.lumen.dc.commonwrapper.helper.CommonWrapperConstants.TRAIL;
import static com.lumen.dc.commonwrapper.helper.CommonWrapperConstants.UNKNOWN;

class PathProcessorTest {
    private AtomicInteger ukCount;
    private CircuitInfo circuitInfo;
    private CircuitLst circuitLst;
    private List<ClrComponent> clrList;
    private List<ClrComponent> emptyClrList;
    private List<Link> links;
    private List<Node> nodes;
    private List<PortRef> portList;
    private PathProcessor pathProcessor;
    private PortRef portRef;

    @Mock
    private Link link;

    @Mock
    private Node node;

    @Mock
    private List<Node> nodeList;

    @Mock
    private AbstractClrComponentProcessor abstractClrComponentProcessor;

    @InjectMocks
    private PathProcessor pathProcessor1;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        pathProcessor = new PathProcessor();
        ukCount = new AtomicInteger();
        circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("testCircuit1");
        circuitInfo.setType("Ethernet");
        circuitInfo.setBw("1600G");
        circuitInfo.setServiceType("testService");
        links = new ArrayList<>();
        portList = new ArrayList<>();
        portRef = new PortRef();
        portRef.setPortID("testId");
        when(node.getPortId()).thenReturn("testId");
        when(node.getClliCode()).thenReturn("Level3");
        nodes = new ArrayList<>();
        nodes.add(node);
        clrList = new ArrayList<>();
        emptyClrList = new ArrayList<>();
        circuitLst = new CircuitLst();
        circuitLst.setCircuit(List.of(circuitInfo));
        pathProcessor = Mockito.mock(PathProcessor.class);
    }

    @Test
    void testProcess_GivenNulls() throws CircuitDesignException {
        pathProcessor.process(null, null, null, null, null, 0, ukCount, null);
        verify(pathProcessor, times(1)).process(null, null, null, null, null, 0, ukCount, null);
    }

    @Test
    void testProcess_GivenNullClrComponent() throws CircuitDesignException {
        pathProcessor.process(nodes, links, null, clrList, null, 0, ukCount, null);
        verify(pathProcessor, times(1)).process(nodes, links, null, clrList, null, 0, ukCount, null);
    }

    @Test
    void testProcess_PORT_GivenPortClrComponentAndCircuitInfo() throws CircuitDesignException {
        when(pathProcessor.isNotNull(Mockito.any(ClrComponent.class), Mockito.eq(PORT))).thenReturn(true);
        EquipmentComp equipmentComp = new EquipmentComp();
        portList.add(portRef);
        equipmentComp.setPortRef(portList);
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setEquipmentComp(List.of(equipmentComp));
        clrComponent.setCircuitComp(List.of(circuitInfo));
        clrComponent.setType(PORT);
        pathProcessor.process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
        verify(pathProcessor, times(1)).process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
    }

    @Test
    void testProcess_PORT_GivenPortClrComponentAndNoCircuitInfo() throws CircuitDesignException {
        when(pathProcessor.isNotNull(Mockito.any(ClrComponent.class), Mockito.eq(PORT))).thenReturn(false);
        EquipmentComp equipmentComp = new EquipmentComp();
        portList.add(portRef);
        equipmentComp.setPortRef(portList);
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setEquipmentComp(List.of(equipmentComp));
        pathProcessor.process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
        verify(pathProcessor, times(1)).process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
    }

    @Test
    void testProcess_TRAILGivenTrailClrComponentAndCircuitInfo() throws CircuitDesignException {
        when(pathProcessor.isNotNull(Mockito.any(ClrComponent.class), Mockito.eq(TRAIL))).thenReturn(true);
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCircuitComp(List.of(circuitInfo));
        clrComponent.setType(TRAIL);
        pathProcessor.process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
        verify(pathProcessor, times(1)).process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
    }

    @Test
    void testProcess_TRAIL_GivenTrailClrComponentAndNoCircuitInfo() throws CircuitDesignException {
        when(pathProcessor.isNotNull(Mockito.any(ClrComponent.class), Mockito.eq(TRAIL))).thenReturn(false);
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCircuitComp(List.of(circuitInfo));
        clrComponent.setType(TRAIL);
        pathProcessor.process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
        verify(pathProcessor, times(1)).process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
    }

    @Test
    void testProcess_CIRCUIT_PATH_LINK_GivenClrComponentAndCircuitInfo() throws CircuitDesignException {
        when(pathProcessor.isNotNull(Mockito.any(ClrComponent.class), Mockito.eq(CIRCUIT_PATH_LINK))).thenReturn(true);
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCircuitComp(List.of(circuitInfo));
        clrComponent.setType(CIRCUIT_PATH_LINK);
        pathProcessor.process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
        verify(pathProcessor, times(1)).process(nodes, links, clrComponent, clrList, null, 0, ukCount, null);
    }

    