Here are the updated test cases with try-catch blocks to handle the exceptions and make the test cases pass:

```java
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class AlarmRepositoryImplTest {

    @Test
    void createAlarm_withEmptyJson_shouldThrowException() {
        // Arrange
        String jsonMessage = "";

        // Act and Assert
        AlarmRepositoryImpl impl = new AlarmRepositoryImpl();
        try {
            impl.createAlarm(jsonMessage);
            fail("Expected an exception to be thrown");
        } catch (IllegalArgumentException e) {
            // Assert exception message
            assertEquals("Missing required fields in JSON message", e.getMessage());
        }
    }

    @Test
    void createAlarm_withMissingRequiredFields_shouldThrowException() {
        // Arrange
        String jsonMessage = "{\"externalAlarmId\": \"ext-alarm-id\"}";

        // Act and Assert
        AlarmRepositoryImpl impl = new AlarmRepositoryImpl();
        try {
            impl.createAlarm(jsonMessage);
            fail("Expected an exception to be thrown");
        } catch (IllegalArgumentException e) {
            // Assert exception message
            assertEquals("Missing required fields in JSON message", e.getMessage());
        }
    }

    @Test
    void createAlarm_withInvalidDataTypes_shouldThrowException() {
        // Arrange
        String jsonMessage = "{\"externalAlarmId\": \"ext-alarm-id\", \"sourceSystemId\": 123, " +
                "\"alarmType\": [], \"state\": \"invalid\", \"perceivedSeverity\": \"error\", " +
                "\"probableCause\": null, \"alarmRaisedTime\": \"not-a-date\", \"alarmUpdatedTime\": \"not-a-date\", " +
                "\"alarmReportingTime\": \"not-a-date\", \"alarmDetails\": null, \"alarmedObject\": null, " +
                "\"reportingObject\": null, \"alarmedObjectType\": null, \"specificProblem\": null, \"tid\": null, " +
                "\"aid\": null, \"componentId\": null, \"extTopologyDetails\": null, " +
                "\"topologyDetails\": null, \"count\": \"not-a-number\", \"sequenceID\": \"not-a-number\", \"tag\": 123}";

        // Act and Assert
        AlarmRepositoryImpl impl = new AlarmRepositoryImpl();
        try {
            impl.createAlarm(jsonMessage);
            fail("Expected an exception to be thrown");
        } catch (IllegalArgumentException e) {
            // Assert exception message
            assertEquals("Invalid data types in JSON message", e.getMessage());
        }
    }
}
```

By using try-catch blocks to handle the exceptions and triggering a failure if no exception is thrown, the test cases will pass as long as the exceptions are thrown as expected.