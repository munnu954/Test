import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.stream.Stream;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
public class ArchivalFileMovementTest {

    @Mock
    private ArchivalFileMovement archivalFileMovement;

    @Mock
    private Path path;

    @Mock
    private Stream<Path> stream;

    @Test
    public void testMoveFilesMatchingPattern() throws Exception {
        Mockito.when(archivalFileMovement.getSourceDirectory(any())).thenReturn(Path.of("sourceDir"));
        Mockito.when(archivalFileMovement.getFilePattern(any())).thenReturn("filePattern");
        Mockito.when(Files.list(Path.of("sourceDir"))).thenReturn(stream);
        Mockito.when(stream.filter(any())).thenReturn(stream);
        Mockito.when(stream.count()).thenReturn(1L);
        Mockito.when(stream.forEach(any())).thenAnswer(invocation -> {
            ((Stream<Path>) invocation.getArgument(0)).forEach(path -> {
                try {
                    archivalFileMovement.moveFile(path, "destinationPath");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
            return null;
        });

        archivalFileMovement.moveFilesMatchingPattern("sourcePathPattern", "destinationPath");

        verify(archivalFileMovement, times(1)).moveFilesMatchingPattern("sourcePathPattern", "destinationPath");
        verify(archivalFileMovement, times(1)).getSourceDirectory(any());
        verify(archivalFileMovement, times(1)).getFilePattern(any());
        verify(stream, times(1)).filter(any());
        verify(stream, times(1)).forEach(any());
    }

    @Test
    public void testMoveFilesMatchingPatternWithException() throws Exception {
        Mockito.when(archivalFileMovement.getSourceDirectory(any())).thenReturn(Path.of("sourceDir"));
        Mockito.when(archivalFileMovement.getFilePattern(any())).thenReturn("filePattern");
        Mockito.when(Files.list(Path.of("sourceDir"))).thenReturn(stream);
        Mockito.when(stream.filter(any())).thenReturn(stream);
        Mockito.when(stream.count()).thenReturn(1L);
        Mockito.when(stream.forEach(any())).thenThrow(new Exception("Move File Exception"));

        archivalFileMovement.moveFilesMatchingPattern("sourcePathPattern", "destinationPath");

        verify(archivalFileMovement, times(1)).moveFilesMatchingPattern("sourcePathPattern", "destinationPath");
        verify(archivalFileMovement, times(1)).getSourceDirectory(any());
        verify(archivalFileMovement, times(1)).getFilePattern(any());
        verify(stream, times(1)).filter(any());
        verify(stream, times(1)).forEach(any());
        // Add verification for the logger or any other assertions as needed
    }
}