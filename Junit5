```java
import com.google.gson.JsonObject;
import com.nls.app.aggregationservice.common.exception.InvalidRequestException;
import com.nls.app.mti.mtimessages.MTICommonApiResponse;
import com.nls.utils.eventledger.EventLedgerConstants;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.function.Executable;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.skyscreamer.jsonassert.JSONAssert;

@ExtendWith(MockitoExtension.class)
public class MtnInsightsValidatorTest {

  private MtnInsightsValidator mtnInsightsValidator;
  @Mock private AbstractInsightsValidator.Logger logger;

  @BeforeEach
  public void setUp() {
    mtnInsightsValidator = new MtnInsightsValidator();
    mtnInsightsValidator.setLogger(logger);
  }

  @Test
  public void testValidateWithEmptyJson_expectThrowInvalidRequestException() {
    JsonObject jsonObject = new JsonObject();
    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setJsonObject(jsonObject);

    Executable executable =
        () -> mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");
    Assertions.assertThrows(InvalidRequestException.class, executable);
  }

  @Test
  public void testValidateWithNotRequiredFields_expectThrowInvalidRequestException() {
    JsonObject jsonObject = new JsonObject();
    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setJsonObject(jsonObject);

    Executable executable =
        () -> mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");
    Assertions.assertThrows(InvalidRequestException.class, executable);
  }

  @Test
  public void testValidateWithMtnFields_expectThrowInvalidRequestException() {
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("mtn", "test");
    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setJsonObject(jsonObject);
    mtnInsightsAttributes.setInsightName(null);

    Executable executable =
        () -> mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");
    Assertions.assertThrows(InvalidRequestException.class, executable);
  }

  @Test
  public void testValidateWithCategoryFields_expectThrowInvalidRequestException() {
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("insightCategory", "test");
    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setJsonObject(jsonObject);
    mtnInsightsAttributes.setInsightName(null);

    Executable executable =
        () -> mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");
    Assertions.assertThrows(InvalidRequestException.class, executable);
  }

  @Test
  public void testValidateWithMyBizCategoryAndName_expectNotThrowInvalidRequestException() {
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("insightCategory", MTICommonApiResponse.INSIGHT_CATEGORY_MYBIZZ);
    jsonObject.addProperty("insightName", MTICommonApiResponse.INSIGHT_NAME_MYBIZZ.get(0));
    jsonObject.addProperty("ecpdId", "test");
    jsonObject.addProperty("mtn", "test");
    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setJsonObject(jsonObject);
    mtnInsightsAttributes.setInsightName(MTICommonApiResponse.INSIGHT_NAME_MYBIZZ.get(0));

    mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");

    Mockito.verify(logger).info("test LOGGER_MESSAGE_MYBIZ");
  }

  @Test
  public void testValidateWithNetworkOutageCategoryAndName_expectNotThrowInvalidRequestException() {
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("insightCategory", MTICommonApiResponse.INSIGHT_CATEGORY_NETWORK_OUTAGE);
    jsonObject.addProperty(
        "insightName", MTICommonApiResponse.INSIGHT_NAME_NETWORK.get(0));
    jsonObject.addProperty("ecpdId", "test");
    jsonObject.addProperty("mtn", "test");
    jsonObject.addProperty("outageId", "test");
    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setJsonObject(jsonObject);
    mtnInsightsAttributes.setInsightName(MTICommonApiResponse.INSIGHT_NAME_NETWORK.get(0));

    mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");

    Mockito.verify(logger).info("test LOGGER_MESSAGE_NETWORK_OUTAGE");
  }

  @Test
  public void testValidateWithNetworkOutageCategoryAndNoName_expectThrowInvalidRequestException() {
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("insightCategory", MTICommonApiResponse.INSIGHT_CATEGORY_NETWORK_OUTAGE);
    jsonObject.addProperty("ecpdId", "test");
    jsonObject.addProperty("mtn", "test");
    jsonObject.addProperty("outageId", "test");
    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setJsonObject(jsonObject);

    Executable executable =
        () -> mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");
    Assertions.assertThrows(InvalidRequestException.class, executable);
  }

  @Test
  public void testValidateWithNetworkOutageNameAndNoCategory_expectThrowInvalidRequestException() {
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("insightName", MTICommonApiResponse.INSIGHT_NAME_NETWORK.get(0));
    jsonObject.addProperty("ecpdId", "test");
    jsonObject.addProperty("mtn", "test");
    jsonObject.addProperty("outageId", "test");
    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setJsonObject(jsonObject);

    Executable executable =
        () -> mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");
    Assertions.assertThrows(InvalidRequestException.class, executable);
  }

  @Test
  public void testValidateWithListCategoriesAndListNames_expectThrowInvalidRequestException() {
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("insightCategory", MTICommonApiResponse.INSIGHT_CATEGORY_MYBIZZ);
    jsonObject.addProperty("insightName", MTICommonApiResponse.INSIGHT_NAME_MYBIZZ.get(0));
    jsonObject.addProperty("ecpdId", "test");
    jsonObject.addProperty("mtn", "test");
    jsonObject.addProperty("outageId", "test");

    String[] categories =
        {MTICommonApiResponse.INSIGHT_CATEGORY_MYBIZZ};
    String[] names =
        {MTICommonApiResponse.INSIGHT_NAME_MYBIZZ.get(0)};

    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setInsightCategory(categories);
    mtnInsightsAttributes.setInsightName(names);

    Executable executable =
        () -> mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");
    Assertions.assertThrows(InvalidRequestException.class, executable);
  }

  @Test
  public void testValidateWithListCategoriesAndNoListNames_expectThrowInvalidRequestException() {
    String[] categories =
        {MTICommonApiResponse.INSIGHT_CATEGORY_MYBIZZ};
    String[] names = {};

    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsAttributes.setInsightCategory(categories);
    mtnInsightsAttributes.setInsightName(names);

    Executable executable =
        () -> mtnInsightsValidator.validateIterator("test", mtnInsightsAttributes, "test");
    Assertions.assertThrows(InvalidRequestException.class, executable);
  }

  @Test
  public void testValidateWithMtnInsightsRequestWithValidFieldValues() {
    MtnInsightsRequest mtnInsightsRequest = new MtnInsightsRequest();
    MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
    mtnInsightsRequest.setKeyAttributes(mtnInsightsAttributes);
    StringBuilder logInfoMessages = new StringBuilder();

    mtnInsightsValidator.validate(mtnInsightsRequest);

    Mockito.verify(logger, Mockito.times(0)).info(Mockito.anyString());
  }

  