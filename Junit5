
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@ExtendWith(MockitoExtension.class)
class GraniteReflowMsServiceTest {

    @InjectMocks
    private GraniteReflowMsService graniteReflowMsService;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private Gson gson;

    @Value("${cnd.circ.header.url}")
    private String cndCircHeaderMSServiceUrl = "http://mocked-url";

    @BeforeEach
    void setUp() {
        // Initialize any required setup here
    }

    @Test
    void validateCircuits_success() throws NoDataFoundException, InternalServerErrorException {
        List<String> circuitNameList = Arrays.asList("Circuit1", "Circuit2");
        List<String> toValidateCircuitNameList = Arrays.asList("Circuit1", "Circuit2");

        Circuit circuit = new Circuit();
        circuit.setCircuitName("Circuit1");

        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(Arrays.asList(circuit));

        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(Arrays.asList(circuitLst));

        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        when(gson.toJson(any())).thenReturn("{}");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class)))
                .thenReturn(new ResponseEntity<>(response, HttpStatus.OK));

        List<String> validCircuits = graniteReflowMsService.validateCircuits(circuitNameList, toValidateCircuitNameList);

        assertEquals(Collections.singletonList("Circuit1"), validCircuits);
        assertFalse(toValidateCircuitNameList.contains("Circuit1"));
        assertTrue(toValidateCircuitNameList.contains("Circuit2"));
    }

    @Test
    void validateCircuits_noCircuitData() {
        List<String> circuitNameList = Arrays.asList("Circuit1");
        List<String> toValidateCircuitNameList = Arrays.asList("Circuit1");

        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData()); // No circuit list

        when(gson.toJson(any())).thenReturn("{}");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class)))
                .thenReturn(new ResponseEntity<>(response, HttpStatus.OK));

        assertThrows(NoDataFoundException.class, () -> graniteReflowMsService.validateCircuits(circuitNameList, toValidateCircuitNameList));
    }

    @Test
    void validateCircuits_responseNotOk() {
        List<String> circuitNameList = Arrays.asList("Circuit1");
        List<String> toValidateCircuitNameList = Arrays.asList("Circuit1");

        when(gson.toJson(any())).thenReturn("{}");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class)))
                .thenReturn(new ResponseEntity<>(HttpStatus.BAD_REQUEST)); // Non-OK response

        assertThrows(NoDataFoundException.class, () -> graniteReflowMsService.validateCircuits(circuitNameList, toValidateCircuitNameList));
    }

    @Test
    void validateCircuits_internalServerError() {
        List<String> circuitNameList = Arrays.asList("Circuit1");
        List<String> toValidateCircuitNameList = Arrays.asList("Circuit1");

        when(gson.toJson(any())).thenReturn("{}");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class)))
                .thenThrow(new ResourceAccessException("Network error"));

        assertThrows(InternalServerErrorException.class, () -> graniteReflowMsService.validateCircuits(circuitNameList, toValidateCircuitNameList));
    }
}
