Here is the code for the JUnit 5 test cases for the `KafkaProducerService` class:

```java
import static org.junit.jupiter.api.Assertions.*;

import org.apache.kafka.clients.producer.MockProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.serializer.JsonSerializer;

public class KafkaProducerServiceTest {
    private KafkaProducerService kafkaProducerService;
    private MockProducer<String, Object> mockProducer;
    private KafkaTemplate<String, Object> kafkaTemplate;

    @BeforeEach
    public void setup() {
        mockProducer = new MockProducer<>(true, new StringSerializer(), new JsonSerializer<>());
        kafkaTemplate = new KafkaTemplate<>(new DefaultKafkaProducerFactory<>(mockProducer.getConfig()));
        kafkaProducerService = new KafkaProducerService(kafkaTemplate);
    }

    @Test
    public void testSendJsonMessage_Success() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId(1L);
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("user");
        spaceCollector.setPassword("pass");

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertEquals("jsonMessage sent successfully", result);
        assertEquals(1, mockProducer.history().size());
    }

    @Test
    public void testSendJsonMessage_NullId() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("user");
        spaceCollector.setPassword("pass");

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertEquals("SpaceCollector json must have an id", result);
        assertTrue(mockProducer.history().isEmpty());
    }

    @Test
    public void testSendJsonMessage_EmptyUrl() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId(1L);
        spaceCollector.setUrl("");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("user");
        spaceCollector.setPassword("pass");

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertEquals("SpaceCollector json must have a non-empty url", result);
        assertTrue(mockProducer.history().isEmpty());
    }

    @Test
    public void testSendJsonMessage_ZeroPort() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId(1L);
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(0);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("user");
        spaceCollector.setPassword("pass");

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertEquals("SpaceCollector json must have a non-zero port number", result);
        assertTrue(mockProducer.history().isEmpty());
    }

    @Test
    public void testSendJsonMessage_WrongConnectionType() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId(1L);
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("FTP");
        spaceCollector.setUsername("user");
        spaceCollector.setPassword("pass");

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertEquals("SpaceCollector json must have a connection_type of 'API'", result);
        assertTrue(mockProducer.history().isEmpty());
    }

    @Test
    public void testSendJsonMessage_NullUsernameAndPassword() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId(1L);
        spaceCollector.setUrl("http://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");

        String result = kafkaProducerService.sendJsonMessage(spaceCollector);

        assertEquals("SpaceCollector json must have a non-null username and password", result);
        assertTrue(mockProducer.history().isEmpty());
    }
}
```

The test cases cover both positive and negative scenarios, including the case where the `sendJsonMessage` method returns successfully and the cases where various validation checks fail. The `MockProducer` class is used to simulate the Kafka producer, allowing us to check the messages sent to it using `mockProducer.history()`.