The `NullPointerException` error is occurring because the `vmbConfig` object is not initialized before being used in the test. We need to mock or set up this `vmbConfig` object properly in the test setup to ensure it contains the necessary values.

Here's how you can reframe the test cases to fix this issue by initializing the `vmbConfig` object:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(MockitoExtension.class)
public class MessageConsumerTest {

    @Mock
    private CustomHealthChecker healthChecker;
    @Mock
    private Environment environment;
    @Mock
    private MeterRegistry meterRegistry;
    @Mock
    private MessageProducer messageProducer;
    @Mock
    private Consumer<byte[]> consumer;
    @Mock
    private HistogramBuckets histogramBuckets;

    @InjectMocks
    private MessageConsumer messageConsumer;

    private VMBConfig vmbConfig;

    @BeforeEach
    public void setUp() {
        // Initialize VMBConfig
        vmbConfig = new VMBConfig();
        vmbConfig.setTopic("test-topic");
        vmbConfig.setSubscriptionName("test-subscription");

        // Set the vmbConfig field in MessageConsumer
        ReflectionTestUtils.setField(messageConsumer, "vmbConfig", vmbConfig);
        
        // Initialize any required fields
        ReflectionTestUtils.setField(messageConsumer, "VMBConnectionFailureThresholdCount", 3);
        when(environment.getProperty(anyString())).thenReturn("test");
        when(histogramBuckets.histogramBoundaries()).thenReturn(new double[]{0.1, 1.0, 10.0});
        when(VMBUtil.createConsumerConnection(any(), any())).thenReturn(consumer);
    }

    @Test
    public void testRetryConsumerConnection() {
        // Simulate failure condition
        ReflectionTestUtils.setField(messageConsumer, "failureVMBConnectionCount", 3);

        // Call the private method using ReflectionTestUtils
        ReflectionTestUtils.invokeMethod(messageConsumer, "retryConsumerConnection");

        // Verify that healthChecker is set to unhealthy
        verify(healthChecker, times(1)).setHealth(false, "VMB connection failure threshold count reached in consumer");
        // Note: System.exit() is difficult to test directly, so ensure logic up to it is verified.
    }

    @Test
    public void testRetryConsumerConnectionBelowThreshold() {
        // Simulate a condition where the failure count is below the threshold
        ReflectionTestUtils.setField(messageConsumer, "failureVMBConnectionCount", 2);

        // Call the private method using ReflectionTestUtils
        ReflectionTestUtils.invokeMethod(messageConsumer, "retryConsumerConnection");

        // Verify that a new consumer connection is attempted
        verify(VMBUtil, times(1)).createConsumerConnection(any(), any());
        verify(healthChecker, never()).setHealth(anyBoolean(), anyString());
    }

    @Test
    public void testShutdown() {
        // Set the consumer to a mock object
        ReflectionTestUtils.setField(messageConsumer, "consumer", consumer);

        // Call the shutdown method
        messageConsumer.shutdown();

        // Verify that the consumer is closed
        verify(consumer, times(1)).close();
    }
}
```

### Key Changes:

- **Initialize `VMBConfig`**: We create a new `VMBConfig` instance and set required fields like `topic` and `subscriptionName` to avoid `NullPointerException`.

- **Set `vmbConfig` in `MessageConsumer`**: We use `ReflectionTestUtils` to set the `vmbConfig` field in the `MessageConsumer` instance.

- **Mock `createConsumerConnection`**: Ensure that `VMBUtil.createConsumerConnection` returns the mocked consumer.

These changes should help you avoid the `NullPointerException` and achieve the desired test coverage for the `retryConsumerConnection()` and `shutdown()` methods.