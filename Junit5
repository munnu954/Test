Here's an example of how you can write JUnit 5 test cases for the `getAEnd` and `getZEnd` methods of the `CircuitDetailsProvider` class to achieve 100% code coverage:

```
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CircuitDetailsProviderTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    @Mock
    private Gson gson;

    private CircuitDetailResponse response;
    private CircuitData circuitData;
    private CircuitLst circuitLst;
    private Circuit circuit;
    private AEnd aEnd;
    private ZEnd zEnd;
    private PortChannel portChannel;
    private PortRef portRef;
    private ClrComponent clrComponent;
    private EquipmentComp equipmentComp;

    @BeforeEach
    void setup() {
        response = new CircuitDetailResponse();
        circuitData = new CircuitData();
        circuitLst = new CircuitLst();
        circuit = new Circuit();
        aEnd = new AEnd();
        zEnd = new ZEnd();
        portChannel = new PortChannel();
        portRef = new PortRef();
        clrComponent = new ClrComponent();
        equipmentComp = new EquipmentComp();

        circuitDetailsProvider = new CircuitDetailsProvider();
    }

    // Test cases for getAEnd

    @Test
    void testGetAEnd_CircuitIdNull() {
        String circuitId = null;
        String clli = "clli";
        CircuitDetailResponse response = null;

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_ResponseNull() {
        String circuitId = "circuitId";
        String clli = "clli";
        CircuitDetailResponse response = null;

        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(null);

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_CircuitDataNull() {
        String circuitId = "circuitId";
        String clli = "clli";
        response.setCircuitData(null);

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_CircuitLstNull() {
        String circuitId = "circuitId";
        String clli = "clli";
        circuitData.setCircuitLst(null);
        response.setCircuitData(circuitData);

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_CircuitNull() {
        String circuitId = "circuitId";
        String clli = "clli";
        circuitLst.setCircuit(null);
        circuitData.setCircuitLst(circuitLst);
        response.setCircuitData(circuitData);

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_AEndNull() {
        String circuitId = "circuitId";
        String clli = "clli";
        circuit.setAEnd(null);
        circuitLst.setCircuit(List.of(circuit));
        circuitData.setCircuitLst(List.of(circuitLst));
        response.setCircuitData(circuitData);

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_PChannelNull() {
        String circuitId = "circuitId";
        String clli = "clli";
        aEnd.setPortChannel(null);
        circuit.setAEnd(List.of(aEnd));
        circuitLst.setCircuit(List.of(circuit));
        circuitData.setCircuitLst(List.of(circuitLst));
        response.setCircuitData(circuitData);

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    