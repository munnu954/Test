import com.jcraft.jsch.*;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.*;
import java.nio.file.*;
import java.util.*;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ZipUtil.class, FileUtil.class})
public class NestedFilesValidationSteps {

    private static final Logger LOGGER = LoggerFactory.getLogger(NestedFilesValidationSteps.class);

    @InjectMocks
    private DataRetriever dataRetriever;

    @Mock
    private CollectorUtil collectorUtil;

    @Mock
    private DateUtil dateUtil;

    @Mock
    private LuceneCollectionAuditRepository luceneCollectionAuditRepo;

    @Mock
    private JSchFactory jschFactory;

    @Mock
    private OutputStreamCreator outputStreamCreator;

    @Mock
    private KafkaProducerService kafkaProducerService;

    @Mock
    private S3Service s3Service;

    @Mock
    private JSch jsch;

    @Mock
    private Session session;

    @Mock
    private ChannelSftp channelSftp;

    private SpaceCollector spaceCollector;
    private String dateReceived;
    private String auditTopic;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        spaceCollector = new SpaceCollector();
        dateReceived = "2023-01-01";
        auditTopic = "audit-topic";

        when(jschFactory.createJSch()).thenReturn(jsch);
        when(jsch.getSession(anyString(), anyString(), anyInt())).thenReturn(session);
        when(session.openChannel("sftp")).thenReturn(channelSftp);
        doNothing().when(session).connect();
        doNothing().when(channelSftp).connect();
        doNothing().when(channelSftp).disconnect();
        doNothing().when(session).disconnect();

        when(collectorUtil.getDateAsString(any())).thenReturn("2023-01-01");

        // Mocking static methods
        PowerMockito.mockStatic(ZipUtil.class);
        PowerMockito.mockStatic(FileUtil.class);
    }

    @Given("a SpaceCollector with the following details")
    public void givenASpaceCollectorWithTheFollowingDetails(io.cucumber.datatable.DataTable dataTable) {
        Map<String, String> data = dataTable.asMaps().get(0);
        spaceCollector.setUserName(data.get("username"));
        spaceCollector.setUrl(data.get("url"));
        spaceCollector.setPassword(data
