Certainly! Below is a JUnit 5 test class that covers the specified lines of the `executeEnrichmentTask` method in your `EnrichmentService` class. This includes the scenario where the enriched alarm is already present and the scenario where alarms need to be enriched.

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class EnrichmentServiceTest {

    @Mock
    private CbrsSuppressionRepository cbrsSuppressionRepository;

    @Mock
    private AlarmPostingRepository alarmPostingRespository;

    @InjectMocks
    private EnrichmentService enrichmentService;

    private OffsetDateTime currentTimestamp;

    @BeforeEach
    public void setUp() {
        currentTimestamp = OffsetDateTime.now();
    }

    @Test
    public void testExecuteEnrichmentTask_AlreadyEnriched() {
        List<CbrsSuppressionAlarm> alarms = Arrays.asList(
                createCbrsSuppressionAlarm("alarm1", currentTimestamp.plusMinutes(10)),
                createCbrsSuppressionAlarm("alarm2", currentTimestamp.plusMinutes(5))
        );

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt()))
                .thenReturn(Optional.of(alarms));

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, true);

        assertFalse(result);
        verify(cbrsSuppressionRepository, times(1)).retrieveActiveSuppressionPatterns(anyInt());
    }

    @Test
    public void testExecuteEnrichmentTask_AlarmsToBeEnriched() throws Exception {
        List<CbrsSuppressionAlarm> alarms = Arrays.asList(
                createCbrsSuppressionAlarm("alarm1", currentTimestamp.minusMinutes(10)),
                createCbrsSuppressionAlarm("alarm2", currentTimestamp.plusMinutes(5))
        );

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt()))
                .thenReturn(Optional.of(alarms));

        // Mock the private method enrichGeneratedCbrsSuppressionAlarm
        doNothing().when(enrichmentService).enrichGeneratedCbrsSuppressionAlarm(any(CbrsSuppressionAlarm.class));

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, true);

        assertTrue(result);
        verify(cbrsSuppressionRepository, times(1)).retrieveActiveSuppressionPatterns(anyInt());
        verify(enrichmentService, times(1)).enrichGeneratedCbrsSuppressionAlarm(any(CbrsSuppressionAlarm.class));
    }

    private CbrsSuppressionAlarm createCbrsSuppressionAlarm(String alarmIdentity, OffsetDateTime lastEnrichmentTime) {
        CbrsSuppressionAlarm alarm = new CbrsSuppressionAlarm();
        alarm.setAlarmIdentity(alarmIdentity);
        alarm.setLastActivatedTime(lastEnrichmentTime);
        return alarm;
    }
}
```

### Explanation:

1. **Setup**: The `@BeforeEach` method initializes the `currentTimestamp`.

2. **Test Case `testExecuteEnrichmentTask_AlreadyEnriched`**: 
    - This test case mocks the scenario where alarms are already enriched.
    - The `retrieveActiveSuppressionPatterns` method returns a list of alarms with `lastEnrichmentTime` after the `currentTimestamp`.
    - The test verifies that no alarms need to be enriched and the method returns `false`.

3. **Test Case `testExecuteEnrichmentTask_AlarmsToBeEnriched`**: 
    - This test case mocks the scenario where alarms need to be enriched.
    - The `retrieveActiveSuppressionPatterns` method returns a list of alarms with `lastEnrichmentTime` before the `currentTimestamp`.
    - The test uses Mockito's `doNothing` to mock the private method `enrichGeneratedCbrsSuppressionAlarm`.
    - The test verifies that alarms are enriched and the method returns `true`.

### Note:
- **Reflection API**: If you need to use reflection to access private methods, you can use the `ReflectionTestUtils` class from the `spring-test` library, but in the above example, I used Mockito directly to mock the private method for simplicity. If needed, the reflection-based approach would look something like this:

```java
ReflectionTestUtils.invokeMethod(enrichmentService, 
    "enrichGeneratedCbrsSuppressionAlarm", cbrsSuppressionAlarm);
```

Make sure you have the necessary dependencies for JUnit 5 and Mockito in your `pom.xml` or `build.gradle` file.