import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class TrunkProcessorTest {

    @Mock
    private ClrComponent clrComponent;

    @Mock
    private CircuitInfo circuitInfo;

    @Mock
    private PortRef portRef;

    @Mock
    private ClrComponent prevClrComponent;

    private List<Node> nodes;
    private List<Link> links;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private int i;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setup() {
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        i = 0;
        ukCount = new AtomicInteger(0);
        sourceSys = "testSource";
    }

    @Test
    void testProcessWithValidTrunk() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo().get(0)).thenReturn(circuitInfo);
        when(circuitInfo.getCircuitName()).thenReturn("testCircuitName");
        when(circuitInfo.getType()).thenReturn("testType");
        when(circuitInfo.getServiceType()).thenReturn("testServiceType");
        when(circuitInfo.getBw()).thenReturn("testBandwidth");
        when(circuitInfo.getStatus()).thenReturn("testStatus");

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithNullTrunk() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(null);

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithEmptyTrunkGroupComp() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithEmptyCktLst() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(new ArrayList<>());

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithEmptyCircuitInfo() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithPrevPortOrChannel() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo().get(0)).thenReturn(circuitInfo);
        when(circuitInfo.getCircuitName()).thenReturn("testCircuitName");
        when(circuitInfo.getType()).thenReturn("testType");
        when(circuitInfo.getServiceType()).thenReturn("testServiceType");
        when(circuitInfo.getBw()).thenReturn("testBandwidth");
        when(circuitInfo.getStatus()).thenReturn("testStatus");
        clrComponentList.add(prevClrComponent);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(prevClrComponent.getEquipmentComp()).thenReturn(new ArrayList<>());
        when(prevClrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(new ArrayList<>());
        when(prevClrComponent.getEquipmentComp().get(0).getPortRef().get(0)).thenReturn(portRef);
        when(portRef.getPortID()).thenReturn("testPortId");

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithPrevTrailOrCircuitPathLinkOrCircuit() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo().get(0)).thenReturn(circuitInfo);
        when(circuitInfo.getCircuitName()).thenReturn("testCircuitName");
        when(circuitInfo.getType()).thenReturn("testType");
        when(circuitInfo.getServiceType()).thenReturn("testServiceType");
        when(circuitInfo.getBw()).thenReturn("testBandwidth");
        when(circuitInfo.getStatus()).thenReturn("testStatus");
        clrComponentList.add(prevClrComponent);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.TRAIL);
        Link prevLink = new Link();
        prevLink.setTarget("testTarget");
        links.add(prevLink);

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithPrevSegment() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo().get(0)).thenReturn(circuitInfo);
        when(circuitInfo.getCircuitName()).thenReturn("testCircuitName");
        when(circuitInfo.getType()).thenReturn("testType");
        when(circuitInfo.getServiceType()).thenReturn("testServiceType");
        when(circuitInfo.getBw()).thenReturn("testBandwidth");
        when(circuitInfo.getStatus()).thenReturn("testStatus");
        clrComponentList.add(prevClrComponent);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.SEGEMENT);
        when(prevClrComponent.getTrail()).thenReturn(new ArrayList<>());
        Link prevSegment = new Link();
        links.add(prevSegment);

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithPrevCableOrCablePairOrCablePairGroup() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo().get(0)).thenReturn(circuitInfo);
        when(circuitInfo.getCircuitName()).thenReturn("testCircuitName");
        when(circuitInfo.getType()).thenReturn("testType");
        when(circuitInfo.getServiceType()).thenReturn("testServiceType");
        when(circuitInfo.getBw()).thenReturn("testBandwidth");
        when(circuitInfo.getStatus()).thenReturn("testStatus");
        clrComponentList.add(prevClrComponent);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        Link prevCable = new Link();
        prevCable.setTarget("testTarget");
        links.add(prevCable);

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithPrevPath() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo().get(0)).thenReturn(circuitInfo);
        when(circuitInfo.getCircuitName()).thenReturn("testCircuitName");
        when(circuitInfo.getType()).thenReturn("testType");
        when(circuitInfo.getServiceType()).thenReturn("testServiceType");
        when(circuitInfo.getBw()).thenReturn("testBandwidth");
        when(circuitInfo.getStatus()).thenReturn("testStatus");
        clrComponentList.add(prevClrComponent);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.PATH);
        Link prevPath = new Link();
        links.add(prevPath);

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    void testProcessWithPrevTrunk() {
        // Arrange
        when(clrComponent.getTrunkGroupComp()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo().get(0)).thenReturn(circuitInfo);
        when(circuitInfo.getCircuitName()).thenReturn("testCircuitName");
        when(circuitInfo.getType()).thenReturn("testType");
        when(circuitInfo.getServiceType()).thenReturn("testServiceType");
        when(circuitInfo.getBw()).thenReturn("testBandwidth");
        when(circuitInfo.getStatus()).thenReturn("testStatus");
        clrComponentList.add(prevClrComponent);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.TRUNK);
        Link prevTrunk = new Link();
        links.add(prevTrunk);

        // Act
        TrunkProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertNotNull(links);
        assertNotNull(nodes);
    }

   