```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class BatchLoaderUtilsTest {

    @Mock
    private JMSMessageListener listener;
    private BatchLoaderUtils utils;

    @BeforeEach
    void init() {
        utils = new BatchLoaderUtils();
    }

    @Test
    @DisplayName("Test convertToObject with valid input and type")
    void testConvertToObject_validInputAndType() {
        String xml = "<Flow360AuditEvent><MessageType></MessageType></Flow360AuditEvent>";
        assertThrows(JsonProcessingException.class, () -> utils.convertToObject(xml, String.class));
    }

    @Test
    @DisplayName("Test convertToObject with invalid XML and type")
    void testConvertToObject_invalidXMLAndType() {
        String xml = "Invalid XML";
        assertThrows(JAXBException.class, () -> utils.convertToObject(xml, String.class));
    }

    @Test
    @DisplayName("Test convertToObject with empty XML and type")
    void testConvertToObject_emptyXMLAndType() {
        String xml = "";
        assertThrows(JAXBException.class, () -> utils.convertToObject(xml, String.class));
    }

    @Test
    @DisplayName("Test isValidData with valid input")
    void testIsValidData_validInput() {
        String input = "Valid Input";
        assertTrue(utils.isValidData(input));
    }

    @Test
    @DisplayName("Test isValidData with null input")
    void testIsValidData_nullInput() {
        assertFalse(utils.isValidData(null));
    }

    @Test
    @DisplayName("Test isValidData with blank input")
    void testIsValidData_blankInput() {
        String input = " ";
        assertFalse(utils.isValidData(input));
    }
}
```