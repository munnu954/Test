To achieve 100% code coverage for the `getAEnd` and `getZEnd` methods in the `CircuitDetailsProvider` class using JUnit 5, we need to create test cases that cover all the possible branches and conditions within these methods. Below is an example of how you might structure these test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Arrays;
import java.util.Collections;

@ExtendWith(MockitoExtension.class)
public class CircuitDetailsProviderTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    private CircuitDetailResponse mockResponse;

    @BeforeEach
    public void setup() {
        // Initialize a mock CircuitDetailResponse for testing
        mockResponse = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();

        AEnd aEnd = new AEnd();
        PortChannel portChannel = new PortChannel();
        PortRef portRef = new PortRef();
        portRef.setClliCode("TestCLLI");
        portChannel.setPortRef(Collections.singletonList(portRef));
        aEnd.setPortChannel(Collections.singletonList(portChannel));

        ZEnd zEnd = new ZEnd();
        zEnd.setPortChannel(Collections.singletonList(portChannel));

        circuit.setAEnd(Collections.singletonList(aEnd));
        circuit.setZEnd(Collections.singletonList(zEnd));

        circuitLst.setCircuit(Collections.singletonList(circuit));
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));
        mockResponse.setCircuitData(circuitData);
    }

    @Test
    public void testGetAEnd_withValidClli() {
        when(restClientUtil.callEndpoint(anyString(), eq(HttpMethod.GET), anyMap())).thenReturn(getMockResponseJson());

        AEnd result = circuitDetailsProvider.getAEnd("testCircuitId", "TestCLLI", null);
        assertNotNull(result);
        assertEquals("TestCLLI", result.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    public void testGetAEnd_withInvalidClli() {
        AEnd result = circuitDetailsProvider.getAEnd("testCircuitId", "InvalidCLLI", mockResponse);
        assertNull(result);
    }

    @Test
    public void testGetAEnd_withNullResponse() {
        AEnd result = circuitDetailsProvider.getAEnd("testCircuitId", "TestCLLI", null);
        assertNotNull(result);
        assertEquals("TestCLLI", result.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    public void testGetZEnd_withValidClli() {
        when(restClientUtil.callEndpoint(anyString(), eq(HttpMethod.GET), anyMap())).thenReturn(getMockResponseJson());

        ZEnd result = circuitDetailsProvider.getZEnd("testCircuitId", "TestCLLI", null);
        assertNotNull(result);
        assertEquals("TestCLLI", result.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    public void testGetZEnd_withInvalidClli() {
        ZEnd result = circuitDetailsProvider.getZEnd("testCircuitId", "InvalidCLLI", mockResponse);
        assertNull(result);
    }

    @Test
    public void testGetZEnd_withNullResponse() {
        ZEnd result = circuitDetailsProvider.getZEnd("testCircuitId", "TestCLLI", null);
        assertNotNull(result);
        assertEquals("TestCLLI", result.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    private String getMockResponseJson() {
        // Return a mock JSON response that simulates the API response
        return "{ \"circuitData\": { \"circuitLst\": [{ \"circuit\": [{ \"aEnd\": [{ \"portChannel\": [{ \"portRef\": [{ \"clliCode\": \"TestCLLI\" }] }] }] }] }] } }";
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to mock the `RestClientUtil` dependency. This allows us to simulate the behavior of the external service call.
- **Setup**: A mock `CircuitDetailResponse` is created with nested objects to simulate the data structure expected by the `getAEnd` and `getZEnd` methods.
- **Test Cases**: We write separate test cases to cover different scenarios:
  - Valid `clli` code matches the expected value.
  - Invalid `clli` code does not match, resulting in a `null` return.
  - Null `response` input to ensure the method correctly fetches and processes data.
- **JSON Response**: A mock JSON response is constructed to simulate the API response, allowing the method to parse and return the correct data.

These test cases aim to cover all logical branches in the methods for 100% code coverage. Adjust the mock data and logic based on your specific implementation details as needed.