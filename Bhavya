The `UnnecessaryStubbingException` you're encountering indicates that some of the stubbings (mock setups) in your test method are not actually called during the execution of the test. This can happen if the method being tested does not utilize all the mocked methods as expected.

To resolve this issue, we need to ensure that all stubbings are necessary for the test to run correctly. Hereâ€™s how you can refactor your test to avoid unnecessary stubbings and ensure that the test executes correctly.

### Refactored Test Method

```java
@Test
void testOnMessage_SuccessfulProcessing() throws JsonProcessingException {
    // Arrange
    ServiceMessage serviceMessage = new ServiceMessage();
    serviceMessage.setRequestJSONString("{\"Service\": {\"ServiceBody\": {\"CallRequest\": {\"Body\": {\"Relinquishing Customer Details\": {\"AccountNumber\": \"12345\"}}}}}}}");

    RequestJSONString requestJSONString = new RequestJSONString();
    Service service = new Service();
    ServiceBody serviceBody = new ServiceBody();
    CallRequest callRequest = new CallRequest();
    Body body = new Body();
    CustomerDetails customerDetails = new CustomerDetails();
    customerDetails.setAccountNumber("12345");
    body.setRelinquishingCustomerDetails(customerDetails);
    callRequest.setBody(body);
    serviceBody.setCallRequest(callRequest);
    service.setServiceBody(serviceBody);
    requestJSONString.setService(service);

    // Mock the necessary methods
    when(utils.convert(validPayload, ServiceMessage.class)).thenReturn(serviceMessage);
    when(serviceMessage.getRequestJSONString()).thenReturn("{\"Service\": {}}");
    when(utils.convert(serviceMessage.getRequestJSONString(), RequestJSONString.class)).thenReturn(requestJSONString);
    when(accountService.getEcpdByAcctId(anyString())).thenReturn(Mono.just("ecpdId"));

    // Act
    eventsMessageListener.onMessage(consumerRecord, validPayload);

    // Assert
    // Verify that the method does not throw any exceptions
    assertDoesNotThrow(() -> eventsMessageListener.onMessage(consumerRecord, validPayload));

    // Verify that the Kafka template's send method was called
    verify(kafkaTemplate, times(1)).send(any());
}
```

### Key Changes

1. **ServiceMessage Setup**:
   - Ensure that `serviceMessage` is properly constructed with a valid `requestJSONString` that contains a `Service` object with nested details. This is important to ensure that the `onMessage` method has the necessary structure when it executes.

2. **RequestJSONString Mocking**:
   - The `RequestJSONString` is mocked to return a valid structure that includes a `Service` object, which is crucial for the method to proceed past validation checks.

3. **Verification of Kafka Send**:
   - Added a verification step to ensure that the `send` method of the `kafkaTemplate` is called.

### Additional Notes

- Ensure that `validPayload` is a string that matches the expected JSON format for the `ServiceMessage`.
- The structure of the mocked objects (`Service`, `ServiceBody`, etc.) must match what your `onMessage` method expects when it processes the payload.
- If there are any other calls made in the `onMessage` method that need to be mocked or verified, make sure to set them up accordingly.

This refactored test method should resolve the `UnnecessaryStubbingException` and provide a comprehensive test for the `onMessage` method in the `EventsMessageListener` class.