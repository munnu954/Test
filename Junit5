Sure, here's the JUnit5 test cases for the `DataSourceConfig` class:

```java
import com.verizon.vbg.ledger.modal.DataSourceModal;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;

import javax.sql.DataSource;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class DataSourceConfigTest {

    @Mock
    private DataSourceModal dataSourceModal;

    @Mock
    private EntityManagerFactoryBuilder builder;

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @BeforeEach
    void setup() {
        when(dataSourceModal.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        when(dataSourceModal.getPassword()).thenReturn("password");
        when(dataSourceModal.getUsername()).thenReturn("username");
        when(dataSourceModal.getDriver()).thenReturn("org.h2.Driver");
    }

    @Test
    void testFalloutDataSource() {
        DataSource dataSource = dataSourceConfig.falloutDataSource();
        assertNotNull(dataSource);
        assert dataSource instanceof DriverManagerDataSource;
    }

    @Test
    void testEntityManagerFactoryBean() {
        DataSource dataSource = dataSourceConfig.falloutDataSource();
        var entityManagerFactory = dataSourceConfig.entityManagerFactoryBean(builder, dataSource);
        assertNotNull(entityManagerFactory);
    }

    @Test
    void testFalloutTransactionManager() {
        DataSource dataSource = dataSourceConfig.falloutDataSource();
        var entityManagerFactory = dataSourceConfig.entityManagerFactoryBean(builder, dataSource);
        var transactionManager = dataSourceConfig.falloutTransactionManager(entityManagerFactory);
        assertNotNull(transactionManager);
        assert transactionManager instanceof JpaTransactionManager;
    }
}
```

Here's how the test cases work:

1. The `@ExtendWith(MockitoExtension.class)` annotation is used to enable Mockito for this test class.
2. In the `setup()` method, we use Mockito to set up the expected behavior of the `dataSourceModal` object.
3. The `testFalloutDataSource()` method tests the `falloutDataSource()` method of the `DataSourceConfig` class. We assert that the returned `DataSource` object is not null and is an instance of `DriverManagerDataSource`.
4. The `testEntityManagerFactoryBean()` method tests the `entityManagerFactoryBean()` method of the `DataSourceConfig` class. We assert that the returned `LocalContainerEntityManagerFactoryBean` object is not null.
5. The `testFalloutTransactionManager()` method tests the `falloutTransactionManager()` method of the `DataSourceConfig` class. We assert that the returned `PlatformTransactionManager` object is not null and is an instance of `JpaTransactionManager`.

By using Mockito, we can mock the `DataSourceModal` object and avoid the `java.lang.IllegalStateException: Could not load JDBC driver class [org.h2.Driver]` error. This allows us to test the `DataSourceConfig` class without the need for a real database connection.