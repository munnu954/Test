import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.HashMap;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @Mock
    private PostingRuleProcessingService postingRuleProcessingService;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Test
    void testPostAlarmForEachIteration_AlarmReportingTimeIsNull() {
        Alarm alarm = new Alarm();
        alarm.setAlarmReportingTime(null);

        SqlRowSet sqlRowSet = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(Mockito.anyString(), Mockito.any())).thenReturn(sqlRowSet);
        Mockito.when(sqlRowSet.next()).thenReturn(true);
        Mockito.when(sqlRowSet.getTimestamp("alarmreportingtime")).thenReturn(new Timestamp(System.currentTimeMillis()));

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertNotNull(alarm.getAlarmReportingTime());
    }

    @Test
    void testPostAlarmForEachIteration_AlarmReportingTimeIsEmpty() {
        Alarm alarm = new Alarm();
        alarm.setAlarmReportingTime("");

        SqlRowSet sqlRowSet = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(Mockito.anyString(), Mockito.any())).thenReturn(sqlRowSet);
        Mockito.when(sqlRowSet.next()).thenReturn(true);
        Mockito.when(sqlRowSet.getTimestamp("alarmreportingtime")).thenReturn(new Timestamp(System.currentTimeMillis()));

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertNotNull(alarm.getAlarmReportingTime());
    }

    @Test
    void testPostAlarmForEachIteration_ComponentIdIsNull() {
        Alarm alarm = new Alarm();
        alarm.setComponentId(null);

        SqlRowSet sqlRowSet = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(Mockito.anyString(), Mockito.any())).thenReturn(sqlRowSet);
        Mockito.when(sqlRowSet.next()).thenReturn(true);
        Mockito.when(sqlRowSet.getString("componentid")).thenReturn("testComponentId");

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertNotNull(alarm.getComponentId());
    }

    @Test
    void testPostAlarmForEachIteration_ComponentIdIsEmpty() {
        Alarm alarm = new Alarm();
        alarm.setComponentId("");

        SqlRowSet sqlRowSet = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(Mockito.anyString(), Mockito.any())).thenReturn(sqlRowSet);
        Mockito.when(sqlRowSet.next()).thenReturn(true);
        Mockito.when(sqlRowSet.getString("componentid")).thenReturn("testComponentId");

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertNotNull(alarm.getComponentId());
    }

    // Add more test cases for other fields
}