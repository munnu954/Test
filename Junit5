The error you are encountering is due to the way you are trying to deserialize a JSON string into a `HashMap`. The `ObjectMapper` is attempting to deserialize a JSON string directly into a `HashMap`, but it needs to first convert the string into a proper JSON object.

To fix this issue, you need to ensure that when you encounter a JSON string, you first parse it into a `Map` before trying to manipulate it. Here are the changes I recommend making to your `DeduplicationUtils` class:

### Changes Made:

1. **Deserialization of JSON Strings**: Ensure that when you encounter a JSON string, you first convert it into a `HashMap` using `ObjectMapper` before processing it further.

2. **Initialization of `resultMsg`**: Ensure that `resultMsg` is initialized before using it in the `removeNullValuesInJsonAttributes` method.

3. **Correcting the `checkIfJsonValue` Method**: The logic in the `checkIfJsonValue` method was slightly adjusted to ensure it correctly identifies JSON strings.

Hereâ€™s the updated code for the `DeduplicationUtils` class:

```java
@Component
public class DeduplicationUtils {
    Logger logger = LogManager.getLogger(this.getClass());

    public HashMap<String, Object> removeNullValuesInJsonAttributes(Map<String, Object> msg) {
        HashMap<String, Object> resultMsg = new HashMap<>(); // Initialize resultMsg
        try {
            for (Map.Entry<String, Object> iterate : msg.entrySet()) {
                // if the value itself is a json string, recursively call and process
                if (checkIfJsonValue(iterate.getValue())) {
                    // Deserialize the JSON string into a HashMap
                    HashMap<String, Object> jsonValue = RulesConstants.getObjectMapper().readValue(
                            iterate.getValue().toString(), HashMap.class);
                    HashMap<String, Object> updatedMsg = removeNullValuesInJsonAttributes(jsonValue);
                    // sets the modified values back to original message
                    resultMsg.put(iterate.getKey(), updatedMsg);
                } else {
                    if (iterate.getValue() == null || iterate.getValue().toString().isEmpty()) {
                        resultMsg.remove(iterate.getKey());
                    } else {
                        resultMsg.put(iterate.getKey(), iterate.getValue()); // Add non-null values
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Exception occurred while trying to remove null/empty values from json attributes: " + e);
        }
        return resultMsg;
    }

    public HashMap<String, Object> mergeUpdateJsonValues(Map<String, Object> incomingMsg, Map<String, Object> cachedMsg, boolean isLateAlarm) {
        try {
            for (Map.Entry<String, Object> iterate : incomingMsg.entrySet()) {
                if (!isLateAlarm) {
                    if (iterate.getValue() != null && !iterate.getValue().toString().isEmpty()) {
                        // check if value itself is another json
                        if (checkIfJsonValue(iterate.getValue())) {
                            if (cachedMsg.get(iterate.getKey()) != null) {
                                HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(
                                        RulesConstants.getObjectMapper().readValue(
                                                iterate.getValue().toString(), HashMap.class),
                                        (HashMap<String, Object>) cachedMsg.get(iterate.getKey()), isLateAlarm);
                                cachedMsg.put(iterate.getKey(), updatedMsg);
                            } else {
                                // if the key not already present in cache, remove null values and update in cachedMsg
                                cachedMsg.put(iterate.getKey(), removeNullValuesInJsonAttributes(
                                        RulesConstants.getObjectMapper().readValue(iterate.getValue().toString(), HashMap.class)));
                            }
                        } else {
                            cachedMsg.put(iterate.getKey(), iterate.getValue());
                        }
                    }
                } else { // late alarm
                    if (iterate.getValue() != null && !iterate.getValue().toString().isEmpty()) {
                        // check if the key is present in cached alarm & check if its a json value or not
                        if (cachedMsg.get(iterate.getKey()) != null && checkIfJsonValue(cachedMsg.get(iterate.getKey()))) {
                            HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(
                                    RulesConstants.getObjectMapper().readValue(
                                            iterate.getValue().toString(), HashMap.class),
                                    (HashMap<String, Object>) cachedMsg.get(iterate.getKey()), isLateAlarm);
                            cachedMsg.put(iterate.getKey(), updatedMsg);
                        } else if (cachedMsg.get(iterate.getKey()) == null) {
                            cachedMsg.put(iterate.getKey(), iterate.getValue());
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Exception occurred while trying to merge update JsonValues: " + e + " and incoming message : " + incomingMsg);
        }
        return (HashMap<String, Object>) cachedMsg;
    }

    public boolean checkIfJsonValue(Object obj) {
        boolean isJson = false;
        try {
            String jsonString = RulesConstants.getObjectMapper().writeValueAsString(obj).trim();
            // Check if the string is a valid JSON object or array
            isJson = jsonString.startsWith("{") || jsonString.startsWith("[");
        } catch (JsonProcessingException e) {
            return isJson;
        }
        return isJson;
    }
}
```

### Summary of Changes:
- **Initialization of `resultMsg`**: Added initialization of `resultMsg` in `removeNullValuesInJsonAttributes`.
- **Deserialization Logic**: Updated the logic to deserialize JSON strings into `HashMap` before processing.
- **Improved JSON Check**: Adjusted the `checkIfJsonValue` method to check for both JSON objects and arrays.

These changes should resolve the `MismatchedInputException` you were encountering.