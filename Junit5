import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static org.mockito.Mockito.when;

class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private int i;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        i = 0;
        ukCount = new AtomicInteger(0);
        sourceSys = "test";
    }

    @Test
    void testProcessWithValidTrunk() {
        // Arrange
        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        CktLst cktLst = new CktLst();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("test-circuit");
        circuitInfo.setType("test-type");
        circuitInfo.setServiceType("test-service-type");
        circuitInfo.setBw("test-bandwidth");
        circuitInfo.setStatus("test-status");
        cktLst.setCircuitInfo(List.of(circuitInfo));
        trunkGroupComp.setCktLst(List.of(cktLst));
        clrComponent.setTrunkGroupComp(List.of(trunkGroupComp));

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        Assertions.assertFalse(links.isEmpty());
        Link circuit = links.get(0);
        Assertions.assertEquals(CommonWrapperConstants.CIRCUIT, circuit.getLinkType());
        Assertions.assertEquals("test-circuit", circuit.getAttribute("circuitName").getValue());
        Assertions.assertEquals("test-type", circuit.getAttribute("type").getValue());
        Assertions.assertEquals("test-service-type", circuit.getAttribute("serviceType").getValue());
        Assertions.assertEquals("test-bandwidth", circuit.getAttribute("bandwidth").getValue());
        Assertions.assertEquals("test-status", circuit.getAttribute("status").getValue());
    }

    @Test
    void testProcessWithValidPrevComponent() {
        // Arrange
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setShelfID("test-shelf-id");
        equipmentComp.setPortRef(List.of(portRef));
        prevClrComponent.setEquipmentComp(List.of(equipmentComp));
        clrComponentList.add(prevClrComponent);

        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        CktLst cktLst = new CktLst();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("test-circuit");
        circuitInfo.setType("test-type");
        circuitInfo.setServiceType("test-service-type");
        circuitInfo.setBw("test-bandwidth");
        circuitInfo.setStatus("test-status");
        cktLst.setCircuitInfo(List.of(circuitInfo));
        trunkGroupComp.setCktLst(List.of(cktLst));
        clrComponent.setTrunkGroupComp(List.of(trunkGroupComp));

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assert
        Assertions.assertFalse(links.isEmpty());
        Link circuit = links.get(0);
        Assertions.assertEquals(CommonWrapperConstants.CIRCUIT, circuit.getLinkType());
        Assertions.assertEquals("test-shelf-id", circuit.getSource());
    }

    @Test
    void testProcessWithInvalidTrunk() {
        // Arrange
        clrComponent.setTrunkGroupComp(new ArrayList<>());

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        Assertions.assertTrue(links.isEmpty());
    }

    @Test
    void testProcessWithInvalidPrevComponent() {
        // Arrange
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRAIL);
        Link prevTrail = new Link();
        prevTrail.setTarget(CommonWrapperConstants.DOUBLE_DASH);
        links.add(prevTrail);
        clrComponentList.add(prevClrComponent);

        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        CktLst cktLst = new CktLst();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("test-circuit");
        circuitInfo.setType("test-type");
        circuitInfo.setServiceType("test-service-type");
        circuitInfo.setBw("test-bandwidth");
        circuitInfo.setStatus("test-status");
        cktLst.setCircuitInfo(List.of(circuitInfo));
        trunkGroupComp.setCktLst(List.of(cktLst));
        clrComponent.setTrunkGroupComp(List.of(trunkGroupComp));

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assert
        Assertions.assertFalse(links.isEmpty());
        Link circuit = links.get(0);
        Assertions.assertEquals(CommonWrapperConstants.CIRCUIT, circuit.getLinkType());
        Assertions.assertNotEquals(CommonWrapperConstants.DOUBLE_DASH, circuit.getSource());
    }

    @Test
    void testProcessWithLastComponent() {
        // Arrange
        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        CktLst cktLst = new CktLst();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("test-circuit");
        circuitInfo.setType("test-type");
        circuitInfo.setServiceType("test-service-type");
        circuitInfo.setBw("test-bandwidth");
        circuitInfo.setStatus("test-status");
        cktLst.setCircuitInfo(List.of(circuitInfo));
        trunkGroupComp.setCktLst(List.of(cktLst));
        clrComponent.setTrunkGroupComp(List.of(trunkGroupComp));
        i = clrComponentList.size() - 1;

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        Assertions.assertFalse(links.isEmpty());
        Link circuit = links.get(0);
        Assertions.assertEquals(CommonWrapperConstants.CIRCUIT, circuit.getLinkType());
        Assertions.assertNotEquals(CommonWrapperConstants.DOUBLE_DASH, circuit.getTarget());
    }
}