import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class SpaceCollectorTest {

    @Test
    public void testSpaceCollectorBuilder_ValidValues_BuildsSuccessfully() {
        // Arrange
        String inputFilePath = "input.csv";
        Integer id = 1;
        String url = "http://example.com";
        Integer port = 8080;
        String outputFilePath = "output.csv";

        // Act
        SpaceCollector.SpaceCollectorBuilder builder = SpaceCollector.builder()
                .inputFilePath(inputFilePath)
                .id(id)
                .url(url)
                .port(port)
                .outputFilePath(outputFilePath);

        SpaceCollector spaceCollector = builder.build();

        // Assert
        assertNotNull(spaceCollector);
        assertEquals(inputFilePath, spaceCollector.getInputFilePath());
        assertEquals(id, spaceCollector.getId());
        assertEquals(url, spaceCollector.getUrl());
        assertEquals(port, spaceCollector.getPort());
        assertEquals(outputFilePath, spaceCollector.getOutputFilePath());
    }

    @Test
    public void testSpaceCollectorBuilder_NullInputFilePath_ThrowsNullPointerException() {
        assertThrows(NullPointerException.class, () -> {
            SpaceCollector.builder()
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.csv")
                .build();
        });
    }

    @Test
    public void testSpaceCollectorBuilder_NegativeId_ThrowsIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> {
            SpaceCollector.builder()
                .inputFilePath("input.csv")
                .id(-1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.csv")
                .build();
        });
    }

    @Test
    public void testSpaceCollectorBuilder_InvalidUrl_ThrowsIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> {
            SpaceCollector.builder()
                .inputFilePath("input.csv")
                .id(1)
                .url("invalid-url")
                .port(8080)
                .outputFilePath("output.csv")
                .build();
        });
    }

    @Test
    public void testSpaceCollectorBuilder_NegativePort_ThrowsIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> {
            SpaceCollector.builder()
                .inputFilePath("input.csv")
                .id(1)
                .url("http://example.com")
                .port(-8080)
                .outputFilePath("output.csv")
                .build();
        });
    }

    // Add more test cases for delimiters, fileType, and other edge cases
}