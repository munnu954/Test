@ExtendWith(MockitoExtension.class)
class FlinkApiControllerTest {

    @InjectMocks
    private FlinkApiController flinkApiController;

    @Mock
    private KafkaAuditProducer kafkaAuditProducer;

    @Mock
    private KafkaConsumer kafkaConsumer;

    @Mock
    private RestTemplate restTemplate;

    private UnifiedAuditMessage auditMsg;
    private String fileType;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        auditMsg = new UnifiedAuditMessage();
        fileType = ".csv";
    }
}

@Test
@DisplayName("AC1: Transformation job submission is successful")
void testTriggerJobSuccess() throws Exception {
    // Given
    String jobId = "123";
    String jobStatus = JobStatus.FLINK_JOB_SUBMITTED.toString();
    when(restTemplate.postForEntity(anyString(), any(HttpEntity.class), eq(String.class)))
            .thenReturn(new ResponseEntity<>(createJobResponse(jobId), HttpStatus.OK));

    // When
    String result = flinkApiController.triggerJob(auditMsg, fileType);

    // Then
    verify(kafkaAuditProducer, times(1))
            .createMessageAndLog(anyString(), anyString(), anyInt(), anyString(), anyString(), anyString(),
                    anyString(), anyLong(), anyLong(), anyLong(), anyString(), anyString(), anyString(), anyString(),
                    eq(jobStatus));
    verifyNoMoreInteractions(kafkaAuditProducer);
    assertEquals("Job submitted", result);
}

private String createJobResponse(String jobId) {
    return "{\"jobid\":\"" + jobId + "\"}";
}