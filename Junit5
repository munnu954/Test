To achieve 100% code coverage for the `saveEvents` and `renderEvents` methods of the `EventManager` class, particularly focusing on the catch blocks for `SystemException` and `Exception`, you'll want to create JUnit 5 test cases that simulate these exceptions being thrown. Below is an example of how you might write these tests:

### EventManagerTest.java

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.List;

@ExtendWith(MockitoExtension.class)
public class EventManagerTest {

    @Mock
    private EventsRepository eventsRepository;

    @Mock
    private EventsValidator validator;

    @InjectMocks
    private EventManager eventManager;

    private EventSaveRequest eventSaveRequest;
    private EventSearchRequest eventSearchRequest;

    @BeforeEach
    public void setUp() {
        eventSaveRequest = new EventSaveRequest();
        eventSearchRequest = new EventSearchRequest();
        eventSearchRequest.setServiceHeader(new ServiceHeader());
    }

    @Test
    public void testSaveEvents_SystemException() throws SystemException {
        // Arrange
        doThrow(new SystemException("System error occurred")).when(validator).validateInsert(eventSaveRequest);

        // Act
        EventResponse response = eventManager.saveEvents(eventSaveRequest);

        // Assert
        assertEquals("FAILURE_CODE", response.getStatus().getCode());
        assertEquals("System error occurred", response.getStatus().getMessage());
    }

    @Test
    public void testRenderEvents_Exception() {
        // Arrange
        doThrow(new RuntimeException("Runtime exception occurred")).when(validator).validateRetrieve(eventSearchRequest);

        // Act
        EventSearchResponse response = eventManager.renderEvents(eventSearchRequest);

        // Assert
        assertEquals("INVALID_CODE", response.getStatus().getCode());
        assertEquals("Runtime exception occurred", response.getStatus().getMessage());
    }
}
```

### Explanation
1. **Mocks and Setup**: We use Mockito to mock the `EventsRepository` and `EventsValidator`. This allows us to simulate the behavior of these components without relying on their actual implementations.

2. **SystemException Test**: In `testSaveEvents_SystemException`, we simulate a `SystemException` by configuring the validator mock to throw this exception when `validateInsert` is called. Then, we verify that the `EventResponse` has the expected failure code and message.

3. **Exception Test**: In `testRenderEvents_Exception`, we simulate a generic `Exception` (in this case, `RuntimeException`) by making the validator mock throw it during `validateRetrieve`. We then check that the `EventSearchResponse` contains the appropriate error code and message.

This setup ensures that both the `SystemException` in `saveEvents` and the generic exception in `renderEvents` are covered for 100% code coverage in those specific catch blocks.