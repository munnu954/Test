To achieve 100% code coverage for the `HttpClientErrorException.NotFound` catch block in the `getAlarmDetailsById` method of the `ApiOperation` class, you can create a JUnit 5 test case that simulates a scenario where a `HttpClientErrorException.NotFound` exception is thrown.

Below is the JUnit 5 test code to cover that specific catch block:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

@ExtendWith(MockitoExtension.class)
public class ApiOperationTest {

    @InjectMocks
    private ApiOperation apiOperation;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlarmGroupingParams configParams;

    @BeforeEach
    public void setUp() {
        // Set up the mock configuration parameters
        when(configParams.getAlarmFetchURL()).thenReturn("http://mock-url");
        when(configParams.getAlarmFilterKey()).thenReturn("mock-api-key");
    }

    @Test
    public void testGetAlarmDetailsById_NotFound() {
        String alarmIdentity = "12345";

        // Simulate HttpClientErrorException.NotFound
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));

        // Call the method
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Verify the result is null since the alarm was not found
        assertNull(result);

        // You can also verify that logging occurred if you have a logger
        // This can be done by mocking the logger and verifying the appropriate method was called
        // For example, if using a logger, you can verify:
        // verify(logger).warn("Alarm Identity not found in the DB. ErrorCode: 1003, ErrorMessage: Alarm Identity not found");
    }
}
```

### Explanation:
1. **Mocks**: We mock the `RestTemplate` and `AlarmGroupingParams` dependencies.
2. **Setup**: In the `setUp` method, we define the behavior of the mocked `AlarmGroupingParams` to return preset values.
3. **Test Method**: In the `testGetAlarmDetailsById_NotFound` method, we simulate a `HttpClientErrorException.NotFound` by configuring the `restTemplate` to throw this exception when called.
4. **Assertion**: We assert that the result is `null`, as expected when an alarm is not found.
5. **Logging Verification**: If logging is implemented, you could add verification for the logger to ensure the warning message is logged.

Make sure to include necessary imports and dependencies for Mockito and JUnit 5 in your project to run this test successfully.