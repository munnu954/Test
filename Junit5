import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class AlarmRepositoryImplTest {
    
    private AlarmRepositoryImpl alarmRepository;
    private PostgresConfiguration postgresConf;
    
    @BeforeEach
    public void setup() {
        postgresConf = mock(PostgresConfiguration.class);
        alarmRepository = new AlarmRepositoryImpl(postgresConf);
    }
    
    @Test
    public void testPostAlarmForEachIteration_ClearedState() {
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getAlarmStateMap().get("Cleared")).thenReturn(0);
        
        Alarm alarm = new Alarm();
        alarm.setState(1); // Assuming initial state is not Cleared
        
        alarmRepository.postAlarmForEachIteration(alarm, "compId");
        
        assertEquals(1, alarm.getCountResetFlag());
        assertEquals(0, alarm.getState());
    }
    
    @Test
    public void testPostAlarmForEachIteration_NonClearedState() {
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getAlarmStateMap().get("Cleared")).thenReturn(0);
        when(postgresConf.getAlarmStateMap().get("New")).thenReturn(1);
        
        Alarm alarm = new Alarm();
        alarm.setState(0); // Assuming initial state is Cleared
        
        alarmRepository.postAlarmForEachIteration(alarm, "compId");
        
        assertEquals(1, alarm.getCountResetFlag());
        assertEquals(1, alarm.getState());
    }
}