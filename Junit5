To achieve 100% test coverage for the specified conditional statement in the `validateIterator` method of the `MtnInsightsValidator` class, you need to write JUnit 5 test cases that cover all the branches of the `if` statement:

```java
import com.vz.s360.vbg.eventledger.exception.InvalidRequestException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        validator = new MtnInsightsValidator();
    }

    @Test
    public void testValidateIterator_MtnEmpty_InsightCategoryEmpty_InsightNameEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null);
        attributes.setInsightCategory(null);
        attributes.setInsightName(null);
        
        String logVal = "Test Log: ";
        
        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        String expectedMessage = logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ;
        assertEquals(expectedMessage, exception.getMessage());
    }

    @Test
    public void testValidateIterator_MtnEmpty_InsightCategoryEmpty_InsightNameNotEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null);
        attributes.setInsightCategory(null);
        attributes.setInsightName("Some Insight");

        String logVal = "Test Log: ";

        // No exception should be thrown.
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_MtnNotEmpty_InsightCategoryEmpty_InsightNameEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("123456");
        attributes.setInsightCategory(null);
        attributes.setInsightName(null);
        
        String logVal = "Test Log: ";

        // No exception should be thrown.
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_MtnNotEmpty_InsightCategoryEmpty_InsightNameNotEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("123456");
        attributes.setInsightCategory(null);
        attributes.setInsightName("Some Insight");

        String logVal = "Test Log: ";

        // No exception should be thrown.
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_MtnEmpty_InsightCategoryNotEmpty_InsightNameEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null);
        attributes.setInsightCategory("Category");
        attributes.setInsightName(null);
        
        String logVal = "Test Log: ";

        // No exception should be thrown.
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_MtnEmpty_InsightCategoryNotEmpty_InsightNameNotEmpty() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null);
        attributes.setInsightCategory("Category");
        attributes.setInsightName("Some Insight");

        String logVal = "Test Log: ";

        // No exception should be thrown.
        assertDoesNotThrow(() -> {
            validator.validateIterator(null, attributes, logVal);
        });
    }
}
```

### Explanation of the Test Cases:
1. **testValidateIterator_MtnEmpty_InsightCategoryEmpty_InsightNameEmpty**: Tests the exact branch where `mtn`, `insightCategory`, and `insightName` are all empty/null, to ensure the correct `InvalidRequestException` is thrown.

2. **testValidateIterator_MtnEmpty_InsightCategoryEmpty_InsightNameNotEmpty**: Tests when `mtn` and `insightCategory` are empty but `insightName` is not, ensuring no exception is thrown.

3. **testValidateIterator_MtnNotEmpty_InsightCategoryEmpty_InsightNameEmpty**: Tests when `mtn` is not empty but both `insightCategory` and `insightName` are empty, ensuring no exception is thrown.

4. **testValidateIterator_MtnNotEmpty_InsightCategoryEmpty_InsightNameNotEmpty**: Tests when `mtn` is not empty and `insightName` is not empty but `insightCategory` is empty, ensuring no exception is thrown.

5. **testValidateIterator_MtnEmpty_InsightCategoryNotEmpty_InsightNameEmpty**: Tests when `mtn` is empty and `insightCategory` is not empty but `insightName` is empty, ensuring no exception is thrown.

6. **testValidateIterator_MtnEmpty_InsightCategoryNotEmpty_InsightNameNotEmpty**: Tests when `mtn` is empty but both `insightCategory` and `insightName` are not empty, ensuring no exception is thrown.

These tests ensure that all branches of the specified conditional statements in the `validateIterator` method are covered, thus achieving the desired coverage.