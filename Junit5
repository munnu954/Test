@Test
void testCablePrevTypeIsNotCABLE() {
    // Arrange
    CableProcessor cableProcessor = CableProcessor.getInstance();
    String[] neTypesArray = {"NE1", "NE2"};
    List<Node> nodes = new ArrayList<>();
    List<Link> links = new ArrayList<>();
    ClrComponent clrComponent = new ClrComponent();
    List<ClrComponent> clrComponentList = new ArrayList<>();
    Map<String, List<Node>> clliNodeMap = new HashMap<>();
    CableComp cabObject = new CableComp();
    PortRef eqtObject = new PortRef();
    int i = 4; // Adjusted to avoid index out of bounds
    int targetCLRIndex = i - 2; // Adjusted to be within bounds

    // Add two CLR components to the list
    clrComponentList.add(new ClrComponent());
    clrComponentList.add(clrComponent);

    // Set data for cable component
    cabObject.setElementId("ElementId");
    cabObject.setCableName("CableName");
    cabObject.setType("Type");
    cabObject.setCablePairDetails(new ArrayList<>());

    // Set data for cable CLR component
    clrComponent.setType(CommonWrapperConstants.CABLE);
    clrComponent.setCableComp(List.of(cabObject));

    // Set data for previous CLR component
    ClrComponent prevClrComponent = new ClrComponent();
    prevClrComponent.setType(CommonWrapperConstants.PORT);
    clrComponentList.set(targetCLRIndex, prevClrComponent);

    // Set data for link
    Link cable = new Link();
    cable.setLinkType(clrComponent.getType());

    Node node = new Node();
    node.setShelfId(eqtObject.getShelfID());
    nodes.add(node);

    // Act
    cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, new AtomicInteger(), "sourceSys");

    // Assert
    assertTrue(links.isEmpty());
}

@Test
void testCablePrevTypeIsCABLE() {
    // Arrange
    CableProcessor cableProcessor = CableProcessor.getInstance();
    String[] neTypesArray = {"NE1", "NE2"};
    List<Node> nodes = new ArrayList<>();
    List<Link> links = new ArrayList<>();
    ClrComponent clrComponent = new ClrComponent();
    List<ClrComponent> clrComponentList = new ArrayList<>();
    Map<String, List<Node>> clliNodeMap = new HashMap<>();
    CableComp cabObject = new CableComp();
    PortRef eqtObject = new PortRef();
    int i = 4; // Adjusted to avoid index out of bounds
    int targetCLRIndex = i - 2; // Adjusted to be within bounds

    // Add two CLR components to the list
    clrComponentList.add(new ClrComponent());
    clrComponentList.add(clrComponent);

    // Set data for cable component
    cabObject.setElementId("ElementId");
    cabObject.setCableName("CableName");
    cabObject.setType("Type");
    cabObject.setCablePairDetails(new ArrayList<>());

    // Set data for cable CLR component
    clrComponent.setType(CommonWrapperConstants.CABLE);
    clrComponent.setCableComp(List.of(cabObject));

    // Set data for previous CLR component
    ClrComponent prevClrComponent = new ClrComponent();
    prevClrComponent.setType(CommonWrapperConstants.CABLE);
    clrComponentList.set(targetCLRIndex, prevClrComponent);

    // Set data for link
    Link cable = new Link();
    cable.setLinkType(clrComponent.getType());

    Node node = new Node();
    node.setShelfId(eqtObject.getShelfID());
    nodes.add(node);

    // Act
    cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, new AtomicInteger(), "sourceSys");

    // Assert
    assertEquals(links.size(), 1);
    assertEquals(links.get(0).getLinkType(), CommonWrapperConstants.CABLE);
    assertEquals(links.get(0).getSource(), node.getPortId());
    assertEquals(links.get(0).getTarget(), eqtObject.getPortID());
}