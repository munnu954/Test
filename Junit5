Sure, here's the equivalent JUnit 4 version of the test cases:

```java
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.HashMap;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class CoconutServiceVersion3Test {

    @InjectMocks
    private CoconutServiceVersion3 coconutServiceVersion3;

    @Test
    public void testQueryBasedOnParameter_withLocationCLLIAndSiteName() {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "abc123");
        queryParams.put("siteName", "site123");

        String finalQuery = coconutServiceVersion3.queryBasedOnParameter(queryParams);

        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY));
        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'abc123'"))); // contains locationCLLI condition
        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'site123'")));     // contains siteName condition
    }

    @Test
    public void testQueryBasedOnParameter_withLocationCLLIOnly() {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "abc123");

        String finalQuery = coconutServiceVersion3.queryBasedOnParameter(queryParams);

        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY));
        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'abc123'")));
        Assert.assertFalse(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME));
    }

    @Test
    public void testQueryBasedOnParameter_withSiteNameOnly() {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "site123");

        String finalQuery = coconutServiceVersion3.queryBasedOnParameter(queryParams);

        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY));
        Assert.assertFalse(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI));
        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'site123'")));
    }

    @Test
    public void testQueryBasedOnParameter_withoutLocationCLLIAndSiteName() {
        Map<String, Object> queryParams = new HashMap<>();

        String finalQuery = coconutServiceVersion3.queryBasedOnParameter(queryParams);

        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY));
        Assert.assertFalse(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI));
        Assert.assertFalse(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME));
    }
}
```

The main differences between the JUnit 4 and JUnit Jupiter versions are:

1. The class is annotated with `@RunWith(MockitoJUnitRunner.class)` instead of `@ExtendWith(MockitoExtension.class)`.
2. The test methods are annotated with `@Test` instead of `@Test`.
3. The assertion methods use `org.junit.Assert` instead of `org.junit.jupiter.api.Assertions`.

The rest of the test cases are the same as the JUnit Jupiter version, covering the same four branches of the `queryBasedOnParameter` method.