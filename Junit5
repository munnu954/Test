To cover the additional branches in the `validate(UserInsightsRequest request)` and `validate(UserInsightsSearchRequest request)` methods, we need to write more test cases that specifically target those scenarios. Below are the additional JUnit 5 test cases to achieve 100% coverage.

### Additional JUnit 5 Test Cases

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

public class UserInsightsValidatorTest {

    private UserInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        validator = new UserInsightsValidator();
    }

    @Test
    public void testValidateWithValidUserInsightsRequestListKeyAttributes() {
        UserInsightsRequest request = createValidUserInsightsRequestWithListKeyAttributes();
        Assertions.assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidateWithEmptyListKeyAttributes() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setListKeyAttributes(new UserInsightsAttributes[]{new UserInsightsAttributes()}); // Empty attributes
        request.setServiceHeader(createValidServiceHeader());

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(request);
        });

        Assertions.assertEquals("ListKeyAttributesLOGGER_MESSAGE_USER_INSIGHTS", exception.getMessage());
    }

    @Test
    public void testValidateUserInsightsSearchRequestWithMissingRequiredFields() {
        UserInsightsSearchRequest searchRequest = new UserInsightsSearchRequest();
        searchRequest.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId(""); // Missing userId
        searchParam.setEcpdId(""); // Missing ecpdId
        searchParam.setInsightCategory(new String[]{});
        searchParam.setInsightName(new String[]{});
        searchRequest.setServiceRequest(searchParam);

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(searchRequest);
        });

        Assertions.assertEquals("ServiceRequest Ecpd Id, User Id, Insight Category and Insight Name are required.", exception.getMessage());
    }

    @Test
    public void testValidateUserInsightsSearchRequestWithValidInsightCategoryAndName() {
        UserInsightsSearchRequest searchRequest = new UserInsightsSearchRequest();
        searchRequest.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId("validUserId");
        searchParam.setEcpdId("validEcpdId");
        searchParam.setInsightCategory(new String[]{"validCategory"});
        searchParam.setInsightName(new String[]{"validName"});
        searchRequest.setServiceRequest(searchParam);

        Assertions.assertDoesNotThrow(() -> validator.validate(searchRequest));
    }

    private UserInsightsRequest createValidUserInsightsRequestWithListKeyAttributes() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        UserInsightsAttributes[] listKeyAttributes = {
            createValidUserInsightsAttributes(),
            createValidUserInsightsAttributes() // Adding a second valid attribute
        };
        request.setListKeyAttributes(listKeyAttributes);
        request.setServiceHeader(createValidServiceHeader());
        return request;
    }

    // Existing helper methods...
    private UserInsightsRequest createValidUserInsightsRequest() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setKeyAttributes(createValidUserInsightsAttributes());
        request.setServiceHeader(createValidServiceHeader());
        return request;
    }

    private UserInsightsAttributes createValidUserInsightsAttributes() {
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("validUserId");
        attributes.setEcpdId("validEcpdId");
        attributes.setInsightCategory("validCategory");
        attributes.setInsightName("validName");
        return attributes;
    }

    private ServiceHeader createValidServiceHeader() {
        ServiceHeader header = new ServiceHeader();
        header.setClientId("validClientId");
        header.setClientTransactionId("validTransactionId");
        header.setServiceName("validServiceName");
        return header;
    }

    private UserInsightsSearchRequest createValidUserInsightsSearchRequest() {
        UserInsightsSearchRequest request = new UserInsightsSearchRequest();
        request.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId("validUserId");
        searchParam.setEcpdId("validEcpdId");
        searchParam.setInsightCategory(new String[]{"validCategory"});
        searchParam.setInsightName(new String[]{"validName"});
        request.setServiceRequest(searchParam);
        return request;
    }
}
```

### Additional Test Cases Explained:

1. **testValidateWithValidUserInsightsRequestListKeyAttributes**: This test creates a valid `UserInsightsRequest` with valid `listKeyAttributes`, ensuring that the `validateIterator` method is invoked correctly for each item in the list.

2. **testValidateWithEmptyListKeyAttributes**: This test checks the scenario where an empty `UserInsightsAttributes` is provided in the `listKeyAttributes`, ensuring that the appropriate error message is thrown.

3. **testValidateUserInsightsSearchRequestWithMissingRequiredFields**: This test ensures that if required fields are missing in `UserInsightsSearchParam`, the correct exception and message are thrown.

4. **testValidateUserInsightsSearchRequestWithValidInsightCategoryAndName**: This test checks that valid categories and names in the search request do not throw any exceptions, ensuring that the method works correctly with valid input.

### Summary:
These additional test cases should now ensure that all branches in the `UserInsightsValidator` class are covered, including the else-if branches you mentioned. With this, you should achieve 100% code coverage for the `UserInsightsValidator` class.