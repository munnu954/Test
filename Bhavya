public static class CsvtoJsonRTROCSnTransformer extends RichFlatMapFunction<String, String> {
    private Map<String, String> headersMap = new LinkedHashMap<>();
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    private String fileName;

    public CsvtoJsonRTROCSnTransformer(String fileName) {
        this.fileName = fileName;
    }

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());

        // Processing headers from line 1 of the CSV
        String line1 = lines[0];
        if (!line1.isEmpty()) {
            String[] columns = line1.split(",");
            for (String column : columns) {
                String[] keyValuePair = column.split("=");
                if (keyValuePair.length == 2) {
                    headersMap.put(keyValuePair[0].trim(), keyValuePair[1].trim());
                }
            }
        }

        for (int i = 3; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");
            if (headersMap.size() < 2 || headersMap.size() > arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }
            JSONObject obj = new JSONObject();
            obj.put("FILENAME", fileName);

            // Processing key-value pairs from columns 1 and 2
            for (Map.Entry<String, String> entry : headersMap.entrySet()) {
                obj.put(entry.getKey(), entry.getValue());
            }

            // Processing additional key-value pairs from columns 3 onwards
            int keyIndex = 2;
            for (int j = keyIndex; j < Math.min(arr.length, keyIndex + headersMap.size() - 2); j++) {
                String jsonkey = headersMap.get(Integer.toString(j));
                String jsonvalue = arr[j].trim().replace("\"", "");
                obj.put(jsonkey, jsonvalue);
            }

            this.successIntCounter.add(1);
            collector.collect(obj.toString());
        }
    }
}