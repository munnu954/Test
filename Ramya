import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.flink.util.Collector;

import java.io.IOException;

public class CsvToJsonConversion implements FlatMapFunction<String, String> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void flatMap(String input, Collector<String> collector) {
        try {
            String[] rows = input.split("\n");

            ObjectNode jsonObject = objectMapper.createObjectNode();
            String currentKey = "";

            for (String row : rows) {
                String[] columns = row.split("\"");

                for (String col : columns) {
                    if (!col.trim().isEmpty() && !col.equals(",")) {
                        if (col.startsWith(",") && currentKey.isEmpty()) {
                            currentKey = col.substring(1, col.length() - 1);
                        } else {
                            String jsonKey = (currentKey.isEmpty()) ? col : currentKey;
                            String jsonValue = (currentKey.isEmpty()) ? "" : columns[columns.length - 1].trim();

                            if (jsonObject.has(jsonKey)) {
                                ObjectNode nestedObject = (ObjectNode) jsonObject.get(jsonKey);
                                nestedObject.set(col, objectMapper.valueToTree(jsonValue));
                            } else {
                                jsonObject.set(jsonKey, objectMapper.valueToTree(jsonValue));
                            }
                        }
                    }
                }
                currentKey = "";
            }

            collector.collect(jsonObject.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
