import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class FlinkApiControllerTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private FlinkApiController flinkApiController;

    @Value("${flink.api.url}")
    private String flinkApiUrl;

    @Value("${flink.job.jarid.xml}")
    private String flinkJobXmlJarid;

    @Value("${flink.job.jarid.txt}")
    private String flinkJobtxtJarid;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        ReflectionTestUtils.setField(flinkApiController, "flinkApiUrl", flinkApiUrl);
        ReflectionTestUtils.setField(flinkApiController, "flinkJobXmlJarid", flinkJobXmlJarid);
        ReflectionTestUtils.setField(flinkApiController, "flinkJobtxtJarid", flinkJobtxtJarid);
    }

    @Test
    void testTriggerJobWithInvalidJobSubmitUrl() {
        // Arrange
        String fileType = ".csv";
        SpaceCollector collector = new SpaceCollector();
        collector.setInputFilePath("input.csv");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        String programArgs = "programArgs";
        String jobSubmitUrl = flinkApiUrl + "/jars/" + flinkJobXmlJarid + "/run";

        HttpEntity<String> request = new HttpEntity<>(headers);

        when(restTemplate.postForEntity(eq(jobSubmitUrl), eq(request), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.BAD_REQUEST));

        // Act
        String result = flinkApiController.triggerJob(collector, fileType);

        // Assert
        assertEquals("Job is not triggered", result);
        verify(restTemplate, times(1)).postForEntity(eq(jobSubmitUrl), eq(request), eq(String.class));
        verifyNoMoreInteractions(restTemplate);
    }
}