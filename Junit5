@Test
void testConvertToMtnInsights() {
    MtnInsightsEntity entity1 = new MtnInsightsEntity();
    MtnInsightsPK pk1 = new MtnInsightsPK();
    pk1.setInsightName("MTNOUTAGE");
    pk1.setEcpdId("123");
    pk1.setMtn("456");
    pk1.setInsightCategory("Outage");
    entity1.setPk(pk1);
    entity1.setInsightValues("Test Value 1");
    entity1.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    MtnInsightsEntity entity2 = new MtnInsightsEntity();
    MtnInsightsPK pk2 = new MtnInsightsPK();
    pk2.setInsightName("MTNOUTAGECASE");
    pk2.setEcpdId("123");
    pk2.setMtn("456");
    pk2.setInsightCategory("Outage");
    entity2.setPk(pk2);
    entity2.setInsightValues("Test Value 2");
    entity2.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    List<MtnInsightsEntity> entities = Arrays.asList(entity1, entity2);
    boolean flag = true;

    InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, flag);

    assertNotNull(result);
    CategoryMtnInsights[] categoryInsights = result.getCategoryInsights();
    assertEquals(1, categoryInsights.length);

    CategoryMtnInsights categoryInsight = categoryInsights[0];
    assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", categoryInsight.getCategory());

    NameValuePair[] insights = categoryInsight.getInsights();
    assertEquals(1, insights.length);

    NameValuePair insight = insights[0];
    assertEquals("MTNOUTAGE", insight.getName());
    assertEquals("Test Value 1,Test Value 2", insight.getValue());
}

@Test
void testConvertToMtnInsights_NoCases() {
    MtnInsightsEntity entity1 = new MtnInsightsEntity();
    MtnInsightsPK pk1 = new MtnInsightsPK();
    pk1.setInsightName("MTNOUTAGE");
    pk1.setEcpdId("123");
    pk1.setMtn("456");
    pk1.setInsightCategory("Outage");
    entity1.setPk(pk1);
    entity1.setInsightValues("Test Value 1");
    entity1.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    List<MtnInsightsEntity> entities = Collections.singletonList(entity1);
    boolean flag = true;

    InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, flag);

    assertNotNull(result);
    CategoryMtnInsights[] categoryInsights = result.getCategoryInsights();
    assertEquals(1, categoryInsights.length);

    CategoryMtnInsights categoryInsight = categoryInsights[0];
    assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", categoryInsight.getCategory());

    NameValuePair[] insights = categoryInsight.getInsights();
    assertEquals(1, insights.length);

    NameValuePair insight = insights[0];
    assertEquals("MTNOUTAGE", insight.getName());
    assertEquals("Test Value 1", insight.getValue());
}

@Test
void testConvertToMtnInsights_NoOutage() {
    MtnInsightsEntity entity1 = new MtnInsightsEntity();
    MtnInsightsPK pk1 = new MtnInsightsPK();
    pk1.setInsightName("OTHER_INSIGHT");
    pk1.setEcpdId("123");
    pk1.setMtn("456");
    pk1.setInsightCategory("Other");
    entity1.setPk(pk1);
    entity1.setInsightValues("Test Value 1");
    entity1.setCatagory("NON-OUTAGE_CATEGORY");

    List<MtnInsightsEntity> entities = Collections.singletonList(entity1);
    boolean flag = true;

    InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, flag);

    assertNotNull(result);
    CategoryMtnInsights[] categoryInsights = result.getCategoryInsights();
    assertEquals(1, categoryInsights.length);

    CategoryMtnInsights categoryInsight = categoryInsights[0];
    assertEquals("NON-OUTAGE_CATEGORY", categoryInsight.getCategory());

    NameValuePair[] insights = categoryInsight.getInsights();
    assertEquals(1, insights.length);

    NameValuePair insight = insights[0];
    assertEquals("OTHER_INSIGHT", insight.getName());
    assertEquals("Test Value 1", insight.getValue());
}

@Test
void testConvertToMtnInsights_NoData() {
    List<MtnInsightsEntity> entities = Collections.emptyList();
    boolean flag = true;

    InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, flag);

    assertNotNull(result);
    CategoryMtnInsights[] categoryInsights = result.getCategoryInsights();
    assertEquals(0, categoryInsights.length);
}

@Test
void testConvertToMtnInsights_FlagFalse() {
    MtnInsightsEntity entity1 = new MtnInsightsEntity();
    MtnInsightsPK pk1 = new MtnInsightsPK();
    pk1.setInsightName("MTNOUTAGE");
    pk1.setEcpdId("123");
    pk1.setMtn("456");
    pk1.setInsightCategory("Outage");
    entity1.setPk(pk1);
    entity1.setInsightValues("Test Value 1");
    entity1.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    List<MtnInsightsEntity> entities = Collections.singletonList(entity1);
    boolean flag = false;

    InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, flag);

    assertNotNull(result);
    CategoryMtnInsights[] categoryInsights = result.getCategoryInsights();
    assertEquals(1, categoryInsights.length);

    CategoryMtnInsights categoryInsight = categoryInsights[0];
    assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", categoryInsight.getCategory());

    NameValuePair[] insights = categoryInsight.getInsights();
    assertEquals(1, insights.length);

    NameValuePair insight = insights[0];
    assertEquals("MTNOUTAGE", insight.getName());
    assertEquals("Test Value 1", insight.getValue());
}

@Test
void testConvertToMtnInsights_NetworkOutageAndNetworkOutageCase() {
    MtnInsightsEntity entity1 = new MtnInsightsEntity();
    MtnInsightsPK pk1 = new MtnInsightsPK();
    pk1.setInsightName("MTNOUTAGE");
    pk1.setEcpdId("123");
    pk1.setMtn("456");
    pk1.setInsightCategory("Outage");
    entity1.setPk(pk1);
    entity1.setInsightValues("Test Value 1");
    entity1.setProdId("789");
    entity1.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    MtnInsightsEntity entity2 = new MtnInsightsEntity();
    MtnInsightsPK pk2 = new MtnInsightsPK();
    pk2.setInsightName("MTNOUTAGECASE");
    pk2.setEcpdId("123");
    pk2.setMtn("456");
    pk2.setInsightCategory("Outage");
    entity2.setPk(pk2);
    entity2.setInsightValues("Test Value 2");
    entity2.setProdId("789");
    entity2.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    AggregateInsightsEntity aggrInsightsEntity = new AggregateInsightsEntity();
    aggrInsightsEntity.setPkAggrCategory("Outage");
    aggrInsightsEntity.setPkAggrProdId("789");
    aggrInsightsEntity.setAggrValue("Aggregated Value");

    when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(eq("Outage"), eq("789")))
            .thenReturn(aggrInsightsEntity);

    List<MtnInsightsEntity> entities = Arrays.asList(entity1, entity2);
    boolean flag = true;

    InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, flag);

    assertNotNull(result);
    CategoryMtnInsights[] categoryInsights = result.getCategoryInsights();
    assertEquals(1, categoryInsights.length);

    CategoryMtnInsights categoryInsight = categoryInsights[0];
    assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", categoryInsight.getCategory());

    NameValuePair[] insights = categoryInsight.getInsights();
    assertEquals(1, insights.length);

    NameValuePair insight = insights[0];
    assertEquals("MTNOUTAGE", insight.getName());
    assertEquals("Test Value 1Aggregated Value", insight.getValue());
}

@Test
void testConvertToMtnInsights_NetworkOutage_NoAggregatedValue() {
    MtnInsightsEntity entity1 = new MtnInsightsEntity();
    MtnInsightsPK pk1 = new MtnInsightsPK();
    pk1.setInsightName("MTNOUTAGE");
    pk1.setEcpdId("123");
    pk1.setMtn("456");
    pk1.setInsightCategory("Outage");
    entity1.setPk(pk1);
    entity1.setInsightValues("Test Value 1");
    entity1.setProdId("789");
    entity1.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(eq("Outage"), eq("789")))
            .thenReturn(null);

    List<MtnInsightsEntity> entities = Collections.singletonList(entity1);
    boolean flag = true;

    InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, flag);

    assertNotNull(result);
    CategoryMtnInsights[] categoryInsights = result.getCategoryInsights();
    assertEquals(1, categoryInsights.length);

    CategoryMtnInsights categoryInsight = categoryInsights[0];
    assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", categoryInsight.getCategory());

    NameValuePair[] insights = categoryInsight.getInsights();
    assertEquals(1, insights.length);

    NameValuePair insight = insights[0];
    assertEquals("MTNOUTAGE", insight.getName());
    assertEquals("Test Value 1", insight.getValue());
}

@Test
void testConvertToMtnInsights_NetworkOutageCase_NoMatch() {
    MtnInsightsEntity entity1 = new MtnInsightsEntity();
    MtnInsightsPK pk1 = new MtnInsightsPK();
    pk1.setInsightName("MTNOUTAGE");
    pk1.setEcpdId("123");
    pk1.setMtn("456");
    pk1.setInsightCategory("Outage");
    entity1.setPk(pk1);
    entity1.setInsightValues("Test Value 1");
    entity1.setProdId("789");
    entity1.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    List<MtnInsightsEntity> entities = Collections.singletonList(entity1);
    boolean flag = true;

    InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, flag);

    assertNotNull(result);
    CategoryMtnInsights[] categoryInsights = result.getCategoryInsights();
    assertEquals(1, categoryInsights.length);

    CategoryMtnInsights categoryInsight = categoryInsights[0];
    assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", categoryInsight.getCategory());

    NameValuePair[] insights = categoryInsight.getInsights();
    assertEquals(1, insights.length);

    NameValuePair insight = insights[0];
    assertEquals("MTNOUTAGE", insight.getName());
    assertEquals("Test Value 1", insight.getValue());
}

@Test
void testConvertToMtnInsights_NetworkOutageCase_Match() {
    MtnInsightsEntity entity1 = new MtnInsightsEntity();
    MtnInsightsPK pk1 = new MtnInsightsPK();
    pk1.setInsightName("MTNOUTAGE");
    pk1.setEcpdId("123");
    pk1.setMtn("456");
    pk1.setInsightCategory("Outage");
    entity1.setPk(pk1);
    entity1.setInsightValues("Test Value 1");
    entity1.setProdId("789");
    entity1.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    MtnInsightsEntity entity2 = new MtnInsightsEntity();
    MtnInsightsPK pk2 = new MtnInsightsPK();
    pk2.setInsightName("MTNOUTAGECASE");
    pk2.setEcpdId("123");
    pk2.setMtn("456");
    pk2.setInsightCategory("Outage");
    entity2.setPk(pk2);
    entity2.setInsightValues("Test Value 2");
    entity2.setProdId("789");
    entity2.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    when(insightsRepository.findBuPkEcpdIdAndPkMtnAndProdIdAndPkInsightCategoryInAndPkInsightNameIn(eq("123"), eq("456"), eq("789"), eq("Outage"), 
            argThat(argument -> argument.contains("MTNOUTAGECASE")))
        .thenReturn(entity2);

    List<MtnInsightsEntity> entities = Collections.singletonList(entity1);
    boolean flag = true;

    InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, flag);

    assertNotNull(result);
    CategoryMtnInsights[] categoryInsights = result.getCategoryInsights();
    assertEquals(1, categoryInsights.length);

    CategoryMtnInsights categoryInsight = categoryInsights[0];
    assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", categoryInsight.getCategory());

    NameValuePair[] insights = categoryInsight.getInsights();
    assertEquals(2, insights.length);

    Map<String, String> insightMap = Arrays.stream(insights)
            .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));

    assertEquals("Test Value 1", insightMap.get("MTNOUTAGE"));
    assertEquals("Test Value 2", insightMap.get("MTNOUTAGECASE"));
}

@Test
void testConvertToMtnInsights_IOException() {
    MtnInsightsEntity entity1 = new MtnInsightsEntity();
    MtnInsightsPK pk1 = new MtnInsightsPK();
    pk1.setInsightName("MTNOUTAGE");
    pk1.setEcpdId("123");
    pk1.setMtn("456");
    pk1.setInsightCategory("Outage");
    entity1.setPk(pk1);
    entity1.setInsightValues("Test Value 1");
    entity1.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");

    List<MtnInsightsEntity> entities = Collections.singletonList(entity1);
    boolean flag = true;

    doThrow(new JsonProcessingException("Error") {}).when(mtnInsightsManager).obj.writeValueAsString(any());

    assertThrows(SystemException.class, () -> mtnInsightsManager.convertToMtnInsights(entities, flag));
}

@Test
void testConvert_MtnInsights() throws SystemException {
    MtnInsightsAttributes attr = new MtnInsightsAttributes();
    attr.setEcpdId("123");
    attr.setMtn("456");
    attr.setInsightCategory("Outage");
    attr.setInsightName("MTNOUTAGE");
    attr.setOutageId("789");
    attr.setUpdateBy("User");
    attr.setUpdateTs(new Date().getTime());
    attr.setInsightValues("Test Value");

    MtnInsightsEntity result = mtnInsightsManager.convert(attr);

    assertNotNull(result);
    assertEquals("123", result.getPk().getEcpdId());
    assertEquals("456", result.getPk().getMtn());
    assertEquals("Outage", result.getPk().getInsightCategory());
    assertEquals("MTNOUTAGE", result.getPk().getInsightName());
    assertEquals("789", result.getProdId());
    assertEquals("User", result.getUpdateBy());
    assertEquals("Test Value", result.getInsightValues());
    assertEquals(requested_by, result.getRequested_by());
}

@Test
void testConvert_MtnInsights_Exception() {
    MtnInsightsAttributes attr = new MtnInsightsAttributes();
    attr.setEcpdId("123");
    attr.setMtn("456");
    attr.setInsightCategory("Outage");
    attr.setInsightName("MTNOUTAGE");
    attr.setOutageId("789");
    attr.setUpdateBy("User");
    attr.setUpdateTs(new Date().getTime());
    attr.setInsightValues("Test Value");

    doThrow(new JsonProcessingException("Error") {}).when(mtnInsightsManager).obj.writeValueAsString(any());

    assertThrows(SystemException.class, () -> mtnInsightsManager.convert(attr));
}

@Test
void testConvertAll_MtnInsights() throws SystemException {
    MtnInsightsAttributes attr = new MtnInsightsAttributes();
    attr.setEcpdId("123");
    attr.setMtn("456");
    attr.setInsightCategory("Outage");
    attr.setInsightName("MTNOUTAGE");
    attr.setOutageId("789");
    attr.setUpdateBy("User");
    attr.setUpdateTs(new Date().getTime());
    attr.setInsightValues("Test Value");

    List<MtnInsightsAttributes> attrsList = Collections.singletonList(attr);

    List<MtnInsightsEntity> result = mtnInsightsManager.convert(attrsList);

    assertNotNull(result);
    assertEquals(1, result.size());

    MtnInsightsEntity convertedEntity = result.get(0);
    assertEquals("123", convertedEntity.getPk().getEcpdId());
    assertEquals("456", convertedEntity.getPk().getMtn());
    assertEquals("Outage", convertedEntity.getPk().getInsightCategory());
    assertEquals("MTNOUTAGE", convertedEntity.getPk().getInsightName());
    assertEquals("789", convertedEntity.getProdId());
    assertEquals("User", convertedEntity.getUpdateBy());
    assertEquals("Test Value", convertedEntity.getInsightValues());
    assertEquals(requested_by, convertedEntity.getRequested_by());
}

@Test
void testConvertEcpd_MtnInsights() throws SystemException {
    MtnInsightsAttributes attr = new MtnInsightsAttributes();
    attr.setEcpdId("123");
    attr.setMtn("456");
    attr.setInsightCategory("Outage");
    attr.setInsightName("MTNOUTAGE");
    attr.setOutageId("789");
    attr.setUpdateBy("User");
    attr.setUpdateTs(new Date().getTime());
    attr.setInsightValues("Test Value");

    EcpdByKeyEntity result = mtnInsightsManager.convertEcpd(attr);

    assertNotNull(result);
    assertEquals("123", result.getPk().getEcpdId());
    assertEquals("456", result.getPk().getMtn());
    assertEquals("999999", result.getPk().getUserId());
    assertEquals("customer_mtn_insights", result.getPk().getTableName());
    assertEquals("999999", result.getPk().getAccountNo());
    assertEquals("null", result.getSensitivityLevel());
    assertEquals("null", result.getSensitivityToken);
}

@Test
void testConvertEcpd