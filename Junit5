import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.util.Calendar;
import java.util.Date;

import org.junit.jupiter.api.Test;

public class KafkaFalloutServiceTest {

    private KafkaFalloutRepository repository = mock(KafkaFalloutRepository.class);
    private KafkaFalloutService service = new KafkaFalloutService(repository);

    @Test
    public void testHasRecords() {
        when(repository.count()).thenReturn(1L);
        
        boolean result = service.hasRecords();
        
        assertEquals(true, result);
    }

    @Test
    public void testSaveFailedRecords() {
        KafkaFailedMessagesPK id = new KafkaFailedMessagesPK();
        id.setTransactionId("123");
        id.setTopicName("TestTopic");
        id.setCreatedDate(Calendar.getInstance().getTime());
        String topicName = "TestTopic";
        String key = "123";
        String payload = "TestPayload";
        String insightName = "TestInsight";
        char sensitivityChecked = 'Y';
        
        service.saveFailedRecords(topicName, key, payload, insightName, sensitivityChecked);
        
        verify(repository, times(1)).save(any(KafkaFailedMessagesEntity.class));
    }

    @Test
    public void testPurgeRepublishedRecord() {
        KafkaFailedMessagesPK id = new KafkaFailedMessagesPK();
        id.setTransactionId("123");
        
        service.purgeRepublishedRecord(id);
        
        verify(repository, times(1)).deleteByIdTransactionId("123");
    }
}
