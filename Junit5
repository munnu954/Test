import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Collections;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.ListTopicsOptions;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaAdmin;

@ExtendWith(MockitoExtension.class)
public class KafkaTopicUtilTest {

    @Mock
    private KafkaAdmin kafkaAdmin;

    @Test
    public void testIsKafkaTopicPresent() throws ExecutionException, InterruptedException {
        // Arrange
        KafkaTopicUtil kafkaTopicUtil = new KafkaTopicUtil();
        kafkaTopicUtil.bootstarpServers = "localhost:9092";
        String topicName = "test-topic";

        AdminClient adminClient = mock(AdminClient.class);
        ListTopicsResult listTopicsResult = mock(ListTopicsResult.class);

        when(adminClient.listTopics(any(ListTopicsOptions.class))).thenReturn(listTopicsResult);
        when(listTopicsResult.names()).thenReturn(completedFuture(Collections.singleton(topicName)));

        doReturn(adminClient).when(AdminClient).create(any(Properties.class));

        // Act
        boolean result = kafkaTopicUtil.isKafkaTopicPresent(topicName);

        // Assert
        assertTrue(result);
    }

    @Test
    public void testIsKafkaTopicNotPresent() throws ExecutionException, InterruptedException {
        // Arrange
        KafkaTopicUtil kafkaTopicUtil = new KafkaTopicUtil();
        kafkaTopicUtil.bootstarpServers = "localhost:9092";
        String topicName = "test-topic";

        AdminClient adminClient = mock(AdminClient.class);
        ListTopicsResult listTopicsResult = mock(ListTopicsResult.class);

        when(adminClient.listTopics(any(ListTopicsOptions.class))).thenReturn(listTopicsResult);
        when(listTopicsResult.names()).thenReturn(completedFuture(Collections.singleton("another-topic")));

        doReturn(adminClient).when(AdminClient).create(any(Properties.class));

        // Act
        boolean result = kafkaTopicUtil.isKafkaTopicPresent(topicName);

        // Assert
        assertFalse(result);
    }
}