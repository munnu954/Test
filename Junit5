@Test
public void testApplyPostingRule() throws Exception {
    // Mocking dependencies
    RuleLoadingService ruleLoadingService = Mockito.mock(RuleLoadingService.class);
    TopologyApiClient topoApiClient = Mockito.mock(TopologyApiClient.class);
    AlarmPostingUtils utils = Mockito.mock(AlarmPostingUtils.class);
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();

    // Setting up mock responses
    ResponseEntity<String> response = new ResponseEntity<>("topologyData", HttpStatus.OK);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(Mockito.any(Alarm.class), Mockito.any(PostingRule.class), Mockito.anyString())).thenReturn(response);

    PostingRuleProcessingService service = new PostingRuleProcessingService();
    ReflectionTestUtils.setField(service, "ruleLoadingService", ruleLoadingService);
    ReflectionTestUtils.setField(service, "topoApiClient", topoApiClient);
    ReflectionTestUtils.setField(service, "utils", utils);
    ReflectionTestUtils.setField(service, "alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");
    ReflectionTestUtils.setField(service, "topologyDetailsAlarmedObjectExpression", "{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}");
    ReflectionTestUtils.setField(service, "topologyObjectEligibilityCheckValue", "%TopoObject:OSS_Names[0]%");
    ReflectionTestUtils.setField(service, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
    ReflectionTestUtils.setField(service, "componentIDAttributeName", "reportingObject");

    // Test case for successful execution
    MockMvcResponse mockResponse = new MockMvcResponse();
    String topoObjectEligibilityValue = "value";
    String alarmedObject = "object";
    String alarmedObjectTopoDet = "objectDetails";

    Mockito.when(utils.evaluateExpression(Mockito.anyString(), Mockito.anyMap())).thenReturn(topoObjectEligibilityValue, alarmedObject, alarmedObjectTopoDet);
    Mockito.when(utils.evaluateExpression(Mockito.eq("%Alarm:reportingObject%"), Mockito.anyMap())).thenReturn("componentId");

    Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

    // Verify that the topology details were set correctly
    Assert.assertEquals("objectDetails", result.getTopologyDetails());
    
    // Test case for exception handling
    Mockito.doThrow(new IOException()).when(utils).evaluateExpression(Mockito.anyString(), Mockito.anyMap());
    Alarm resultWithException = service.applyPostingRule(alarm, rule, alarmMap);

    // Verify that the original alarm is returned in case of an exception
    Assert.assertEquals(alarm, resultWithException);
}
