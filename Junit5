To fix the error related to "org.springframework.web.client.UnknownContentTypeException", you need to ensure that the RestTemplate is configured to handle the JSON response correctly. This can be achieved by adding a message converter that can handle JSON content. 

You can update the RestTemplate bean creation in your `AppConfig` class to include the `MappingJackson2HttpMessageConverter` as follows:

```java
@Bean
public RestTemplate restTemplate(RestTemplateBuilder builder) {
    RestTemplate restTemplate = builder.setConnectTimeout(Duration.ofMillis(20000))
                                      .setReadTimeout(Duration.ofMillis(100000))
                                      .build();

    List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();
    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
    converter.setSupportedMediaTypes(Collections.singletonList(MediaType.APPLICATION_JSON));
    messageConverters.add(converter);

    restTemplate.setMessageConverters(messageConverters);
    return restTemplate;
}
```

By setting the `MappingJackson2HttpMessageConverter` with `MediaType.APPLICATION_JSON` as a supported media type, RestTemplate will be able to handle JSON responses properly.

After making this update, you can refactor the classes as requested:

1. Refactored `LinkAggregationController`:

```java
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class LinkAggregationController {

    // Autowired fields and logger declaration remain the same

    @PostMapping(value = "/api/v1/linkaggregation", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<LinkAggrResponse> getLinkAggregation(@RequestBody LinkAggregationRequest request) throws InputInvalidException, NoDataFoundException, LinkAggregationException {
        // Controller logic remains the same
    }
}
```

2. Refactored `LinkAggregationService`:

```java
import org.springframework.stereotype.Service;

@Service
public class LinkAggregationService {

    // Autowired fields remain the same

    public LinkAggregationResponse getResponse(LinkAggregationRequest linkAggregationRequest) throws NoDataFoundException, LinkAggregationException {
        // Service logic remains the same
    }
}
```

3. Refactored `LinkAggConfigService` and `LinkAggregationUtil` classes as they do not require any changes based on the error message provided.

4. Refactored `AppConfig`:

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.client.RestTemplate;
import org.springframework.boot.web.client.RestTemplateBuilder;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

@Configuration
public class AppConfig {

    // Autowired fields and @Value declarations remain the same

    @Bean("configMap")
    public Map<String, String> getConfigData() {
        // getConfigData() method logic remains the same
    }

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        RestTemplate restTemplate = builder.setConnectTimeout(Duration.ofMillis(20000))
                                          .setReadTimeout(Duration.ofMillis(100000))
                                          .build();

        List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();
        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
        converter.setSupportedMediaTypes(Collections.singletonList(MediaType.APPLICATION_JSON));
        messageConverters.add(converter);

        restTemplate.setMessageConverters(messageConverters);
        return restTemplate;
    }
}
```

By ensuring that the RestTemplate's message converters are configured to handle JSON responses in the `AppConfig` class, the error related to content type handling should be resolved.