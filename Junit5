@Test
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Test
    public void testApplyPostingRule_TopologyObjectsNodeIsNull() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = new ResponseEntity<>(HttpStatus.OK);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNull(alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_ExceptionThrown() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = new ResponseEntity<>(HttpStatus.OK);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        doThrow(new RuntimeException()).when(utils).evaluateExpression(anyString(), any());

        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNull(alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_Success() throws JsonProcessingException {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarm.setAlarmIdentity("test");

        JsonNode jsonNode = AlarmPostingConstants.getObjectMapper().createObjectNode();
        jsonNode.put("test", "value");

        ResponseEntity<String> responseEntity = new ResponseEntity<>(jsonNode.toString(), HttpStatus.OK);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        doReturn("testObject").when(utils).evaluateExpression(anyString(), any());

        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals(jsonNode.toString(), alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_AlarmedObjectEmpty() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        JsonNode jsonNode = AlarmPostingConstants.getObjectMapper().createObjectNode();
        jsonNode.put("test", "value");

        ResponseEntity<String> responseEntity = new ResponseEntity<>(jsonNode.toString(), HttpStatus.OK);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        doReturn("").when(utils).evaluateExpression(anyString(), any());

        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals(jsonNode.toString(), alarm.getTopologyDetails());
    }
}