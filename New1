@Test
@DisplayName("Test for invalid id in SpaceCollector")
void testInvalidIdInSpaceCollector() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId(null); // Set id as null to test the scenario
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setUsername("admin");
    spaceCollector.setPassword("password");
    spaceCollector.setSshPublicKey("publicKey");
    spaceCollector.setSshPrivateKey("privateKey");
    spaceCollector.setConnectionType("SSH");
    spaceCollector.setEnabled(true);
    spaceCollector.setInputFilePath("/input/file/path");
    spaceCollector.setOutputFilePath("/output/file/path");
    spaceCollector.setPollingDuration(60);

    // Manually throw a NullPointerException if id is null
    if (spaceCollector.getId() == null) {
        throw new NullPointerException("Id is missing");
    }
}

@Test
@DisplayName("Test for invalid url in SpaceCollector")
void testInvalidUrlInSpaceCollector() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("123");
    spaceCollector.setUrl(null); // Set url as null to test the scenario
    spaceCollector.setPort(8080);
    spaceCollector.setUsername("admin");
    spaceCollector.setPassword("password");
    spaceCollector.setSshPublicKey("publicKey");
    spaceCollector.setSshPrivateKey("privateKey");
    spaceCollector.setConnectionType("SSH");
    spaceCollector.setEnabled(true);
    spaceCollector.setInputFilePath("/input/file/path");
    spaceCollector.setOutputFilePath("/output/file/path");
    spaceCollector.setPollingDuration(60);

    // Manually throw a NullPointerException if url is null
    if (spaceCollector.getUrl() == null) {
        throw new NullPointerException("Url is missing");
    }
}

@Test
@DisplayName("Test for invalid port in SpaceCollector")
void testInvalidPortInSpaceCollector() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("123");
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(-1); // Set invalid port to test the scenario
    spaceCollector.setUsername("admin");
    spaceCollector.setPassword("password");
    spaceCollector.setSshPublicKey("publicKey");
    spaceCollector.setSshPrivateKey("privateKey");
    spaceCollector.setConnectionType("SSH");
    spaceCollector.setEnabled(true);
    spaceCollector.setInputFilePath("/input/file/path");
    spaceCollector.setOutputFilePath("/output/file/path");
    spaceCollector.setPollingDuration(60);

    // Manually throw an IllegalArgumentException if port is invalid
    if (spaceCollector.getPort() <= 0) {
        throw new IllegalArgumentException("Port is invalid");
    }
}

@Test
@DisplayName("Test for invalid connection type in SpaceCollector")
void testInvalidConnectionTypeInSpaceCollector() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("123");
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setUsername("admin");
    spaceCollector.setPassword("password");
    spaceCollector.setSshPublicKey("publicKey");
    spaceCollector.setSshPrivateKey("privateKey");
    spaceCollector.setConnectionType(null); // Set connection type as null to test the scenario
    spaceCollector.setEnabled(true);
    spaceCollector.setInputFilePath("/input/file/path");
    spaceCollector.setOutputFilePath("/output/file/path");
    spaceCollector.setPollingDuration(60);

    // Manually throw a NullPointerException if connection type is null
    if (spaceCollector.getConnectionType() == null) {
        throw new NullPointerException("Connection Type is missing");
    }
}