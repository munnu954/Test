@Test
public void testApplyPostingRuleForTopologyObjectsNode() throws Exception {
    // Create mock objects
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "Rule1", 1, 1, "MatchingCriteria1");
    HashMap<String, Object> alarmMap = new HashMap<>();
    JsonNode jsonNodeTmp = mock(JsonNode.class);
    Map<String, Object> topoObjectMap = new HashMap<>();
  
    // Mock the evaluateExpression method
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("Test");
  
    // Mock the getObjectMapper method
    ObjectMapper objectMapper = mock(ObjectMapper.class);
    when(AlarmPostingConstants.getObjectMapper()).thenReturn(objectMapper);
  
    // Mock the readTree method
    ObjectNode objectNode = mock(ObjectNode.class);
    when(objectMapper.readTree(anyString())).thenReturn(objectNode);
  
    // Mock the restTemplate and exchange method
    ResponseEntity<String> responseEntity = new ResponseEntity<>("Test Response", HttpStatus.OK);
    when(topologyApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
  
    // Mock the topologyObjectsNode
    ArrayNode arrayNode = mock(ArrayNode.class);
    when(arrayNode.isMissingNode()).thenReturn(false);
    when(arrayNode.isArray()).thenReturn(true);
    when(jsonNode.at(anyString())).thenReturn(arrayNode);
  
    // Setup the topologyObjectsNode loop
    when(arrayNode.iterator()).thenReturn(Arrays.asList(jsonNodeTmp).iterator());
    when(objectMapper.convertValue(eq(jsonNodeTmp), eq(HashMap.class))).thenReturn(topoObjectMap);
    when(utils.evaluateExpression(anyString(), eq(topoObjectMap))).thenReturn("Test");
  
    // Perform the test
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
  
    // Verify the set methods are called
    verify(alarm).setAlarmedObject(anyString());
    verify(alarm).setTopologyDetails(anyString());
}
  
@Test
public void testApplyPostingRuleForTopologyObjectsNodeNoTopoDetails() throws Exception {
    // Create mock objects
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "Rule1", 1, 1, "MatchingCriteria1");
    HashMap<String, Object> alarmMap = new HashMap<>();
    JsonNode jsonNodeTmp = mock(JsonNode.class);
    Map<String, Object> topoObjectMap = new HashMap<>();
  
    // Mock the evaluateExpression method
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("Test");
  
    // Mock the getObjectMapper method
    ObjectMapper objectMapper = mock(ObjectMapper.class);
    when(AlarmPostingConstants.getObjectMapper()).thenReturn(objectMapper);
  
    // Mock the readTree method
    ObjectNode objectNode = mock(ObjectNode.class);
    when(objectMapper.readTree(anyString())).thenReturn(objectNode);
  
    // Mock the restTemplate and exchange method
    ResponseEntity<String> responseEntity = new ResponseEntity<>("Test Response", HttpStatus.OK);
    when(topologyApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
  
    // Mock the topologyObjectsNode
    ArrayNode arrayNode = mock(ArrayNode.class);
    when(arrayNode.isMissingNode()).thenReturn(false);
    when(arrayNode.isArray()).thenReturn(true);
    when(jsonNode.at(anyString())).thenReturn(arrayNode);
  
    // Setup the topologyObjectsNode loop
    when(arrayNode.iterator()).thenReturn(Arrays.asList(jsonNodeTmp).iterator());
    when(objectMapper.convertValue(eq(jsonNodeTmp), eq(HashMap.class))).thenReturn(topoObjectMap);
    when(utils.evaluateExpression(anyString(), eq(topoObjectMap))).thenReturn("Test");
    when(alarm.getTopologyDetails()).thenReturn(null);
  
    // Perform the test
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
  
    // Verify the set methods are not called
    verify(alarm, never()).setAlarmedObject(anyString());
    verify(alarm, never()).setTopologyDetails(anyString());
}