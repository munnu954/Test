import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import java.io.IOException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@WebMvcTest(FlinkApiController.class)
public class FlinkApiControllerTests {

  @Autowired
  private MockMvc mockMvc;

  @MockBean
  private KafkaInputProducer kafkaInputProducer;

  @MockBean
  private FlinkApiController flinkApiController;

  @MockBean
  private KafkaConsumer kafkaConsumer;

  @MockBean
  private KafkaAuditProducer kafkaAuditProducer;

  @MockBean
  private KafkaTemplate<String, Object> kafkaTemplate;

  @Test
  public void givenNoJarsAndNoEntries_whenTriggerJob_thenReturnFailureMessage() throws Exception {
    when(flinkApiController.triggerJob(any(), any())).thenReturn("Job is not triggered");

    mockMvc.perform(MockMvcRequestBuilders.post("/")
            .contentType("application/json")
            .content("{\"fileType\": \".csv\"}")
            .accept("application/json"))
            .andExpect(MockMvcResultMatchers.status().isOk())
            .andExpect(MockMvcResultMatchers.content().string("Job is not triggered"));

    verify(kafkaInputProducer).sendFailureMessage(any(), any(), any());
    verify(kafkaConsumer).writeLogToFile(any(), any(), any(), any());
  }

  @Test
  public void givenNonExistentJarId_whenTriggerJob_thenReturnFailureMessage() throws Exception {
    when(flinkApiController.triggerJob(any(), any())).thenReturn("Job is not triggered");

    mockMvc.perform(MockMvcRequestBuilders.post("/")
            .contentType("application/json")
            .content("{\"fileType\": \".csv\", \"jarId\": \"nonexistent\"}")
            .accept("application/json"))
            .andExpect(MockMvcResultMatchers.status().isOk())
            .andExpect(MockMvcResultMatchers.content().string("Job is not triggered"));

    verify(kafkaInputProducer).sendFailureMessage(any(), any(), any());
    verify(kafkaConsumer).writeLogToFile(any(), any(), any(), any());
  }

  @Test
  public void givenFailureFromFlinkApi_whenTriggerJob_thenReturnFailureMessageAndLogError() throws Exception {
    doThrow(new RuntimeException("Flink API exception")).when(flinkApiController).triggerJob(any(), any());

    mockMvc.perform(MockMvcRequestBuilders.post("/")
            .contentType("application/json")
            .content("{\"fileType\": \".csv\", \"jarId\": \"123\"}")
            .accept("application/json"))
            .andExpect(MockMvcResultMatchers.status().isOk())
            .andExpect(MockMvcResultMatchers.content().string("Job is not triggered"));

    verify(kafkaInputProducer).sendFailureMessage(any(), any(), any());
    verify(kafkaConsumer).writeLogToFile(any(), any(), any(), any());
    verify(kafkaAuditProducer).sendMessage(any());
  }
}
