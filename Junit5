@Test
void testHealthWithNullStatement() throws SQLException {
Connection conn = mock(Connection.class);
when(ds.getConnection()).thenReturn(conn);
Statement stmt = null;
ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);
Health health = databaseHealthContributor.health();
assertEquals("UP", health.getStatus().getCode());
}

@Test
void testHealthWithClosedStatementAndConnection() throws SQLException {
Connection conn = mock(Connection.class);
when(ds.getConnection()).thenReturn(conn);
Statement stmt = mock(Statement.class);
when(conn.createStatement()).thenReturn(stmt);
when(stmt.isClosed()).thenReturn(true);
when(conn.isClosed()).thenReturn(true);
ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);
Health health = databaseHealthContributor.health();
assertEquals("UP", health.getStatus().getCode());
}

@Test
void testHealthWithClosedStatement() throws SQLException {
Connection conn = mock(Connection.class);
when(ds.getConnection()).thenReturn(conn);
Statement stmt = mock(Statement.class);
when(conn.createStatement()).thenReturn(stmt);
when(stmt.isClosed()).thenReturn(true);
ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);
Health health = databaseHealthContributor.health();
assertEquals("UP", health.getStatus().getCode());
}

@Test
void testHealthWithClosedConnection() throws SQLException {
Connection conn = mock(Connection.class);
when(ds.getConnection()).thenReturn(conn);
Statement stmt = mock(Statement.class);
when(conn.createStatement()).thenReturn(stmt);
when(conn.isClosed()).thenReturn(true);
ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);
Health health = databaseHealthContributor.health();
assertEquals("UP", health.getStatus().getCode());
}