import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

import com.verizon.uts.coconut.device.service.CoconutDeviceMSConstants;
import com.verizon.uts.coconut.device.service.CoconutServiceVersion3;

public class CoconutServiceVersion3Test {

    @Test
    public void testQueryBasedOnParameter_NoParameters() throws Exception {
        CoconutServiceVersion3 service = new CoconutServiceVersion3();
        Map<String, Object> queryParams = new HashMap<>();

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;

        // Check if reflection call is successful
        String actualQuery = getQueryBasedOnParameter(service, queryParams);
        assertNotNull("Reflection call failed!", actualQuery);

        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_LocationCLLI() throws Exception {
        CoconutServiceVersion3 service = new CoconutServiceVersion3();
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "ABC123");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'abc123'");
        String actualQuery = getQueryBasedOnParameter(service, queryParams);

        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_SiteName() throws Exception {
        CoconutServiceVersion3 service = new CoconutServiceVersion3();
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "My Site");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'my site'");
        String actualQuery = getQueryBasedOnParameter(service, queryParams);

        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_BothParameters() throws Exception {
        CoconutServiceVersion3 service = new CoconutServiceVersion3();
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "DEF456");
        queryParams.put("siteName", "Another Site");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'def456'") +
                " AND " +
                CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'another site'");
        String actualQuery = getQueryBasedOnParameter(service, queryParams);

        assertEquals(expectedQuery, actualQuery);
    }

    private String getQueryBasedOnParameter(CoconutServiceVersion3 service, Map<String, Object> queryParams) throws Exception {
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        return (String) method.invoke(service, queryParams);
    }
}
