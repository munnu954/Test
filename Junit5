I understand that you need help writing JUnit5 test cases to cover all branches of the `readObject(ObjectInputStream ois)` method in the `KafkaProducerService` class. Additionally, you want to cover the catch block of the `createProducer` method for 100% code coverage. You also mentioned that you want to use Reflection APIs without making `createProducer` and `readObject` methods public in the `KafkaProducerService` class. Lastly, you want to avoid `java.io.EOFException` for the `readObject` method test cases. 

Here's an example of how you can write the JUnit5 test cases to achieve the desired coverage:

```java
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.lang.reflect.Field;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

public class KafkaProducerServiceTest {

    @Test
    void testReadObjectBranch1() throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
        KafkaProducerService kafkaProducerService = new KafkaProducerService();
        ObjectInputStream ois = mock(ObjectInputStream.class);

        Field producerField = KafkaProducerService.class.getDeclaredField("producer");
        producerField.setAccessible(true);
        KafkaProducer<String, String> producer = mock(KafkaProducer.class);
        producerField.set(kafkaProducerService, producer);

        kafkaProducerService.readObject(ois);

        verify(producer).close();
        assertNotNull(kafkaProducerService.producer);
    }

    @Test
    void testReadObjectBranch2() throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
        KafkaProducerService kafkaProducerService = new KafkaProducerService();
        ObjectInputStream ois = mock(ObjectInputStream.class);

        Field producerField = KafkaProducerService.class.getDeclaredField("producer");
        producerField.setAccessible(true);
        KafkaProducer<String, String> producer = mock(KafkaProducer.class);
        producerField.set(kafkaProducerService, producer);

        when(ois.defaultReadObject()).thenThrow(new IOException());

        kafkaProducerService.readObject(ois);

        verify(producer, never()).close();
        assertNotNull(kafkaProducerService.producer);
    }

    @Test
    void testCreateProducerCatchBlock() throws NoSuchFieldException, IllegalAccessException {
        KafkaProducerService kafkaProducerService = new KafkaProducerService();
        AppProperties appProperties = mock(AppProperties.class);
        when(appProperties.setAndGetKafkaProducerSSLproperties()).thenThrow(new Exception());

        Field appPropField = KafkaProducerService.class.getDeclaredField("appProp");
        appPropField.setAccessible(true);
        appPropField.set(kafkaProducerService, appProperties);

        Field producerField = KafkaProducerService.class.getDeclaredField("producer");
        producerField.setAccessible(true);
        KafkaProducer<String, String> producer = kafkaProducerService.createProducer();
        producerField.set(kafkaProducerService, producer);

        assertNotNull(producer);
    }

    @Test
    void testReadObjectEOFException() throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
        KafkaProducerService kafkaProducerService = new KafkaProducerService();
        ObjectInputStream ois = mock(ObjectInputStream.class);

        Field producerField = KafkaProducerService.class.getDeclaredField("producer");
        producerField.setAccessible(true);
        KafkaProducer<String, String> producer = mock(KafkaProducer.class);
        producerField.set(kafkaProducerService, producer);

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[0]);
        when(ois.readObject()).thenThrow(new java.io.EOFException());
        when(ois.available()).thenReturn(1);
        when(ois.read()).thenReturn(-1);
        when(ois.read(any(byte[].class))).thenAnswer(invocation -> {
            Object[] args = invocation.getArguments();
            byte[] buffer = (byte[]) args[0];
            buffer[0] = 1;
            return 1;
        });
        when(ois.read(any(byte[].class), anyInt(), anyInt())).thenAnswer(invocation -> {
            Object[] args = invocation.getArguments();
            byte[] buffer = (byte[]) args[0];
            int offset = (int) args[1];
            int length = (int) args[2];
            buffer[offset] = 1;
            return 1;
        });

        kafkaProducerService.readObject(ois);

        verify(producer).close();
        assertNotNull(kafkaProducerService.producer);
    }

    @Test
    void testWriteMessage() {
        KafkaProducerService kafkaProducerService = new KafkaProducerService();
        KafkaProducer<String, String> producer = mock(KafkaProducer.class);
        kafkaProducerService.producer = producer;

        String topic = "test-topic";
        String data = "test-data";

        kafkaProducerService.writeMessage(topic, data);

        verify(producer).