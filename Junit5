import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class BatchLoaderUtilsTest {

    @Test
    void convertToObject_validXml_returnsObject() throws JAXBException, JsonProcessingException {
        BatchLoaderUtils utils = new BatchLoaderUtils();
        String xml = "<person><name>John Doe</name><age>30</age></person>";
        Person person = utils.convertToObject(xml, Person.class);
        assertNotNull(person);
        assertEquals("John Doe", person.getName());
        assertEquals(30, person.getAge());
    }

    @Test
    void convertToObject_invalidXml_throwsJAXBException() {
        BatchLoaderUtils utils = new BatchLoaderUtils();
        assertThrows(JAXBException.class, () -> utils.convertToObject("<invalid xml>", Person.class));
    }

    @Test
    void isValidData_nullInput_returnsFalse() {
        BatchLoaderUtils utils = new BatchLoaderUtils();
        assertFalse(utils.isValidData(null));
    }

    @Test
    void isValidData_emptyInput_returnsFalse() {
        BatchLoaderUtils utils = new BatchLoaderUtils();
        assertFalse(utils.isValidData(""));
    }

    @Test
    void isValidData_whitespaceInput_returnsFalse() {
        BatchLoaderUtils utils = new BatchLoaderUtils();
        assertFalse(utils.isValidData("  "));
    }

    @Test
    void isValidData_zeroInput_returnsFalse() {
        BatchLoaderUtils utils = new BatchLoaderUtils();
        assertFalse(utils.isValidData("0"));
    }

    @Test
    void isValidData_validInput_returnsTrue() {
        BatchLoaderUtils utils = new BatchLoaderUtils();
        assertTrue(utils.isValidData("valid data"));
    }

    @Test
    void isValidData_catchBlock_isCovered() {
        BatchLoaderUtils utils = new BatchLoaderUtils();
        // Force a JAXBException to cover the catch block
        assertThrows(JAXBException.class, () -> utils.convertToObject("<invalid xml>", Person.class));
    }

    @Test
    void isValidData_allBranchesCovered() {
        BatchLoaderUtils utils = new BatchLoaderUtils();
        // Cover all branches in the else if statement
        assertFalse(utils.isValidData(null));
        assertFalse(utils.isValidData(""));
        assertFalse(utils.isValidData("  "));
        assertFalse(utils.isValidData("0"));
        assertTrue(utils.isValidData("valid data"));
    }

    // Assuming Person class has name and age properties
    class Person {
        private String name;
        private int age;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }
    }
}
