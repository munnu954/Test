import static org.mockito.Mockito.*;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class KafkaTest {

    @Mock
    private KafkaProducer<String, String> producer;

    @Mock
    private KafkaConsumer<String, String> consumer;

    @Test
    public void testKafkaProducer() {
        // Mock JSON data
        String jsonData = "{\"key\": \"value\"}";

        // Mock producer record
        ProducerRecord<String, String> record = new ProducerRecord<>("topic", "key", jsonData);

        // Call the producer method
        producer.send(record);

        // Verify that the send method was called once
        verify(producer, times(1)).send(record);
    }

    @Test
    public void testKafkaConsumer() {
        // Mock consumer records
        ConsumerRecords<String, String> records = new ConsumerRecords<>(null);

        // Mock consumer record
        ConsumerRecord<String, String> record = new ConsumerRecord<>("topic", 0, 0, "key", "value");

        // Add the mock record to the mock records
        records.add(record);

        // Set up the behavior of the consumer
        when(consumer.poll(any())).thenReturn(records);

        // Call the consumer method
        consumer.poll(100);

        // Verify that the poll method was called once
        verify(consumer, times(1)).poll(100);
    }
}







Sure, I can help you with that. Here's an example of how you can write JUnit 5 test cases for Kafka Producer and Kafka Consumer using the @Mock method:

```java
import static org.mockito.Mockito.*;

import java.util.concurrent.ExecutionException;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.serializer.JsonSerializer;

@ExtendWith(MockitoExtension.class)
public class KafkaTest {

    @Mock
    private KafkaTemplate<String, SampleMessage> kafkaTemplate;

    @Captor
    private ArgumentCaptor<ProducerRecord<String, SampleMessage>> captor;

    @Test
    public void testKafkaProducerSuccess() throws ExecutionException, InterruptedException {
        SampleMessage sampleMessage = new SampleMessage("Hello World");
        kafkaTemplate.send("topic", sampleMessage);

        verify(kafkaTemplate, times(1)).send(captor.capture());
        ProducerRecord<String, SampleMessage> producerRecord = captor.getValue();

        // Asserts
        assertEquals("topic", producerRecord.topic());
        assertNotNull(producerRecord.key());
        assertEquals(sampleMessage, producerRecord.value());
    }

    @Test
    public void testKafkaConsumerSuccess() {
        SampleMessage sampleMessage = new SampleMessage("Hello World");

        ConsumerRecord<String, SampleMessage> consumerRecord = new ConsumerRecord<>("topic", 0, 0, new String(),
                sampleMessage);

        ConsumerSeekCallback callback = mock(ConsumerSeekCallback.class);
        ConsumerSeekAware consumerSeekAware = mock(ConsumerSeekAware.class);
        when(consumerSeekAware.seekToEnd(any())).thenReturn(callback); // Seek to the end of the topic

        KafkaConsumer<String, SampleMessage> kafkaConsumer = mock(KafkaConsumer.class);
        when(kafkaConsumer.poll(any(Duration.class))).thenReturn(SingletonMap.single("topic", singletonList(consumerRecord)));

        SampleConsumer sampleConsumer = new SampleConsumer(kafkaConsumer, consumerSeekAware);
        sampleConsumer.listen();

        // Verify if the message was processed correctly
        verify(someService, times(1)).processMessage(any());
    }
}
```

In the above example, I've used the Mockito library to mock the KafkaTemplate and KafkaConsumer instances. The first test case `testKafkaProducerSuccess` verifies if the KafkaProducer is able to send the message to the specified topic correctly.

The second test case `testKafkaConsumerSuccess` mocks the KafkaConsumer and verifies if it correctly processes a consumed message.

You can add more assertions and customize the test cases as per your requirements.

I hope this helps you to get started with writing JUnit 5 test cases for Kafka Producer and Consumer using the @Mock method. Let me know if you need any further assistance!