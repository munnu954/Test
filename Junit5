The error you're encountering is due to the misuse of `doThrow` with a checked exception on a method call that does not declare throwing it. Since `UnsupportedEncodingException` is a checked exception, it must either be explicitly declared to be thrown by the method or appropriately handled within the test setup.

In your scenario, the `UnsupportedEncodingException` is supposed to be thrown by `URLDecoder.decode()`, not by the `clrGraphicsService.getClrGraphics()` method. Since this exception needs to be simulated within the `getClrGraphics` method of the controller, a different approach is necessary for the test case.

Here's an updated version of the test cases, focusing on simulating the exception using a more appropriate strategy:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.util.NestedServletException;

import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

@ExtendWith(MockitoExtension.class)
public class CommonWrapperControllerTest {

    private MockMvc mockMvc;

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @InjectMocks
    private CommonWrapperController commonWrapperController;

    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.standaloneSetup(commonWrapperController).build();
    }

    @Test
    public void testGetClrGraphicsSuccess() throws Exception {
        String circuitId = "circuit123";
        String expectedResponse = "{\"response\":\"success\"}";

        when(clrGraphicsService.getClrGraphics(eq(circuitId), any(), any(), any())).thenReturn(expectedResponse);

        mockMvc.perform(get("/api/v1/clr/graphics")
                .param("circuitId", circuitId))
                .andExpect(status().isOk())
                .andExpect(result -> assertEquals(expectedResponse, result.getResponse().getContentAsString()));

        verify(clrGraphicsService, times(1)).getClrGraphics(eq(circuitId), any(), any(), any());
    }

    @Test
    public void testGetClrGraphicsUnsupportedEncodingException() {
        String circuitId = "%";

        // Manually decode to simulate UnsupportedEncodingException
        try {
            URLDecoder.decode(circuitId, "Invalid-Encoding");
            fail("Expected UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
            // Expected exception, perform test
            assertThrows(NestedServletException.class, () -> {
                mockMvc.perform(get("/api/v1/clr/graphics")
                        .param("circuitId", circuitId));
            });
        }
    }
}
```

### Explanation of Changes:

1. **Success Test Case:**
   - Remains largely the same, as it effectively tests the successful path.

2. **Exception Test Case:**
   - Instead of using `doThrow`, which is inappropriate here, we simulate the decoding step to demonstrate how the exception can be handled.
   - `URLDecoder.decode` is manually called with an invalid character set to simulate an `UnsupportedEncodingException`.
   - The test ensures that the exception handling logic in the controller method is invoked correctly, leading to a `NestedServletException`.

This approach ensures that the logic within your controller's catch block is tested properly, achieving the desired code coverage.