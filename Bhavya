The error message is telling you that the expected value, "Topic 3459-DEV-COLLECTION-JSON-DATA-QUEUE does not exist", is not equal to the actual value, which is null. This means that the test case is not passing.

To fix this, you need to make sure that the test case is actually testing what you think it is testing. In this case, you are trying to test that the Kafka topic "3459-DEV-COLLECTION-JSON-DATA-QUEUE" does not exist. However, the test case is currently only checking that the exception message contains the text "Topic 3459-DEV-COLLECTION-JSON-DATA-QUEUE does not exist". This is not a reliable test, because it is possible for the exception message to contain this text even if the topic does exist.

To fix this, you need to change the test case so that it actually checks whether the topic exists. You can do this by using the KafkaAdminClient to list the topics in the cluster. If the topic does not exist, then the KafkaAdminClient will throw an exception. You can then catch this exception and assert that it is the correct exception.

Here is an example of how you could change the test case:


@Test
public void testKafkaTopicNotPresent() throws Exception {

// Arrange

String bootstarpServer = "localhost:9092";

String topic = "3459-DEV-COLLECTION-JSON-DATA-QUEUE";

String input = "C://Temp/Device.csv";

// Act

try {

KafkaAdminClient adminClient = KafkaAdminClient.create(bootstrapServers);

List<String> topics = adminClient.listTopics().names().get();

assertFalse(topics.contains(topic));

} catch (KafkaException e) {

// Assert

assertEquals("Topic 3459-DEV-COLLECTION-JSON-DATA-QUEUE does not exist", e.getMessage());

}
}


This test case is now more reliable, because it is actually checking whether the topic exists



Here are some testing code for the negative scenarios mentioned above:

1. The Kafka topic 3459-DEV-COLLECTION-JSON-DATA-QUEUE is not present:


public void testKafkaTopicNotPresent() throws Exception {

// Arrange

String bootstarpServer = "localhost:9092";

String topic = "3459-DEV-COLLECTION-JSON-DATA-QUEUE";

// Act

try {

Main.main(new String[] {"--bootstarpServer", bootstarpServer, "--topic", topic});

} catch (Exception e) {

// Assert

assertEquals("Topic 3459-DEV-COLLECTION-JSON-DATA-QUEUE does not exist", e.getMessage());

}

}


2. The Kafka topic 3459-DEV-COLLECTION-JSON-DATA-QUEUE is not accessible:


public void testKafkaTopicNotAccessible() throws Exception {

// Arrange

String bootstarpServer = "localhost:9092";

String topic = "3459-DEV-COLLECTION-JSON-DATA-QUEUE";

// Act

try {

Main.main(new String[] {"--bootstarpServer", bootstarpServer, "--topic", topic});

} catch (Exception e) {

// Assert

assertEquals("Could not connect to Kafka topic 3459-DEV-COLLECTION-JSON-DATA-QUEUE", e.getMessage());

}

}


3. The Kafka topic 3459-DEV-COLLECTION-AUDIT-QUEUE is not present:


public void testKafkaTopicAuditQueueNotPresent() throws Exception {

// Arrange

String bootstarpServer = "localhost:9092";

String topic = "3459-DEV-COLLECTION-AUDIT-QUEUE";

// Act

try {

Main.main(new String[] {"--bootstarpServer", bootstarpServer, "--topic", topic});

} catch (Exception e) {

// Assert

assertEquals("Topic 3459-DEV-COLLECTION-AUDIT-QUEUE does not exist", e.getMessage());

}

}


4. The Kafka topic 3459-DEV-COLLECTION-AUDIT-QUEUE is not accessible:


public void testKafkaTopicAuditQueueNotAccessible() throws Exception {

// Arrange

String bootstarpServer = "localhost:9092";

String topic = "3459-DEV-COLLECTION-AUDIT-QUEUE";

// Act

try {

Main.main(new String[] {"--bootstarpServer", bootstarpServer, "--topic", topic});

} catch (Exception e) {

// Assert

assertEquals("Could not connect to Kafka topic 3459-DEV-COLLECTION-AUDIT-QUEUE", e.getMessage());

}

}


5. The data read for ProgramArgsList does not contain valid params:


public void testProgramArgsListDoesNotContainValidParams() throws Exception {

// Arrange

String bootstarpServer = "localhost:9092";

String topic = "3459-DEV-COLLECTION-JSON-DATA-QUEUE";

String[] args = {"--bootstarpServer", bootstarpServer};

// Act

try {

Main.main(args);

} catch (Exception e) {

// Assert

assertEquals("Invalid program arguments: --topic must be specified", e.getMessage());

}

}


6. The data read for ProgramArgsList contain valid params with invalid values:

``
public void testProgramArgsListContainsValidParamsWithInvalidValues() throws Exception {

// Arrange

String bootstarpServer = "localhost:9092";

String topic = "3459-DEV-COLLECTION-JSON-DATA-QUEUE";

String[] args = {"--bootstarpServer", bootstarpServer, "--topic", "invalid-topic"};

// Act

try {

Main.main(args);

} catch (Exception e) {

// Assert

assertEquals("Invalid program arguments: Topic invalid-topic does not exist", e.getMessage());

}

}
`