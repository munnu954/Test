To mock the `kafkaProducerService` in the `ConsumerService` class and initialize it in the `ConsumerServiceTest` class, you can use a mocking framework like Mockito. Here are the steps to do that:

1. In the `ConsumerService` class, create a private field of type `KafkaProducerService` and initialize it through a constructor or a setter method:
```java
public class ConsumerService {
    private KafkaProducerService kafkaProducerService;

    public ConsumerService(KafkaProducerService kafkaProducerService) {
        this.kafkaProducerService = kafkaProducerService;
    }

    // rest of the code
}
```

2. In the `ConsumerServiceTest` class, use Mockito to mock the `KafkaProducerService` and inject it into the `ConsumerService` instance:
```java
import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class ConsumerServiceTest {

    @Mock
    private KafkaProducerService kafkaProducerService;

    private ConsumerService consumerService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        consumerService = new ConsumerService(kafkaProducerService);
    }

    // rest of the test methods
}
```

3. Now, you can use the `kafkaProducerService` mock in your test methods to set up expectations and verify behavior. For example, you can verify that the `writeMessage` method is called:
```java
@Test
void givenOutputFilePathNotAccessible() throws Exception {
    // ... code omitted for brevity ...

    // Mock the outputFilePathNotAccessible method to return false
    when(sshExceptionHandler.outputFilePathNotAccessible(spaceCollector)).thenReturn(false);

    // Verify that writeMessage is called with the expected arguments
    consumerService.consume("some message");

    JsonNode auditQueueJSON = collectorUtil.buildAuditQueueJSON(spaceCollector, dataReceived, dataProcessed, "",
            JobStatus.COLLECTION_FAILED);
    verify(kafkaProducerService).writeMessage(auditQueueJSON.toString(), "", "3459-DEV-COLLECTION-AUDIT-QUEUE");
}
```

By using Mockito to mock the `kafkaProducerService` and injecting it into the `ConsumerService` instance, you can control its behavior and verify its interactions during the test.