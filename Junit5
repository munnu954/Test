import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class PortProcessorTest {

    @Test
    void testProcess_ShelfIDIsNull() {
        // Mock necessary objects and data
        PortProcessor portProcessor = PortProcessor.getInstance();
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = mock(ClrComponent.class);
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "Test System";

        // Mock previous ClrComponent for testing
        ClrComponent prevClrComponent = mock(ClrComponent.class);
        EquipmentComp equipmentComp = mock(EquipmentComp.class);
        when(prevClrComponent.getType()).thenReturn("Port");
        when(prevClrComponent.getEquipmentComp()).thenReturn(Collections.singletonList(equipmentComp));
        when(equipmentComp.get(0).getPortRef().get(0).getShelfID()).thenReturn(null); // Simulate condition

        // Mock necessary method calls for 100% coverage
        Node prevNode = mock(Node.class);
        when(portProcessor.getNode(anyString(), eq(nodes))).thenReturn(prevNode);

        // Call the method to be tested
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assertions based on the mocked scenario
        verify(portProcessor).getNode(anyString(), eq(nodes));
        verify(portProcessor).addPortToLink(any(), eq(prevNode), eq(nodes), eq(0));
    }
}