Sure! Here is the JUnit 5 test case code for the `receiveMessages` method and `run` method of the `AlarmReceiver` class:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.time.Instant;
import java.util.concurrent.TimeUnit;

import org.apache.pulsar.client.api.Consumer;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.PulsarClientException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class AlarmReceiverTest {

    @Mock
    private Consumer<byte[]> consumer;

    @Mock
    private Message<byte[]> msg;

    @Mock
    private PostingService alarmPointLookupService;

    @InjectMocks
    private AlarmReceiver alarmReceiver;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testReceiveMessages() throws PulsarClientException {
        when(alarmPointLookupService.getQueueSize()).thenReturn(100);
        when(consumer.getStats()).thenReturn(new ConsumerStats(10, 5, 2, 3));

        alarmReceiver.receiveMessages();

        verify(alarmPointLookupService).addMsgToQueue(eq(msg), any(Instant.class));
        verify(consumer, times(2)).getStats();
    }

    @Test
    public void testReceiveMessagesWithThrottling() throws PulsarClientException, InterruptedException {
        when(alarmPointLookupService.getQueueSize()).thenReturn(3000);
        when(consumer.getStats()).thenReturn(new ConsumerStats(10, 5, 2, 3));

        alarmReceiver.receiveMessages();

        verify(alarmPointLookupService).addMsgToQueue(eq(msg), any(Instant.class));
        verify(consumer, times(2)).getStats();
        verify(Thread.class, times(2)).sleep(500);
    }

    @Test
    public void testAcknowledgeMessage() {
        alarmReceiver.acknowledgeMessage(msg);

        verify(VMBUtil).acknowledgeMessageThrowsPulsarClientException(eq(consumer), eq(msg));
    }

    @Test
    public void testSyncReconnect() throws PulsarClientException {
        alarmReceiver.syncReconnect();

        verify(VMBUtil).closeConsumer(consumer);
        verify(alarmReceiver).getConnection();
    }

    @Test
    public void testRun() throws PulsarClientException {
        when(alarmPointLookupService.getQueueSize()).thenReturn(100);
        when(consumer.isConnected()).thenReturn(true, false);
        when(VMBUtil.receiveMessageThrowsPulsarClientException(eq(consumer), anyInt(), any(TimeUnit.class)))
                .thenReturn(msg, (Message<byte[]>) null);

        alarmReceiver.run();

        verify(alarmPostGreService).getAlarmTypeList();
        verify(alarmReceiver, times(2)).receiveMessages();
        verify(VMBUtil).closeConsumer(consumer);
    }

    @Test
    public void testRunWithException() throws PulsarClientException {
        when(alarmPointLookupService.getQueueSize()).thenReturn(100);
        when(consumer.isConnected()).thenReturn(true, false);
        when(VMBUtil.receiveMessageThrowsPulsarClientException(eq(consumer), anyInt(), any(TimeUnit.class)))
                .thenThrow(PulsarClientException.class);

        alarmReceiver.run();

        verify(alarmPostGreService).getAlarmTypeList();
        verify(alarmReceiver).receiveMessages();
        verify(VMBUtil).closeConsumer(consumer);
    }

    @Test
    public void testShutDown() throws PulsarClientException {
        alarmReceiver.shutDown();

        verify(consumer).close();
    }
}
```

Please note that you need to replace the mocked objects and method calls with the actual implementation in your code. Also, make sure to import the necessary classes and packages for the test case code to compile successfully.