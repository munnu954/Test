To write JUnit 5 test cases that cover both branches of the `if (null != response) {}` condition in the `CircuitDetailsProvider` class, you need to mock the dependencies and ensure that the `cktDetailUri` is properly initialized. Below is an example of how you can achieve this using Mockito for mocking and JUnit 5 for testing.

First, ensure that you have the necessary dependencies in your `pom.xml` or `build.gradle` for JUnit 5 and Mockito.

### JUnit 5 Test Class

```java
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CircuitDetailsProviderTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    private final String cktDetailUri = "/circuit/details?circuitId=#circuitId#&sourceSys=#sourceSys#";
    private final String cktDetServiceName = "localhost:8080";

    @BeforeEach
    void setUp() {
        // Initialize the class fields that are not mocked
        circuitDetailsProvider.cktDetailUri = cktDetailUri; // Set the URI
        circuitDetailsProvider.cktDetServiceName = cktDetServiceName; // Set the service name
    }

    @Test
    void testGetCircuitDetails_ResponseNotNull() {
        // Arrange
        String circuitId = "CIRCUIT123";
        String sourceSys = "SOURCE_SYS";
        String cnd = "CND_VALUE";
        String phyModel = "PHYSICAL_MODEL";
        String expectedResponseJson = "{\"key\":\"value\"}"; // Example JSON response

        when(restClientUtil.callEndpoint(anyString(), eq(HttpMethod.GET), any()))
                .thenReturn(expectedResponseJson);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        assertEquals("value", response.getKey()); // Adjust based on your response structure
    }

    @Test
    void testGetCircuitDetails_ResponseNull() {
        // Arrange
        String circuitId = "CIRCUIT123";
        String sourceSys = "SOURCE_SYS";
        String cnd = "CND_VALUE";
        String phyModel = "PHYSICAL_MODEL";

        when(restClientUtil.callEndpoint(anyString(), eq(HttpMethod.GET), any()))
                .thenReturn(null);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNull(response);
    }
}
```

### Explanation:

1. **Annotations**:
   - `@ExtendWith(MockitoExtension.class)`: Enables Mockito in the test class.
   - `@InjectMocks`: Creates an instance of `CircuitDetailsProvider` and injects mocked dependencies into it.
   - `@Mock`: Creates a mock instance of `RestClientUtil`.

2. **Setup**:
   - In the `setUp()` method, we initialize the `cktDetailUri` and `cktDetServiceName` fields to avoid `NullPointerException`.

3. **Tests**:
   - **testGetCircuitDetails_ResponseNotNull**: Mocks a valid response from the `restClientUtil` and checks if the parsed response is not null and contains expected values.
   - **testGetCircuitDetails_ResponseNull**: Mocks a null response from the `restClientUtil` and checks if the returned response is null.

Make sure to adjust the assertions based on your actual `CircuitDetailResponse` class structure.