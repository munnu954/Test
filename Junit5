To access private fields using reflection in Java, you can use the `Field` class and its `setAccessible` method to modify the accessibility of private fields. Here is the updated test code using reflection to access and set the private fields `ruleLoadingService` and `topoApiClient` in the `PostingRuleProcessingService` class:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Field;
import java.util.HashMap;

class PostingRuleProcessingServiceTest {

    @Test
    void testApplyPostingRule() throws Exception {
        // Creating an instance of PostingRuleProcessingService
        PostingRuleProcessingService service = new PostingRuleProcessingService();

        // Accessing private fields 'ruleLoadingService' and 'topoApiClient' using Reflection
        Field ruleLoadingServiceField = PostingRuleProcessingService.class.getDeclaredField("ruleLoadingService");
        ruleLoadingServiceField.setAccessible(true);
        RuleLoadingService ruleLoadingService = new RuleLoadingService(); // Mock or create instance as needed
        ruleLoadingServiceField.set(service, ruleLoadingService);

        Field topoApiClientField = PostingRuleProcessingService.class.getDeclaredField("topoApiClient");
        topoApiClientField.setAccessible(true);
        TopologyApiClient topoApiClient = new TopologyApiClient(); // Mock or create instance as needed
        topoApiClientField.set(service, topoApiClient);

        // Mocking other dependencies
        AlarmPostingUtils utils = mock(AlarmPostingUtils.class);
        service.utils = utils;

        // Mocking required data
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking behavior for topoApiClient method call
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), any(String.class)))
                .thenReturn(ResponseEntity.ok("{\"data\": \"sample data\"}"));

        when(utils.evaluateExpression(any(String.class), any(Map.class))).thenReturn("sample value");

        alarm.setAlarmIdentity("1");
        alarm.setComponentId("component1");

        // Executing the method
        service.applyPostingRule(alarm, rule, alarmMap);

        // Verifying the interactions with the mocked dependencies
        verify(utils, times(2)).evaluateExpression(any(String.class), any(Map.class));
        verify(topoApiClient).fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), any(String.class));
    }
}
```

In this updated test code, we use reflection to access and set the private fields `ruleLoadingService` and `topoApiClient` in the `PostingRuleProcessingService` class without changing their access modifiers. Please make sure to adjust the test code based on your actual implementation and class structure.