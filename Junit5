Here is an example of how you can write JUnit 5 test cases to achieve 100% code coverage of the `createAlarm` method in the `AlarmRepositoryImpl` class. Please note that you may need to add more test cases based on the specific conditions and branches in your code.

```java
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryImplTest {

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Captor
    ArgumentCaptor<Long> longCaptor;

    @BeforeEach
    void setUp() {
        when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmStateMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    }

    @Test
    void testCreateAlarm_WithNullJsonNode() {
        Assertions.assertThrows(Exception.class, () -> {
            alarmRepositoryImpl.createAlarm(null);
        });
    }

    @Test
    void testCreateAlarm_WithEmptyJsonNode() {
        Assertions.assertThrows(Exception.class, () -> {
            alarmRepositoryImpl.createAlarm("{}");
        });
    }

    @Test
    void testCreateAlarm_WithValidJsonNode() throws Exception {
        String jsonStr = "{\"externalAlarmId\":\"123\", \"State\":\"cleared\", \"sequenceId\":\"1\"}";
        Alarm alarm = alarmRepositoryImpl.createAlarm(jsonStr);
        assertNotNull(alarm);
        assertEquals("123", alarm.getExternalAlarmId());
        assertEquals("cleared", alarm.getState());
        assertEquals(1, alarm.getSequenceID());
    }

    @Test
    void testCreateAlarm_WithMissingReportingObject() throws Exception {
        String jsonStr = "{\"externalAlarmId\":\"123\", \"State\":\"cleared\", \"sequenceId\":\"1\", \"alarmedObject\":\"testObject\", \"TID\":\"tid123\"}";
        Alarm alarm = alarmRepositoryImpl.createAlarm(jsonStr);
        assertEquals("testObject", alarm.getReportingObject());
    }

    @Test
    void testCreateAlarm_WithEmptySvcAffecting() throws Exception {
        String jsonStr = "{\"externalAlarmId\":\"123\", \"State\":\"cleared\", \"sequenceId\":\"1\", \"serviceAffecting\":\"\"}";
        Alarm alarm = alarmRepositoryImpl.createAlarm(jsonStr);
        assertFalse(alarm.isServiceAffecting());
    }

    @Test
    void testCreateAlarm_WithCount() throws Exception {
        String jsonStr = "{\"externalAlarmId\":\"123\", \"State\":\"cleared\", \"sequenceId\":\"1\", \"Count\":\"5\"}";
        Alarm alarm = alarmRepositoryImpl.createAlarm(jsonStr);
        assertEquals(4, alarm.getCount());
    }

    @Test
    void testCreateAlarm_ExceptionHandling() throws Exception {
        when(postgresConf.getPerceivedSeverityMap()).thenThrow(new RuntimeException("Database not available"));
        
        Assertions.assertThrows(Exception.class, () -> {
            alarmRepositoryImpl.createAlarm("{\"externalAlarmId\":\"123\"}");
        });
    }

    // Add more test cases based on different conditions and branches in your code

}
```

In these test cases, we are covering different scenarios such as null JSON node, empty JSON node, valid JSON node, missing reporting object, empty service affecting, count, and exception handling. You can add more test cases to cover other conditions and branches in your `createAlarm` method for 100% code coverage.