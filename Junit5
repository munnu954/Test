Main.java class:-
public static void main(String[] args) throws Exception {
String primaryKey;
UnifiedAuditMessage unifiedAuditMessage = new UnifiedAuditMessage();
unifiedAuditMessage.setProcessType(ProcessType.Transformer.toString());
ParameterTool parameters = ParameterTool.fromArgs(args);
String filePath = parameters.getRequired("filePath");
String delimeter=parameters.getRequired("primaryKey");
String fileType = parameters.getRequired("fileType");

//Extract the FILENAME from filePath
String[] pathArr = filePath.split("/");
String fileName = pathArr[pathArr.length - 1];

StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
filePath = parameters.getRequired("filePath");
unifiedAuditMessage.setInputFilePath(filePath);
unifiedAuditMessage.setFileType("XML_"+ fileType);
DataStream<String> xmlDataStream =null;
DataStream<String> jsonStream=null;
switch (fileType) {
case "NETAСТ":
primaryKey = "measInfo";
break; 
case "IMS-CCF":
primaryKey = "mi";
case "ETAS":
primaryKey = "measInfo";
break;
default:
primaryKey = "";
}
xmlDataStream = env.fromElements (readXMLFile(filePath));
jsonStream = xmlDataStream.flatMap(new XmlToJsonConverter(primaryKey, filePath, fileName)).name("XmlToJsonFlatMap");
jsonStream.sinkTo(sink);
JobExecutionResult jobExecutionResult = env.execute("Xml to JSON Transformer: "+fileType);
}

XmlToJsonConverter.java class:-
public class XmlToJsonConverter extends RichFlatMapFunction<String, String> {
private List<String> outerList = new ArrayList<String>();
private List<JsonNode> primaryNodeList = new ArrayList<JsonNode>();
private List<String> primaryKeyList = new ArrayList<String>();
public String primaryKey;
public String filePath;
public String fileName;
private int successCount = 0;
private int failureCount = 0;
public int getSuccessCount() {
return successCount;
}
public int getFailureCount() {
return failureCount;
}
private IntCounter successIntCounter = new IntCounter();
private IntCounter failureIntCounter = new IntCounter();
@Override
public void open(Configuration parameters) throws Exception {
getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
}
public XmlToJsonConverter() {
super();
}
public XmlToJsonConverter(String primaryKey, String filePath, String fileName) {
super();
this.primaryKey = primaryKey;
this.filePath = filePath;
this.fileName = fileName;
}
@Override
public void flatMap(String value, Collector<String> out) throws Exception {
//... (rest of the code remains unchanged)

//Adding FILENAME as key in each JSON response
for (String obj: primaryKeyList) {
ObjectNode keyNode = JsonNodeFactory.instance.objectNode();
keyNode.put("FILENAME", fileName); // Newly added line
if ((node.at("/" + obj).isObject())) {
keyNode (ObjectNode) node.at("/" + obj);
} else if ((node.at("/" + obj).isArray())) { 
arrNode = (ArrayNode) node.at("/" + obj); //If its a Json Array
} 
//... (rest of the code remains unchanged)
}
//... (rest of the code remains unchanged)
}
//... (rest of the code remains unchanged)
}
}

The changes that have been made to the classes are highlighted and include passing the "fileName" as an additional parameter in the constructor of XmlToJsonConverter and adding the "FILENAME" key to each JSON response within the flatMap method of XmlToJsonConverter.