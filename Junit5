To fix the `NullPointerException` and ensure that the test cases correctly cover the specified `else` condition in the `PortProcessor` class, we need to carefully manage how nodes are created and referenced in the `process` method. The issue likely arises from how we are trying to retrieve the nodes based on the `prevLink` target.

The key is to ensure that when the `process` method is called, all required nodes are present in the `nodes` list so that the `getNode` function can find them. Below is an updated version of the test cases that ensures a robust setup:

```java
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

class PortProcessorTest {

    private PortProcessor portProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        portProcessor = PortProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "testSource";
    }

    @Test
    void testProcess_WithDifferentPortIDs() {
        // Arrange
        PortRef eqtObject = new PortRef();
        eqtObject.setPortID("port2");
        eqtObject.setShelfID("shelf2");

        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(Collections.singletonList(eqtObject));

        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        clrComponent.setType(CommonWrapperConstants.PORT);

        // Add the previous CLR component
        PortRef prevPortRef = new PortRef();
        prevPortRef.setPortID("port1");
        prevPortRef.setShelfID("shelf1");

        EquipmentComp prevEquipmentComp = new EquipmentComp();
        prevEquipmentComp.setPortRef(Collections.singletonList(prevPortRef));

        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setEquipmentComp(Collections.singletonList(prevEquipmentComp));
        prevClrComponent.setType(CommonWrapperConstants.PORT);

        clrComponentList.add(prevClrComponent); // Add previous component to the list

        // Create a Node for the previous link
        Node prevNode = new Node();
        prevNode.setPortId("port1");
        nodes.add(prevNode); // Add Node to nodes list

        Link prevLink = new Link();
        prevLink.setTarget("port1"); // Setting the target to the previous port
        links.add(prevLink); // Add a previous link to trigger the else condition

        // Act
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assert
        assertEquals(2, links.size(), "There should be two links created.");
        Link lastLink = links.get(1);
        assertEquals("port2", lastLink.getTarget(), "The target of the last link should be eqtObject portID.");
        assertEquals("port1", lastLink.getSource(), "The source of the last link should be the previous node's port ID.");
    }

    @Test
    void testProcess_WithExistingNodeInList() {
        // Arrange
        PortRef eqtObject = new PortRef();
        eqtObject.setPortID("port4");
        eqtObject.setShelfID("shelf4");

        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(Collections.singletonList(eqtObject));

        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        clrComponent.setType(CommonWrapperConstants.PORT);

        // Previous ClrComponent setup
        PortRef prevPortRef = new PortRef();
        prevPortRef.setPortID("port3");
        prevPortRef.setShelfID("shelf3");

        EquipmentComp prevEquipmentComp = new EquipmentComp();
        prevEquipmentComp.setPortRef(Collections.singletonList(prevPortRef));

        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setEquipmentComp(Collections.singletonList(prevEquipmentComp));
        prevClrComponent.setType(CommonWrapperConstants.PORT);

        clrComponentList.add(prevClrComponent); // Add previous component to the list

        // Create a Node for the previous link
        Node existingNode = new Node();
        existingNode.setPortId("port3");
        nodes.add(existingNode); // Add existing Node to nodes list

        Link prevLink = new Link();
        prevLink.setTarget("port3");
        links.add(prevLink); // Add a previous link to trigger the else condition

        // Act
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assert
        assertEquals(2, links.size(), "There should be two links created.");
        Link lastLink = links.get(1);
        assertEquals("port4", lastLink.getTarget(), "The target of the last link should be eqtObject portID.");
        assertEquals("port3", lastLink.getSource(), "The source of the last link should be the existing node's port ID.");
    }

    @Test
    void testProcess_WithNoPreviousNode() {
        // Arrange
        PortRef eqtObject = new PortRef();
        eqtObject.setPortID("port5");
        eqtObject.setShelfID("shelf5");

        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(Collections.singletonList(eqtObject));

        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        clrComponent.setType(CommonWrapperConstants.PORT);

        // Previous link that refers to a non-existing node
        Link prevLink = new Link();
        prevLink.setTarget("nonExistingPort"); // This port does not exist in the nodes list
        links.add(prevLink); // Add a previous link

        // Act
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size(), "Only the initial link should exist as there was no valid previous node.");
    }

    @Test
    void testProcess_WithNoLinks() {
        // Arrange
        PortRef eqtObject = new PortRef();
        eqtObject.setPortID("port6");
        eqtObject.setShelfID("shelf6");

        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(Collections.singletonList(eqtObject));

        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        clrComponent.setType(CommonWrapperConstants.PORT);

        // No previous links
        // Act
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size(), "There should be one link created for the new equipment component.");
        Link lastLink = links.get(0);
        assertEquals("port6", lastLink.getTarget(), "The target of the link should be eqtObject portID.");
    }
}
```

### Key Changes:
1. **Test Structure**: The test cases are structured to create nodes and links clearly, ensuring that the links reference valid nodes when the `process` method is called.

2. **Test for No Previous Node**: The `testProcess_WithNoPreviousNode` method now explicitly tests the scenario where the previous link does not point to a valid node.

3. **New Test Case for No Links**: Added `testProcess_WithNoLinks` to check behavior when there are no links present. This ensures that a new link is created for the current equipment component.

4. **Assertions**: The assertions confirm that the expected number of links is created, and that the target and source of the links are set correctly.

These changes should help eliminate the `NullPointerException` and ensure that the `process` method is tested effectively. Please run the updated test cases and let me know if you encounter any further issues!