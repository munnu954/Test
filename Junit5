To achieve 100% code coverage for the conditional statement `if(utils.isValidData(customerEcpdModel.getSensitivity()))` and the associated catch block in the `onMessage` method, we need to write additional test cases. These tests will simulate scenarios where sensitivity data is valid or invalid and where an exception is thrown during the sensitivity check process.

Hereâ€™s how you can expand your test suite to cover these scenarios:

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import com.verizon.vbg.ledger.model.RequestJSONString;
import com.verizon.vbg.ledger.model.ServiceMessage;
import com.verizon.vbg.ledger.model.CustomerEcpdModel;

import reactor.core.publisher.Mono;

@ExtendWith(MockitoExtension.class)
public class EventsMessageListenerTest {

    @Mock
    private AccountEcpdService accountService;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @Mock
    private BatchLoaderUtils utils;

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(eventsMessageListener, "producerTopic", "testProducerTopic");
    }

    // Existing tests ...

    @Test
    public void testOnMessage_validPayload_withSensitivityData() throws Exception {
        ConsumerRecord<String, String> record = new ConsumerRecord<>("testTopic", 0, 0L, null, "validPayload");

        ServiceMessage serviceMessage = new ServiceMessage();
        serviceMessage.setRequestJSONString("validJSONString");

        RequestJSONString requestJSONString = createValidRequestJSONString("123456");
        
        when(utils.convert(anyString(), eq(ServiceMessage.class))).thenReturn(serviceMessage);
        when(utils.convert(anyString(), eq(RequestJSONString.class))).thenReturn(requestJSONString);
        when(utils.isValidData(anyString())).thenReturn(true);
        
        CustomerEcpdModel customerEcpdModel = new CustomerEcpdModel();
        customerEcpdModel.setSensitivity("N");
        when(accountService.getEcpdByAcctId(anyString())).thenReturn(Mono.just("sensitivityData"));
        when(utils.convert(any(), eq(CustomerEcpdModel.class))).thenReturn(customerEcpdModel);

        eventsMessageListener.onMessage(record, "validPayload");

        // Verify that the message is processed and sent
        verify(kafkaTemplate, times(1)).send(any(ProducerRecord.class));
    }

    @Test
    public void testOnMessage_validPayload_withSensitiveData() throws Exception {
        ConsumerRecord<String, String> record = new ConsumerRecord<>("testTopic", 0, 0L, null, "validPayload");

        ServiceMessage serviceMessage = new ServiceMessage();
        serviceMessage.setRequestJSONString("validJSONString");

        RequestJSONString requestJSONString = createValidRequestJSONString("123456");

        when(utils.convert(anyString(), eq(ServiceMessage.class))).thenReturn(serviceMessage);
        when(utils.convert(anyString(), eq(RequestJSONString.class))).thenReturn(requestJSONString);
        when(utils.isValidData(anyString())).thenReturn(true);

        CustomerEcpdModel customerEcpdModel = new CustomerEcpdModel();
        customerEcpdModel.setSensitivity("Y");
        when(accountService.getEcpdByAcctId(anyString())).thenReturn(Mono.just("sensitivityData"));
        when(utils.convert(any(), eq(CustomerEcpdModel.class))).thenReturn(customerEcpdModel);

        eventsMessageListener.onMessage(record, "validPayload");

        // Verify that the message is not sent due to sensitivity
        verify(kafkaTemplate, times(0)).send(any(ProducerRecord.class));
    }

    @Test
    public void testOnMessage_sensitivityCheckException() throws Exception {
        ConsumerRecord<String, String> record = new ConsumerRecord<>("testTopic", 0, 0L, null, "validPayload");

        ServiceMessage serviceMessage = new ServiceMessage();
        serviceMessage.setRequestJSONString("validJSONString");

        RequestJSONString requestJSONString = createValidRequestJSONString("123456");

        when(utils.convert(anyString(), eq(ServiceMessage.class))).thenReturn(serviceMessage);
        when(utils.convert(anyString(), eq(RequestJSONString.class))).thenReturn(requestJSONString);
        when(utils.isValidData(anyString())).thenReturn(true);
        when(accountService.getEcpdByAcctId(anyString())).thenThrow(new RuntimeException("Service Exception"));

        eventsMessageListener.onMessage(record, "validPayload");

        // Verify that the message is saved as failed due to exception
        verify(failedMessageService, times(1)).saveFailedRecords(any(), any(), any(), any(), anyChar());
    }

    private RequestJSONString createValidRequestJSONString(String accountNumber) {
        RequestJSONString requestJSONString = new RequestJSONString();
        CallRequest callRequest = new CallRequest();
        Body body = new Body();
        CustomerDetails customerDetails = new CustomerDetails();
        customerDetails.setAccountNumber(accountNumber);
        body.setRelinquishingCustomerDetails(customerDetails);
        callRequest.setBody(body);

        ServiceBody serviceBody = new ServiceBody();
        serviceBody.setCallRequest(callRequest);

        Service service = new Service();
        service.setServiceBody(serviceBody);

        requestJSONString.setService(service);
        return requestJSONString;
    }
}
```

### Explanation:

1. **`testOnMessage_validPayload_withSensitivityData`**:
   - Verifies that the payload with sensitivity data that is not marked as sensitive ("N") is processed and sent.

2. **`testOnMessage_validPayload_withSensitiveData`**:
   - Verifies that when the sensitivity is marked as "Y", the message is not sent because it is sensitive.

3. **`testOnMessage_sensitivityCheckException`**:
   - Tests the catch block by simulating an exception during the sensitivity check process. This ensures that the message is saved as a failed record when an exception occurs.

4. **Helper Method**: `createValidRequestJSONString` is a helper method to simplify the creation of a valid `RequestJSONString` object, reducing code duplication in tests.

These additional test cases ensure that all branches of the `onMessage` method, including the sensitivity check and exception handling, are thoroughly tested.