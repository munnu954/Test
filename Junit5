@Test
void testInitilizeKafkaConsumerClient() {
    KafkaMessageConsumer consumer = new KafkaMessageConsumer(); 
    
    Properties props = consumer.initilizeKafkaConsumerClient("testGroup");
    
    assertNotNull(props);
    assertEquals("localhost:9092", props.getProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG));
    assertEquals("testGroup", props.getProperty(ConsumerConfig.GROUP_ID_CONFIG));
    assertEquals(StringDeserializer.class.getName(), props.getProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG));
    assertEquals(StringDeserializer.class.getName(), props.getProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG));
    assertEquals(StringDeserializer.class, props.get(ErrorHandlingDeserializer.KEY_DESERIALIZER_CLASS));
    // Add more assertions based on your properties
    
}

@Test
void testCreateConsumerConnectionWithTopic() {
    KafkaMessageConsumer consumer = new KafkaMessageConsumer(); 
    KafkaConsumer<String, String> kafkaConsumer = consumer.createConsumerConnection("testTopic");
    
    assertNotNull(kafkaConsumer);
    // Add more assertions based on your logic in createConsumerConnection method
    
}

@Test
void testCreateConsumerConnectionWithTopicAndGroupId() {
    KafkaMessageConsumer consumer = new KafkaMessageConsumer(); 
    KafkaConsumer<String, String> kafkaConsumer = consumer.createConsumerConnection("testTopic", "testGroup");
    
    assertNotNull(kafkaConsumer);
    // Add more assertions based on your logic in createConsumerConnection method
    
}

@Test
void testCreateConsumerConnectionWithProps() {
    KafkaMessageConsumer consumer = new KafkaMessageConsumer(); 
    Properties props = new Properties();
    props.setProperty("consumer.topic", "testTopic");
    
    KafkaConsumer<String, String> kafkaConsumer = consumer.createConsumerConnection(props);
    
    assertNotNull(kafkaConsumer);
    // Add more assertions based on your logic in createConsumerConnection method
    
}

@Test
void testPollForMessages() throws ConsumerException {
    KafkaMessageConsumer consumer = new KafkaMessageConsumer(); 
    KafkaConsumer<String, String> kafkaConsumer = mock(KafkaConsumer.class);
    consumer.consumer = kafkaConsumer;
    
    ConsumerRecords<String, String> records = new ConsumerRecords<>(Collections.emptyMap());
    when(kafkaConsumer.poll(Duration.ofMillis(10))).thenReturn(records);
    
    List<Message> messages = consumer.pollForMessages();
    
    assertNotNull(messages);
    assertEquals(0, messages.size());
    // Add more assertions based on your logic in pollForMessages method
    
}

@Test
void testAcknowledgeMessage() throws ConsumerException {
    KafkaMessageConsumer consumer = new KafkaMessageConsumer(); 
    KafkaConsumer<String, String> kafkaConsumer = mock(KafkaConsumer.class);
    consumer.consumer = kafkaConsumer;
    
    Message message = new Message("test", "topic", 0, 1, 0);
    
    assertTrue(consumer.acknowledgeMessage(message));
    // Add more assertions based on your logic in acknowledgeMessage method
    
}

@Test
void testCloseConsumerConnection() {
    KafkaMessageConsumer consumer = new KafkaMessageConsumer(); 
    KafkaConsumer<String, String> kafkaConsumer = mock(KafkaConsumer.class);
    consumer.consumer = kafkaConsumer;
    
    consumer.closeConsumerConnection();
    
    verify(kafkaConsumer, times(1)).close();
    verify(kafkaConsumer, times(1)).wakeup();
    // Add more assertions based on your logic in closeConsumerConnection method
    
}