```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

import com.zensar.volery.batch.BatchLoaderUtils;
import com.zensar.volery.batch.KafkaFalloutService;
import com.zensar.volery.batch.listener.OutageLocationEventsMessageListener;
import com.zensar.volery.batch.model.KafkaFailedMessagesEntity;
import com.zensar.volery.batch.model.KafkaFailedMessagesPK;
import com.zensar.volery.batch.model.OutageGeolocation;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.internals.RecordHeader;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.SchemaType;
import org.apache.pulsar.client.api.SubscriptionType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;

@ExtendWith(MockitoExtension.class)
public class OutageLocationEventsMessageListenerTest {

    @Mock
    private BatchLoaderUtils utilities;

    @Mock
    private KafkaFalloutService failedMessageService;

    @InjectMocks
    private OutageLocationEventsMessageListener messageListener;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    private OutageGeolocation outageGeolocation;
    private KafkaFailedMessagesEntity messageEntity;
    private Header header;
    private String testHeader;
    private String jsonPayload;
    private Message<GenericRecord> pulsarMessage;
    private ProducerRecord<String, String> producerRecord;

    @BeforeEach
    public void setUp() {
        testHeader = "MessageType";
        outageGeolocation = new OutageGeolocation();
        outageGeolocation.setOutageId("outage_id_test");
        outageGeolocation.setGeojson("geojson_test");

        header = new RecordHeader(testHeader.getBytes(StandardCharsets.UTF_8), "Flow360AuditEvent".getBytes(StandardCharsets.UTF_8));
        messageEntity = new KafkaFailedMessagesEntity();
        KafkaFailedMessagesPK messageId = new KafkaFailedMessagesPK();
        messageId.setTopicName("topic_name_test");
        messageId.setTransactionId("transaction_id_test");
        messageEntity.setId(messageId);
        jsonPayload = "{\"outage_id\":\"outage_id_test\", \"geojson\":\"geojson_test\"}";

        pulsarMessage = Mockito.mock(Message.class);

        producerRecord = new ProducerRecord<>("producer_topic_test", null, "transaction_id_test", jsonPayload, List.of(header));
    }

    @Test
    public void testOnMessage_PayloadIsEmpty_ShouldThrowSystemException() throws Exception {
        when(pulsarMessage.getData()).thenReturn("".getBytes(StandardCharsets.UTF_8));

        messageListener.onMessage(pulsarMessage);
        verify(kafkaTemplate, never()).send(any());
        verify(failedMessageService, times(0)).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());
    }

    @Test
    public void testOnMessage_OutageId_IsEmpty_ShouldNotSaveRecord() throws SystemException, JsonProcessingException {
        outageGeolocation.setOutageId(null);
        when(utilities.convert(jsonPayload, OutageGeolocation.class)).thenReturn(outageGeolocation);
        when(pulsarMessage.getData()).thenReturn(jsonPayload.getBytes(StandardCharsets.UTF_8));

        messageListener.onMessage(pulsarMessage);
        verify(kafkaTemplate, never()).send(any());
        verify(failedMessageService, times(0)).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());
    }

    @Test
    public void testOnMessage_MalformedJSONObject_ShouldThrowSystemException() throws SystemException, JsonProcessingException {
        when(utilities.convert(anyString(), eq(OutageGeolocation.class))).thenThrow(JsonProcessingException.class);
        when(pulsarMessage.getData()).thenReturn(jsonPayload.getBytes(StandardCharsets.UTF_8));

        messageListener.onMessage(pulsarMessage);
        verify(kafkaTemplate, never()).send(any());
        verify(failedMessageService).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());
    }



    @Test
    public void testOnMessage_SystemException_ShouldSaveFailedRecord() throws SystemException, JsonProcessingException {
        when(utilities.convert(jsonPayload, OutageGeolocation.class)).thenReturn(outageGeolocation);
        when(pulsarMessage.getData()).thenReturn(jsonPayload.getBytes(StandardCharsets.UTF_8));
        doThrow(SystemException.class).when(kafkaTemplate).send(producerRecord);

        messageListener.onMessage(pulsarMessage);
        verify(utilities, times(1)).convert(anyString(), eq(OutageGeolocation.class));
        verify(kafkaTemplate).send(producerRecord);
        verify(failedMessageService).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());
    }

    @Test
    public void testOnMessage_ProperMessage_ShouldSaveRecord() throws SystemException, JsonProcessingException {
        when(utilities.convert(jsonPayload, OutageGeolocation.class)).thenReturn(outageGeolocation);
        when(pulsarMessage.getData()).thenReturn(jsonPayload.getBytes(StandardCharsets.UTF_8));
        SendResult<String, String> sendResult = new SendResult<>(new RecordMetadata(null, 1, 1, 1L, 1L, 1L, 1L), StringSerializer.EMPTY);
        when(kafkaTemplate.send(producerRecord)).thenReturn(CompletableFuture.completedFuture(sendResult));

        messageListener.onMessage(pulsarMessage);
        verify(utilities, times(1)).convert(anyString(), eq(OutageGeolocation.class));
        verify(kafkaTemplate, times(1)).send(producerRecord);
        verify(failedMessageService, never()).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());
    }

    @Test
    public void testOnMessage_BatchLoaderUtilsReturnsEmptyList_ShouldNotPassOnToKafka() throws SystemException, JsonProcessingException {
        when(pulsarMessage.getData()).thenReturn(jsonPayload.getBytes(StandardCharsets.UTF_8));
        when(utilities.returnHeaders(anyString())).thenReturn(new ArrayList<>());

        messageListener.onMessage(pulsarMessage);

        verify(utilities).returnHeaders(anyString());
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    public void testOnMessageFullBranchCoverage() throws SystemException, JsonProcessingException {
        when(pulsarMessage.getData()).thenReturn(jsonPayload.getBytes(StandardCharsets.UTF_8));
        when(utilities.convert(jsonPayload, OutageGeolocation.class)).thenReturn(outageGeolocation);
        SendResult<String, String> sendResult = new SendResult<>(new RecordMetadata(null, 1, 1, 1L, 1L, 1L, 1L), StringSerializer.EMPTY);
        when(kafkaTemplate.send(producerRecord)).thenReturn(CompletableFuture.completedFuture(sendResult));

        messageListener.onMessage(pulsarMessage);

        verify(utilities).returnHeaders(anyString());
        verify(kafkaTemplate).send(any(ProducerRecord.class));
    }
}
```