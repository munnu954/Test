To avoid the `NullPointerException` error in the test cases, you need to mock the `Alarm` object properly within the test method. Here is an example of how you can do it:

```java
@Test
void testCreateAlarm() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    
    // Mocking the Alarm object
    Alarm alarm = new Alarm();
    
    when(alarm.getPerceivedSeverity()).thenReturn(1);
    
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    
    percMap.put("Other", 6);
    percMap.put("Indeterminate", 1);
    stateMap.put("cleared", 6);
    
    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    
    String jsonMsg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
    
    alarmRepositoryImpl.createAlarm(jsonMsg);
    
    // Add assertions as needed to verify the behavior of the method
}
```

In the above code, `Alarm` object is mocked properly and the behavior of the `getPerceivedSeverity()` method is stubbed to return a fixed value. This will prevent the `NullPointerException` when calling methods on the `Alarm` object within the `createAlarm()` method.

Make sure to adjust the test case as needed to cover all the 8 branches of the mentioned block for 100% code coverage.