To achieve 100% code coverage for the `getAEnd` and `getZEnd` methods in the `CircuitDetailsProvider` class, you need to write JUnit 5 test cases that cover all possible branches and conditions. Below is a comprehensive set of test cases for both methods.

### Test Class

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;

class CircuitDetailsProviderTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAEnd_withNullResponse_shouldReturnNull() {
        assertNull(circuitDetailsProvider.getAEnd("circuitId", "clli", null));
    }

    @Test
    void testGetAEnd_withEmptyCircuitList_shouldReturnNull() {
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        assertNull(circuitDetailsProvider.getAEnd("circuitId", "clli", response));
    }

    @Test
    void testGetAEnd_withEmptyAEnd_shouldReturnNull() {
        CircuitDetailResponse response = createCircuitDetailResponse(Collections.emptyList());
        assertNull(circuitDetailsProvider.getAEnd("circuitId", "clli", response));
    }

    @Test
    void testGetAEnd_withValidAEnd_shouldReturnAEnd() {
        PortRef portRef = createPortRef("clli");
        AEnd expectedAEnd = createAEnd(portRef);

        CircuitDetailResponse response = createCircuitDetailResponse(Collections.singletonList(expectedAEnd));

        assertEquals(expectedAEnd, circuitDetailsProvider.getAEnd("circuitId", "clli", response));
    }

    @Test
    void testGetAEnd_withValidClrComponentPort_shouldReturnAEnd() {
        PortRef portRef = createPortRef("clli");
        Circuit circuit = new Circuit();
        ClrComponent clrComponent = createClrComponentWithPort(portRef);
        circuit.setClr(Collections.singletonList(createClr(clrComponent)));
        CircuitDetailResponse response = createCircuitDetailResponse(Collections.emptyList(), circuit);

        AEnd aEnd = circuitDetailsProvider.getAEnd("circuitId", "clli", response);

        assertNotNull(aEnd);
        assertEquals(portRef, aEnd.getPortChannel().get(0).getPortRef().get(0));
    }

    @Test
    void testGetZEnd_withNullResponse_shouldReturnNull() {
        assertNull(circuitDetailsProvider.getZEnd("circuitId", "clli", null));
    }

    @Test
    void testGetZEnd_withEmptyCircuitList_shouldReturnNull() {
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        assertNull(circuitDetailsProvider.getZEnd("circuitId", "clli", response));
    }

    @Test
    void testGetZEnd_withEmptyZEnd_shouldReturnNull() {
        CircuitDetailResponse response = createCircuitDetailResponse(Collections.emptyList());
        assertNull(circuitDetailsProvider.getZEnd("circuitId", "clli", response));
    }

    @Test
    void testGetZEnd_withValidZEnd_shouldReturnZEnd() {
        PortRef portRef = createPortRef("clli");
        ZEnd expectedZEnd = createZEnd(portRef);

        CircuitDetailResponse response = createCircuitDetailResponse(Collections.singletonList(expectedZEnd));

        assertEquals(expectedZEnd, circuitDetailsProvider.getZEnd("circuitId", "clli", response));
    }

    @Test
    void testGetZEnd_withValidClrComponentPort_shouldReturnZEnd() {
        PortRef portRef = createPortRef("clli");
        Circuit circuit = new Circuit();
        ClrComponent clrComponent = createClrComponentWithPort(portRef);
        circuit.setClr(Collections.singletonList(createClr(clrComponent)));
        CircuitDetailResponse response = createCircuitDetailResponse(Collections.emptyList(), circuit);

        ZEnd zEnd = circuitDetailsProvider.getZEnd("circuitId", "clli", response);

        assertNotNull(zEnd);
        assertEquals(portRef, zEnd.getPortChannel().get(0).getPortRef().get(0));
    }

    // Helper Methods
    private CircuitDetailResponse createCircuitDetailResponse(List<AEnd> aEnds) {
        Circuit circuit = new Circuit();
        circuit.setAEnd(aEnds);
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(Collections.singletonList(circuit));
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);
        return response;
    }

    private CircuitDetailResponse createCircuitDetailResponse(List<ZEnd> zEnds, Circuit circuit) {
        circuit.setZEnd(zEnds);
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(Collections.singletonList(circuit));
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);
        return response;
    }

    private Clr createClr(ClrComponent clrComponent) {
        Clr clr = new Clr();
        PathLst pathLst = new PathLst();
        Path path = new Path();
        path.setClrComponent(Collections.singletonList(clrComponent));
        pathLst.setPath(Collections.singletonList(path));
        clr.setPathLst(Collections.singletonList(pathLst));
        return clr;
    }

    private ClrComponent createClrComponentWithPort(PortRef portRef) {
        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.PORT);
        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        return clrComponent;
    }

    private PortRef createPortRef(String clliCode) {
        PortRef portRef = new PortRef();
        portRef.setClliCode(clliCode);
        return portRef;
    }

    private AEnd createAEnd(PortRef portRef) {
        AEnd aEnd = new AEnd();
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(Collections.singletonList(portRef));
        aEnd.setPortChannel(Collections.singletonList(portChannel));
        return aEnd;
    }

    private ZEnd createZEnd(PortRef portRef) {
        ZEnd zEnd = new ZEnd();
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(Collections.singletonList(portRef));
        zEnd.setPortChannel(Collections.singletonList(portChannel));
        return zEnd;
    }
}
```

### Explanation

The test cases cover:

1. **Null and Empty Responses**: Ensures methods return `null` when inputs are `null` or empty.
2. **Valid AEnd and ZEnd**: Tests when valid data is present in the response.
3. **ClrComponent Logic**: Checks the logic for handling `ClrComponent` within circuits.
4. **Helper Methods**: Used to construct mock data for different scenarios.

These tests aim to cover all logical branches of the `getAEnd` and `getZEnd` methods. Adjust the mock data and expectations based on your actual implementations and dependencies.