Thank you for your patience. To handle only improperly formatted JSON inputs without causing errors for properly formatted ones, we can modify the code to check if the input can be serialized with `writeValueAsString`. If it cannot be serialized, we will apply the serialization and deserialization process.

Here's the updated code:

```java
public HashMap<String, Object> removeNullValuesInJsonAttributes(Map<String, Object> msg) {
    HashMap<String, Object> resultMsg = new HashMap<>(msg);
    try {
        for (Map.Entry<String, Object> iterate : msg.entrySet()) {
            Object value = iterate.getValue();
            HashMap<String, Object> updatedMsg;

            // Check if the value is a properly formatted JSON
            if (checkIfJsonValue(value)) {
                // If it's already a proper JSON, parse it directly
                updatedMsg = RulesConstants.getObjectMapper().readValue(
                    value.toString(),
                    HashMap.class
                );
            } else {
                // Convert the improper JSON to a valid JSON string and then parse it back to a HashMap
                updatedMsg = RulesConstants.getObjectMapper().readValue(
                    RulesConstants.getObjectMapper().writeValueAsString(value),
                    HashMap.class
                );
            }

            // If the value itself is a JSON object, recursively call the method
            updatedMsg = removeNullValuesInJsonAttributes(updatedMsg);

            // Remove null or empty values from updatedMsg
            updatedMsg.values().removeIf(v -> v == null || (v instanceof String && v.toString().isEmpty()));

            // If updatedMsg is not empty, put it back into the result
            if (!updatedMsg.isEmpty()) {
                resultMsg.put(iterate.getKey(), updatedMsg);
            } else {
                resultMsg.remove(iterate.getKey());
            }
        }
    } catch (Exception e) {
        logger.error("Exception occurred while trying to remove null/empty values from json attributes: " + e);
    }
    return resultMsg;
}
```

### Key Changes:
1. **Conditional Handling**: The code checks if the value is a properly formatted JSON using `checkIfJsonValue(value)`. If it passes this check (i.e., it is valid), it is parsed directly without serialization.

2. **Serialization for Improper JSON**: If the value is not in a proper JSON format, it is serialized using `writeValueAsString`, ensuring that it is converted into a valid JSON string before being parsed.

3. **Recursive Call**: After processing, the recursive call to `removeNullValuesInJsonAttributes(updatedMsg)` is retained to handle any nested JSON objects.

This adjustment should ensure that only improperly formatted JSON inputs go through the serialization process, thereby avoiding errors with properly formatted JSON.