UnifiedAuditMessage class:-
```java
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UnifiedAuditMessage {
    @NotBlank
    private String inputFilePath;
    @NotBlank
    private String url;
    @NotNull
    private Integer port;
    @NotBlank
    private String outputFilePath;
    @NotBlank
    private String delimiters;
    @NotBlank
    private String fileType;
    @NotNull
    private String date_received;
    private String date_processed;
    @NotNull
    private Integer no_of_records_in_the_file;
    @NotNull
    private Integer no_of_records_processed;
    @NotNull
    private Integer no_of_records_failed;
    @NotNull
    private String job_id;
    @NotNull
    private String jar_id;
    private List<String> exceptions;
    @NotNull
    private String collector_id;
    private String job_status;
}
```

JobStatus class:-
```java
public enum JobStatus {
    COLLECTION_NEW,
    COLLECTION_IN_PROGRESS,
    COLLECTION_SUCCESSFUL,
    COLLECTION_FAILED,
    FLINK_JOB_NEW,
    FLINK_JOB_SUBMITTED,
    FLINK_JOB_IN_PROGRESS,
    FLINK_JOB_SUCCESSFUL,
    FLINK_JOB_FAILED
}
```

KafkaAuditProducer.java:-
```java
@Service
public class KafkaAuditProducer {
    private static final Logger Logger = LoggerFactory.getLogger(KafkaAuditProducer.class);

    @Value("${spring.kafka.producer.topic-name}")
    private String topicName;

    private final KafkaTemplate<String, Object> kafkaTemplate;

    @Autowired
    public KafkaAuditProducer(KafkaTemplate<String, Object> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public String sendMessage(UnifiedAuditMessage auditMsg) {
        Logger.info(String.format("Message sent %s", auditMsg));
        kafkaTemplate.send(topicName, auditMsg);
        return "Message sent successfully";
    }

    public void setJobStatus(UnifiedAuditMessage auditMsg, JobStatus jobStatus) {
        auditMsg.setJob_status(jobStatus.toString());
        sendMessage(auditMsg);
    }
}
```

FlinkApiController.java:-
```java
@Service
public class FlinkApiController {

    @Value("${flink.api.url}")
    private String flinkApiUrl;

    @Value("${flink.job.csv.jarid}")
    private String flinkJobJarid;

    @Value("${flink.job.csv.program-args}")
    private String programArgs;

    @Value("${flink.job.txt.jarid}")
    private String flinkJobtxtJarid;

    @Value("${flink.job.xml.program-args}")
    private String programXmlArgs;

    @Value("${flink.job.xml.jarid}")
    private String flinkJobXmlJarid;

    @Value("${log.directory.path}")
    private String logFolderPath;

    private KafkaConsumer KafkaConsumer = new KafkaConsumer();

    @Autowired
    private KafkaAuditProducer kafkaAuditProducer;

    HttpHeaders headers = new HttpHeaders();

    private static final Logger LOGGER = LoggerFactory.getLogger(FlinkApiController.class);

    @PostMapping
    public String triggerJob(UnifiedAuditMessage auditMsg, String fileType) {

        RestTemplate restTemplate = new RestTemplate();
        LOGGER.info("TRIGGER JOB::::");
        HttpEntity<String> request = null;
        String jobSubmitUrl = null;

        if (programArgs != null && !programArgs.isEmpty()) {
            headers.setContentType(MediaType.APPLICATION_JSON);

            JSONObject requestBody = new JSONObject();
            try {
                if (fileType.equalsIgnoreCase(".csv")) {
                    requestBody.put("programArgs", programArgs.replace("input", auditMsg.getInputFilePath()));
                    jobSubmitUrl = flinkApiUrl + "/jars/" + flinkJobJarid + "/run";

                } else if (fileType.equalsIgnoreCase(".xml")) {
                    LOGGER.info("XML FLINK TRIGGER::");

                    programXmlArgs = programXmlArgs.replace("|filePath|", auditMsg.getInputFilePath());
                    programXmlArgs = programXmlArgs.replace(" |primaryKey|", "");
                    requestBody.put("programArgs", programXmlArgs);
                    jobSubmitUrl = flinkApiUrl + "/jars/" + flinkJobXmlJarid + "/run";
                    LOGGER.info("jobSubmitUrl:" + jobSubmitUrl);
                    LOGGER.info("requestBody::" + requestBody.toString());
                } else if (fileType.equalsIgnoreCase(".txt")) {
                    LOGGER.info("TEXT FLINK TRIGGER::");

                    requestBody.put("programArgs", programArgs.replace("|input|", auditMsg.getInputFilePath()));

                    jobSubmitUrl = flinkApiUrl + "/jars/" + flinkJobtxtJarid + "/run";

                }

                request = new HttpEntity<String>(requestBody.toString(), headers);

                // Trigger the submitted jar
                ResponseEntity<String> response = restTemplate.postForEntity(jobSubmitUrl, request, String.class);

                LOGGER.info("response: {}", response);

                if (response != null && response.getStatusCode() == HttpStatus.OK) {
                    return "Job submitted";
                } else {
                    LOGGER.info("Not Ok!!");
                    auditMsg.setJob_status(JobStatus.FLINK_JOB_FAILED.toString());
                    kafkaAuditProducer.sendMessage(auditMsg);
                    kafkaConsumer.writeLogToFile(auditMsg, fileType, response, logFolderPath);
                }
            } catch (Exception e) {
                e.printStackTrace();
                LOGGER.error("Error triggering job", e.getMessage());
                auditMsg.setJob_status(JobStatus.FLINK_JOB_FAILED.toString());
                kafkaAuditProducer.sendMessage(auditMsg);
                kafkaConsumer.writeLogToFile(auditMsg, fileType, null, logFolderPath);
            }
        }
        return "Job is not triggered";
    }
}
```

KafkaConsumer.java class:-
```java
@Service
public class KafkaConsumer {
    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaConsumer.class);

    @Value("${file.txtsource}")
    private String sourceFilePath;

    @Value("${file.destination}")
    private String destinationFolderPath;

    @Value("${spring.kafka.producer.topic-name}")
    private String topic;

    @Autowired
    private KafkaTopicUtil util;

    @Autowired
    FlinkApiController flinkApi;

    @Autowired
    KafkaAuditProducer kafkaAuditProducer;

    @KafkaListener(topics = "${spring.kafka.producer.topic-name}", groupId = "${spring.kafka.consumer.group-id}", errorHandler = "kafkaEventErrorHandler")
    public void consume(String data) throws IOException {
        LocalDateTime dataReceived = LocalDateTime.now();
        UnifiedAuditMessage auditMsg = null;
        String fileType = null;
        try {
            if (data.contains("inputFilePath")) {
                ObjectMapper mapper = new ObjectMapper();
                auditMsg = mapper.readValue(data, UnifiedAuditMessage.class);
                LOGGER.info("Message Received {}", auditMsg);
                LOGGER.info(String.format("Message received->