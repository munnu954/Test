Here are the JUnit 5 test cases for the specified branches of the `validateIterator` method in the `MtnInsightsValidator` class. These tests aim to cover all the branches you've mentioned while ensuring that the expected exceptions are thrown with the appropriate messages.

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;

public class MtnInsightsValidatorTest {

    @InjectMocks
    private MtnInsightsValidator mtnInsightsValidator;

    private MtnInsightsAttributes mtnInsightsAttributes;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mtnInsightsAttributes = new MtnInsightsAttributes();
    }

    @Test
    public void testValidateIterator_AllFieldsEmpty_ShouldThrowException() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn(null);
        mtnInsightsAttributes.setInsightCategory(null);
        mtnInsightsAttributes.setInsightName(null);
        mtnInsightsAttributes.setEcpdId(null);

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    public void testValidateIterator_InsightCategoryAndNameEmpty_ShouldThrowException() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn("123456789");
        mtnInsightsAttributes.setInsightCategory(null);
        mtnInsightsAttributes.setInsightName(null);
        mtnInsightsAttributes.setEcpdId("ECPD123");

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    public void testValidateIterator_InsightCategoryAndNameValid_ShouldThrowException() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn("123456789");
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        mtnInsightsAttributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        mtnInsightsAttributes.setEcpdId("ECPD123");

        // Valid case, should not throw an exception
        assertDoesNotThrow(() -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_EmptyMtnAndEcpdId_ShouldThrowException() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn(null);
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        mtnInsightsAttributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        mtnInsightsAttributes.setEcpdId(null);

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    public void testValidateIterator_EmptyEcpdId_ShouldThrowException() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn("123456789");
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        mtnInsightsAttributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        mtnInsightsAttributes.setEcpdId(null);

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    public void testValidateIterator_EmptyInsightNameAndValidCategory_ShouldThrowException() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn("123456789");
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        mtnInsightsAttributes.setInsightName(null);
        mtnInsightsAttributes.setEcpdId("ECPD123");

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, exception.getMessage());
    }

    @Test
    public void testValidateIterator_OnlyOutageIdMissing_ShouldThrowException() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn("123456789");
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsAttributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));
        mtnInsightsAttributes.setEcpdId("ECPD123");
        // Assuming outageId is a field we need to add
        mtnInsightsAttributes.setOutageId(null); // Assuming this is part of MtnInsightsAttributes

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORK_OUTAGE, exception.getMessage());
    }

    @Test
    public void testValidateIterator_NetworkOutageCategoryWithValidParams_ShouldNotThrow() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn("123456789");
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsAttributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));
        mtnInsightsAttributes.setEcpdId("ECPD123");
        mtnInsightsAttributes.setOutageId("OUTAGE123"); // valid outageId

        assertDoesNotThrow(() -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });
    }

    @Test
    public void testValidateIterator_NetworkOutageCategoryWithAllEmpty_ShouldThrow() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn(null);
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsAttributes.setInsightName(null);
        mtnInsightsAttributes.setEcpdId(null);

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_InsightCategoryNetworkOutageWithNameMissing_ShouldThrowException() {
        String logVal = "LogVal ";
        mtnInsightsAttributes.setMtn("123456789");
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsAttributes.setInsightName(null);
        mtnInsightsAttributes.setEcpdId("ECPD123");

        Exception exception = assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, logVal);
        });

        assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }
}
```

### Explanation of Test Cases:
1. **testValidateIterator_AllFieldsEmpty_ShouldThrowException**: Tests the case where all key fields are empty, expecting an exception with the appropriate message.
2. **testValidateIterator_InsightCategoryAndNameEmpty_ShouldThrowException**: Tests when both `insightCategory` and `insightName` are empty.
3. **testValidateIterator_InsightCategoryAndNameValid_ShouldThrowException**: Validates that no exception is thrown when both `insightCategory` and `insightName` are correctly set.
4. **testValidateIterator_EmptyMtnAndEcpdId_ShouldThrowException**: Ensures an exception is thrown when both `mtn` and `ecpdId` are empty.
5. **testValidateIterator_EmptyEcpdId_ShouldThrowException**: Validates that an exception is thrown when `ecpdId` is empty.
6. **testValidateIterator_EmptyInsightNameAndValidCategory_ShouldThrowException**: Tests for an exception when `insightName` is empty but `insightCategory` is valid.
7. **testValidateIterator_OnlyOutageIdMissing_ShouldThrowException**: Checks for an exception when other fields are filled but the outage ID is missing.
8. **testValidateIterator_NetworkOutageCategoryWithValidParams_ShouldNotThrow**: Validates that no exception occurs with correct parameters for network outage.
9. **testValidateIterator_NetworkOutageCategoryWithAllEmpty_ShouldThrow**: Tests for missing required fields for network outage category.
10. **testValidateIterator_InsightCategoryNetworkOutageWithNameMissing_ShouldThrowException**: Tests when the `insightName` is missing for a network outage category.

These tests comprehensively cover the branches specified and ensure that the conditions within the `validateIterator` method are exercised correctly.