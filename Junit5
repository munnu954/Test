To achieve 100% code coverage for the `UserInsightsValidator` class, you need to create JUnit 5 test cases that cover all branches of the `validate`, `validateIterator`, and `validate` methods. Here's an example of how you might write these tests:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.*;

public class UserInsightsValidatorTest {

    private UserInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        validator = new UserInsightsValidator();
    }

    @Test
    public void testValidateUserInsightsRequest_Success() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setServiceHeader(new ServiceHeader());
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("user123");
        attributes.setEcpId("ecp123");
        attributes.setInsightCategory("category1");
        attributes.setInsightName("name1");
        request.setKeyAttributes(attributes);

        assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidateUserInsightsRequest_InvalidRequestType() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setServiceHeader(new ServiceHeader());
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> validator.validate(request));
        assertEquals("Invalid request type ", exception.getMessage());
    }

    @Test
    public void testValidateUserInsightsRequest_MissingKeyAttributes() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setServiceHeader(new ServiceHeader());

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> validator.validate(request));
        assertEquals("Either KeyAttributes (Single) or ListKeyAttributes (Multiple) are required.", exception.getMessage());
    }

    @Test
    public void testValidateIterator_MissingFields() {
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("user123");

        Executable executable = () -> validator.validateIterator(null, attributes, "KeyAttributes");
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, executable);
        assertEquals("KeyAttributes" + LOGGER_MESSAGE_USER_INSIGHTS, exception.getMessage());
    }

    @Test
    public void testValidateIterator_EmptyFields() {
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("");
        attributes.setEcpId("ecp123");
        attributes.setInsightCategory("category1");
        attributes.setInsightName("name1");

        Executable executable = () -> validator.validateIterator(null, attributes, "KeyAttributes");
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, executable);
        assertEquals(USER_SEARCH_MAND_FIELDS_CHECK, exception.getMessage());
    }

    @Test
    public void testValidateUserInsightsSearchRequest_Success() {
        UserInsightsSearchRequest request = new UserInsightsSearchRequest();
        request.setServiceHeader(new ServiceHeader());
        UserInsightsSearchParam param = new UserInsightsSearchParam();
        param.setUserId("user123");
        param.setEcpId("ecp123");
        param.setInsightCategory(new String[]{"category1"});
        param.setInsightName(new String[]{"name1"});
        request.setServiceRequest(param);

        assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidateUserInsightsSearchRequest_MissingFields() {
        UserInsightsSearchRequest request = new UserInsightsSearchRequest();
        request.setServiceHeader(new ServiceHeader());
        UserInsightsSearchParam param = new UserInsightsSearchParam();
        param.setUserId("");
        param.setEcpId("ecp123");
        param.setInsightCategory(new String[]{"category1"});
        param.setInsightName(new String[]{"name1"});
        request.setServiceRequest(param);

        Executable executable = () -> validator.validate(request);
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, executable);
        assertEquals(USER_SEARCH_MAND_FIELDS_CHECK, exception.getMessage());
    }

    @Test
    public void testValidateUserInsightsSearchRequest_MissingKeys() {
        UserInsightsSearchRequest request = new UserInsightsSearchRequest();
        request.setServiceHeader(new ServiceHeader());
        UserInsightsSearchParam param = new UserInsightsSearchParam();

        Executable executable = () -> validator.validate(request);
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, executable);
        assertEquals("ServiceRequest Ecpd Id, User Id, Insight Category and Insight Name are required.", exception.getMessage());
    }
}
```

### Key Points:
- **Setup**: Each test initializes a `UserInsightsValidator` instance.
- **Validation**: Tests cover valid and invalid scenarios for `UserInsightsRequest` and `UserInsightsSearchRequest`.
- **Assertions**: The tests assert that the expected exceptions are thrown with the correct messages.
- **Coverage**: The tests are designed to cover all branches and potential error paths within the methods.

Remember to replace `LOGGER_MESSAGE_USER_INSIGHTS` and `USER_SEARCH_MAND_FIELDS_CHECK` with the actual constant values or mock them if necessary. Adjust any schema or validation details to fit the actual implementation context.