Sure! Here's the converted code using Spring Boot annotations:

```java
import org.apache.flink.api.common.serialization.SimpleStringSchema;
import org.apache.flink.core.fs.Path;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.sink.SinkFunction;
import org.apache.flink.streaming.api.functions.source.FileSource;
import org.apache.flink.streaming.api.watermark.WatermarkStrategy;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class Main {
    @Value("${spring.kafka.consumer.bootstrap-servers}")
    private String bootstrapServer;

    @Value("${spring.kafka.topic.name}")
    private String topic;

    public static void main(String[] args) {
        SpringApplication.run(Main.class, args);
    }

    @Bean
    public StreamExecutionEnvironment executionEnvironment() {
        return StreamExecutionEnvironment.getExecutionEnvironment();
    }

    @Bean
    public FileSource<String> fileSource(StreamExecutionEnvironment env) {
        String path = "src/main/resources/files";
        return FileSource.forRecordStreamFormat(new TextLineInputFormat(), new Path(path)).build();
    }

    @Bean
    public DataStream<String> stream(FileSource<String> fileSource) {
        return env.fromSource(fileSource, WatermarkStrategy.noWatermarks(), "file-source");
    }

    @Bean
    public SinkFunction<String> kafkaSink() {
        return KafkaSink.<String>builder()
                .setBootstrapServers(bootstrapServer)
                .setRecordSerializer(KafkaRecordSerializationSchema.builder()
                        .setTopic(topic)
                        .setValueSerializationSchema(new SimpleStringSchema())
                        .build())
                .setDeliveryGuarantee(DeliveryGuarantee.AT_LEAST_ONCE)
                .build();
    }

    @Bean
    public void execute(StreamExecutionEnvironment env, DataStream<String> stream, SinkFunction<String> kafkaSink) throws Exception {
        stream.flatMap(new MyFlatMapFunction()).addSink(kafkaSink);
        env.execute();
    }
}
```

Make sure to update the class names and import statements accordingly.