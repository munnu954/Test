Here's an example of how you can write JUnit 5 test cases for the `ArchivalFileMovement` class:

```
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
@ActiveProfiles("test")
public class ArchivalFileMovementTest {

    @Autowired
    private ArchivalFileMovement archivalFileMovement;

    @Mock
    private Logger LOGGER;

    @Test
    void testMoveFilesMatchingPattern() throws Exception {
        // Arrange
        String sourcePathPattern = "src/test/resources/files/*.txt";
        String destinationPath = "src/test/resources/destination";
        Path sourceDir = Paths.get("src/test/resources/files");
        String filePattern = ".*\\.txt";

        // Act
        archivalFileMovement.moveFilesMatchingPattern(sourcePathPattern, destinationPath);

        // Assert
        verify(LOGGER).info("Number of files found with Matching pattern: {}", 2);
    }

    @Test
    void testMoveFilesMatchingPattern_NoFilesFound() throws Exception {
        // Arrange
        String sourcePathPattern = "src/test/resources/files/*.pdf";
        String destinationPath = "src/test/resources/destination";

        // Act and Assert
        assertDoesNotThrow(() -> archivalFileMovement.moveFilesMatchingPattern(sourcePathPattern, destinationPath));
        verify(LOGGER).info("Number of files found with Matching pattern: {}", 0);
    }

    @Test
    void testMoveFilesMatchingPattern_Exception() throws Exception {
        // Arrange
        String sourcePathPattern = "src/test/resources/files/*.txt";
        String destinationPath = "invalid/path";

        // Act and Assert
        assertThrows(Exception.class, () -> archivalFileMovement.moveFilesMatchingPattern(sourcePathPattern, destinationPath));
        verify(LOGGER).error("Error moving file::", any(), any());
    }

    @Test
    void testGetSourceDirectory() throws Exception {
        // Arrange
        String sourcePathPattern = "file:///src/test/resources/files/*.txt";
        ArchivalFileMovement archivalFileMovement = new ArchivalFileMovement();

        // Use Reflection API to access private method
        Method getSourceDirectoryMethod = ArchivalFileMovement.class.getDeclaredMethod("getSourceDirectory", String.class);
        getSourceDirectoryMethod.setAccessible(true);

        // Act
        Path sourceDir = (Path) getSourceDirectoryMethod.invoke(archivalFileMovement, sourcePathPattern);

        // Assert
        assertEquals(Paths.get("src/test/resources/files"), sourceDir);
    }

    @Test
    void testGetFilePattern() throws Exception {
        // Arrange
        String sourcePathPattern = "file:///src/test/resources/files/*.txt";
        ArchivalFileMovement archivalFileMovement = new ArchivalFileMovement();

        // Use Reflection API to access private method
        Method getFilePatternMethod = ArchivalFileMovement.class.getDeclaredMethod("getFilePattern", String.class);
        getFilePatternMethod.setAccessible(true);

        // Act
        String filePattern = (String) getFilePatternMethod.invoke(archivalFileMovement, sourcePathPattern);

        // Assert
        assertEquals(".*\\.txt", filePattern);
    }
}
```

In the above test class, we have covered all the possible branches of the `moveFilesMatchingPattern` method.

- `testMoveFilesMatchingPattern`: Tests the scenario where files are moved successfully.
- `testMoveFilesMatchingPattern_NoFilesFound`: Tests the scenario where no files are found matching the pattern.
- `testMoveFilesMatchingPattern_Exception`: Tests the scenario where an exception occurs while moving files.
- `testGetSourceDirectory`: Tests the private `getSourceDirectory` method using Reflection API.
- `testGetFilePattern`: Tests the private `getFilePattern` method using Reflection API.

We have used Mockito to mock the `Logger` and verify the interactions. The `assertDoesNotThrow` method is used to verify that no exception is thrown.

Note: Make sure to replace the `src/test/resources/files` and `src/test/resources/destination` paths with actual paths in your test environment.

Also, ensure that the `ArchivalFileMovement` class is properly configured and autowired in the test context.

To achieve 100% code coverage, you may need to add additional test cases for edge scenarios or error conditions specific to your application.