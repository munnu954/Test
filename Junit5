To achieve 100% code coverage for the `toString()` method, you would need to test different scenarios in which the `CollectionAudit` object is instantiated with different combinations of its fields. Here is a sample JUnit 5 test class that covers various scenarios:

```java
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class CollectionAuditTest {

    @Test
    void testToString_AllFieldsNonNull() {
        // Arrange
        CollectionAudit audit = CollectionAudit.builder()
                .id("1")
                .collectorId("collectorId")
                .processType(ProcessType.Collector)
                .jarId("jarId")
                .jobId("jobId")
                .flinkJobId("flinkJobId")
                .jobStatus("jobStatus")
                .inputFilePath("inputFilePath")
                .outputFilePath("outputFilePath")
                .auditTopic("auditTopic")
                .url("url")
                .flinkURL("flinkURL")
                .port(8080)
                .delimiters(",")
                .fileType("fileType")
                .dateReceived("2023-10-12")
                .dateProcessed("2023-10-13")
                .noofRecordsInTheFile(100)
                .noofRecordsProcessed(90)
                .noofRecordsFailed(10)
                .exceptions("exceptions")
                .bootstrapServer("bootstrapServer")
                .build();

        // Act
        String result = audit.toString();

        // Assert
        assertNotNull(result);
        assertTrue(result.contains("CollectionAudit(id=1, collectorId=collectorId, processType=Collector, jarId=jarId, jobId=jobId, flinkJobId=flinkJobId, jobStatus=jobStatus, inputFilePath=inputFilePath, outputFilePath=outputFilePath, url=url, flinkURL=flinkURL, port=8080, delimiters=,, fileType=fileType, dateReceived=2023-10-12, dateProcessed=2023-10-13, noofRecordsInTheFile=100, noofRecordsProcessed=90, noofRecordsFailed=10, exceptions=exceptions, bootstrapServer=bootstrapServer)"));
    }

    @Test
    void testToString_AllFieldsNull() {
        // Arrange
        CollectionAudit audit = new CollectionAudit();

        // Act
        String result = audit.toString();

        // Assert
        assertNotNull(result);
        assertTrue(result.contains("CollectionAudit(id=null, collectorId=null, processType=null, jarId=null, jobId=null, flinkJobId=null, jobStatus=null, inputFilePath=null, outputFilePath=null, url=null, flinkURL=null, port=null, delimiters=null, fileType=null, dateReceived=null, dateProcessed=null, noofRecordsInTheFile=null, noofRecordsProcessed=null, noofRecordsFailed=null, exceptions=null, bootstrapServer=null)"));
    }

    @Test
    void testToString_SomeFieldsNull() {
        // Arrange
        CollectionAudit audit = CollectionAudit.builder()
                .id("1")
                .collectorId("collectorId")
                .processType(null)
                .jarId("jarId")
                .jobId("jobId")
                .flinkJobId(null)
                .jobStatus("jobStatus")
                .inputFilePath("inputFilePath")
                .outputFilePath("outputFilePath")
                .auditTopic("auditTopic")
                .url("url")
                .flinkURL(null)
                .port(8080)
                .delimiters(",")
                .fileType(null)
                .dateReceived("2023-10-12")
                .dateProcessed(null)
                .noofRecordsInTheFile(100)
                .noofRecordsProcessed(90)
                .noofRecordsFailed(null)
                .exceptions("exceptions")
                .bootstrapServer(null)
                .build();

        // Act
        String result = audit.toString();

        // Assert
        assertNotNull(result);
        assertTrue(result.contains("CollectionAudit(id=1, collectorId=collectorId, processType=null, jarId=jarId, jobId=jobId, flinkJobId=null, jobStatus=jobStatus, inputFilePath=inputFilePath, outputFilePath=outputFilePath, url=url, flinkURL=null, port=8080, delimiters=,, fileType=null, dateReceived=2023-10-12, dateProcessed=null, noofRecordsInTheFile=100, noofRecordsProcessed=90, noofRecordsFailed=null, exceptions=exceptions, bootstrapServer=null)"));
    }
}
```

This test class covers three scenarios:
1. **All fields are non-null**: Every field in the `CollectionAudit` object is populated with non-null values, ensuring that the `toString()` method handles non-null inputs correctly.
2. **All fields are null**: Every field in the `CollectionAudit` object is null, verifying that the `toString()` method can handle null values appropriately.
3. **Some fields are null**: Certain fields are populated while others are null, ensuring that the `toString()` method gracefully handles a mix of null and non-null values.

These tests ensure that the `toString()` method is fully covered.