import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class AlarmPostingUtilsTest {

    @Test
    void testEvaluateExpressionWithException() {
        // Mock Environment and Logger
        Environment env = mock(Environment.class);
        Logger logger = mock(Logger.class);

        // Mock static LogManager.getLogger method
        try (MockedStatic<LogManager> mockedStatic = Mockito.mockStatic(LogManager.class)) {
            mockedStatic.when(() -> LogManager.getLogger(anyString())).thenReturn(logger);

            // Create a mock for AlarmPostingUtils
            AlarmPostingUtils alarmPostingUtils = mock(AlarmPostingUtils.class);

            // Mock expression and topoMap
            String expression = "%test%";
            Map<String, Object> topoMap = new HashMap<>();
            topoMap.put("test", "value");

            // Mock the parse method to throw an exception
            doThrow(new Exception("Parsing error")).when(alarmPostingUtils).parse(expression, topoMap, anyString());

            // Call the evaluateExpression method
            String result = alarmPostingUtils.evaluateExpression(expression, topoMap);

            // Verify that the logger error method was called with the correct message
            verify(logger).error("Exception occurred while Parsing Expression: ()", "Parsing error");

            // Ensure that the result is empty
            assertEquals("", result);
        }
    }
}