@Test
public void testApplyPostingRule() throws Exception {
    // Setup
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    
    ResponseEntity<String> responseEntity = new ResponseEntity<>("topologyData", HttpStatus.OK);
    String componentIdReq = "componentIdReq";
    String alarmedObject = "alarmedObject";
    String alarmedObjectTopoDet = "alarmedObjectTopoDet";
    String topologyDetails = "topologyDetails";

    JsonNode jsonNode = new ObjectMapper().readTree("{ \"key\": \"value\" }");
    JsonNode topologyObjectsNode = new ObjectMapper().readTree("[ { \"key\": \"value\" } ]");

    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq)).thenReturn(responseEntity);
    Mockito.when(alarmedObjectExpression.trim()).thenReturn(alarmedObject);
    Mockito.when(topologyDetailsAlarmedObjectExpression.trim()).thenReturn(alarmedObjectTopoDet);

    Mockito.when(jsonNode.iterator()).thenReturn(topologyObjectsNode.elements());
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentIdReq)).thenReturn(responseEntity);
    Mockito.when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("value");

    // Execute
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    // Verify
    assertEquals(alarmedObject, result.getAlarmedObject());
    assertEquals(topologyDetails, result.getTopologyDetails());
}
