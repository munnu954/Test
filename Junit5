Here are some positive and negative Junit5 test cases for converting Gigamon CSV file with Headers as above to Json:


@Test
public void testConvertCsvToJsonWithValidData() throws Exception {
    String csvFile = "src/test/resources/gigamon.csv";
    String expectedJson = "{\"TimeStamp\":\"2023-02-25T10:00:00.000Z\",\"Node Name\":\"node1\",\"Connection Alias\":\"connection1\",\"Entity ID\":\"1234567890\",\"Monitoring Domain\":\"domain1\",\"Vseries ID\":\"1234567890\",\"TX Bytes\":1000000," +
        "\"RX Bytes\":2000000,\"TX Packets\":1000,\"RX Packets\":2000,\"TX Errors\":0,\"RX Errors\":0,\"TX Drops\":0,\"RX Drops\":0}";
    String actualJson = CsvtoJsonConversion.convertCsvToJson(csvFile);
    assertEquals(expectedJson, actualJson);
}

@Test
public void testConvertCsvToJsonWithEmptyData() throws Exception {
    String csvFile = "src/test/resources/empty.csv";
    String expectedJson = "";
    String actualJson = CsvtoJsonConversion.convertCsvToJson(csvFile);
    assertEquals(expectedJson, actualJson);
}

@Test
public void testConvertCsvToJsonWithNoHeader() throws Exception {
    String csvFile = "src/test/resources/no_header.csv";
    String expectedJson = "";
    String actualJson = CsvtoJsonConversion.convertCsvToJson(csvFile);
    assertEquals(expectedJson, actualJson);
}

@Test
public void testConvertCsvToJsonWithInvalidData() throws Exception {
    String csvFile = "src/test/resources/invalid.csv";
    String expectedJson = "";
    String actualJson = CsvtoJsonConversion.convertCsvToJson(csvFile);
    assertEquals(expectedJson, actualJson);
}