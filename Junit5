import org.junit.jupiter.api.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class ApiOperationTest {

    @Test
    public void testGetAlarmDetailsByIdHttpClientNotFoundException() {
        // given
        RestTemplate restTemplate = mock(RestTemplate.class);
        HttpClientErrorException.NotFound notFoundException = mock(HttpClientErrorException.NotFound.class);
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(), eq(String.class)))
                .thenThrow(notFoundException);

        AlarmGroupingParams configParams = new AlarmGroupingParams();
        ReflectionTestUtils.setField(configParams, "alarmFetchURL", "http://example.com");
        ReflectionTestUtils.setField(configParams, "alarmFilterKey", "authKey");

        ApiOperation apiOperation = new ApiOperation();
        ReflectionTestUtils.setField(apiOperation, "restTemplate", restTemplate);
        ReflectionTestUtils.setField(apiOperation, "configParams", configParams);

        // when
        String result = apiOperation.getAlarmDetailsById("123");

        // then
        assertEquals(null, result);
    }

}
```

In this test case, we are mocking the RestTemplate class and specifically throwing a HttpClientErrorException.NotFound when the exchange method is called. We are setting up the AlarmGroupingParams fields using ReflectionTestUtils and then testing the getAlarmDetailsById method to cover the HttpClientErrorException.NotFound catch block.