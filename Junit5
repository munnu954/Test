@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Spy
    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Test
    public void testApplyPostingRule() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking dependencies
        ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");

        // Set values for @Value annotated fields using ReflectionTestUtils
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "%Mock:TopologyExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

        // Execute the method to be tested
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions or verifications based on different scenarios
        assertNotNull(result);
    }

    @Test
    public void testApplyPostingRule_NullComponentId() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking dependencies
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(null);

        // Set values for @Value annotated fields using ReflectionTestUtils
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "%Mock:TopologyExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

        // Execute the method to be tested
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions or verifications based on different scenarios
        assertNotNull(result);
    }

    @Test
    public void testApplyPostingRule_NullResponse() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking dependencies
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(null);

        // Set values for @Value annotated fields using ReflectionTestUtils
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "%Mock:TopologyExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

        // Execute the method to be tested
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions or verifications based on different scenarios
        assertNotNull(result);
    }

    @Test
    public void testApplyPostingRule_MissingTopologyNode() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking dependencies
        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"missingNode\": true}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        // Set values for @Value annotated fields using ReflectionTestUtils
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "%Mock:TopologyExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

        // Execute the method to be tested
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions or verifications based on different scenarios
        assertNotNull(result);
    }

    @Test
    public void testApplyPostingRule_InvalidTopologyNode() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking dependencies
        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"invalidNode\": {}}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        // Set values for @Value annotated fields using ReflectionTestUtils
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "%Mock:TopologyExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

        // Execute the method to be tested
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions or verifications based on different scenarios
        assertNotNull(result);
    }
@Test
    public void testApplyPostingRule_validComponentIdAndTopologyData() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();
        
        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"topologyObjects\": [{\"MockKey\": \"MockValue\"}]}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("MockValue");

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertEquals("MockValue", result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_nullComponentId() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(null);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertNull(result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_emptyComponentId() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("");

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertNull(result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_nullResponse() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(null);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertNull(result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_missingTopologyNode() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"missingNode\": true}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertNull(result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_invalidTopologyNode() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"invalidNode\": {}}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertNull(result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_topologyDataEvaluationFailure() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"topologyObjects\": [{\"MockKey\": \"MockValue\"}]}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenThrow(new RuntimeException("Evaluation failed"));

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertNull(result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_invalidTopologyObjectsArray() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"topologyObjects\": \"invalidArray\"}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertNull(result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_validComponentIdButNoMatchingTopologyData() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"topologyObjects\": [{\"MockKey\": \"MockValue\"}]}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("NonMatchingValue");

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertNull(result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_validComponentIdWithEmptyAlarmedObject() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"topologyObjects\": [{\"MockKey\": \"MockValue\"}]}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("");

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
        assertNull(result.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_validComponentIdWithEmptyTopologyDetails() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"topologyObjects\": [{\"MockKey\": \"MockValue\"}]}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("MockValue");
        when(utils.evaluateExpression(eq("{\"Mock:TopoExpression\": \"value\"}"), anyMap())).thenReturn("");

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertNotNull(result);
}
   }
refer to the above PostingRuleProcessingServiceTest class code and similarly write Junit5 testcases code for the below PostingRuleProcessingService class for 100% code coverage of applyPostingRule(Alarm, PostingRule, Hashmap) method of PostingRuleProcessingService class. 

