@Test
public void testTriggerJobSuccessfulAndPublishMessageWithJobSubmittedStatus() throws JSONException {

    // Mocking the required dependencies

    // Creating a sample Unified AuditMessage for testing 
    String flinkJobJarid = "b9b4c3b9-5cee-43a9-a911-6a23b9d2ad91_custom-csv-data-transformer-0.0.1-SNAPSHOT-jar-with-dependencies.jar"; 
    String programArgs = "-input input -fileType csv -bootstarpServer localhost:9092 -Topic COLLECTION-OUTPUT"; 
    String inputFilePath = "C:/Temp/Device.csv";
    
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    auditMsg.setInputFilePath(inputFilePath);

    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_JSON); 
    
    HttpEntity<String> request = prepareRequest(auditMsg, programArgs, headers);
    
    ResponseEntity<String> responseEntity = new ResponseEntity<>(HttpStatus.FOUND);
    
    // Mocking the job submission response as successful
    when(restTemplate.exchange(eq(jobSubmitUrl), eq(HttpMethod.POST), eq(request), eq(String.class)))
            .thenReturn(responseEntity);
    
    // Triggering the job
    String result = flinkApiController.triggerJob(auditMsg, ".csv");
    
    // Asserting the result
    assertEquals("Job submitted", result);
    
    // Verifying the new format of Unified Audit Message is published to the queue with job_status FLINK_JOB_SUBMITTED
    verify(customDataTransformerClient, times(1)).publishNewAuditMessage(inputFilePath, FLINK_JOB_SUBMITTED);
}

@Test
public void testTriggerJobUnsuccessfulAndPublishMessageWithJobFailedStatus() throws JSONException {

    // Mocking the required dependencies

    // Creating a sample Unified AuditMessage for testing 
    String flinkJobJarid = "b9b4c3b9-5cee-43a9-a911-6a23b9d2ad91_custom-csv-data-transformer-0.0.1-SNAPSHOT-jar-with-dependencies.jar"; 
    String programArgs = "-input input -fileType csv -bootstarpServer localhost:9092 -Topic COLLECTION-OUTPUT"; 
    String inputFilePath = "C:/Temp/Device.csv";
    
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    auditMsg.setInputFilePath(inputFilePath);

    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_JSON); 
    
    HttpEntity<String> request = prepareRequest(auditMsg, programArgs, headers);
    
    ResponseEntity<String> responseEntity = new ResponseEntity<>(HttpStatus.NOT_FOUND);
    
    // Mocking the job submission response as unsuccessful
    when(restTemplate.exchange(eq(jobSubmitUrl), eq(HttpMethod.POST), eq(request), eq(String.class)))
            .thenReturn(responseEntity);
    
    // Triggering the job
    String result = flinkApiController.triggerJob(auditMsg, ".csv");
    
    // Asserting the result
    assertEquals("Job submission failed", result);
    
    // Verifying the new format of Unified Audit Message is published to the queue with job_status FLINK_JOB_FAILED
    verify(customDataTransformerClient, times(1)).publishNewAuditMessage(inputFilePath, FLINK_JOB_FAILED);
}

private HttpEntity<String> prepareRequest(UnifiedAuditMessage auditMsg, String programArgs, HttpHeaders headers) throws JSONException {
    JSONObject requestBody = new JSONObject();
    requestBody.put("programArgs", programArgs.replace("input", auditMsg.getInputFilePath()));
    return new HttpEntity<>(requestBody.toString(), headers);
}