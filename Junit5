Sure! Here are some additional JUnit 5 test cases to cover different branches of the `createAlarm` method in the `AlarmRepositoryImpl` class:

1. Testing when `perceivedSeverity` and `stateValue` both are null:
```java
@Test
void testCreateAlarm_PerceivedSeverityNullAndStateNull_StateNew() throws Exception {
    // Arrange
    String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\",\"sequenceId\":\"23423\"}";
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    percMap.put("Other", 6);
    percMap.put("Indeterminate", 1);
    stateMap.put("cleared", 6);
    
    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    // Act
    alarmRepositoryImpl.createAlarm(msg);

    // Assert
    ArgumentCaptor<Alarm> alarmCaptor = ArgumentCaptor.forClass(Alarm.class);
    verify(alarmRepositoryImpl).createAlarm(msg);
    verify(alarmRepositoryImpl).postAlarm(alarmCaptor.capture(), eq("compId"));
    
    assertEquals(1, alarmCaptor.getValue().getPerceivedSeverity());
}
```

2. Testing when `perceivedSeverity` is null and `stateValue` does not match any defined state:
```java
@Test
void testCreateAlarm_PerceivedSeverityNullAndStateInvalid_StateUnspecified() throws Exception {
    // Arrange
    String msg = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"invalid\",\"sequenceId\":\"23423\"}";
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    percMap.put("Other", 6);
    percMap.put("Indeterminate", 1);
    stateMap.put("cleared", 6);
    
    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    // Act
    alarmRepositoryImpl.createAlarm(msg);

    // Assert
    ArgumentCaptor<Alarm> alarmCaptor = ArgumentCaptor.forClass(Alarm.class);
    verify(alarmRepositoryImpl).createAlarm(msg);
    verify(alarmRepositoryImpl).postAlarm(alarmCaptor.capture(), eq("compId"));
    
    assertEquals(-1, alarmCaptor.getValue().getPerceivedSeverity());
}
```

These test cases cover additional branches of the `createAlarm` method to achieve 100% code coverage of the `AlarmRepositoryImpl` class. Each test case targets a specific scenario to ensure all possible outcomes are tested.