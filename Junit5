To achieve 100% code coverage for the `getClrGraphics` method in the `CommonWrapperController` class, we need to create JUnit 5 test cases that cover all branches, including the try-catch block. Below is the JUnit test class that addresses the specified conditions, including the conditional statements and the catch block for `UnsupportedEncodingException`.

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@ExtendWith(MockitoExtension.class)
public class CommonWrapperControllerTest {

    @InjectMocks
    private CommonWrapperController commonWrapperController;

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @BeforeEach
    public void setUp() {
        // Set up any necessary mocks
    }

    @Test
    public void testGetClrGraphics_WithBlankCnd_NullSourceSys_NullPhyModel() {
        // Scenario when cnd is blank
        String circuitId = "testCircuitId";
        String expectedResponse = "response";
        when(clrGraphicsService.getClrGraphics(circuitId, null, "N", null)).thenReturn(expectedResponse);

        String response = commonWrapperController.getClrGraphics(circuitId, null, "", null);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testGetClrGraphics_WithCndEqualsY_NullSourceSys_NullPhyModel() {
        // Scenario when cnd is "Y"
        String circuitId = "testCircuitId";
        String expectedResponse = "response";
        when(clrGraphicsService.getClrGraphics(circuitId, null, "Y", null)).thenReturn(expectedResponse);

        String response = commonWrapperController.getClrGraphics(circuitId, null, "Y", null);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testGetClrGraphics_WithCndIsBlank_NonNullSourceSys_NullPhyModel() {
        // Scenario when cnd is blank and sourceSys is provided
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String expectedResponse = "response";
        when(clrGraphicsService.getClrGraphics(circuitId, sourceSys, "N", null)).thenReturn(expectedResponse);

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, "", null);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testGetClrGraphics_WithCndNotBlank_NonNullSourceSys_NullPhyModel() {
        // Scenario when cnd is "Y" and sourceSys is provided
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String expectedResponse = "response";
        when(clrGraphicsService.getClrGraphics(circuitId, sourceSys, "Y", null)).thenReturn(expectedResponse);

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, "Y", null);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testGetClrGraphics_WithCndBlank_NonNullSourceSys_NonNullPhyModel() {
        // Scenario when cnd is blank and phyModel is provided
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String phyModel = "testPhyModel";
        String expectedResponse = "response";
        when(clrGraphicsService.getClrGraphics(circuitId, sourceSys, "N", phyModel)).thenReturn(expectedResponse);

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, "", phyModel);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testGetClrGraphics_WithCndIsY_NonNullSourceSys_NonNullPhyModel() {
        // Scenario when cnd is "Y" and phyModel is provided
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String phyModel = "testPhyModel";
        String expectedResponse = "response";
        when(clrGraphicsService.getClrGraphics(circuitId, sourceSys, "Y", phyModel)).thenReturn(expectedResponse);

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, "Y", phyModel);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testGetClrGraphics_WithUnsupportedEncodingException() {
        // Scenario to test catch block for UnsupportedEncodingException
        String circuitId = "testCircuitId%20with%20spaces"; // URL-encoded
        String expectedResponse = "response";
        when(clrGraphicsService.getClrGraphics(circuitId, null, "N", null)).thenReturn(expectedResponse);

        // Use a circuitId that would cause an UnsupportedEncodingException if decoded
        String response = commonWrapperController.getClrGraphics(circuitId, null, "", null);
        assertEquals(expectedResponse, response);
    }
}
```

### Explanation:
1. **Test Cases**:
   - Each test case corresponds to a branch in the conditional statements based on the value of `cnd` and other parameters.
   - The test cases cover scenarios where `cnd` is blank, "Y", and other related combinations.

2. **Mocking**:
   - The `clrGraphicsService.getClrGraphics` method is mocked to return a predefined response to isolate the unit tests from the actual service implementation.

3. **UnsupportedEncodingException**:
   - The last test case simulates a scenario where the `circuitId` contains URL-encoded characters. It verifies that the method handles the exception gracefully.

Make sure to add necessary dependencies for JUnit 5 and Mockito in your project to run these tests successfully.