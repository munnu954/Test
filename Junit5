import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import com.circuit.model.CircuitDetailResponse;
import com.circuit.service.CircuitDetailsProvider;

class CircuitDetailsProvider_GetAEnd_Test {

    @Test
    void testGetAEnd_NullCircuitId() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = null;
        String clli = "clliid";
        CircuitDetailResponse response = null;

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_EmptyCircuitId() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "";
        String clli = "clliid";
        CircuitDetailResponse response = null;

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_NullResponse() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = null;

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_EmptyResponse() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_NullCircuitLst() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_EmptyCircuitLst() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        response.getCircuitData().setCircuitLst(new ArrayList<>());

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_NullCircuit() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(new ArrayList<>());
        response.setCircuitData(circuitData);

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_EmptyCircuit() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(new ArrayList<>());
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(new ArrayList<>());
        circuitData.getCircuitLst().add(circuitLst);
        response.setCircuitData(circuitData);

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_NullAEnd() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(new ArrayList<>());
        circuitData.getCircuitLst().add(circuitLst);
        response.setCircuitData(circuitData);

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_EmptyAEnd() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        circuit.setAEnd(new ArrayList<>());
        circuitLst.getCircuit().add(circuit);
        circuitData.getCircuitLst().add(circuitLst);
        response.setCircuitData(circuitData);

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_NullPortChannel() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        AEnd aEnd = new AEnd();
        aEnd.setPortChannel(new ArrayList<>());
        circuit.setAEnd(new ArrayList<>());
        circuit.getAEnd().add(aEnd);
        circuitLst.getCircuit().add(circuit);
        circuitData.getCircuitLst().add(circuitLst);
        response.setCircuitData(circuitData);

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_EmptyPortChannel() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        AEnd aEnd = new AEnd();
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(new ArrayList<>());
        aEnd.setPortChannel(new ArrayList<>());
        aEnd.getPortChannel().add(portChannel);
        circuit.setAEnd(new ArrayList<>());
        circuit.getAEnd().add(aEnd);
        circuitLst.getCircuit().add(circuit);
        circuitData.getCircuitLst().add(circuitLst);
        response.setCircuitData(circuitData);

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    void testGetAEnd_NullPortRef() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        String circuitId = "circuitId";
        String clli = "clliid";
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        AEnd aEnd = new AEnd();
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(new ArrayList<>());
        aEnd.setPortChannel(new ArrayList<>());
        aEnd.getPortChannel().add(portChannel);
        circuit.setAEnd(new ArrayList<>());
        circuit.getAEnd().add(aEnd);
        circuitLst.getCircuit().add(circuit);
        circuitData.getCircuitLst().add(circuitLst);
        response.setCircuitData(circuitData);

        AEnd result = provider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    