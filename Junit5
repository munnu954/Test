import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class PostingRuleProcessingServiceTest {

    @Test
    void testApplyPostingRule_TopologyDetailsNotNullAndNotEmpty() throws Exception {
        // Mocking dependencies
        RuleLoadingService ruleLoadingService = Mockito.mock(RuleLoadingService.class);
        TopologyApiClient topoApiClient = Mockito.mock(TopologyApiClient.class);
        AlarmPostingUtils utils = Mockito.mock(AlarmPostingUtils.class);

        PostingRuleProcessingService service = new PostingRuleProcessingService();
        setPrivateField(service, "ruleLoadingService", ruleLoadingService);
        setPrivateField(service, "topoApiClient", topoApiClient);
        setPrivateField(service, "utils", utils);

        Alarm alarm = new Alarm();
        alarm.setTopologyDetails("mockTopologyDetails");
        PostingRule rule = new PostingRule(1, "Rule1", 1, 1, "MockCriteria");

        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("testKey", "testValue");

        when(utils.evaluateExpression(any(String.class), any(HashMap.class))).thenReturn("mockComponentId");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), any(String.class)).thenReturn(ResponseEntity.ok("mockTopologyData"));

        Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

        assertEquals("mockTopologyDetails", result.getTopologyDetails());
    }

    // Add tests for other branches (TopologyDetails null or empty) in a similar manner

    // Helper method to set private fields using Reflection API
    private void setPrivateField(Object object, String fieldName, Object value) throws NoSuchFieldException, IllegalAccessException {
        Field field = object.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(object, value);
    }
}