UnifiedAuditMessage.java should have a String constructor to deserialize the JSON string into the object. Here's the updated code:

```java
@Data
@AllArgsConstructor
@NoArgsConstructor
public class UnifiedAuditMessage {
    private String inputFilePath;
    private String url;
    private Integer port;
    private String outputFilePath;
    private String delimiters;
    private String fileType;
    private String date_received;
    private String date_processed;
    private Integer no_of_records_in_the_file;
    private Integer no_of_records_processed;
    private Integer no_of_records_failed;
    private UUID job_id;
    private UUID jar_id;
    private List<String> exceptions;
    private UUID collector_id;
    private JobStatus job_status;

    public UnifiedAuditMessage(String json) throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        UnifiedAuditMessage obj = objectMapper.readValue(json, UnifiedAuditMessage.class);
        this.inputFilePath = obj.inputFilePath;
        this.url = obj.url;
        this.port = obj.port;
        this.outputFilePath = obj.outputFilePath;
        this.delimiters = obj.delimiters;
        this.fileType = obj.fileType;
        this.date_received = obj.date_received;
        this.date_processed = obj.date_processed;
        this.no_of_records_in_the_file = obj.no_of_records_in_the_file;
        this.no_of_records_processed = obj.no_of_records_processed;
        this.no_of_records_failed = obj.no_of_records_failed;
        this.job_id = obj.job_id;
        this.jar_id = obj.jar_id;
        this.exceptions = obj.exceptions;
        this.collector_id = obj.collector_id;
        this.job_status = obj.job_status;
    }
  
    // ... getters and setters
}
```

KafkaController.java:

```java
@RestController
public class KafkaController {
    @Autowired
    private KafkaAuditProducer kafkaAuditProducer;

    @PostMapping("/kafkaPush")
    public Boolean writeMessage(@RequestBody String auditMsgJson) {
        try {
            UnifiedAuditMessage auditMsg = new UnifiedAuditMessage(auditMsgJson);
            kafkaAuditProducer.writeMessage(auditMsg);
            return true;
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            return false;
        }
    }
}
```

KafkaAuditProducer.java:

```java
@Service
public class KafkaAuditProducer {
    // ...
  
    public void writeMessage(UnifiedAuditMessage auditMsg) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            String auditMsgJson = objectMapper.writeValueAsString(auditMsg);
            
            this.kafkaTemplate.send(topicName, auditMsgJson);
            LOGGER.info("Kafka status message: {}", auditMsgJson);
        } catch (JsonProcessingException e) {
            LOGGER.error("Failed to convert auditMsg to JSON: {}", e.getMessage());
        } catch (Exception e) {
            LOGGER.error("Failed to send Kafka message: {}", e.getMessage());
        }
    }
  
    // ...
}
```

KafkaConsumer.java:

```java
@Service
public class KafkaConsumer {
    // ...
  
    public void consume(String data) throws IOException {
        try {
            if (data.contains("inputFilePath")) {
                UnifiedAuditMessage auditMsg = new UnifiedAuditMessage(data);
                // ...
            }
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            LOGGER.error("Error triggering job: {}", e.getMessage());
            
            UnifiedAuditMessage auditData = logAuditData(auditMsg, fileType, e);
            kafkaAuditProducer.createMessageAndLog(auditData.getInputFilePath(), auditData.getUrl(), auditData.getPort(), auditData.getOutputFilePath(), auditData.getDelimiters(), auditData.getFileType(), auditData.getDate_received(), auditData.getNo_of_records_in_the_file(), auditData.getNo_of_records_processed(), auditData.getNo_of_records_failed(), auditData.getJob_id(), auditData.getJar_id(), auditData.getExceptions(), auditData.getCollector_id(), auditData.getJob_status());
        }
    }
  
    // ...
}
```

Please update the corresponding methods and variables accordingly.