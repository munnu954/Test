import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.dao.BadSqlGrammarException;
import org.springframework.jdbc.core.JdbcTemplate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Test
    void testPerformUpdateforACK_BadSqlGrammarException() {
        when(jdbcTemplate.update(anyString(), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        int result = alarmRepository.performUpdateforACK("test", "time", "identity", 123);

        assertEquals(0, result);
    }

    @Test
    void testPerformUpdateforOpNote_BadSqlGrammarException() {
        when(jdbcTemplate.update(anyString(), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        int result = alarmRepository.performUpdateforOpNote("note", "time", "identity", 123);

        assertEquals(0, result);
    }

    @Test
    void testPerformClearbyfeed_BadSqlGrammarException() {
        when(jdbcTemplate.update(anyString(), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        int result = alarmRepository.performClearbyfeed(1, "clearTime", "updatedTime", "action", "identity", 123);

        assertEquals(0, result);
    }

    @Test
    void testPerformUpdateforHandleEvent_BadSqlGrammarException() {
        when(jdbcTemplate.update(anyString(), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        int result = alarmRepository.performUpdateforHandleEvent("handledBy", "time", "identity", 123);

        assertEquals(0, result);
    }

    @Test
    void testPerformUpdateforHandleTicket_BadSqlGrammarException() {
        when(jdbcTemplate.update(anyString(), any(Object[].class))).thenThrow(new BadSqlGrammarException("Test exception"));

        int result = alarmRepository.performUpdateforHandleTicket("ticket", "status", "time", "identity", 123);

        assertEquals(0, result);
    }
}