import java.util.Optional;

public class YourServiceClass {
    private final EmployeeRepository employeeRepo;

    public YourServiceClass(EmployeeRepository employeeRepo) {
        this.employeeRepo = employeeRepo;
    }

    public Optional<Employee> findById(int id) {
        return employeeRepo.findById(id);
    }
}





import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class YourTestClass {

    @Mock
    private EmployeeRepository employeeRepo;

    @InjectMocks
    private YourServiceClass service;  // Assuming there is a service class using the employeeRepo

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testDeleteNonExistentRecord() {
        // Set up mock behavior for deleteById to throw the expected exception
        doThrow(new ResourceNotFoundException("Entity not found for id: 999")).when(employeeRepo).deleteById(999);

        Exception exception = assertThrows(ResourceNotFoundException.class, () -> {
            employeeRepo.deleteById(999);
        });

        String expectedMessage = "Entity not found for id: 999";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testUpdateNonExistentRecord() {
        // Set up mock behavior for save to throw the expected exception
        doThrow(new ResourceNotFoundException("Entity not found for id: 12")).when(employeeRepo).save(any());

        // Initialize input data with non-existent record ID
        Employee record = new Employee();
        record.setId(12);

        Exception exception = assertThrows(ResourceNotFoundException.class, () -> {
            employeeRepo.save(record);
        });

        String expectedMessage = "Entity not found for id: 12";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testReadNonExistentRecord() {
        // Set up mock behavior for findById to return an empty result
        when(employeeRepo.findById(999)).thenReturn(Optional.empty());

        Exception exception = assertThrows(ResourceNotFoundException.class, () -> {
            service.findById(999);  // Assuming there is a method findById in the service using employeeRepo
        });

        String expectedMessage = "Entity not found for id: 999";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}