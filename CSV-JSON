```java
public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        int lineIndex = 0;
        JSONObject jsonObject = new JSONObject();
        JSONArray header3Values = new JSONArray();

        for (String line : lines) {
            String[] arr = line.split(",");

            if (lineIndex == 2) {
                for (String value : arr) {
                    header3Values.add(value.trim().replace("\"", ""));
                }
            } else if (lineIndex > 2) {
                if (headers == null || headers.length != arr.length) {
                    this.failureIntCounter.add(1);
                    continue;
                }

                JSONObject obj = new JSONObject();
                for (int j = 0; j < arr.length; j++) {
                    String jsonkey = headers[j].trim().replace("\"", "");
                    String jsonvalue = arr[j].trim().replace("\"", "");
                    obj.put(jsonkey, jsonvalue);
                }

                this.successIntCounter.add(1);
                collector.collect(obj.toString());
            }

            lineIndex++;
        }

        if (header3Values.length() > 0) {
            jsonObject.put("HEADER_3", header3Values);
        }
        collector.collect(jsonObject.toString());
    }
}
```