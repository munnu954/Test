Here's the modified Main class code with the added `isKafkaTopicAccessible` method and `setAdminClient` method:

```java
import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.apache.kafka.common.KafkaFuture;
import org.apache.flink.api.common.serialization.SimpleStringSchema;
import org.apache.flink.api.java.utils.ParameterTool;
import org.apache.flink.core.fs.Path;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.source.FileSource;
import org.apache.flink.streaming.connectors.kafka.KafkaRecordSerializationSchema;
import org.apache.flink.streaming.connectors.kafka.KafkaSink;
import org.apache.flink.streaming.connectors.kafka.internals.CsvtoJsonConversion;
import org.apache.flink.streaming.connectors.kafka.testutils.DeliveryGuarantee;
import org.apache.flink.streaming.connectors.kafka.testutils.KafkaTestEnvironment;
import org.apache.flink.streaming.connectors.kafka.testutils.TestUtils;
import org.apache.flink.streaming.connectors.kafka.testutils.junit.RetryRule;
import org.apache.flink.streaming.connectors.kafka.testutils.junit.RetryRuleBuilder;
import org.apache.flink.streaming.connectors.kafka.testutils.junit.Retryer;
import org.apache.flink.streaming.connectors.kafka.testutils.schemaregistry.TestDynamicKafkaRecordSerializationSchema;
import org.apache.flink.streaming.connectors.kafka.testutils.schemaregistry.TestDynamicKafkaRecordSerializationSchemaBuilder;
import org.apache.flink.streaming.connectors.kafka.testutils.strategies.WatermarkStrategy;
import org.apache.flink.streaming.connectors.kafka.testutils.topic.TestTopic;
import org.apache.flink.streaming.connectors.kafka.testutils.topic.TestTopicTest;
import org.apache.flink.streaming.connectors.kafka.testutils.topic.TestTopicTestBuilder;
import org.apache.flink.streaming.connectors.kafka.testutils.topic.TestTopics;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Properties;
import java.util.Set;

public class Main {

    private static String bootstarpServer;

    private static String topic;

    private static final Logger LOGGER = LoggerFactory.getLogger(Main.class);

    private AdminClient adminClient;

    public void setAdminClient(AdminClient adminClient) {
        this.adminClient = adminClient;
    }

    public boolean isKafkaTopicAccessible(String topicName, Properties properties) {
        try {
            ListTopicsResult listTopicsResult = adminClient.listTopics();
            KafkaFuture<Set<String>> topicNames = listTopicsResult.names();
            Set<String> topics = topicNames.get();
            return topics.contains(topicName);
        } catch (Exception e) {
            LOGGER.error("Error while checking Kafka topic accessibility: " + e.getMessage());
            return false;
        }
    }

    public static void main(String[] args) throws Exception {
        ParameterTool parameters = ParameterTool.fromArgs(args);

        // ... rest of the original main method code ...

        // Set up the AdminClient for Kafka
        Properties adminClientProps = new Properties();
        adminClientProps.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        AdminClient adminClient = AdminClient.create(adminClientProps);

        // Set the AdminClient in the Main class instance
        Main main = new Main();
        main.setAdminClient(adminClient);

        // Check the accessibility of the Kafka topic
        boolean isTopicAccessible = main.isKafkaTopicAccessible("3459-DEV-COLLECTION-JSON-DATA-QUEUE", adminClientProps);
        LOGGER.info("Is Kafka topic accessible: " + isTopicAccessible);

        // ... rest of the original main method code ...
    }
}
```

In the modified Main class, the `isKafkaTopicAccessible` method has been added to check the accessibility of the Kafka topic using the injected `AdminClient`. Additionally, a `setAdminClient` method has been added to set the `AdminClient` instance in the Main class. This allows for better testing and encapsulation of the Kafka topic accessibility logic within the Main class. The main method now creates an instance of Main, sets the AdminClient, and checks the accessibility of the Kafka topic before executing the rest of the original logic.



import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.apache.kafka.common.KafkaFuture;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import java.util.Properties;
import java.util.Set;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class MainUnitTest {

    @Mock
    private AdminClient adminClient;

    @Before
    public void setup() {
        adminClient = Mockito.mock(AdminClient.class);
    }

    @Test
    public void testKafkaTopicAccessibility() throws Exception {
        // Set up the required Kafka topic name
        String topicName = "3459-DEV-COLLECTION-JSON-DATA-QUEUE";

        // Mock the listTopicsResult
        ListTopicsResult listTopicsResult = Mockito.mock(ListTopicsResult.class);

        // Mock the set of topics
        Set<String> topics = Set.of("<other-accessible-topic>");

        // Create properties for the AdminClient
        Properties properties = new Properties();
        properties.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");

        // Mock the KafkaFuture for the topic list
        KafkaFuture<Set<String>> kafkaFuture = Mockito.mock(KafkaFuture.class);
        Mockito.when(kafkaFuture.get()).thenReturn(topics);

        // Mock the adminClient listTopics method
        Mockito.when(adminClient.listTopics()).thenReturn(listTopicsResult);
        Mockito.when(listTopicsResult.names()).thenReturn(kafkaFuture);

        // Set up the Main class
        Main main = new Main();
        main.setAdminClient(adminClient);

        // Check the accessibility of the Kafka topic
        boolean isTopicAccessible = main.isKafkaTopicAccessible(topicName, properties);
    
        // Ensure that the topic is not accessible
        assertFalse(isTopicAccessible);
    }
}