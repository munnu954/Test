import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class ArchivalFileMovementTest {

    @Spy
    @InjectMocks
    private ArchivalFileMovement archivalFileMovement;

    @Mock
    private Logger logger;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testMoveFilesMatchingPattern() throws Exception {
        String sourcePathPattern = "file:/source/*.txt";
        String destinationPath = "/destination";

        Path sourceDir = Paths.get("/source");
        String filePattern = ".*\\.txt";

        // Mocking private methods using reflection
        Method getSourceDirectoryMethod = ArchivalFileMovement.class.getDeclaredMethod("getSourceDirectory", String.class);
        getSourceDirectoryMethod.setAccessible(true);
        doReturn(sourceDir).when(archivalFileMovement).getSourceDirectory(sourcePathPattern);

        Method getFilePatternMethod = ArchivalFileMovement.class.getDeclaredMethod("getFilePattern", String.class);
        getFilePatternMethod.setAccessible(true);
        doReturn(filePattern).when(archivalFileMovement).getFilePattern(sourcePathPattern);

        // Mocking Files.list
        Path file1 = Paths.get("/source/file1.txt");
        Path file2 = Paths.get("/source/file2.txt");
        Stream<Path> fileStream = Stream.of(file1, file2);
        when(Files.list(sourceDir)).thenReturn(fileStream);

        // Execute the method
        archivalFileMovement.moveFilesMatchingPattern(sourcePathPattern, destinationPath);

        // Verify the interactions and assertions
        verify(logger).info("Number of files found with Matching pattern: {}", 2L);
        verify(logger, never()).error(anyString(), any(), anyString());
    }

    @Test
    public void testMoveFilesMatchingPatternWithException() throws Exception {
        String sourcePathPattern = "file:/source/*.txt";
        String destinationPath = "/destination";

        Path sourceDir = Paths.get("/source");
        String filePattern = ".*\\.txt";

        // Mocking private methods using reflection
        Method getSourceDirectoryMethod = ArchivalFileMovement.class.getDeclaredMethod("getSourceDirectory", String.class);
        getSourceDirectoryMethod.setAccessible(true);
        doReturn(sourceDir).when(archivalFileMovement).getSourceDirectory(sourcePathPattern);

        Method getFilePatternMethod = ArchivalFileMovement.class.getDeclaredMethod("getFilePattern", String.class);
        getFilePatternMethod.setAccessible(true);
        doReturn(filePattern).when(archivalFileMovement).getFilePattern(sourcePathPattern);

        // Mocking Files.list
        Path file1 = Paths.get("/source/file1.txt");
        Stream<Path> fileStream = Stream.of(file1);
        when(Files.list(sourceDir)).thenReturn(fileStream);

        // Mocking moveFile to throw an exception
        doThrow(new Exception("Move error")).when(archivalFileMovement).moveFile(file1, destinationPath);

        // Execute the method
        archivalFileMovement.moveFilesMatchingPattern(sourcePathPattern, destinationPath);

        // Verify the interactions and assertions
        verify(logger).info("Number of files found with Matching pattern: {}", 1L);
        verify(logger).error("Error moving file::", file1.getFileName(), "Move error");
    }
}
