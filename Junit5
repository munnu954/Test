import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.net.URI;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.test.util.ReflectionTestUtils;

public class ApiOperationTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlarmGroupingParams configParams;

    @InjectMocks
    private ApiOperation apiOperation;

    public ApiOperationTest() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAlarmDetailsById_NotFound() {
        // Setting values using ReflectionTestUtils
        ReflectionTestUtils.setField(apiOperation, "restTemplate", restTemplate);
        ReflectionTestUtils.setField(configParams, "alarmFetchURL", "http://mocked-url");
        ReflectionTestUtils.setField(configParams, "alarmFilterKey", "mocked-auth-key");

        String alarmIdentity = "12345";
        String url = "http://mocked-url";
        
        // Mocking the behavior of restTemplate.exchange() to throw HttpClientErrorException.NotFound
        when(restTemplate.exchange(
            eq(url), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)
        )).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND, "Not Found"));

        // Execute method under test
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Assertions
        assertNull(result, "Expected result to be null when NotFound exception occurs");

        // Verify that exchange method was called once
        verify(restTemplate, times(1)).exchange(eq(url), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class));
    }
}