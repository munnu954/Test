import org.apache.flink.api.common.JobID;
import org.apache.flink.api.common.restartstrategy.RestartStrategies;
import org.apache.flink.api.common.state.CheckpointConfig;
import org.apache.flink.api.common.state.CheckpointingMode;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.runtime.client.JobClient;
import org.apache.flink.runtime.state.filesystem.FsStateBackend;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.connectors.kafka.KafkaSource;
import org.apache.flink.streaming.api.watermark.WatermarkStrategy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.flink.api.java.tuple.Tuple2;
import org.json.simple.JSONObject;

public class XmlTransformerJob {
    private static final Logger LOGGER = LoggerFactory.getLogger(XmlTransformerJob.class);
    public static AppProperties appProp = AppProperties.getInstance();
    String flinkJobName = "Xml to JSON Transformer Job";
    private XmlTransformerJobUtil jobUtil;
    private final PublishAuditMessage pubAuditMsg;

    public XmlTransformerJob(PublishAuditMessage pubAuditMsg) {
        this.jobUtil = new XmlTransformerJobUtil(pubAuditMsg);
        this.pubAuditMsg = pubAuditMsg;
    }

    public XmlTransformerJob(PublishAuditMessage pubAuditMsg, XmlTransformerJobUtil xmlTransformerJobUtil) {
        this.jobUtil = xmlTransformerJobUtil;
        this.pubAuditMsg = pubAuditMsg;
    }

    public PublishAuditMessage getPubAuditMsg() {
        return pubAuditMsg;
    }

    public void execute() throws Exception {
        // Initialize Configuration
        Configuration config = new Configuration();
        config.setString("state.backend", "filesystem");
        config.setString("state.checkpoints.dir", appProp.getAppProperties().get("flink.checkpoints.path"));

        // Create StreamExecutionEnvironment with the configuration
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(config);

        // Set the state backend to the FsStateBackend for durable storage
        env.setStateBackend(new FsStateBackend(appProp.getAppProperties().get("flink.checkpoints.path")));

        // Enable checkpointing
        env.enableCheckpointing(Long.parseLong(appProp.getAppProperties().get("flink.checkpoint.interval")));
        env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);
        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(Long.parseLong(appProp.getAppProperties().get("flink.checkpoint.min-pause")));
        env.getCheckpointConfig().setCheckpointTimeout(Long.parseLong(appProp.getAppProperties().get("flink.checkpoint.timeout")));
        env.getCheckpointConfig().setMaxConcurrentCheckpoints(Integer.parseInt(appProp.getAppProperties().get("flink.checkpoint.max-concurrent")));
        env.getCheckpointConfig().enableExternalizedCheckpoints(CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION);

        // Set a restart strategy in case of job failure
        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 10000));  // 3 retries with a delay of 10 seconds

        CollectionAudit collectionAudit = new CollectionAudit();

        try {
            env.setParallelism(Integer.parseInt(appProp.getAppProperties().get("flink.parallelism")));

            OffsetsInitializer offsetsInitializer = jobUtil.getOffsetsInitializer(appProp.getAppProperties().get("spring.kafka.consumer.auto-offset-reset"));
            collectionAudit = jobUtil.setCollectionAuditProperties(collectionAudit);
            jobUtil.validateKafka(collectionAudit);

            KafkaSource<String> source = jobUtil.buildKafkaSource(collectionAudit, offsetsInitializer, appProp.getAppProperties().get("spring.kafka.consumer.group-id"));
            DataStream<String> stream = env.fromSource(source, WatermarkStrategy.noWatermarks(), "Kafka Source");

            DataStream<CollectionAudit> collectionAuditStream = XmlTransformerJobUtil.convertStreamToCollectionAudit(stream, collectionAudit);
            DataStream<Tuple2<String, CollectionAudit>> xmlDataStream = XmlTransformerJobUtil.getXmlDataStream(collectionAuditStream);
            DataStream<Tuple2<JSONObject, CollectionAudit>> jsonNodeStream = XmlTransformerJobUtil.convertXmlToJson(xmlDataStream);
            DataStream<Tuple2<String, CollectionAudit>> finalDataStream = XmlTransformerJobUtil.encapsulateJson(jsonNodeStream);

            if (finalDataStream != null) {
                publishTransformedData(finalDataStream, null);
                JobClient jobClient = env.executeAsync(flinkJobName);
                JobID jobId = jobClient.getJobID();
                LOGGER.info("JobID is {}", jobId);
            }
        } catch (Exception e) {
            LOGGER.error("Error while executing XmlTransformerJob", e);
        }
    }

    public void publishTransformedData(DataStream<Tuple2<String, CollectionAudit>> encapsulatedJsonStream, String jobId) {
        DataStream<String> jsonStringStream = jobUtil.getJsonStringStream(encapsulatedJsonStream);
        try {
            if (jobUtil.shouldPublishKafka()) {
                jobUtil.publishToKafka(jsonStringStream);
            }
            if (jobUtil.shouldPublishVMB()) {
                jobUtil.publishToVMB(jsonStringStream);
            }
            jobUtil.processStream(encapsulatedJsonStream, JobStatus.FLINK_JOB_SUCCESSFUL);
        } catch (Exception e) {
            LOGGER.error("Error while publishing data to Sink", e);
            jobUtil.processStream(encapsulatedJsonStream, JobStatus.FLINK_JOB_FAILED);
        }
    }
}