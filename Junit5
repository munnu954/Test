To handle the `NullPointerException` while using Spring's `@Value` annotation, we can utilize `ReflectionTestUtils` to manually set the properties on the `AlarmGroupingParams` object within the test. This approach allows us to bypass the need for the Spring context to inject these values, which is helpful in plain unit tests. Here's how you can implement this:

### Revised Test Code Using `ReflectionTestUtils`

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class ApiOperationTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private ApiOperation apiOperation;

    private AlarmGroupingParams configParams;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);  // Initialize mocks

        // Initialize the AlarmGroupingParams and set the fields using ReflectionTestUtils
        configParams = new AlarmGroupingParams();
        ReflectionTestUtils.setField(configParams, "alarmFetchURL", "http://example.com/alarm");
        ReflectionTestUtils.setField(configParams, "alarmFilterKey", "dummyKey");

        // Set the configParams in ApiOperation using reflection (if required)
        ReflectionTestUtils.setField(apiOperation, "configParams", configParams);
    }

    @Test
    public void testGetAlarmDetailsById_NotFound() {
        String alarmIdentity = "testAlarmIdentity";
        String url = "http://example.com/alarm";

        // Mocking RestTemplate to throw HttpClientErrorException.NotFound
        doThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND))
                .when(restTemplate)
                .exchange(eq(url), eq(HttpMethod.POST), any(), eq(String.class));

        // Test the method
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Assert that the result is null since the NotFound exception should be caught
        assertNull(result);
    }
}
```

