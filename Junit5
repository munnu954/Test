please Write Junit5 testcases code covering this for loop of applyPostingRule(Alarm alarm, PostingRule rule, HashMap<String, Object> alarmMap) method  of PostingRuleProcessingService class" for(JsonNode jsonNodeTmp : topologyObjectsNode) {


}" for 100% code coverage. Please please write all the possible Junit5 testcases code covering all the branches of for loop of  applyPostingRule for 100% code coverage


Note:- For the above, could you please make use of REFLECTION APIs by without making the below fields public in PostingRuleProcessingService class:-

PostingRuleProcessingService.java.ruleLoadingService,

PostingRuleProcessingService.topoApiClient,

PostingRuleProcessingService.alarmedObjectExpression


PostingRuleProcessingService.topologyObjectEligibilityCheckValue

PostingRuleProcessingService.topologyObjectEligibilityCheckExpression

PostingRuleProcessingService.componentIDAttributeName

PostingRuleProcessingService.topologyDetailsAlarmedObjectExpression

please don't make the above fields public in PostingRuleProcessingService class


please cover the "for (JsonNode jsonNodeTmp : topologyObjectsNode) {


}" loop of applyPostingRule method with Junit5 testcases code. 
Note:- Please please write atleast some 5-10 Junit5 testcases code covering all the branches of this for loop:- "for (JsonNode jsonNodeTmp : topologyObjectsNode) {


} " For 100% code coverage of for loop. Please please only write Junit5 testcases code for covering only the for loop of applyPostingRule method

Where PostingRule class is as follows:-
@Getter
@Setter
public class PostingRule extends GenericRule {
private String ruleType;
private String ruleComments;
private Boolean ruleIsActive; private String ruleFunctionParameter; private String ruleActionParameter;
private String ruleTraversalExpression;
private String ruleComparator;
private String updatedBy;
public PostingRule(long ruleId, String ruleName, int rulePriority, int ruleversion, String ruleMatchingCriteria) throws Exception {
super(ruleid, ruleName, rulePriority, ruleVersion, ruleMatchingCriteria);
}}
and RuleLoadingService class is as follows:-
@Service
public class RuleLoadingService {
private Map Long, PostingRule> rulesMap =new ConcurrentHashMap<>();
public Map<Long, PostingRule> getRuleMap() {
return rulesMap;
} public void removeRule(Long ruleid) {
synchronized(getRuleMap()) {
if(getRuleMap().containsKey(ruleid)) {
getRuleMap().remove(ruleid);
logger.info("Removed Posting Rule having ruleId: {}", ruleid);
}
}}
}
and TopologyApiClient class is as follows:-

@Component
public class TopologyApiClient{
@Autowired
private RestTemplate restTemplate;
@Value("${topologytraversal.url}") 
private String TOPOLOGYTRAVERSAL_URL;
@Value("${AUTH_APOLLO_KEY)")
private String topologyApiKey;
@Value("${topologytraversal.limit:10)")
private String topologyApiReqlimit;
private static final Logger logger = LogManager.getLogger(TopologyApiClient.class);
public Response Entity<String> fetchTopologyTraversalDetails(Alarm alarm, PostingRule rule, String componentIdReq) {
ResponseEntity<String> response = null;
Map<String, String> topologyTraversalReq =new HashMap<String, String>();
topologyTraversalReq.put("ComponentId", componentIdReq); topologyTraversalReq.put("TBL", rule.getRuleTraversalExpression());
topologyTraversalReq.put("limit", topologyApiReqLimit);
HttpHeaders headers =new HttpHeaders();
headers.set("Authorization", topologyApiKey);
HttpEntity<Object> entity = new HttpEntity<Object>(topologyTraversalReq, headers);
try {
response = restTemplate.exchange(TOPOLOGYTRAVERSAL_URL, HttpMethod.POST, entity, String.class);
logger.log(Level.forName("DATA", 450), "Topology Traversal API invoked for alarm:" + alarm.getAlarmIdentity()" + . Response: "
+ response.getStatusCode() + "message: " + response.getBody()); 
}catch(RestClientException e) {
if(e.getMessage().contains("404") && e.getMessage().contains("No data found for the requested ComponentId and TBL")) {
logger.warn("No Topology Data found for Component Id:<"+alarm.getReportingObject()+">
TBL:<"+rule.getRuleTraversalExpression()+">AlarmIdentity:<" +alarm.getAlarmIdentity());
} logger.error("Exception while retrieving topology data for Component Id:<"+alarm.getReportingObject()+"> TBL:<"+rule.getRuleTraversalExpression()+"> AlarmIdentity:<" +alarm.getAlarmIdentity() + e);
}
return response;
}}

And AlarmPostingUtils class is as follows:-

@Component
public class AlarmPostingUtils implements HealthIndicator {
public static Environment env;
public final static Logger LOG= LogManager.getLogger("AlarmPostingUtils.class");
@Autowired
public AlarmPostingUtils(Environment env) {
AlarmPostingUtils.env env;
}
public String evaluateExpression(String expression, Map<String, Object> topoMap) {
String result = "";
try {
if(expression.contains("%")) { 
result =parse(expression, topoMap, "");
}
}catch(Exception e) {
LOG.error("Exception occurred while Parsing Expression: ()", e.getMessage());
}
return result;
}}

