Here is an example of how you can write cucumber glue test case code for the given feature and scenario:

```java
@RunWith(Cucumber.class)
public class FlinkJobSubmissionTest {
  
  private FlinkApiController flinkApiController;
  private UnifiedAuditMessage auditMessage;
  private String fileType;
  private String jobStatus;
  
  @Given("I have a UnifiedAuditMessage with a {string} file")
  public void createAuditMessage(String fileType) {
    auditMessage = new UnifiedAuditMessage();
    auditMessage.setFileType(fileType);
  }
  
  @When("I call the triggerJob method with the Unified AuditMessage and {string} as the fileType")
  public void triggerJob(String fileType) {
    flinkApiController = new FlinkApiController();
    jobStatus = flinkApiController.triggerJob(auditMessage, fileType);
  }
  
  @Then("the job should be submitted to the Flink API")
  public void verifyJobSubmitted() {
    assertThat(jobStatus).isEqualTo("Job submitted");
  }
  
  @And("the job status should be updated")
  public void verifyJobStatusUpdated() {
    assertThat(auditMessage.getJobStatus()).isEqualTo("FLINK_JOB_SUBMITTED");
  }
}
```

Note: 
- Make sure to import the required dependencies and annotations (e.g., `import cucumber.api.CucumberOptions;` and `import org.junit.runner.RunWith;`).
- Replace the placeholder methods `createAuditMessage()`, `triggerJob()`, and `verifyJobSubmitted()` with the actual implementation specific to your codebase.
- You may need to adjust the assertion logic in the `verifyJobSubmitted()` and `verifyJobStatusUpdated()` methods based on your actual implementation of the `triggerJob()` method.