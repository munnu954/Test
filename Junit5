import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.InjectMocks;
import static org.mockito.Mockito.when;
import static org.mockito.ArgumentMatchers.anyString;

import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

public class KafkaConsumerTest {

  @Mock
  private CSVParser mockParser;

  @InjectMocks
  private KafkaConsumer kafkaConsumer;

  @Test
  public void testRetrieveCsvFile_Success() throws IOException {
    String testFilePath = "test.csv";
    CSVRecord mockRecord = new CSVRecord();
    when(mockParser.iterator()).thenReturn(List.of(mockRecord).iterator());
    whenNew(CSVParser.class).withArguments(new FileReader(testFilePath), CSVFormat.DEFAULT).thenReturn(mockParser);

    List<String[]> result = kafkaConsumer.retrieveCsvFile(testFilePath);

    assertNotNull(result);
    assertEquals(1, result.size());
  }

  @Test
  public void testRetrieveCsvFile_IOException() throws IOException {
    String testFilePath = "test.csv";
    whenNew(CSVParser.class).withArguments(new FileReader(testFilePath), CSVFormat.DEFAULT).thenThrow(new IOException());

    assertThrows(IOException.class, () -> kafkaConsumer.retrieveCsvFile(testFilePath));
  }

  @Test
  public void testRetrieveCsvFile_EmptyFile() throws IOException {
    String testFilePath = "empty.csv";
    when(mockParser.iterator()).thenReturn(List.of().iterator());
    whenNew(CSVParser.class).withArguments(new FileReader(testFilePath), CSVFormat.DEFAULT).thenReturn(mockParser);

    List<String[]> result = kafkaConsumer.retrieveCsvFile(testFilePath);

    assertNotNull(result);
    assertEquals(0, result.size());
  }
}