To reframe the code to generate a single transformed JSON, you can modify the code as follows:

```java
public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        JSONObject jsonObject = new JSONObject();

        for (int lineIndex = 0; lineIndex < lines.length; lineIndex++) {
            String line = lines[lineIndex];
            String[] arr = line.split(",");

            if (lineIndex == 0) {
                jsonObject.put("SystemId", arr[0].substring(arr[0].indexOf(":") + 1).trim());
                jsonObject.put("NodeIP", arr[1].substring(arr[1].indexOf(":") + 1).trim());
            } else if (lineIndex == 2) {
                headers = arr;
            } else if (lineIndex > 2) {
                if (headers == null || headers.length != arr.length) {
                    this.failureIntCounter.add(1);
                    continue;
                }

                JSONObject obj = new JSONObject();
                for (int j = 0; j < arr.length; j++) {
                    String jsonkey = headers[j].trim().replace("\"", "");
                    String jsonvalue = arr[j].trim().replace("\"", "");
                    obj.put(jsonkey, jsonvalue);
                }
                jsonObject.putAll(obj);
                this.successIntCounter.add(1);
            }
        }
        collector.collect(jsonObject.toString());
    }
}
```

Here's how the code has been modified:
- The `SystemId` and `NodeIP` fields are extracted from the first line and added to the `jsonObject` directly.
- The `headers` are stored when the lineIndex is 2, just like before.
- For any lineIndex greater than 2, the columns are processed and added directly to the `jsonObject`.
- Finally, only one `collector.collect(jsonObject.toString());` statement is needed to emit the final transformed JSON.