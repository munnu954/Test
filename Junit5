import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.stubbing.OngoingStubbing;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;

import static org.mockito.Mockito.*;
import static org.mockito.Mockito.when;




@Test
void testMain() {
    // Mock Environment
    Environment env = mock(Environment.class);
    when(env.getProperty("RDB_BAD_QUERY")).thenReturn("Bad query");

    CBRSSuppressionApplication application = new CBRSSuppressionApplication(env);

    // Mock SpringApplication
    SpringApplication app = mock(SpringApplication.class);
    when(app.run(any(String[].class))).thenReturn(mock(ConfigurableApplicationContext.class));

    // Mock AlarmConsumer and MessageReaderService
    AlarmConsumer alarmConsumer = mock(AlarmConsumer.class);
    MessageReaderService readerService = mock(MessageReaderService.class);

    ConfigurableApplicationContext appContext = mock(ConfigurableApplicationContext.class);
    when(appContext.getBean(AlarmConsumer.class)).thenReturn(alarmConsumer);
    when(appContext.getBean(MessageReaderService.class)).thenReturn(readerService);

    // Mock UnsatisfiedDependencyException
    UnsatisfiedDependencyException ex = mock(UnsatisfiedDependencyException.class);

    // Mock logger
    Logger logger = mock(Logger.class);
    ReflectionTestUtils.setField(CBRSSuppressionApplication.class, "logger", logger);

    // Test try block
    try (MockedStatic<SpringApplication> mockedStatic = Mockito.mockStatic(SpringApplication.class)) {
        mockedStatic.when(() -> SpringApplication.run(any(), any())).thenReturn(app);
        application.main(new String[]{"arg1", "arg2"});
    }

    // Test catch block - Validation failed for query
    when(ex.getMessage()).thenReturn("Validation failed for query");
    when(ex.getMostSpecificCause()).thenReturn(new Exception("Exception message"));

    doThrow(ex).when(app).run(any(String[].class));
    application.main(new String[]{"arg1", "arg2"});

    verify(logger).error("Bad query:Exception message");
}