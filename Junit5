To achieve 100% code coverage for the `isValidData` method in the `BatchLoaderUtils` class, you'll need to write JUnit 5 test cases that cover all branches, including the null check, the blank check, and the empty check. Here's a sample JUnit 5 test class:

```java
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BatchLoaderUtilsTest {

    private BatchLoaderUtils batchLoaderUtils;

    @BeforeEach
    public void setUp() {
        batchLoaderUtils = new BatchLoaderUtils();
    }

    @Test
    public void testIsValidData_NullInput() {
        // Test case where input is null
        String input = null;
        assertFalse(batchLoaderUtils.isValidData(input), "Input is null, expected false");
    }

    @Test
    public void testIsValidData_BlankInput() {
        // Test case where input is blank (contains only whitespace)
        String input = "   ";
        assertFalse(batchLoaderUtils.isValidData(input), "Input is blank, expected false");
    }

    @Test
    public void testIsValidData_EmptyInput() {
        // Test case where input is an empty string
        String input = "";
        assertFalse(batchLoaderUtils.isValidData(input), "Input is empty, expected false");
    }

    @Test
    public void testIsValidData_ValidInput() {
        // Test case where input is a valid non-empty, non-blank string
        String input = "Valid data";
        assertTrue(batchLoaderUtils.isValidData(input), "Input is valid, expected true");
    }
}
```

### Explanation:
1. **Null Input Test**: Checks if the method returns `false` for `null` input.
2. **Blank Input Test**: Checks if the method returns `false` for a string that contains only whitespace.
3. **Empty Input Test**: Checks if the method returns `false` for an empty string.
4. **Valid Input Test**: Checks if the method returns `true` for a valid string that is neither empty nor blank.

This test class covers all the branches of the `isValidData` method, ensuring full code coverage.