To achieve 100% code coverage for the `getArrayValueForTags` method in the `AlarmRepositoryImpl` class, we will write JUnit 5 test cases that cover the following scenarios:

1. **Valid JSON Array String:** Test when `tagValue` is a valid JSON array.
2. **Malformed JSON Array:** Test when `tagValue` is a malformed JSON array to ensure it goes to the catch block.
3. **Valid Single String:** Test when `tagValue` is a single string value.
4. **Comma-Separated Values:** Test when `tagValue` contains comma-separated values.
5. **Unexpected Exceptions:** Test to simulate and check behavior when an unexpected exception occurs.

Hereâ€™s the JUnit 5 test class that implements these tests:

### JUnit 5 Test Class for `AlarmRepositoryImpl`

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    private AlarmRepositoryImpl alarmRepository;

    @BeforeEach
    public void setup() {
        // Instantiate the class to be tested
        alarmRepository = new AlarmRepositoryImpl();
    }

    @Test
    public void testGetArrayValueForTags_ValidJsonArray() {
        // Arrange
        JsonNode mockJsonNode = Mockito.mock(JsonNode.class);
        when(mockJsonNode.get("tag")).thenReturn(Mockito.mock(JsonNode.class));
        when(mockJsonNode.get("tag").asText()).thenReturn("[\"WLS\"]");

        // Act
        String[] result = alarmRepository.getArrayValueForTags(mockJsonNode, "tag");

        // Assert
        assertArrayEquals(new String[]{"WLS"}, result);
    }

    @Test
    public void testGetArrayValueForTags_MalformedJsonArray() {
        // Arrange
        JsonNode mockJsonNode = Mockito.mock(JsonNode.class);
        when(mockJsonNode.get("tag")).thenReturn(Mockito.mock(JsonNode.class));
        when(mockJsonNode.get("tag").asText()).thenReturn("['WLS']");

        // Act
        String[] result = alarmRepository.getArrayValueForTags(mockJsonNode, "tag");

        // Assert: Check that it returns an empty array due to the error in parsing
        assertArrayEquals(new String[0], result);
    }

    @Test
    public void testGetArrayValueForTags_SingleValue() {
        // Arrange
        JsonNode mockJsonNode = Mockito.mock(JsonNode.class);
        when(mockJsonNode.get("tag")).thenReturn(Mockito.mock(JsonNode.class));
        when(mockJsonNode.get("tag").asText()).thenReturn("WLS");

        // Act
        String[] result = alarmRepository.getArrayValueForTags(mockJsonNode, "tag");

        // Assert
        assertArrayEquals(new String[]{"WLS"}, result);
    }

    @Test
    public void testGetArrayValueForTags_CommaSeparatedValues() {
        // Arrange
        JsonNode mockJsonNode = Mockito.mock(JsonNode.class);
        when(mockJsonNode.get("tag")).thenReturn(Mockito.mock(JsonNode.class));
        when(mockJsonNode.get("tag").asText()).thenReturn("WLS,Status");

        // Act
        String[] result = alarmRepository.getArrayValueForTags(mockJsonNode, "tag");

        // Assert
        assertArrayEquals(new String[]{"WLS", "Status"}, result);
    }

    @Test
    public void testGetArrayValueForTags_ExceptionHandling() {
        // Arrange
        JsonNode mockJsonNode = Mockito.mock(JsonNode.class);
        when(mockJsonNode.get("tag")).thenReturn(Mockito.mock(JsonNode.class));
        when(mockJsonNode.get("tag").asText()).thenThrow(new RuntimeException("Simulated exception"));

        // Act
        String[] result = alarmRepository.getArrayValueForTags(mockJsonNode, "tag");

        // Assert: Check that it returns an empty array due to exception
        assertArrayEquals(new String[0], result);
    }
}
```

### Explanation of Test Cases

1. **testGetArrayValueForTags_ValidJsonArray:**
   - Tests the scenario where the `tag` value is a valid JSON array string (`"[\"WLS\"]"`).
   - Asserts that the result is an array containing `"WLS"`.

2. **testGetArrayValueForTags_MalformedJsonArray:**
   - Tests the scenario where the `tag` value is a malformed JSON array string (`"['WLS']"`).
   - Asserts that the method returns an empty array.

3. **testGetArrayValueForTags_SingleValue:**
   - Tests the scenario where the `tag` value is a single string (`"WLS"`).
   - Asserts that the result is an array containing `"WLS"`.

4. **testGetArrayValueForTags_CommaSeparatedValues:**
   - Tests the scenario where `tag` contains comma-separated string values (`"WLS,Status"`).
   - Asserts that the method splits the string correctly and returns both values in an array.

5. **testGetArrayValueForTags_ExceptionHandling:**
   - Simulates an exception scenario (to cover the catch block).
   - Asserts that the method returns an empty array when an exception is thrown.

### Conclusion

This set of tests covers all the branches needed for the `getArrayValueForTags` method, ensuring both the conditional logic and possible exceptions are properly handled for 100% code coverage. You can run these tests using your JUnit 5 testing framework to validate the functionality of the method.