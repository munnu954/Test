The error you're encountering is due to the fact that Mockito's `doThrow()` method is used for methods that throw unchecked exceptions (`RuntimeException` and its subclasses), but `SystemException` is a checked exception. To address this, we need to modify the `convertAndSaveToEvents` method to allow us to throw a `SystemException` in a way that can be captured in our tests. Hereâ€™s how you can refactor the code:

### Refactor `convertAndSaveToEvents` Method

First, update the `convertAndSaveToEvents` method so that it can throw a `SystemException` directly from the test:

```java
public void convertAndSaveToEvents(EventSaveRequest request) throws SystemException {
    try {
        EventsEntity entity = new EventsEntity();
        entity.convert(request);
        eventsRepository.save(entity);
        LOGGER.debug("EventManager Inserted events successfully");
    } catch (Exception e) {
        LOGGER.error("Error: {}", e.getMessage());
        if (e instanceof SystemException) {
            throw (SystemException) e;
        }
    }
}
```

### Updated Test Case

Now we need to adjust the test code to throw the `SystemException` from `convertAndSaveToEvents`:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class EventManagerTest {

    @InjectMocks
    private EventManager eventManager;

    @Mock
    private EventsRepository eventsRepository;

    @Mock
    private EventsValidator validator;

    private EventSaveRequest request;

    @BeforeEach
    public void setUp() {
        request = new EventSaveRequest();
        // Initialize request object with necessary data
    }

    @Test
    public void testSaveEventsSystemException() throws Exception {
        // Mock the validator to do nothing
        doNothing().when(validator).validateInsert(request);

        // Use a spy to throw SystemException from the real method
        EventManager spyEventManager = spy(eventManager);
        doThrow(new SystemException("System error occurred")).when(spyEventManager).convertAndSaveToEvents(request);

        EventResponse response = spyEventManager.saveEvents(request);

        // Verify the status code and message in the response
        assertEquals("FAILURE_CODE", response.getStatus().getCode());
        assertEquals("System error occurred", response.getStatus().getMessage());

        // Verify that the appropriate methods were called
        verify(validator).validateInsert(request);
        verify(spyEventManager).convertAndSaveToEvents(request);
    }
}
```

### Explanation:

1. **Spy on EventManager**: We use `spy` to create a partial mock of `EventManager` so that we can specifically target the `convertAndSaveToEvents` method to throw a `SystemException`.

2. **Throw SystemException**: We use `doThrow()` on the spy object to simulate the `SystemException`.

3. **Assertions**: We check the response to ensure it contains the failure status and message.

The above changes should handle the checked exception correctly and allow the test to pass by simulating the behavior of throwing a `SystemException`.