import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class AlarmRepositoryImplTest {

    @Mock
    PostGreDataBaseConfig postGreDataBaseConfig;

    @InjectMocks
    AlarmRepositoryImpl alarmRepository;

    @Test
    void testAlarmStateCleared() {
        // Mock the required dependencies
        when(postGreDataBaseConfig.getAlarmStateMap()).thenReturn(getMockAlarmStateMap());

        // Prepare the test Alarm object
        Alarm alarm = new Alarm();
        alarm.setState(postGreDataBaseConfig.getAlarmStateMap().get("Cleared"));

        // Call the method to test
        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        // Test if the countResetFlag is set to 1 and the state is set to New
        assertEquals(1, alarm.getCountResetFlag());
        assertEquals(postGreDataBaseConfig.getAlarmStateMap().get("New"), alarm.getState());
    }

    private Map<String, Integer> getMockAlarmStateMap() {
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 1);
        alarmStateMap.put("New", 2);
        return alarmStateMap;
    }
}