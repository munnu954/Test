Here is a sample JUnit5 test class for testing the BatchLoaderUtils class:

```java
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.header.Header;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.support.SendResult;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class BatchLoaderUtilsTest {

    @InjectMocks
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    public void setup() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(batchLoaderUtils, "failedMessageService", failedMessageService);
    }

    @Test
    public void testSendMessageAsyncSuccess() {
        String producerTopic = "test-topic";
        String transactionId = "123456";
        String payload = "test-payload";
        String insightName = "test-insight";
        char sensitivityCheckDone = 'Y';
        String errorCategory = "test-error";

        ProducerRecord<String, String> producerRecord = new ProducerRecord<>(producerTopic, payload);

        SendResult<String, String> sendResult = new SendResult<>(null, null);
        CompletableFuture<SendResult<String, String>> future = CompletableFuture.completedFuture(sendResult);
        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        batchLoaderUtils.sendMessageAsync(producerRecord, transactionId, payload, producerTopic, insightName, sensitivityCheckDone, errorCategory);

        // Verify the message is sent successfully
    }

    @Test
    public void testSendMessageAsyncFailure() {
        String producerTopic = "test-topic";
        String transactionId = "123456";
        String payload = "test-payload";
        String insightName = "test-insight";
        char sensitivityCheckDone = 'Y';
        String errorCategory = "test-error";

        ProducerRecord<String, String> producerRecord = new ProducerRecord<>(producerTopic, payload);

        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.completeExceptionally(new RuntimeException("Kafka producer error"));

        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        batchLoaderUtils.sendMessageAsync(producerRecord, transactionId, payload, producerTopic, insightName, sensitivityCheckDone, errorCategory);

        // Verify the message is saved as a failed record
    }

}
```

In the test methods, you can verify the behavior of the BatchLoaderUtils class by setting up mock responses for the KafkaTemplate and KafkaFalloutService. You can use Mockito's `when` and `thenReturn` methods to mock the behavior for different scenarios (success and failure).