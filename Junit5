Here are some JUnit 5 test cases to cover the else block where `parsedValue.replace(startIndex, endIndex, RulesConstants.EMPTYSTRING);`:

1. Test when `value` does not contain any placeholders:
```java
@Test
void testParse_NoPlaceholders() throws Exception {
    String value = "test";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("testKey", "testValue");
    String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
    assertEquals(value, result);
}
```
2. Test when `value` contains a placeholder without a dot:
```java
@Test
void testParse_PlaceholderWithoutDot() throws Exception {
    String value = "before %name after";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("name", "testName");
    String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
    assertEquals("before testName after", result);
}
```
3. Test when `value` contains a placeholder with an invalid dot:
```java
@Test
void testParse_PlaceholderWithInvalidDot() throws Exception {
    String value = "before %name.field.% after";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("name", "testName");
    String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
    assertEquals("before %name.field.% after", result);
}
```
4. Test when `value` contains a placeholder with a dot and the first attribute is not present in the map:
```java
@Test
void testParse_PlaceholderWithDotAndMissingAttribute() throws Exception {
    String value = "before %name.field% after";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("field", "testField");
    String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
    assertEquals("before %name.field% after", result);
}
```
5. Test when `value` contains a placeholder with a dot and the first attribute is an array:
```java
@Test
void testParse_PlaceholderWithDotAndFirstAttributeIsArray() throws Exception {
    String value = "before %name[0].field% after";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("name", new ArrayList<>());
    String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
    assertEquals("before %name[0].field% after", result);
}
```
6. Test when `value` contains a placeholder with a dot and the second attribute is not present in the map:
```java
@Test
void testParse_PlaceholderWithDotAndSecondAttributeMissing() throws Exception {
    String value = "before name.% after";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("name", "testName");
    String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
    assertEquals("before name.% after", result);
}
```
7. Test when `value` contains a placeholder with a dot and the second attribute is an array:
```java
@Test
void testParse_PlaceholderWithDotAndSecondAttributeIsArray() throws Exception {
    String value = "before name.[0]% after";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("name", new ArrayList<>());
    String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
    assertEquals("before name.[0]% after", result);
}
```
8. Test when `value` contains a placeholder with multiple dots and attributes are missing:
```java
@Test
void testParse_PlaceholderWithMultipleDotsAndMissingAttributes() throws Exception {
    String value = "before %name.field1.field2% after";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("name", "testName");
    String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
    assertEquals("before %name.field1.field2% after", result);
}
```
9. Test when `value` contains a placeholder with multiple dots and all attributes are arrays:
```java
@Test
void testParse_PlaceholderWithMultipleDotsAndAllAttributesAreArrays() throws Exception {
    String value = "before %arr[0].field[1].field[2]% after";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("arr", new ArrayList<>());
    String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
    assertEquals("before %arr[0].field[1].field[2]% after", result);
}
```
10. Test when `value` contains a placeholder with multiple dots and some attributes are present in the map and some are arrays:
```java
@Test
void testParse_PlaceholderWithMultipleDotsAndAttributesPresentAndMissing() throws Exception {
    String value = "before %arr[0].field1
```