Sure, here's the updated CsvtoJsonMRFCnTransformer code:

public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        String[] headerRow = lines[2].split(","); // Here, we are picking the 3rd line as the headers

        JSONObject obj = new JSONObject();

        for (int i = 0; i < headerRow.length; i++) {
            String header = headerRow[i].trim().replace(""‌, "");
            obj.put(header, "");
        }

        for (int i = 0; i < lines.length; i++) {
            if (i == 0)  // First line contains SystemId
                String systemId = lines[i].substring(lines[i].indexOf("#") + 1).trim();
                obj.put("SystemId", systemId);
             else if (i == 1)  // Second line contains NodeIP
                String nodeIP = lines[i].substring(lines[i].indexOf("#") + 1).trim();
                obj.put("NodeIP", nodeIP);
             else if (i > 2)  // Data rows start from the 4th line (index 3)
                String[] data = lines[i].split(",");
                if (headerRow.length == data.length) {
                    for (int j = 0; j < data.length; j++) {
                        String jsonkey = headerRow[j].trim().replace(""‌, "");
                        String jsonvalue = data[j].trim().replace(""‌, "");
                        obj.put(jsonkey, jsonvalue);
                    }
                    this.successIntCounter.add(1);
                    collector.collect(obj.toString());
                 else {
                    this.failureIntCounter.add(1);
                }
            }
        }
    }
 

In the above code, I have modified the flatMap() method to first create a JSONObject with all the headers as keys and empty string as values. Then, I have added the SystemId and NodeIP values as separate keys to the same JSONObject. Finally, while iterating through the data rows, I am setting the corresponding values for each key in the JSONObject. This way, the SystemId and NodeIP values will be added as keys instead of values.