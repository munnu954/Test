The error you're experiencing indicates that the `MtnInsightsAttributes` class may not be suitable for mocking with Mockito due to method visibility or the nature of final methods. To address this, we need to ensure that `MtnInsightsAttributes` is either mockable or we create a testable instance. Given that we're encountering issues with mocking, let's use a different approach by creating real objects for the attributes. Here's how you can write the test cases to execute without mocking issues:

```java
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.vz.s360.vbg.eventledger.exception.InvalidRequestException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator mtnInsightsValidator;

    @BeforeEach
    public void setUp() {
        mtnInsightsValidator = new MtnInsightsValidator();
    }

    @Test
    public void testValidateIterator_AllFieldsNull() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, attributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }

    @Test
    public void testValidateIterator_InsightCategoryAndNameNull() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("mtn");
        attributes.setEcpdId("ecpdId");
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, attributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }

    @Test
    public void testValidateIterator_ValidMyBizAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setOutageId("outageId");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, attributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }

    @Test
    public void testValidateIterator_MissingMtnOrEcpdId() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, attributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }
    
    @Test
    public void testValidateIterator_EmptyMtnOrInsightCategoryOrEcpdId() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            mtnInsightsValidator.validateIterator(null, attributes, "LogVal ");
        }, "LogVal " + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }
}
```

### Key Changes:

1. **Real Object Use**: Instead of mocking `MtnInsightsAttributes`, we create real instances of the object and set the fields directly. This avoids issues with method visibility and final method stubbing.

2. **Assert Exception**: Use `assertThrows` to verify that an `InvalidRequestException` is thrown, and compare the expected exception message.

3. **Simplified Test Setup**: By directly setting the attributes on `MtnInsightsAttributes`, we avoid needing to mock or stub any methods.

This should resolve the issues you were encountering and provide a robust set of test cases for the specified conditions in the `validateIterator` method.




import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

import com.vz.s360.vbg.eventledger.exception.InvalidRequestException;
import com.vz.s360.vbg.eventledger.model.InsightsRequestType;
import com.vz.s360.vbg.eventledger.model.MtnInsightsAttributes;
import com.vz.s360.vbg.eventledger.model.MtnInsightsRequest;
import com.vz.s360.vbg.eventledger.validator.MtnInsightsValidator;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class MtnInsightsValidatorTest {

    @InjectMocks
    private MtnInsightsValidator mtnInsightsValidator;

    private MtnInsightsRequest request;

    @BeforeEach
    void setUp() {
        request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        request.setKeyAttributes(new MtnInsightsAttributes());
    }

    @Test
    void shouldNotThrowExceptionWhenRequestIsValid() {
        MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
        mtnInsightsAttributes.setMtn("MTN");
        mtnInsightsAttributes.setInsightCategory("InsightCategory");
        mtnInsightsAttributes.setInsightName("InsightName");
        request.setKeyAttributes(mtnInsightsAttributes);

        mtnInsightsValidator.validate(request);
    }

    @Test
    void shouldThrowExceptionWhenRequestIsNotValid() {
        when(request.getRequestType()).thenReturn(null);

        assertThat(mtnInsightsValidator.validateIterator("errorMessage", request.getKeyAttributes(), "KeyAttributes")).isInstanceOf(InvalidRequestException.class);
    }

    @Test
    void shouldThrowExceptionWhenKeyAttributesAreNull() {
        when(request.getKeyAttributes()).thenReturn(null);

        assertThat(mtnInsightsValidator.validateIterator("errorMessage", request.getKeyAttributes(), "KeyAttributes")).isInstanceOf(InvalidRequestException.class);
    }

    @Test
    void shouldThrowExceptionWhenMtnIsNotValid() {
        MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
        mtnInsightsAttributes.setInsightCategory("InsightCategory");
        mtnInsightsAttributes.setInsightName("InsightName");
        request.setKeyAttributes(mtnInsightsAttributes);

        assertThat(mtnInsightsValidator.validateIterator("errorMessage", request.getKeyAttributes(), "KeyAttributes")).isInstanceOf(InvalidRequestException.class);
    }

    @Test
    void shouldThrowExceptionWhenInsightCategoryIsNotValid() {
        MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
        mtnInsightsAttributes.setMtn("MTN");
        mtnInsightsAttributes.setInsightName("InsightName");
        request.setKeyAttributes(mtnInsightsAttributes);

        assertThat(mtnInsightsValidator.validateIterator("errorMessage", request.getKeyAttributes(), "KeyAttributes")).isInstanceOf(InvalidRequestException.class);
    }

    @Test
    void shouldThrowExceptionWhenInsightNameIsNotValid() {
        MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes();
        mtnInsightsAttributes.setMtn("MTN");
        mtnInsightsAttributes.setInsightCategory("InsightCategory");
        request.setKeyAttributes(mtnInsightsAttributes);

        assertThat(mtnInsightsValidator.validateIterator("errorMessage", request.getKeyAttributes(), "KeyAttributes")).isInstanceOf(InvalidRequestException.class);
    }
}