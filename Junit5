 @Mock
    private RestTemplate restTemplate;
    
    @Mock
    private ConfigParams configParams;

    @InjectMocks
    private ApiOperation apiOperation;

    @BeforeEach
    void setUp() {
        // Set up the mock behavior for configParams
        when(configParams.getAlarmFetchURL()).thenReturn("http://mock-url");
        when(configParams.getAlarmFilterKey()).thenReturn("mock-key");
    }

    @Test
    void testGetAlarmDetailsById_NotFound() {
        // Arrange
        String alarmIdentity = "mock-alarm-id";

        // Simulating a 404 Not Found response
        when(restTemplate.exchange(any(String.class), eq(HttpMethod.POST), any(), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND, "Alarm Identity not found"));

        // Act
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Assert
        // Verify that the response is null due to the exception
        assertNull(result);
        
        // Verify that the logger was called with the expected message
        // Note: You may need to add a logger mock or use a logging framework that supports verification
        // For example, if using SLF4J, you may use a library like LogCaptor to capture logs.
    }