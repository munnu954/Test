CoconutDeviceMSConstants class:-

public static final String COCONUT_V3_SITE_QUERY = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS "unparsedAddress", site.city as city, site.state AS state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS "createdBySys" FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not  null" ;

public static final String COCONUT_V3_SITE_NAME =" AND LOWER(site.site_name) like :siteName";

public static final String COCONUT_V3_LOCATION_CLLI = " AND LOWER(site.clli_code) like : locationCLLI";


CoconutServiceVersion3 class:-
@Service
public class CoconutServiceVersion3{

@Autowired
CoconutDeviceDao coconutDeviceDao;

@Autowired
EuipmentListCoconutDeviceDao euipmentListCoconutDeviceDao;

@Autowired
EquipmentListCoconutDeviceV3Dao equipmentListCoconutDeviceV3Dao;

private CoconutDeviceMSConstants coconutDeviceMSConstants;

private static Logger logger = LoggerFactory.getLogger(CoconutServiceVersion3.class);

//newly created for v3api
public UTSEquipmentList getCOCONUTEquipListV3(EquipmentInputRequest request, UTSEquipmentList utsEquipmentList) throws InternalServerErrorException, NoDataFoundException, InterruptedException, ExecutionException, DaoException {
try {
String qry = null;
String fullQuery = null;
Map<String, Object> criteria= request.getRequestParameters();
qry= queryBasedOnParameter(criteria);
fullQuery = "select COUNT(*) from (" + qry + ")";
Integer skip = 0;
Integer limit = 10;
if (criteria.containsKey("pageNo")) {
if (criteria.get("pageNo").equals("1")) {
skip = 0;
} else {
skip = (Integer.parseInt(criteria.get("pageNo").toString()) * Integer.parseInt(criteria.get("size").toString()));
skip = skip-Integer.parseInt(criteria.get("size").toString());
}
} else {
skip = 0;
}
if (criteria.containsKey("size")) {
limit =skip + Integer.parseInt(criteria.get("size").toString());
} else {
limit = 10;
}
qry = "select * from (select t.*, rownum as rn from (" + qry;
qry =qry.concat(" ) t ) WHERE rn BETWEEN " + skip + " and " + limit+" ");
if (criteria.containsKey("sortByField")) {
qry qry.concat(" order by " + criteria.get("sortByField") + " ");
} if(criteria.containsKey("sortDirection")) {
qry= qry.concat(" " + criteria.get("sortDirection") + " ");
}
UTSEquipmentList response = new UTSEquipmentList();
response = equipmentListCoconutDeviceV3Dao.getEquipListDaoV3(criteria, qry, fullQuery, utsEquipmentList, request);
return response;
} catch (Exception ex) {
logger.error(ex.getMessage());
throw new InternalServerErrorException(ex.getMessage());
}
}

private String queryBasedOnParameter(Map<String, Object> queryParams) {
    String query = "";
    StringJoiner finalQuery = new StringJoiner("");
    finalQuery.add(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);

    if (queryParams.containsKey("locationCLLI")) {
        finalQuery.add(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'" + ((String) queryParams.get("locationCLLI")).toLowerCase() + "'"));
    }

    if (queryParams.containsKey("siteName")) {
        finalQuery.add(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'" + ((String) queryParams.get("siteName")).toLowerCase() + "'"));
    }

    return finalQuery.toString();
}
}


Can you please write Junit test cases(org.junit.Test) code covering all the 4 branches of the above both siteName and locationCILLI conditional statements of queryBasedOnParameter method for 100% code coverage.

Note:- 'queryBasedOnParameter(java.util.Map<java.lang.String,java.lang.Object>)' has private access in 'com.verizon.uts.coconut.device.service. CoconutServiceVersion3 class. Can you please make use of Reflection APIs by without making CoconutServiceVersion3.queryBasedOnParameter public in CoconutServiceVersion3 class