import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Test
    public void testApplyPostingRule() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking dependencies
        ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
        when(utils.evaluateExpression(eq("%TopoObject:OSS_Names[0]%"), anyMap())).thenReturn("MockValue");
        when(utils.evaluateExpression(eq("$(topologytraversal.topologyDetailsAlarmedObjectExpression:{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}}"), anyMap())).thenReturn("MockTopologyDetails");
        when(utils.evaluateExpression(eq("%TopoObject:OSS_Names[0]%"), anyMap())).thenReturn("MockEligibilityValue");

        when(utils.evaluateExpression(eq("%Alarm:reportingObject%"), anyMap())).thenReturn("MockComponentID");

        // Set values for @Value annotated fields using ReflectionTestUtils
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "$(topologytraversal.topologyDetailsAlarmedObjectExpression:{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%TopoObject:OSS_Names[0]%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "reportingObject");

        // Execute the method to be tested
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions
        assertNotNull(result);
    }

    @Test
    public void testApplyPostingRule_Exception() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking dependencies to throw an exception
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenThrow(new RuntimeException());

        // Set values for @Value annotated fields using ReflectionTestUtils
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "$(topologytraversal.topologyDetailsAlarmedObjectExpression:{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%TopoObject:OSS_Names[0]%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "reportingObject");

        // Execute the method to be tested
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions
        assertNotNull(result);
    }

    @Test
    public void testGetComponentIdForTopoTraversal() {
        HashMap<String, Object> alarmMap = new HashMap<>();
        PostingRule rule = new PostingRule();

        // Mocking
        when(utils.evaluateExpression(eq("%Alarm:reportingObject%"), anyMap())).thenReturn("MockComponentID");

        // Execute the method to be tested
        String componentId = postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule);

        // Assertions
        assertEquals("MockComponentID", componentId);
    }

    @Test
    public void testIsLateAlarmEligibleForRuleProcessing() {
        SqlRowSet rowSet = mock(SqlRowSet.class);

        // Set values for @Value annotated fields using ReflectionTestUtils
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "reportingObject");

        // Mocking
        when(rowSet.getString(eq("reportingobject"))).thenReturn(null);

        // Execute the method to be tested
        boolean result = postingRuleProcessingService.isLateAlarmEligibleForRuleProcessing(new Alarm(), rowSet);

        // Assertions
        assertTrue(result);
    }
}