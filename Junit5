To achieve 100% code coverage for the `getDeviceDetailsv3` method of the `IVAPPDeviceService` class, we need to test various scenarios, including:

1. Successful execution where `deviceResponse` is not `null`.
2. Handling of `HttpServerErrorException`.
3. Handling of a generic `Exception`.
4. Scenarios where `deviceResponse` is `null`.

Here is a comprehensive set of JUnit test cases:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import com.google.gson.Gson;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService ivappDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    private DeviceListInputRequest request;
    private UTSEquipmentList utsEquipmentList;

    @Before
    public void setUp() throws Exception {
        // Set private fields using reflection
        setPrivateField(ivappDeviceService, "lookupServiceName", "http://testService");
        setPrivateField(ivappDeviceService, "lookupServicePath", "/testPath");

        request = new DeviceListInputRequest();
        Map<String, Object> requestParams = new HashMap<>();
        requestParams.put("key", "value");
        request.setRequestParameters(requestParams);

        utsEquipmentList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://testService/testPath");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
    }

    private void setPrivateField(Object targetObject, String fieldName, Object fieldValue) throws Exception {
        Field field = targetObject.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(targetObject, fieldValue);
    }

    @Test
    public void testGetDeviceDetailsv3_Success() throws Exception {
        String dataServiceUrl = "http://testService/testPath";

        UTSEquipmentList mockResponse = new UTSEquipmentList();
        ResponseEntity<UTSEquipmentList> responseEntity = ResponseEntity.ok(mockResponse);

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(UTSEquipmentList.class)
        )).thenReturn(responseEntity);

        when(iVAPPDeviceUtil.covertV3Format(any(UTSEquipmentList.class))).thenReturn(new UTSEquipmentList());

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNotNull(result);
    }

    @Test
    public void testGetDeviceDetailsv3_HttpServerErrorException() {
        String dataServiceUrl = "http://testService/testPath";

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(UTSEquipmentList.class)
        )).thenThrow(new HttpServerErrorException(org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR));

        try {
            UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
            assertNotNull(result);
            assertNull(result.getEquipmentLst());
        } catch (Exception e) {
            fail("Exception should not have been thrown");
        }
    }

    @Test
    public void testGetDeviceDetailsv3_OtherException() {
        String dataServiceUrl = "http://testService/testPath";

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(UTSEquipmentList.class)
        )).thenThrow(new RuntimeException());

        try {
            UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
            assertNotNull(result);
            assertNull(result.getEquipmentLst());
        } catch (Exception e) {
            fail("Exception should not have been thrown");
        }
    }

    @Test
    public void testGetDeviceDetailsv3_ResponseNull() throws Exception {
        String dataServiceUrl = "http://testService/testPath";

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(UTSEquipmentList.class)
        )).thenReturn(ResponseEntity.ok(null));

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNotNull(result);
        assertNull(result.getEquipmentLst());
    }
}
```

### Explanation:

1. **`testGetDeviceDetailsv3_Success`**: Tests the successful path where the `deviceResponse` is not `null`, and the conversion method is called.

2. **`testGetDeviceDetailsv3_HttpServerErrorException`**: Simulates an `HttpServerErrorException` and verifies that no exception is thrown and the `utsEquipmentList` is returned unchanged.

3. **`testGetDeviceDetailsv3_OtherException`**: Tests handling of a generic exception scenario, ensuring the method handles it gracefully.

4. **`testGetDeviceDetailsv3_ResponseNull`**: Simulates a scenario where the `deviceResponse` is `null` and ensures that the `utsEquipmentList` remains unchanged.

These tests help ensure that all possible branches and exceptions are covered, leading to 100% code coverage for the method.