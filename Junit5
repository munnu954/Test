To cover the missed branches of the specified if statements in the `UserInsightsValidator` class, we need to create additional JUnit 5 test cases that ensure both true and false paths of the conditional statements are tested.

Here's how you can structure the additional test cases:

### Additional JUnit 5 Test Cases

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

public class UserInsightsValidatorTest {

    private UserInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        validator = new UserInsightsValidator();
    }

    // Test case to cover the case where all attributes are present but have empty values
    @Test
    public void testValidateIteratorWithAllAttributesPresentButEmpty() {
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId(""); // Empty userId
        attributes.setEcpdId(""); // Empty ecpdId
        attributes.setInsightCategory(""); // Empty insightCategory
        attributes.setInsightName(""); // Empty insightName

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "KeyAttributes");
        });

        Assertions.assertEquals("USER_SEARCH_MAND_FIELDS_CHECK", exception.getMessage());
    }

    // Test case to cover the case where some attributes are present and others are missing
    @Test
    public void testValidateIteratorWithSomeAttributesPresent() {
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("validUserId"); // Valid userId
        attributes.setEcpdId(""); // Empty ecpdId
        attributes.setInsightCategory("validCategory"); // Valid insightCategory
        attributes.setInsightName(""); // Empty insightName

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "KeyAttributes");
        });

        Assertions.assertEquals("USER_SEARCH_MAND_FIELDS_CHECK", exception.getMessage());
    }

    // Test case to cover the scenario where all required fields are present and valid in UserInsightsSearchRequest
    @Test
    public void testValidateUserInsightsSearchRequestWithAllFieldsPresent() {
        UserInsightsSearchRequest searchRequest = new UserInsightsSearchRequest();
        searchRequest.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId("validUserId");
        searchParam.setEcpdId("validEcpdId");
        searchParam.setInsightCategory(new String[]{"validCategory"});
        searchParam.setInsightName(new String[]{"validName"});
        searchRequest.setServiceRequest(searchParam);

        Assertions.assertDoesNotThrow(() -> validator.validate(searchRequest));
    }

    // Test case to cover the scenario where some required fields are missing in UserInsightsSearchRequest
    @Test
    public void testValidateUserInsightsSearchRequestWithMissingSomeFields() {
        UserInsightsSearchRequest searchRequest = new UserInsightsSearchRequest();
        searchRequest.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId("validUserId");
        searchParam.setEcpdId(""); // Empty ecpdId
        searchParam.setInsightCategory(new String[]{"validCategory"});
        searchParam.setInsightName(new String[]{"validName"});
        searchRequest.setServiceRequest(searchParam);

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(searchRequest);
        });

        Assertions.assertEquals("USER_SEARCH_MAND_FIELDS_CHECK", exception.getMessage());
    }

    // Existing helper methods...
    private UserInsightsRequest createValidUserInsightsRequest() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setKeyAttributes(createValidUserInsightsAttributes());
        request.setServiceHeader(createValidServiceHeader());
        return request;
    }

    private UserInsightsAttributes createValidUserInsightsAttributes() {
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("validUserId");
        attributes.setEcpdId("validEcpdId");
        attributes.setInsightCategory("validCategory");
        attributes.setInsightName("validName");
        return attributes;
    }

    private ServiceHeader createValidServiceHeader() {
        ServiceHeader header = new ServiceHeader();
        header.setClientId("validClientId");
        header.setClientTransactionId("validTransactionId");
        header.setServiceName("validServiceName");
        return header;
    }

    private UserInsightsSearchRequest createValidUserInsightsSearchRequest() {
        UserInsightsSearchRequest request = new UserInsightsSearchRequest();
        request.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId("validUserId");
        searchParam.setEcpdId("validEcpdId");
        searchParam.setInsightCategory(new String[]{"validCategory"});
        searchParam.setInsightName(new String[]{"validName"});
        request.setServiceRequest(searchParam);
        return request;
    }
}
```

### Additional Test Cases Explained:

1. **testValidateIteratorWithAllAttributesPresentButEmpty**: This test case checks if all attributes are present but empty. It triggers the condition that sets the error message to `USER_SEARCH_MAND_FIELDS_CHECK`.

2. **testValidateIteratorWithSomeAttributesPresent**: This test verifies that if some attributes are valid and others are empty, the correct error message is thrown.

3. **testValidateUserInsightsSearchRequestWithAllFieldsPresent**: This test ensures that when all required fields in the `UserInsightsSearchRequest` are filled correctly, no exceptions are thrown.

4. **testValidateUserInsightsSearchRequestWithMissingSomeFields**: This test checks that if some required fields are missing in the `UserInsightsSearchRequest`, the correct error message is thrown.

By adding these additional test cases, you can ensure that both branches of the if statements you mentioned are covered, contributing to 100% code coverage for the `UserInsightsValidator` class.