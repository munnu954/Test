Positive Junit5 Test Cases for KafkaProducer.java:

1. Test case to verify if message is sent successfully to Kafka topic:
@Test
void testSendMessage() {
    SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
    kafkaTemplate.send(topicName, spaceCollector);
    Mockito.verify(kafkaTemplate, Mockito.times(1)).send(topicName, spaceCollector);
}


2. Test case to verify if the logger logs the message sent:
@Test
void testLogger() {
    SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
    kafkaProducer.sendMessage(spaceCollector);
    Mockito.verify(Logger, Mockito.times(1)).info("Message sent {}", spaceCollector);
}


Positive Junit5 Test Cases for KafkaConsumer.java:

1. Test case to verify if the logger logs the message received:
@Test
void testConsume() throws IOException, CsvValidationException {
    SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
    kafkaConsumer.consume(spaceCollector);
    Mockito.verify(LOGGER, Mockito.times(1)).info("Message received -> {}", spaceCollector);
}


2. Test case to verify if the CSV file is read successfully:
@Test
void testRetrieveCsvFile() throws IOException, CsvValidationException {
    SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
    List<String[]> rows = kafkaConsumer.retrieveCsvFile(spaceCollector);
    Assertions.assertEquals(rows.size(), 2);
    Assertions.assertArrayEquals(rows.get(0), new String[]{"1", "John", "Doe"});
    Assertions.assertArrayEquals(rows.get(1), new String[]{"2", "Jane", "Doe"});
}


Negative Junit5 Test Cases for KafkaProducer.java:

1. Test case to verify if the message is not sent to Kafka topic when the topic name is invalid:
@Test
void testSendMessageInvalidTopic() {
    SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "input.csv", "output.csv", ",", "csv");
    kafkaTemplate.send("invalid-topic", spaceCollector);
    Mockito.verify(kafkaTemplate, Mockito.times(0)).send(topicName, spaceCollector);
}


2. Test case to verify if the logger does not log the message sent when the message is null:
@Test
void testLoggerNullMessage() {
    kafkaProducer.sendMessage(null);
    Mockito.verify(Logger, Mockito.times(0)).info("Message sent {}", null);
}


Negative Junit5 Test Cases for KafkaConsumer.java:

1. Test case to verify if the logger does not log the message received when the message is null:
@Test
void testConsumeNullMessage() throws IOException, CsvValidationException {
    kafkaConsumer.consume(null);
    Mockito.verify(LOGGER, Mockito.times(0)).info("Message received -> {}", null);
}


2. Test case to verify if the CSV file is not read successfully when the file path is invalid:
@Test
void testRetrieveCsvFileInvalidFilePath() throws IOException, CsvValidationException {
    SpaceCollector spaceCollector = new SpaceCollector(1, "http://localhost", 8080, "invalid.csv", "output.csv", ",", "csv");
    List<String[]> rows = kafkaConsumer.retrieveCsvFile(spaceCollector);
    Assertions.assertEquals(rows.size(), 0);
}