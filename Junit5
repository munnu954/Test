Sure, here are some additional JUnit5 test cases to cover the else block in the `parse()` method:

```java
@Test
void parseWithJSONFieldNotFoundInMap() throws Exception {
    // Arrange
    String expression = "%attribute1:details.unknown%";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("details", new HashMap<>());

    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}

@Test
void parseWithInvalidArrayIndex() throws Exception {
    // Arrange
    String expression = "%attribute1:names[-1]%";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("names", Arrays.asList("John", "Jane"));

    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}

@Test
void parseWithArrayFieldNotFoundInMap() throws Exception {
    // Arrange
    String expression = "%attribute1:unknown[0]%";
    Map<String, Object> srcMap = new HashMap<>();

    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}

@Test
void parseWithInvalidArrayIndex_OutOfBounds() throws Exception {
    // Arrange
    String expression = "%attribute1:names[2]%";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("names", Arrays.asList("John", "Jane"));

    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}

@Test
void parseWithNonExistentFieldInMap() throws Exception {
    // Arrange
    String expression = "%attribute1:unknown%";
    Map<String, Object> srcMap = new HashMap<>();

    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}
```

These test cases cover the following scenarios:

1. `parseWithJSONFieldNotFoundInMap()`: Verifies that the method returns an empty string when the JSON field specified in the expression is not found in the input map.

2. `parseWithInvalidArrayIndex()`: Verifies that the method returns an empty string when the array index specified in the expression is negative.

3. `parseWithArrayFieldNotFoundInMap()`: Verifies that the method returns an empty string when the array field specified in the expression is not found in the input map.

4. `parseWithInvalidArrayIndex_OutOfBounds()`: Verifies that the method returns an empty string when the array index specified in the expression is out of bounds.

5. `parseWithNonExistentFieldInMap()`: Verifies that the method returns an empty string when the field specified in the expression is not found in the input map.

These test cases, along with the previous ones, should provide good coverage for the `parse()` method and ensure that the `else` block is properly handled.