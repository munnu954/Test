```java
import com.verizon.apollo.UWAUpdatesHandlerApplication;
import com.verizon.apollo.MessageConsumer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class UWAUpdatesHandlerApplicationTest {

    @InjectMocks
    private UWAUpdatesHandlerApplication application;

    @Mock
    private SpringApplication springApplication;

    @Mock
    private ConfigurableApplicationContext appContext;

    @Mock
    private MessageConsumer messageConsumerService;

    @Test
    void testMain_SuccessfulStartup() {
        // Mock the SpringApplication behavior
        when(springApplication.run(any(String[].class))).thenReturn(appContext);
        when(appContext.getBean(MessageConsumer.class)).thenReturn(messageConsumerService);

        // Call the main method
        UWAUpdatesHandlerApplication.main(new String[] {});

        // Verify interactions
        verify(springApplication).run(any(String[].class));
        verify(appContext).getBean(MessageConsumer.class);
        verify(messageConsumerService).start();
        verify(appContext).start();
        verify(Runtime.getRuntime()).addShutdownHook(any(Thread.class));
    }

    @Test
    void testMain_ApplicationStartupFailure() {
        // Mock the SpringApplication behavior to throw an exception
        Exception expectedException = new RuntimeException("Application startup failed.");
        doThrow(expectedException).when(springApplication).run(any(String[].class));

        // Call the main method
        UWAUpdatesHandlerApplication.main(new String[] {});

        // Verify interactions
        verify(springApplication).run(any(String[].class));
        verifyNoInteractions(appContext);
        verifyNoInteractions(messageConsumerService);
        verifyNoInteractions(Runtime.getRuntime());
    }

    @Test
    void testShutdownHook_SuccessfulShutdown() {
        // Mock the behavior of the MessageConsumer and ApplicationContext
        when(messageConsumerService.shutdown()).thenReturn(true);
        when(appContext.stop()).thenReturn(true);

        // Create a mock thread and run the shutdown hook
        Thread shutdownHook = new Thread(() -> application.shutdownHook());
        shutdownHook.run();

        // Verify interactions
        verify(messageConsumerService).shutdown();
        verify(appContext).stop();
    }

    @Test
    void testShutdownHook_ShutdownFailure() {
        // Mock the behavior of the MessageConsumer and ApplicationContext to throw exceptions
        doThrow(new RuntimeException("Shutdown failed")).when(messageConsumerService).shutdown();
        doThrow(new RuntimeException("Shutdown failed")).when(appContext).stop();

        // Create a mock thread and run the shutdown hook
        Thread shutdownHook = new Thread(() -> application.shutdownHook());
        shutdownHook.run();

        // Verify interactions
        verify(messageConsumerService).shutdown();
        verify(appContext).stop();
    }

    private void shutdownHook() {
        messageConsumerService.shutdown();
        appContext.stop();
    }
}
```

**Explanation:**

1. **Mockito:** The code uses Mockito for mocking dependencies like `SpringApplication`, `ConfigurableApplicationContext`, and `MessageConsumer`. 
2. **Test Cases:** The test cases cover different scenarios:
   - **Successful Startup:** Tests the scenario where the application starts without any exceptions.
   - **Application Startup Failure:** Tests the scenario where the `SpringApplication.run` method throws an exception. 
   - **Successful Shutdown:** Tests the scenario where the shutdown hook successfully shuts down the application. 
   - **Shutdown Failure:** Tests the scenario where the shutdown hook encounters errors while shutting down.
3. **Coverage:** The tests cover the following code elements:
    - `main` method with both success and failure scenarios.
    - `shutdownHook` method with both success and failure scenarios.
    - `try-catch` blocks in the `main` method.
    - Interactions with mocked dependencies.

**How to Run:**

1. Add the necessary dependencies for JUnit 5 and Mockito to your project's `pom.xml` or build file.
2. Save the test code in a file named `UWAUpdatesHandlerApplicationTest.java` within the `test` source directory.
3. Run the tests using your IDE or build tool.

**Important Note:** This code assumes you have a `MessageConsumer` interface and class defined in your project. You should replace the `MessageConsumer` class with the actual implementation used in your application.