To write JUnit 5 test cases for the `onSkipInProcess` and `onSkipInWrite` methods of the `EcpdFeedBatchConfiguration` class, you need to mock dependencies and use reflection to access private methods or fields if necessary. Here's an example of how you can achieve this:

```java
import static org.mockito.Mockito.*;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(MockitoExtension.class)
public class EcpdFeedBatchConfigurationTest {

    @Mock
    private ErrorFileMovement errorFileMovement;

    @InjectMocks
    private EcpdFeedBatchConfiguration ecpdFeedBatchConfiguration;

    private EcpdFeedBatchConfiguration.FileSkipListener fileSkipListener;

    @BeforeEach
    public void setUp() {
        fileSkipListener = ecpdFeedBatchConfiguration.new FileSkipListener();
        ReflectionTestUtils.setField(ecpdFeedBatchConfiguration, "fileFeedLocation", "file:/data/input");
        ReflectionTestUtils.setField(ecpdFeedBatchConfiguration, "errorDirectory", "/data/error");
    }

    @Test
    public void testOnSkipInProcess() {
        EcpdGSAMSensitiveProfile profile = new EcpdGSAMSensitiveProfile();
        profile.setFileName("testFile.txt");
        Exception exception = new Exception("Test exception");

        fileSkipListener.onSkipInProcess(profile, exception);

        String expectedSourcePath = Paths.get("/data/input").toString();
        verify(errorFileMovement).moveErrorFiletoErrorDir("testFile.txt", expectedSourcePath, "/data/error");
    }

    @Test
    public void testOnSkipInWrite() {
        EcpdGSAMSensitiveProfile profile = new EcpdGSAMSensitiveProfile();
        profile.setFileName("testFile.txt");
        Exception exception = new Exception("Test exception");

        fileSkipListener.onSkipInWrite(profile, exception);

        String expectedSourcePath = Paths.get("/data/input").toString();
        verify(errorFileMovement).moveErrorFiletoErrorDir("testFile.txt", expectedSourcePath, "/data/error");
    }
}
```

### Explanation:

1. **Annotations**:
   - `@ExtendWith(MockitoExtension.class)`: This is used to enable Mockito annotations in JUnit 5.
   - `@Mock`: Annotates the `ErrorFileMovement` class to create a mock instance.
   - `@InjectMocks`: This annotation is used to inject the mock objects into our `EcpdFeedBatchConfiguration` object.

2. **ReflectionTestUtils**:
   - This utility from Spring can be used to set private fields directly, allowing you to keep the fields private and still test them.

3. **Test Methods**:
   - Each test method sets up a new `EcpdGSAMSensitiveProfile` object and an exception.
   - The `onSkipInProcess` and `onSkipInWrite` methods of the `FileSkipListener` inner class are called directly.
   - The `verify` method is used to ensure that the `moveErrorFiletoErrorDir` method was called with the expected parameters.

4. **Reflection**:
   - Using `ReflectionTestUtils.setField`, you can set the value of private fields without changing their visibility.

This test setup assumes that the `ErrorFileMovement` methods are correctly mocked and doesn't actually move any files. You can further customize these tests to fit your specific setup and requirements.