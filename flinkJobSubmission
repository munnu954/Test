import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.ResponseErrorHandler;
import org.springframework.web.client.RestClientResponseException;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class FlinkApiControllerTest {

    @InjectMocks
    private FlinkApiController flinkApiController;

    @Mock
    private RestTemplate restTemplate;

    @Test
    public void testTriggerJob_WithValidJobSubmitUrl_Success() {
        // Arrange
        SpaceCollector collector = new SpaceCollector();
        collector.setInputFilePath("input.csv");
        String fileType = ".csv";

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        ResponseEntity<String> responseEntity = new ResponseEntity<>("Job triggered successfully", HttpStatus.OK);
        String jobSubmitUrl = "http://localhost:8081";
        String flinkJobJarid = "job123";
        when(restTemplate.postForEntity(jobSubmitUrl, any(HttpEntity.class), String.class)).thenReturn(responseEntity);

        // Act
        String result = flinkApiController.triggerJob(collector, fileType);

        // Assert
        assertEquals("Job triggered successfully", result);
    }

    @Test
    public void testTriggerJob_WithInvalidJobSubmitUrl_Failure() {
        // Arrange
        SpaceCollector collector = new SpaceCollector();
        collector.setInputFilePath("input.csv");
        String fileType = ".csv";

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        String jobSubmitUrl = "invalidUrl";
        when(restTemplate.postForEntity(jobSubmitUrl, any(HttpEntity.class), String.class)).thenThrow(new RestClientException("Invalid URL"));

        // Act
        String result = flinkApiController.triggerJob(collector, fileType);

        // Assert
        assertEquals("Job is not trigged", result);
    }

    @Test
    public void testTriggerJob_WithNonExistentFlinkJobJarid_Failure() {
        // Arrange
        SpaceCollector collector = new SpaceCollector();
        collector.setInputFilePath("input.txt");
        String fileType = ".txt";

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        ResponseEntity<String> responseEntity = new ResponseEntity<>("Job submitted but not found", HttpStatus.NOT_FOUND);
        String jobSubmitUrl = "http://localhost:8081";
        String flinkJobJarid = "nonExistentJob";
        when(restTemplate.postForEntity(jobSubmitUrl, any(HttpEntity.class), String.class)).thenReturn(responseEntity);

        // Act
        String result = flinkApiController.triggerJob(collector, fileType);

        // Assert
        assertEquals("Job is not trigged", result);
    }
}