import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
public class AlarmPostingUtilsTest {

    @InjectMocks
    private AlarmPostingUtils alarmPostingUtils;

    @Mock
    private Logger LOG;

    @Test
    public void testParse_Exception_InvalidArrayIndex() {
        // Arrange
        String expression = "%attribute1: names [-1]%"; 
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("John", "Jane")); 

        // Act
        alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        verify(LOG).error("Exception occurred while Parsing Expression: ({})", Mockito.anyString());
    }

    @Test
    public void testParse_Exception_InvalidArrayIndexFormat() {
        // Arrange
        String expression = "%attribute1: names [abc]%"; 
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("John", "Jane")); 

        // Act
        alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        verify(LOG).error("Exception occurred while Parsing Expression: ({})", Mockito.anyString());
    }

    @Test
    public void testParse_Exception_InvalidJsonFieldFormat() {
        // Arrange
        String expression = "%attribute1: details.name["; 
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("details", Map.of("name", "John")); 

        // Act
        alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        verify(LOG).error("Exception occurred while Parsing Expression: ({})", Mockito.anyString());
    }

    @Test
    public void testParse_Exception_InvalidArrayAccess() {
        // Arrange
        String expression = "%attribute1: names[2]%"; 
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("John", "Jane")); // Array has only 2 elements

        // Act
        alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        verify(LOG).error("Exception occurred while Parsing Expression: ({})", Mockito.anyString());
    }

    @Test