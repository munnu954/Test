Here is a set of JUnit 5 test cases designed to achieve 100% code coverage for the `getAEnd` and `getZEnd` methods of the `CircuitDetailsProvider` class. These tests cover various scenarios, including edge cases and different paths through the code.

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class CircuitDetailsProviderTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    private CircuitDetailResponse response;
    private String circuitId = "someCircuitId";
    private String clli = "someClliCode";

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        response = new CircuitDetailResponse();
    }

    // Test cases for getAEnd
    @Test
    public void testGetAEnd_NullResponse_CircuitExists() {
        Circuit circuit = new Circuit();
        AEnd aEnd = new AEnd();
        PortChannel portChannel = new PortChannel();
        PortRef portRef = new PortRef();
        portRef.setClliCode(clli);
        portChannel.getPortRef().add(portRef);
        aEnd.getPortChannel().add(portChannel);
        
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.getCircuit().add(circuit);
        CircuitData circuitData = new CircuitData();
        circuitData.getCircuitLst().add(circuitLst);
        response.setCircuitData(circuitData);

        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn("responseString");
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(new Gson().toJson(response));

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, null);
        assertNotNull(result);
        assertEquals(1, result.getPortChannel().size());
    }

    @Test
    public void testGetAEnd_NullResponse_NoCircuit() {
        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, null);
        assertNull(result);
    }

    @Test
    public void testGetAEnd_WithResponse() {
        AEnd aEnd = new AEnd();
        // Set up a scenario where response already contains AEnd
        response.setCircuitData(createCircuitDataWithAEnd(clli));
        
        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);
        assertNotNull(result);
    }

    // Test cases for getZEnd
    @Test
    public void testGetZEnd_NullResponse_CircuitExists() {
        ZEnd zEnd = new ZEnd();
        PortChannel portChannel = new PortChannel();
        PortRef portRef = new PortRef();
        portRef.setClliCode(clli);
        portChannel.getPortRef().add(portRef);
        zEnd.getPortChannel().add(portChannel);

        Circuit circuit = new Circuit();
        circuit.getZEnd().add(zEnd);
        
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.getCircuit().add(circuit);
        CircuitData circuitData = new CircuitData();
        circuitData.getCircuitLst().add(circuitLst);
        response.setCircuitData(circuitData);

        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn("responseString");
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(new Gson().toJson(response));

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, null);
        assertNotNull(result);
        assertEquals(1, result.getPortChannel().size());
    }

    @Test
    public void testGetZEnd_NullResponse_NoCircuit() {
        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, null);
        assertNull(result);
    }

    @Test
    public void testGetZEnd_WithResponse() {
        response.setCircuitData(createCircuitDataWithZEnd(clli));
        
        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);
        assertNotNull(result);
    }

    // Helper methods to create mock responses

    private CircuitData createCircuitDataWithAEnd(String clli) {
        Circuit circuit = new Circuit();
        AEnd aEnd = new AEnd();
        PortChannel portChannel = new PortChannel();
        PortRef portRef = new PortRef();
        portRef.setClliCode(clli);
        portChannel.getPortRef().add(portRef);
        aEnd.getPortChannel().add(portChannel);
        circuit.getAEnd().add(aEnd);
        
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.getCircuit().add(circuit);
        circuitData.getCircuitLst().add(circuitLst);
        return circuitData;
    }

    private CircuitData createCircuitDataWithZEnd(String clli) {
        Circuit circuit = new Circuit();
        ZEnd zEnd = new ZEnd();
        PortChannel portChannel = new PortChannel();
        PortRef portRef = new PortRef();
        portRef.setClliCode(clli);
        portChannel.getPortRef().add(portRef);
        zEnd.getPortChannel().add(portChannel);
        circuit.getZEnd().add(zEnd);
        
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.getCircuit().add(circuit);
        circuitData.getCircuitLst().add(circuitLst);
        return circuitData;
    }
}
```

### Explanation:
1. **Setup**: The `CircuitDetailsProviderTest` class uses Mockito to mock dependencies and sets up a test environment for the `CircuitDetailsProvider`.
2. **Test Cases**: Each method contains multiple test cases that simulate different scenarios:
   - **Null Response**: When the `response` is null, it checks if the circuit exists and returns an `AEnd` or `ZEnd`.
   - **Existing Response**: When a response is already provided, it checks if it processes correctly to return an `AEnd` or `ZEnd`.
   - **Helper Methods**: These create mock data for testing the responses.

These test cases should cover all branches and paths in both the `getAEnd` and `getZEnd` methods, enabling 100% code coverage.