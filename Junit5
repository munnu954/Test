import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.SettableListenableFuture;

import java.util.concurrent.CompletableFuture;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
class BatchLoaderUtilsTest {

    @InjectMocks
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @BeforeEach
    void setUp() {
        batchLoaderUtils = new BatchLoaderUtils();
        batchLoaderUtils.kafkaTemplate = kafkaTemplate;
        batchLoaderUtils.failedMessageService = failedMessageService;
    }

    @Test
    void testSendMessageAsyncWithSuccess() {
        // Arrange
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("topic", "key", "payload");
        SendResult<String, String> sendResult = Mockito.mock(SendResult.class);
        SettableListenableFuture<SendResult<String, String>> future = new SettableListenableFuture<>();
        future.set(sendResult);
        Mockito.when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(CompletableFuture.completedFuture(sendResult));

        // Act
        batchLoaderUtils.sendMessageAsync(producerRecord, "transactionId", "payload", "topic", "insightName", 'Y', "errorCategory");

        // Assert
        verify(kafkaTemplate).send(any(ProducerRecord.class));
        verify(failedMessageService, Mockito.never()).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());
    }

    @Test
    void testSendMessageAsyncWithFailure() {
        // Arrange
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("topic", "key", "payload");
        Exception exception = new RuntimeException("Error sending message");
        SettableListenableFuture<SendResult<String, String>> future = new SettableListenableFuture<>();
        future.setException(exception);
        Mockito.when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(CompletableFuture.completedFuture(null));
        doNothing().when(failedMessageService).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());

        // Act
        batchLoaderUtils.sendMessageAsync(producerRecord, "transactionId", "payload", "topic", "insightName", 'Y', "errorCategory");

        // Assert
        verify(kafkaTemplate).send(any(ProducerRecord.class));
        verify(failedMessageService).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());
    }
}