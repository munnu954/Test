import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.web.client.ResponseEntity;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Spy
    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Test
    public void testApplyPostingRule_AllBranchesCovered() throws Exception {
        // Prepare data
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking
        ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
        when(utils.evaluateExpression(eq("%Alarm:reportingObject%"), anyMap())).thenReturn("ComponentID");
        
        ObjectMapper objectMapper = new ObjectMapper();
        when(utils.evaluateExpression(eq("%TopoObject:OSS_Names[0]%"), anyMap())).thenReturn("TestOSSName");
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
        when(ruleLoadingService.getRuleMap()).thenReturn(Map.of("ruleId1", rule));

        // Set values using Reflection
        spyOn(postingRuleProcessingService).when(postingRuleProcessingService, "getComponentIdForTopoTraversal", anyMap(), any(PostingRule.class)).thenReturn("ComponentID");
        doReturn(objectMapper.readTree("{\"MO_Type\":\"TestType\",\"TagSequence\":\"TestSeq\",\"Name\":\"TestName\"}")).when(objectMapper).readTree(anyString());

        // Execute
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verify
        assertNotNull(result);
        verify(postingRuleProcessingService, times(7)).applyPostingRule(any(), any(), any());
    }

    // Additional test cases can cover other branches of the method
}