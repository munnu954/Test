public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());

        String systemIdLine = lines[0];
        String nodeIpLine = lines[1];

        String systemId = systemIdLine.substring(systemIdLine.indexOf(":") + 1).trim();
        String nodeIp = nodeIpLine.substring(nodeIpLine.indexOf(":") + 1).trim();

        headers = lines[2].split(",");

        for (int i = 3; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");

            if (headers == null || headers.length != arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }

            JSONObject obj = new JSONObject();
            obj.put("#SystemId", systemId);
            obj.put("#NodeIP", nodeIp);

            for (int j = 0; j < arr.length; j++) {
                String jsonkey = headers[j].trim().replace(""‌, "");
                String jsonvalue = arr[j].trim().replace(""‌, "");
                obj.put(jsonkey, jsonvalue);
            }

            this.successIntCounter.add(1);
            collector.collect(obj.toString());
        }
    }