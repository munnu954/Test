To achieve 100% code coverage for the `MtnInsightsValidator` class using JUnit 5, we need to write test cases that cover every possible execution path, including the validation logic and exception handling. Below are sample JUnit 5 test cases for the `MtnInsightsValidator` class:

```java
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class MtnInsightsValidatorTest {

    @InjectMocks
    private MtnInsightsValidator validator;

    @Mock
    private MtnInsightsRequest mockRequest;

    @Mock
    private MtnInsightsAttributes mockAttributes;

    @Mock
    private ServiceHeader mockServiceHeader;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testValidate_InvalidRequestType_ShouldThrowException() {
        when(mockRequest.getRequestType()).thenReturn(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        when(mockRequest.getServiceHeader()).thenReturn(mockServiceHeader);

        assertThrows(InvalidRequestException.class, () -> validator.validate(mockRequest));
    }

    @Test
    public void testValidate_NullKeyAttributes_ShouldThrowException() {
        when(mockRequest.getRequestType()).thenReturn(InsightsRequestType.INSERTMTNINSIGHTS);
        when(mockRequest.getServiceHeader()).thenReturn(mockServiceHeader);

        assertThrows(InvalidRequestException.class, () -> validator.validate(mockRequest));
    }

    @Test
    public void testValidate_ValidKeyAttributes_ShouldNotThrowException() {
        when(mockRequest.getRequestType()).thenReturn(InsightsRequestType.INSERTMTNINSIGHTS);
        when(mockRequest.getServiceHeader()).thenReturn(mockServiceHeader);
        when(mockRequest.getKeyAttributes()).thenReturn(mockAttributes);

        // Assuming validateIterator has its own test coverage
        validator.validate(mockRequest);

        // No exception should be thrown
    }

    @Test
    public void testValidate_NullServiceHeader_ShouldThrowException() {
        when(mockRequest.getRequestType()).thenReturn(InsightsRequestType.INSERTMTNINSIGHTS);
        when(mockRequest.getServiceHeader()).thenReturn(null);

        assertThrows(InvalidRequestException.class, () -> validator.validate(mockRequest));
    }

    @Test
    public void testValidateIterator_InvalidAttributes_ShouldThrowException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null); // or any invalid configuration
        attributes.setEcpdId(null);

        assertThrows(InvalidRequestException.class,
                () -> validator.validateIterator(null, attributes, "TestLog"));
    }

    @Test
    public void testValidateIterator_ValidAttributes_ShouldNotThrowException() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("1234567890");
        attributes.setEcpdId("ecpd123");
        attributes.setInsightCategory(new String[]{"Category"});
        attributes.setInsightName(new String[]{"Name"});

        // Assuming validateIterator is correctly implemented
        validator.validateIterator(null, attributes, "TestLog");

        // No exception should be thrown
    }

    @Test
    public void testValidateSearchRequest_InvalidServiceRequest_ShouldThrowException() {
        MtnInsightsSearchRequest searchRequest = new MtnInsightsSearchRequest();
        searchRequest.setServiceHeader(mockServiceHeader);
        searchRequest.setServiceRequest(null); // Invalid service request

        assertThrows(InvalidRequestException.class,
                () -> validator.validate(searchRequest));
    }

    @Test
    public void testValidateSearchRequest_ValidServiceRequest_ShouldNotThrowException() {
        MtnInsightsSearchParam serviceRequest = new MtnInsightsSearchParam();
        serviceRequest.setMtn("1234567890");
        serviceRequest.setEcpdId("ecpd123");
        serviceRequest.setInsightCategory(new String[]{"Category"});
        serviceRequest.setInsightName(new String[]{"Name"});

        MtnInsightsSearchRequest searchRequest = new MtnInsightsSearchRequest();
        searchRequest.setServiceHeader(mockServiceHeader);
        searchRequest.setServiceRequest(serviceRequest);

        validator.validate(searchRequest);

        // No exception should be thrown
    }
}
```

### Explanation:
- **Mocks and Stubs**: We use Mockito to create mock objects for dependencies like `MtnInsightsRequest`, `MtnInsightsAttributes`, `ServiceHeader`, and `MtnInsightsSearchRequest`.
- **Test Cases**: We write separate test cases for different scenarios, including valid requests, invalid request types, missing key attributes, and invalid service headers.
- **Assertions**: We use `assertThrows` to verify that exceptions are thrown where expected.
- **Setup Method**: The `setUp` method initializes the mock objects before each test.

These tests aim to cover all logic branches and exception paths within the `MtnInsightsValidator` class to ensure maximum code coverage.