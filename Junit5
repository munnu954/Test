To create JUnit5 test cases for covering all branches of the `CollectionAudit` class with the `@Builder` annotation, you need to test various combinations of the builder pattern to ensure all paths are covered. Below is an example of how to write JUnit5 test cases to achieve 100% code coverage.

First, make sure you have the Maven dependencies for JUnit5 and Lombok in your `pom.xml` (if you're using Maven):
```xml
<dependencies>
    <!-- JUnit 5 dependencies -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.7.0</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.7.0</version>
        <scope>test</scope>
    </dependency>

    <!-- Lombok dependency -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.16</version>
        <scope>provided</scope>
    </dependency>
</dependencies>
```

Then, use the code below to create test cases for the `CollectionAudit` class:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CollectionAuditTest {

    @Test
    public void testBuilderWithAllFields() {
        CollectionAudit audit = CollectionAudit.builder()
                .id("1")
                .collectorId("collector1")
                .processType(ProcessType.Collector)
                .jarId("jar1")
                .jobId("job1")
                .flinkJobId("flinkJob1")
                .jobStatus("Running")
                .inputFilePath("/input/path")
                .outputFilePath("/output/path")
                .auditTopic("auditTopic")
                .url("http://url.com")
                .flinkURL("http://flink-url.com")
                .port(8080)
                .delimiters(",")
                .fileType("csv")
                .dateReceived("2023-01-01")
                .dateProcessed("2023-01-02")
                .noofRecordsInTheFile(1000)
                .noofRecordsProcessed(950)
                .noofRecordsFailed(50)
                .exceptions("None")
                .bootstrapServer("bootstrapServer")
                .build();

        assertNotNull(audit);
        assertEquals("1", audit.getId());
        assertEquals("collector1", audit.getCollectorId());
        assertEquals(ProcessType.Collector, audit.getProcessType());
        assertEquals("jar1", audit.getJarId());
        assertEquals("job1", audit.getJobId());
        assertEquals("flinkJob1", audit.getFlinkJobId());
        assertEquals("Running", audit.getJobStatus());
        assertEquals("/input/path", audit.getInputFilePath());
        assertEquals("/output/path", audit.getOutputFilePath());
        // The auditTopic field should be ignored in JSON serialization
        assertEquals("auditTopic", audit.getAuditTopic());
        assertEquals("http://url.com", audit.getUrl());
        assertEquals("http://flink-url.com", audit.getFlinkURL());
        assertEquals(8080, audit.getPort());
        assertEquals(",", audit.getDelimiters());
        assertEquals("csv", audit.getFileType());
        assertEquals("2023-01-01", audit.getDateReceived());
        assertEquals("2023-01-02", audit.getDateProcessed());
        assertEquals(1000, audit.getNoofRecordsInTheFile());
        assertEquals(950, audit.getNoofRecordsProcessed());
        assertEquals(50, audit.getNoofRecordsFailed());
        assertEquals("None", audit.getExceptions());
        assertEquals("bootstrapServer", audit.getBootstrapServer());
    }

    @Test
    public void testBuilderWithMissingFields() {
        CollectionAudit audit = CollectionAudit.builder()
                .id("2")
                .build();

        assertNotNull(audit);
        assertEquals("2", audit.getId());
        assertNull(audit.getCollectorId());
        assertNull(audit.getProcessType());
        assertNull(audit.getJarId());
        assertNull(audit.getJobId());
        assertNull(audit.getFlinkJobId());
        assertNull(audit.getJobStatus());
        assertNull(audit.getInputFilePath());
        assertNull(audit.getOutputFilePath());
        assertNull(audit.getAuditTopic());
        assertNull(audit.getUrl());
        assertNull(audit.getFlinkURL());
        assertNull(audit.getPort());
        assertNull(audit.getDelimiters());
        assertNull(audit.getFileType());
        assertNull(audit.getDateReceived());
        assertNull(audit.getDateProcessed());
        assertNull(audit.getNoofRecordsInTheFile());
        assertNull(audit.getNoofRecordsProcessed());
        assertNull(audit.getNoofRecordsFailed());
        assertNull(audit.getExceptions());
        assertNull(audit.getBootstrapServer());
    }

    @Test
    public void testBuilderWithPartialFields() {
        CollectionAudit audit = CollectionAudit.builder()
                .id("3")
                .collectorId("collector3")
                .jobStatus("Completed")
                .build();

        assertNotNull(audit);
        assertEquals("3", audit.getId());
        assertEquals("collector3", audit.getCollectorId());
        assertNull(audit.getProcessType());
        assertNull(audit.getJarId());
        assertNull(audit.getJobId());
        assertNull(audit.getFlinkJobId());
        assertEquals("Completed", audit.getJobStatus());
        assertNull(audit.getInputFilePath());
        assertNull(audit.getOutputFilePath());
        assertNull(audit.getAuditTopic());
        assertNull(audit.getUrl());
        assertNull(audit.getFlinkURL());
        assertNull(audit.getPort());
        assertNull(audit.getDelimiters());
        assertNull(audit.getFileType());
        assertNull(audit.getDateReceived());
        assertNull(audit.getDateProcessed());
        assertNull(audit.getNoofRecordsInTheFile());
        assertNull(audit.getNoofRecordsProcessed());
        assertNull(audit.getNoofRecordsFailed());
        assertNull(audit.getExceptions());
        assertNull(audit.getBootstrapServer());
    }

    @Test
    public void testBuilderWithAllNullFields() {
        CollectionAudit audit = CollectionAudit.builder()
                .id(null)
                .collectorId(null)
                .processType(null)
                .jarId(null)
                .jobId(null)
                .flinkJobId(null)
                .jobStatus(null)
                .inputFilePath(null)
                .outputFilePath(null)
                .auditTopic(null)
                .url(null)
                .flinkURL(null)
                .port(null)
                .delimiters(null)
                .fileType(null)
                .dateReceived(null)
                .dateProcessed(null)
                .noofRecordsInTheFile(null)
                .noofRecordsProcessed(null)
                .noofRecordsFailed(null)
                .exceptions(null)
                .bootstrapServer(null)
                .build();

        assertNull(audit.getId());
        assertNull(audit.getCollectorId());
        assertNull(audit.getProcessType());
        assertNull(audit.getJarId());
        assertNull(audit.getJobId());
        assertNull(audit.getFlinkJobId());
        assertNull(audit.getJobStatus());
        assertNull(audit.getInputFilePath());
        assertNull(audit.getOutputFilePath());
        assertNull(audit.getAuditTopic());
        assertNull(audit.getUrl());
        assertNull(audit.getFlinkURL());
        assertNull(audit.getPort());
        assertNull(audit.getDelimiters());
        assertNull(audit.getFileType());
        assertNull(audit.getDateReceived());
        assertNull(audit.getDateProcessed());
        assertNull(audit.getNoofRecordsInTheFile());
        assertNull(audit.getNoofRecordsProcessed());
        assertNull(audit.getNoofRecordsFailed());
        assertNull(audit.getExceptions());
        assertNull(audit.getBootstrapServer());
    }
    
    @Test
    public void testBuilderWithIntegersAndEnums() {
        CollectionAudit audit = CollectionAudit.builder()
                .noofRecordsInTheFile(10)
                .noofRecordsProcessed(8)
                .noofRecordsFailed(2)
                .processType(ProcessType.Transformer)
                .build();

        assertNotNull(audit);
        assertEquals(10, audit.getNoofRecordsInTheFile());
        assertEquals(8, audit.getNoofRecordsProcessed());
        assertEquals(2, audit.getNoofRecordsFailed());
        assertEquals(ProcessType.Transformer, audit.getProcessType());
        assertNull(audit.getId());
        assertNull(audit.getCollectorId());
        assertNull(audit.getJarId());
        assertNull(audit.getJobId());
        assertNull(audit.getFlinkJobId());
        assertNull(audit.getJobStatus());
        assertNull(audit.getInputFilePath());
        assertNull(audit.getOutputFilePath());
        assertNull(audit.getAuditTopic());
        assertNull(audit.getUrl());
        assertNull(audit.getFlinkURL());
        assertNull(audit.getPort());
        assertNull(audit.getDelimiters());
        assertNull(audit.getFileType());
        assertNull(audit.getDateReceived());
        assertNull(audit.getDateProcessed());
        assertNull(audit.getExceptions());
        assertNull(audit.getBootstrapServer());
    }
}
```

### Explanation of the Code:
1. **testBuilderWithAllFields**: Tests the `@Builder` with all fields set. This ensures that all possible paths and fields are covered and that the builder properly constructs the object with the provided values.
2. **testBuilderWithMissingFields**: Tests the `@Builder` with only `id` field set. This ensures it handles missing fields correctly.
3. **testBuilderWithPartialFields**: Tests the `@Builder` with a few selected fields set. This ensures that it can handle different combinations of fields.
4. **testBuilderWithAllNullFields**: Tests the `@Builder` with all fields set to `null`. Ensuring the builder can gracefully handle `null` values.
5. **testBuilderWithIntegersAndEnums**: Specifically tests integer and enum fields to ensure their handling is correct.

This setup ensures that every possible branch of the `@Builder` is covered, leading to 100% code coverage for the `CollectionAudit` class's builder.