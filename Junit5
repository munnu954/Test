Here is an example of how you can write JUnit 5 test cases to cover each branch of the `removeOrloadRule` method in the `MessageReaderService` class using Reflection APIs without making the method public:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class MessageReaderServiceTest {

    private MessageReaderService messageReaderService;
    private Method removeOrloadRuleMethod;

    @BeforeEach
    public void setup() throws NoSuchMethodException {
        messageReaderService = new MessageReaderService();
        removeOrloadRuleMethod = MessageReaderService.class.getDeclaredMethod("removeOrloadRule", HashMap.class);
        removeOrloadRuleMethod.setAccessible(true);
    }

    @Test
    public void testRemoveOrloadRuleValidRuleIdAndOperationDelete() throws InvocationTargetException, IllegalAccessException {
        HashMap<String, Object> ruleUpdateMap = new HashMap<>();
        ruleUpdateMap.put("RULEID", 123);
        ruleUpdateMap.put("OPERATION", "DELETE");

        removeOrloadRuleMethod.invoke(messageReaderService, ruleUpdateMap);

        // Add assertions here
    }

    @Test
    public void testRemoveOrloadRuleValidRuleIdAndOperationUpdate() throws InvocationTargetException, IllegalAccessException {
        HashMap<String, Object> ruleUpdateMap = new HashMap<>();
        ruleUpdateMap.put("RULEID", 456);
        ruleUpdateMap.put("OPERATION", "UPDATE");

        removeOrloadRuleMethod.invoke(messageReaderService, ruleUpdateMap);

        // Add assertions here
    }

    // Add more test cases to cover other branches of the removeOrloadRule method

    @Test
    public void testRemoveOrloadRuleInvalidRuleId() {
        HashMap<String, Object> ruleUpdateMap = new HashMap<>();
        ruleUpdateMap.put("INVALID_KEY", "123");

        assertThrows(InvocationTargetException.class, () -> removeOrloadRuleMethod.invoke(messageReaderService, ruleUpdateMap));
    }

}
```

In the above test class, we use Reflection APIs to access and invoke the private `removeOrloadRule` method from the `MessageReaderService` class in order to test each branch of the method. The `setup` method initializes the necessary objects, and the test methods cover different scenarios of the `removeOrloadRule` method. You can add more test cases to cover all the branches of the method.