To achieve 100% code coverage for the `validateIterator` method in the `MtnInsightsValidator` class, we need to cover all the logical branches within this method. This involves testing various combinations of attributes and ensuring that both valid and invalid scenarios are addressed. Here's how you can write the JUnit 5 test cases:

```java
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class MtnInsightsValidatorValidateIteratorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    void setUp() {
        validator = new MtnInsightsValidator();
    }

    @Test
    void testValidateIteratorAllFieldsPresentValid() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setMtn("mtn");
        attributes.setInsightCategory("VBGMyBiz");
        attributes.setInsightName("MyBizReg");
        attributes.setOutageId("outageId");

        // No exception should be thrown for valid data
        validator.validateIterator(null, attributes, "LogVal");
    }

    @Test
    void testValidateIteratorMissingMtn() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setInsightCategory("VBGMyBiz");
        attributes.setInsightName("MyBizReg");
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    void testValidateIteratorMissingInsightCategory() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setMtn("mtn");
        attributes.setInsightName("MyBizReg");
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    void testValidateIteratorMissingInsightName() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setMtn("mtn");
        attributes.setInsightCategory("VBGMyBiz");
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    void testValidateIteratorNetworkOutageScenario() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setMtn("mtn");
        attributes.setInsightCategory("VBGNxOutage");
        attributes.setInsightName("mtnoutage");
        attributes.setOutageId("outageId");

        // No exception should be thrown for valid network outage scenario
        validator.validateIterator(null, attributes, "LogVal");
    }

    @Test
    void testValidateIteratorMissingOutageIdForNetworkOutage() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setMtn("mtn");
        attributes.setInsightCategory("VBGNxOutage");
        attributes.setInsightName("mtnoutage");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    void testValidateIteratorEmptyFields() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("");
        attributes.setMtn("");
        attributes.setInsightCategory("");
        attributes.setInsightName("");
        attributes.setOutageId("");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    void testValidateIteratorMyBizScenarioInvalid() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId"); // Valid
        attributes.setMtn(""); // Invalid
        attributes.setInsightCategory("VBGMyBiz");
        attributes.setInsightName("MyBizReg");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }
}

```

### Explanation:

1. **All Fields Present Valid**: This test case ensures that no exception is thrown when all required fields are provided with valid data.

2. **Missing MTN**: Ensures that an exception is thrown if the MTN field is missing, which is crucial for MyBiz scenarios.

3. **Missing Insight Category**: Ensures that an exception is thrown if the Insight Category is missing.

4. **Missing Insight Name**: Ensures that an exception is thrown if the Insight Name is missing.

5. **Network Outage Scenario**: Tests a valid scenario for network outage attributes where no exception should be thrown.

6. **Missing Outage Id for Network Outage**: Tests that an exception is thrown if the Outage Id is missing in a network outage scenario.

7. **Empty Fields**: Ensures that an exception is thrown when fields are empty, checking the validation logic for empty string inputs.

8. **MyBiz Scenario Invalid**: Tests an invalid scenario specific to MyBiz where the MTN is missing, ensuring that an exception is thrown.

These test cases cover various combinations of valid and invalid data to ensure that the `validateIterator` method is fully tested.