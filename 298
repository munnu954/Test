To test the private method 'mergeArrayMethod' in the AlarmRepositoryImpl class without making it public, you can use the Reflection API. Here's an example of how you can modify your test to access the private method using Reflection:

```java
@Test
public void testMergeArrayMethod() throws Exception {
    String[] tagArrayFromDb = {"tag1", "tag2"};
    Set<String> expectedSet = new HashSet<>(Arrays.asList(tagArrayFromDb));
    
    Alarm alarm = new Alarm();
    alarm.setTag(new String[] {"tag3", "tag4"});
    
    // Use reflection to access the private method
    Method mergeArrayMethod = AlarmRepositoryImpl.class.getDeclaredMethod("mergeArrayMethod", Object.class, Alarm.class);
    mergeArrayMethod.setAccessible(true);
    AlarmRepositoryImpl alarmRepositoryImpl = new AlarmRepositoryImpl();
    Set<String> actualSet = (Set<String>) mergeArrayMethod.invoke(alarmRepositoryImpl, tagArrayFromDb, alarm);
    
    expectedSet.addAll(new HashSet<>(Arrays.asList(alarm.getTag())));
    assertEquals(expectedSet, actualSet);
}
```

In this test method, we use the `Method` class from the Reflection API to access the private method 'mergeArrayMethod' in the AlarmRepositoryImpl class. We then make the method accessible and invoke it with the necessary parameters to test its functionality.