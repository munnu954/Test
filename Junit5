To achieve 100% code coverage for the "for (JsonNode jsonNodeTmp : topologyObjectsNode)" loop in the applyPostingRule method of PostingRuleProcessingService class without making the fields public, you can use reflection to set the values of those fields. Below is an example of how you can write JUnit5 test cases to cover this loop:

```java
import com.fasterxml.jackson.databind.JsonNode;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils alarmPostingUtils;

    @Test
    public void testApplyPostingRuleForLoop() throws Exception {
        // Setup
        PostingRuleProcessingService postingRuleProcessingService = new PostingRuleProcessingService();
        ReflectionTestUtils.setField(postingRuleProcessingService, "ruleLoadingService", ruleLoadingService);
        ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClient);
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");
        
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1L, "Rule1", 1, 1, "MatchingCriteria1");
        HashMap<String, Object> alarmMap = new HashMap<>();
        JsonNode jsonNodeTmp = Mockito.mock(JsonNode.class);
        
        // Mocking behavior
        Mockito.when(ruleLoadingService.getRuleMap()).thenReturn(getMockRuleMap());
        Mockito.when(topoApiClient.fetchTopologyTraversalDetails(Mockito.any(), Mockito.any(), Mockito.anyString())).thenReturn(null);
        Mockito.when(jsonNodeTmp.isMissingNode()).thenReturn(false);
        Mockito.when(jsonNodeTmp.isArray()).thenReturn(true);
        
        // Execution
        postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verification
        // Add verification here based on the logic inside the for loop
    }

    private Map<Long, PostingRule> getMockRuleMap() {
        Map<Long, PostingRule> ruleMap = new HashMap<>();
        PostingRule rule1 = new PostingRule(1L, "Rule1", 1, 1, "MatchingCriteria1");
        PostingRule rule2 = new PostingRule(2L, "Rule2", 2, 2, "MatchingCriteria2");
        ruleMap.put(1L, rule1);
        ruleMap.put(2L, rule2);
        return ruleMap;
    }
}
```

In the testApplyPostingRuleForLoop method, we are setting up the necessary components for the test, including mocking the behavior of dependencies such as ruleLoadingService and topoApiClient. We then execute the applyPostingRule method and verify the behavior based on the logic inside the for loop.

You can extend this test case by adding more specific verifications based on the branches of the for loop logic.