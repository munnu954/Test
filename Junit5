import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.stubbing.Answer;

import com.insights.mapper.EventLedgerConstants;
import com.insights.manager.MtnInsightsManager;
import com.insights.model.MtnInsightsAttributes;
import com.insights.model.MtnInsightsEntity;
import com.insights.repository.AggregateInsightsRepository;
import com.insights.repository.EcpdByKeyRepository;
import com.insights.repository.MtnInsightsRepository;

import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class MtnInsightsManagerUnitTest {

    @InjectMocks
    private MtnInsightsManager insightsManager;

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggregateInsightsRepository;

    @Mock
    private EcpdByKeyRepository ecpdByKeyRepository;

    @Test
    public void testConvertWithJsonProcessingException() {
        MtnInsightsAttributes attr = new MtnInsightsAttributes();
        when(insightsRepository.findAll()).thenReturn(Collections.emptyList());
        when(insightsManager.convert(any(MtnInsightsAttributes[].class))).thenAnswer((Answer<List<MtnInsightsEntity>>) invocation -> {
            throw new IllegalArgumentException();
        });
        assertThatThrownBy(() -> insightsManager.convert(new MtnInsightsAttributes[]{attr})).isInstanceOf(SystemException.class);
    }

    @Test
    public void testConvertEcpdWithJsonProcessingException() {
        MtnInsightsAttributes attr = new MtnInsightsAttributes();
        when(ecpdByKeyRepository.findAll()).thenReturn(Collections.emptyList());
        when(insightsManager.convertEcpd(any(MtnInsightsAttributes.class))).thenAnswer((Answer<EcpdByKeyEntity>) invocation -> {
            throw new IllegalArgumentException();
        });
        assertThatThrownBy(() -> insightsManager.convertEcpd(attr)).isInstanceOf(SystemException.class);
    }
}