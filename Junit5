@Component
public class DeduplicationUtils {
    Logger logger = LogManager.getLogger(this.getClass());

    public HashMap<String, Object> removeNullValuesInJsonAttributes(Map<String, Object> msg) {
        HashMap<String, Object> resultMsg = new HashMap<>(msg); // Initialize resultMsg explicitly
        try {
            for (Map.Entry<String, Object> iterate : msg.entrySet()) {
                if (checkIfJsonValue(iterate.getValue())) {
                    HashMap<String, Object> updatedMsg = removeNullValuesInJsonAttributes(
                            RulesConstants.getObjectMapper().readValue(iterate.getValue().toString(), HashMap.class));
                    resultMsg.put(iterate.getKey(), updatedMsg);
                } else {
                    if (iterate.getValue() == null || iterate.getValue().toString().isEmpty()) {
                        resultMsg.remove(iterate.getKey());
                    }
                }
            }
        } catch (JsonProcessingException e) {
            logger.error("Exception occurred while trying to remove null/empty values from json attributes: ", e);
        }
        return resultMsg;
    }

    public HashMap<String, Object> mergeUpdateJsonValues(Map<String, Object> incomingMsg, Map<String, Object> cachedMsg,
            boolean isLateAlarm) {
        try {
            for (Map.Entry<String, Object> iterate : incomingMsg.entrySet()) {
                if (!isLateAlarm) {
                    if (iterate.getValue() != null && !iterate.getValue().toString().isEmpty()) {
                        if (checkIfJsonValue(iterate.getValue())) {
                            if (cachedMsg.get(iterate.getKey()) != null) {
                                HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(
                                        RulesConstants.getObjectMapper().readValue(
                                                RulesConstants.getObjectMapper().writeValueAsString(iterate.getValue()),
                                                HashMap.class),
                                        (HashMap<String, Object>) cachedMsg.get(iterate.getKey()), isLateAlarm);
                                cachedMsg.put(iterate.getKey(), updatedMsg);
                            } else {
                                cachedMsg.put(iterate.getKey(),
                                        removeNullValuesInJsonAttributes(RulesConstants.getObjectMapper().readValue(
                                                iterate.getValue().toString(), HashMap.class)));
                            }
                        } else {
                            cachedMsg.put(iterate.getKey(), iterate.getValue());
                        }
                    }
                } else { // Late alarm handling
                    if (iterate.getValue() != null && !iterate.getValue().toString().isEmpty()) {
                        if (cachedMsg.get(iterate.getKey()) != null && checkIfJsonValue(cachedMsg.get(iterate.getKey()))) {
                            HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(
                                    RulesConstants.getObjectMapper().readValue(
                                            RulesConstants.getObjectMapper()
                                                    .writeValueAsString(iterate.getValue()),
                                            HashMap.class),
                                    (HashMap<String, Object>) cachedMsg.get(iterate.getKey()), isLateAlarm);
                            cachedMsg.put(iterate.getKey(), updatedMsg);
                        } else if (cachedMsg.get(iterate.getKey()) == null) {
                            cachedMsg.put(iterate.getKey(), iterate.getValue());
                        }
                    }
                }
            }
        } catch (JsonProcessingException e) {
            logger.error("Exception occurred while trying to merge update JsonValues: ", e);
        }
        return (HashMap<String, Object>) cachedMsg;
    }

    public boolean checkIfJsonValue(Object obj) {
        boolean isJson = false;
        try {
            String objString = RulesConstants.getObjectMapper().writeValueAsString(obj).trim();
            if (objString.startsWith("{") || objString.startsWith("["))
                isJson = true;
        } catch (JsonProcessingException e) {
            logger.error("Error while checking if object is a JSON: ", e);
        }
        return isJson;
    }
}