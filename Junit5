Sure, here are some JUnit 5 test cases that cover different scenarios for the `equals(Object)` method to achieve 100% code coverage:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class SpaceCollectorTest {

    @Test
    void testEquals() {
        SpaceCollector collector1 = SpaceCollector.builder()
                .inputFilePath("/path/input")
                .id(1)
                .url("http://test.com")
                .port(8080)
                .outputFilePath("/path/output")
                .delimiters(",")
                .fileType("csv")
                .build();

        SpaceCollector collector2 = SpaceCollector.builder()
                .inputFilePath("/path/input")
                .id(1)
                .url("http://test.com")
                .port(8080)
                .outputFilePath("/path/output")
                .delimiters(",")
                .fileType("csv")
                .build();

        assertTrue(collector1.equals(collector2));
    }

    @Test
    void testNotEquals() {
        SpaceCollector collector1 = SpaceCollector.builder()
                .inputFilePath("/path/input")
                .id(1)
                .url("http://test.com")
                .port(8080)
                .outputFilePath("/path/output")
                .delimiters(",")
                .fileType("csv")
                .build();

        SpaceCollector collector2 = SpaceCollector.builder()
                .inputFilePath("/path/input")
                .id(2)
                .url("http://test2.com")
                .port(8081)
                .outputFilePath("/path/output2")
                .delimiters(";")
                .fileType("json")
                .build();

        assertFalse(collector1.equals(collector2));
    }

    @Test
    void testEqualsNull() {
        SpaceCollector collector = SpaceCollector.builder()
                .inputFilePath("/path/input")
                .id(1)
                .url("http://test.com")
                .port(8080)
                .outputFilePath("/path/output")
                .delimiters(",")
                .fileType("csv")
                .build();

        assertFalse(collector.equals(null));
    }

    @Test
    void testEqualsDifferentClass() {
        SpaceCollector collector = SpaceCollector.builder()
                .inputFilePath("/path/input")
                .id(1)
                .url("http://test.com")
                .port(8080)
                .outputFilePath("/path/output")
                .delimiters(",")
                .fileType("csv")
                .build();

        assertFalse(collector.equals("a string"));
    }

    @Test
    void testEqualsSameObject() {
        SpaceCollector collector = SpaceCollector.builder()
                .inputFilePath("/path/input")
                .id(1)
                .url("http://test.com")
                .port(8080)
                .outputFilePath("/path/output")
                .delimiters(",")
                .fileType("csv")
                .build();

        assertTrue(collector.equals(collector));
    }
}
```

These tests cover the scenarios where:

1. Two identical objects are compared (they should be equal).
2. Two different objects are compared (they should not be equal).
3. An object is compared with `null` (should not be equal).
4. An object is compared with an instance of a different class (should not be equal).
5. An object is compared with itself (should be equal).

Note that the `equals(Object)` method is typically auto-generated by the `@Data` annotation, so it should behave correctly. However, if you've overridden this method, you may need to adjust these tests to fit your implementation.