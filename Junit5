Certainly! To achieve 100% code coverage of the `ctionMessage` method, let's focus on writing test cases for any remaining logical branches and edge cases. Here are additional test cases that explore some of the remaining scenarios:

```java
import com.verizon.vbg.ledger.listener.EventsMessageListener;
import com.verizon.vbg.ledger.service.MtnEcpdService;
import com.verizon.vbg.ledger.service.CTIEcpdService;
import com.verizon.vbg.ledger.service.KafkaFalloutService;
import com.verizon.vbg.ledger.util.BatchLoaderUtils;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.test.util.ReflectionTestUtils;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class EventsMessageListenerAdditionalTests4 {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @Mock
    private MtnEcpdService mtnEcpdService;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @Mock
    private BatchLoaderUtils utils;

    @Mock
    private CTIEcpdService ctiEcpdService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "outbound-cti-event");
    }

    @Test
    void testCtionMessage_actionCallEstablishedWithNoMtnData() {
        // Prepare a payload with action "CALLESTABLISHED" and no MTN data
        String payload = "{\"CV2\":\"\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CALLESTABLISHED\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock dependencies
        when(utils.isValidData(anyString())).thenReturn(false);  // Simulate invalid MTN data

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that no interactions with KafkaTemplate occur
        verify(kafkaTemplate, never()).send(any(ProducerRecord.class));
    }

    @Test
    void testCtionMessage_actionCallEstablishedWithNullEcpd() {
        // Prepare a payload with action "CALLESTABLISHED" and null ECPD
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CALLESTABLISHED\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock dependencies
        when(utils.isValidData(anyString())).thenReturn(true);
        when(mtnEcpdService.getEcpdByAcctId(anyString())).thenReturn(Mono.empty());  // Simulate no ECPD found

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that a failed record is saved
        verify(failedMessageService, times(1)).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar());
    }

    @Test
    void testCtionMessage_actionCallTransferredWithBothNullCallIds() {
        // Prepare a payload with action "CALL_TRANSFERRED" and null call IDs
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CALL_TRANSFERRED\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":0,\"CALLID2\":0}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock dependencies
        when(utils.isValidData(anyString())).thenReturn(false);  // Simulate invalid call IDs

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that no interactions with KafkaTemplate occur
        verify(kafkaTemplate, never()).send(any(ProducerRecord.class));
    }

    @Test
    void testCtionMessage_actionReleaseWithSensitiveData() {
        // Prepare a payload with action "RELEASE" with sensitive data
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"RELEASE\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock dependencies
        when(utils.isValidData(anyString())).thenReturn(true);
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setEcpd("ecpd-123");
        ctiDataStore.setSensitivity("Y");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that the message is not sent due to sensitivity
        verify(kafkaTemplate, never()).send(any(ProducerRecord.class));
    }
}
```

### Explanation of Additional Tests:

1. **Action `CALLESTABLISHED` with No MTN Data**: Covers the case where the MTN data is missing or invalid, ensuring no Kafka message is sent.

2. **Action `CALLESTABLISHED` with Null ECPD**: Tests the scenario where no ECPD is found in the service call, ensuring that a failed record is logged.

3. **Action `CALL_TRANSFERRED` with Null Call IDs**: Simulates the condition where both call IDs are invalid or zero, ensuring no Kafka message is sent.

4. **Action `RELEASE` with Sensitive Data**: Tests the scenario where the action is "RELEASE" and the data is sensitive, ensuring that no Kafka message is sent.

These test cases aim to cover additional edge cases and ensure comprehensive test coverage for the `ctionMessage` method. Adjust the mock behaviors and payloads according to your actual logic and scenarios.