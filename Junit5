To achieve 100% code coverage for the `SHAEventMessageListener` class, we need to ensure that all logical branches and conditions are tested. This includes testing both branches of the `if (!StringUtils.hasText(payload))` statement, both branches of the sensitivity check, and the message sending logic when the payload is valid.

Here are the additional test cases:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.schema.GenericRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;

import java.lang.reflect.Field;
import java.util.ArrayList;

public class SHAEventMessageListenerTest {

    @Mock
    private BatchLoaderUtils utils;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private SensitiveProfileManager profileManager;

    @InjectMocks
    private SHAEventMessageListener listener;

    private static final String PRODUCER_TOPIC = "test-topic";

    @BeforeEach
    public void setup() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(utils.returnHeaders(any())).thenReturn(new ArrayList<>());

        listener = new SHAEventMessageListener();
        setPrivateField(listener, "producerTopic", PRODUCER_TOPIC);
        setPrivateField(listener, "profIleManager", profileManager);
        setPrivateField(listener, "utils", utils);
    }

    private void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }

    @Test
    public void testOnMessageWithNonEmptyPayload() {
        Message<GenericRecord> message = mock(Message.class);
        String payload = "non-empty payload";
        when(message.getData()).thenReturn(payload.getBytes());

        assertDoesNotThrow(() -> listener.onMessage(message));
    }

    @Test
    public void testOnMessageWithEmptyPayload() {
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(new byte[0]);

        SystemException thrown = assertThrows(SystemException.class, () -> {
            listener.onMessage(message);
        });

        assertEquals("Empty payload received from NSP topic", thrown.getMessage());
    }

    @Test
    public void testOnMessageWithSensitiveAccountTrue() throws JsonProcessingException {
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("456");
        String payload = "{\"ecpd_profile_id\":\"456\",\"mdn\":\"789\"}";

        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(payload.getBytes());
        when(utils.convert(anyString(), eq(SHAVbsmEvent.class))).thenReturn(event);

        SensitiveResponse sensitiveResponse = new SensitiveResponse();
        sensitiveResponse.setSensitive(true);
        when(profileManager.getSensitiveAccount(event.getEcpdId())).thenReturn(sensitiveResponse);

        assertDoesNotThrow(() -> listener.onMessage(message));

        verify(utils, never()).sendMessageAsync(any(), anyString(), anyString(), anyString(), any(), anyChar(), any());
    }

    @Test
    public void testOnMessageWithSensitiveAccountFalse() throws JsonProcessingException {
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("456");
        String payload = "{\"ecpd_profile_id\":\"456\",\"mdn\":\"789\"}";

        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(payload.getBytes());
        when(utils.convert(anyString(), eq(SHAVbsmEvent.class))).thenReturn(event);

        SensitiveResponse sensitiveResponse = new SensitiveResponse();
        sensitiveResponse.setSensitive(false);
        when(profileManager.getSensitiveAccount(event.getEcpdId())).thenReturn(sensitiveResponse);

        assertDoesNotThrow(() -> listener.onMessage(message));

        verify(utils).sendMessageAsync(any(ProducerRecord.class), anyString(), eq(payload), eq(PRODUCER_TOPIC), eq(TYSConstants.SHA_VBSM_MSG.getValue()), eq('Y'), eq(TYSConstants.EC_KAFKA_ERROR.getValue()));
    }

    @Test
    public void testOnMessageWithValidPayloadAndSend() throws JsonProcessingException {
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("456");
        String payload = "{\"ecpd_profile_id\":\"456\",\"mdn\":\"789\"}";

        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(payload.getBytes());
        when(utils.convert(anyString(), eq(SHAVbsmEvent.class))).thenReturn(event);

        SensitiveResponse sensitiveResponse = new SensitiveResponse();
        sensitiveResponse.setSensitive(false);
        when(profileManager.getSensitiveAccount(event.getEcpdId())).thenReturn(sensitiveResponse);

        assertDoesNotThrow(() -> listener.onMessage(message));

        ProducerRecord<String, String> expectedRecord = new ProducerRecord<>(PRODUCER_TOPIC, null, anyString(), payload, utils.returnHeaders(TYSConstants.SHA_VBSM_MSG.getValue()));
        verify(utils).sendMessageAsync(eq(expectedRecord), anyString(), eq(payload), eq(PRODUCER_TOPIC), eq(TYSConstants.SHA_VBSM_MSG.getValue()), eq('Y'), eq(TYSConstants.EC_KAFKA_ERROR.getValue()));
    }
}
```

### Explanation:

- **testOnMessageWithNonEmptyPayload**: Tests the scenario where the payload is non-empty, ensuring the code proceeds past the initial check.

- **testOnMessageWithEmptyPayload**: Tests the scenario where the payload is empty, expecting a `SystemException`.

- **testOnMessageWithSensitiveAccountTrue**: Tests the scenario where `getSensitiveAccount` returns `true`, ensuring the message is not sent.

- **testOnMessageWithSensitiveAccountFalse**: Tests the scenario where `getSensitiveAccount` returns `false`, ensuring the message is processed and sent.

- **testOnMessageWithValidPayloadAndSend**: Tests the complete flow where a valid message is sent, ensuring that the `sensitivityCheckDone` flag is set to `'Y'` and the message is sent asynchronously.

These test cases cover all the branches and ensure that each logical path of the `SHAEventMessageListener` class is tested.