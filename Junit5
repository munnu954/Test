import com.fasterxml.jackson.core.JsonProcessingException;

public class OutageLocationEventsMessageListenerTest {

    @Mock
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService kafkaFalloutService;

    @Mock
    private KafkaFalloutRepository kafkaFalloutRepository;

    @InjectMocks
    private OutageLocationEventsMessageListener listener;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testOnMessage() throws SystemException, JsonProcessingException {
        // Mock data
        String messagePayload = "{\"outage_id\": \"123\", \"geojson\": \"{}\"}";
        GenericRecord genericRecord = new GenericRecord();
        genericRecord.setData(messagePayload.getBytes());
        
        OutageGeolocation outageGeolocation = new OutageGeolocation();
        outageGeolocation.setOutageId("123");
        outageGeolocation.setGeojson("{}");
        
        // Mock behavior
        when(batchLoaderUtils.convert(anyString(), eq(OutageGeolocation.class))).thenReturn(outageGeolocation);
        
        // Invoke method
        listener.onMessage(genericRecord);
        
        // Verify behavior
        verify(batchLoaderUtils).convert(anyString(), eq(OutageGeolocation.class));
        verify(batchLoaderUtils).sendMessageAsync(any(ProducerRecord.class), anyString(), anyString(), anyString(), anyString(), anyChar(), anyString());
    }

    @Test
    public void testOnMessage_EmptyPayload() throws SystemException {
        // Mock data
        String emptyPayload = "";
        GenericRecord genericRecord = new GenericRecord();
        genericRecord.setData(emptyPayload.getBytes());
        
        // Invoke method
        listener.onMessage(genericRecord);
        
        // Verify behavior
        verify(batchLoaderUtils, never()).convert(anyString(), eq(OutageGeolocation.class));
        verify(batchLoaderUtils, never()).sendMessageAsync(any(ProducerRecord.class), anyString(), anyString(), anyString(), anyString(), anyChar(), anyString());
    }

    @Test
    public void testOnMessage_PayloadTooLarge() throws SystemException {
        // Mock data
        String largePayload = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
        GenericRecord genericRecord = new GenericRecord();
        genericRecord.setData(largePayload.getBytes());
        
        // Invoke method
        listener.onMessage(genericRecord);
        
        // Verify behavior
        verify(batchLoaderUtils, never()).convert(anyString(), eq(OutageGeolocation.class));
        verify(batchLoaderUtils, never()).sendMessageAsync(any(ProducerRecord.class), anyString(), anyString(), anyString(), anyString(), anyChar(), anyString());
    }
}