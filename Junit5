Here is an example of a Junit5 test case using Reflection API to cover the if block mentioned in the removeOrloadRule method without making the method public:

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;

@ExtendWith (MockitoExtension.class)
class MessageReaderServiceTest {

  @Mock
  private RulesLoadingService rulesLoadingService;

  @Test
  void testRemoveOrloadRule() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
    MessageReaderService messageReaderService = new MessageReaderService();
    Method removeOrloadRuleMethod = MessageReaderService.class.getDeclaredMethod("removeOrloadRule", HashMap.class);
    removeOrloadRuleMethod.setAccessible(true);

    HashMap<String, Object> ruleUpdateMap = new HashMap<>();
    ruleUpdateMap.put("RULEID", 123);
    ruleUpdateMap.put("OPERATION", "UPDATE");

    // Set up the rulesLoadingService.getRuleMap() with the expected value
    HashMap<Long, Object> ruleMap = new HashMap<>();
    ruleMap.put(123L, "TestRule");
    // Using Reflection to set the private field
    Field ruleMapField = MessageReaderService.class.getDeclaredField("ruleMap");
    ruleMapField.setAccessible(true);
    ruleMapField.set(messageReaderService, ruleMap);

    removeOrloadRuleMethod.invoke(messageReaderService, ruleUpdateMap);

    // Using Reflection to get the private field
    HashMap<Long, Object> updatedRuleMap = (HashMap<Long, Object>) ruleMapField.get(messageReaderService);

    assertTrue(updatedRuleMap.containsKey(123L));
    assertEquals("Loading Updated Rule from rulesMap: TestRule", MockLogger.getLogs());
  }
}
```

In this test case, we are using the Reflection API to access the private method `removeOrloadRule` in `MessageReaderService` class and also setting up the private field `ruleMap` to have a predefined value for testing. The test case then invokes the method with the given input and checks if the expected log message is generated.