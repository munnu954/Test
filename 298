import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;

import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.PulsarClientException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TestAlarmReceiver {

    @Mock
    private VMBParams params;

    @Mock
    private PostingService alarmPointLookupService;

    @Mock
    private Consumer<byte[]> consumer;

    @BeforeEach
    void setup() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testGetConnection() throws Exception {
        VMBConfig vmbConfig = mock(VMBConfig.class);
        when(params.getConsumerVMBConfig()).thenReturn(vmbConfig);

        Consumer<byte[]> consumer = mock(Consumer.class);
        when(VMBUtil.createConsumerConnection(vmbConfig, null)).thenReturn(consumer);

        AlarmReceiver alarmReceiver = new AlarmReceiver(params, null, null);

        Method getConnectionMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        getConnectionMethod.setAccessible(true);
        getConnectionMethod.invoke(alarmReceiver);

    }

    @Test
    void testGetConnectionThrowsException() throws Exception {
        VMBConfig vmbConfig = mock(VMBConfig.class);
        when(params.getConsumerVMBConfig()).thenReturn(vmbConfig);
        when(VMBUtil.createConsumerConnection(vmbConfig, null)).thenThrow(new PulsarClientException("Test Exception"));

        AlarmReceiver alarmReceiver = new AlarmReceiver(params, null, null);

        Method getConnectionMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        getConnectionMethod.setAccessible(true);
        getConnectionMethod.invoke(alarmReceiver);
    }

    @Test
    void testGetConnectionReturnsNull() throws Exception {
        VMBConfig vmbConfig = mock(VMBConfig.class);

        when(params.getConsumerVMBConfig()).thenReturn(vmbConfig);

        when(VMBUtil.createConsumerConnection(vmbConfig, null)).thenReturn(null);

        AlarmReceiver alarmReceiver = new AlarmReceiver(params, null, null);

        Method getConnectionMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        getConnectionMethod.setAccessible(true);
        getConnectionMethod.invoke(alarmReceiver);
    }

    @Test
    void testReceiveMessages() throws Exception {
        AlarmReceiver alarmReceiver = new AlarmReceiver(params, null, alarmPointLookupService);

        Message<byte[]> message = mock(Message.class);
        when(consumer.getStats()).thenReturn(mock(Consumer.ConsumerStats.class));
        when(VMBUtil.receiveMessageThrowsPulsarClientException(consumer, 3, TimeUnit.SECONDS)).thenReturn(message);

        Method receiveMessagesMethod = AlarmReceiver.class.getDeclaredMethod("receiveMessages");
        receiveMessagesMethod.setAccessible(true);
        receiveMessagesMethod.invoke(alarmReceiver);

        verify(alarmPointLookupService).addMsgToQueue(message, Instant.class);
    }

    @Test
    void testReceiveMessagesNoMessage() throws Exception {
        AlarmReceiver alarmReceiver = new AlarmReceiver(params, null, alarmPointLookupService);

        when(consumer.getStats()).thenReturn(mock(Consumer.ConsumerStats.class));
        when(VMBUtil.receiveMessageThrowsPulsarClientException(consumer, 3, TimeUnit.SECONDS)).thenReturn(null);

        Method receiveMessagesMethod = AlarmReceiver.class.getDeclaredMethod("receiveMessages");
        receiveMessagesMethod.setAccessible(true);
        receiveMessagesMethod.invoke(alarmReceiver);

        verify(alarmPointLookupService, Mockito.never()).addMsgToQueue(any(), any());
    }

    @Test
    void testReceiveMessagesThrowsException() throws Exception {
        AlarmReceiver alarmReceiver = new AlarmReceiver(params, null, alarmPointLookupService);

        when(consumer.getStats()).thenReturn(mock(Consumer.ConsumerStats.class));
        when(VMBUtil.receiveMessageThrowsPulsarClientException(consumer, 3, TimeUnit.SECONDS)).thenThrow(new PulsarClientException("Test Exception"));

        Method receiveMessagesMethod = AlarmReceiver.class.getDeclaredMethod("receiveMessages");
        receiveMessagesMethod.setAccessible(true);
        receiveMessagesMethod.invoke(alarmReceiver);

        verify(alarmPointLookupService, Mockito.never()).addMsgToQueue(any(), any());
    }
}