import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class PortProcessorTest {

    @InjectMocks
    private PortProcessor portProcessor;
    @Mock
    private static final Logger LOGGER = mock(Logger.class);
    @Mock
    private Link link;
    @Mock
    private List<Node> nodes;
    @Mock
    private List<Link> links;
    @Mock
    private ClrComponent clrComponent;
    @Mock
    private List<ClrComponent> clrComponentList;
    @Mock
    private Map<String, List<Node>> clliNodeMap;
    @Mock
    private AtomicInteger ukCount;

    @Test
    public void testProcessWhenComponentTypeIsNull() {
        when(clrComponent.getType()).thenReturn(null);

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(LOGGER, times(1)).info("The network equipment ({}) is decomissioned", anyString());
    }

    @Test
    public void testProcessWhenComponentTypeIsDifferentFromPort() {
        when(clrComponent.getType()).thenReturn("testType");

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(LOGGER, times(1)).info("The network equipment ({}) is decomissioned", anyString());
    }

    @Test
    public void testProcessWhenEquipmentCompIsNull() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(null);

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(LOGGER, times(1)).info("The network equipment ({}) is decomissioned", anyString());
    }

    @Test
    public void testProcessWhenEquipmentCompIsEmpty() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(new ArrayList<>());

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(LOGGER, times(1)).info("The network equipment ({}) is decomissioned", anyString());
    }

    @Test
    public void testProcessWhenPortRefIsNull() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(Arrays.asList(new EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(null);

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(LOGGER, times(1)).info("The network equipment ({}) is decomissioned", anyString());
    }

    @Test
    public void testProcessWhenPortRefIsEmpty() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(Arrays.asList(new EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(new ArrayList<>());

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(LOGGER, times(1)).info("The network equipment ({}) is decomissioned", anyString());
    }

    @Test
    public void testProcessWhenEquipmentStatusIsDecommissioned() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(Arrays.asList(new EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(Arrays.asList(new PortRef()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef().get(0).getNeStatus()).thenReturn(CommonWrapperConstants.DECOMMISSIONED);

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(LOGGER, times(1)).info("The network equipment ({}) is decomissioned", anyString());
    }

    @Test
    public void testProcessWhenEquipmentStatusIsNotDecommissioned() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(Arrays.asList(new EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(Arrays.asList(new PortRef()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef().get(0).getNeStatus()).thenReturn("Active");

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(LOGGER, times(0)).info("The network equipment ({}) is decomissioned", anyString());
    }

    @Test
    public void testProcessWhenPortTypeIsCable() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(Arrays.asList(new EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(Arrays.asList(new PortRef()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef().get(0).getNeStatus()).thenReturn("Active");
        when(clrComponent.getEquipmentComp().get(0).getPortRef().get(0).getNeType()).thenReturn("Cable");

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(links, times(1)).add(link);
    }

    @Test
    public void testProcessWhenPortTypeIsCablePair() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(Arrays.asList(new EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(Arrays.asList(new PortRef()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef().get(0).getNeStatus()).thenReturn("Active");
        when(clrComponent.getEquipmentComp().get(0).getPortRef().get(0).getNeType()).thenReturn("Cable Pair");

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(links, times(1)).add(link);
    }

    @Test
    public void testProcessWhenPortTypeIsCablePairGroup() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.PORT);
        when(clrComponent.getEquipmentComp()).thenReturn(Arrays.asList(new EquipmentComp()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef()).thenReturn(Arrays.asList(new PortRef()));
        when(clrComponent.getEquipmentComp().get(0).getPortRef().get(0).getNeStatus()).thenReturn("Active");
        when(clrComponent.getEquipmentComp().get(0).getPortRef().get(0).getNeType()).thenReturn("Cable Pair Group");

        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(links, times(1)).add(link);
    }

    