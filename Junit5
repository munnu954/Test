To test the `HttpClientErrorException.NotFound` catch block in the `getAlarmDetailsById` method, you can use JUnit 5 along with Mockito to simulate the behavior of the `RestTemplate`. Below is the JUnit 5 test case code that specifically targets the exception handling block for `HttpClientErrorException.NotFound`.

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class ApiOperationTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlarmGroupingParams configParams;

    @InjectMocks
    private ApiOperation apiOperation;

    @BeforeEach
    public void setUp() {
        when(configParams.getAlarmFetchURL()).thenReturn("http://mock-url.com");
        when(configParams.getAlarmFilterKey()).thenReturn("mock-api-key");
    }

    @Test
    public void testGetAlarmDetailsById_NotFound() {
        // Simulate HttpClientErrorException.NotFound
        doThrow(new HttpClientErrorException(HttpClientErrorException.NotFound.create("", null, null, null, null)))
                .when(restTemplate).exchange(eq("http://mock-url.com"), eq(HttpMethod.POST), any(), eq(String.class));

        String result = apiOperation.getAlarmDetailsById("nonexistent-alarm-id");

        // Here, result would be null since the exception is caught and handled
        assert result == null;
    }
}
```


