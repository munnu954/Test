import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;

public class TransactionLoggerServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private TransactionLoggerService transactionLoggerService;

    @BeforeEach
    public void setup() {
        // Initialize any required setup for the test
    }

    @Test
    public void testSendLoggerMessage_Success() {
        // Arrange
        String baseURL = "http://example.com/";
        String logURL = "log";
        String ruleName = "testRule";
        ObjectNode logMsg = new ObjectMapper().createObjectNode();
        HttpHeaders headers = new HttpHeaders();
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "testAlarmIdentity");

        transactionLoggerService.setBaseURL(baseURL);
        transactionLoggerService.setLogURL(logURL);
        transactionLoggerService.setHeaders(headers);

        ResponseEntity<String> mockResponse = ResponseEntity.ok("Success");
        Mockito.when(restTemplate.exchange(eq(baseURL + logURL), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenReturn(mockResponse);

        // Act
        transactionLoggerService.sendLoggerMessage(ruleName, alarmMap);

        // Assert
        // Add assertions as per your requirements
    }

    @Test
    public void testSendLoggerMessage_Exception() {
        // Arrange
        // Set up the necessary mocks and inputs to simulate an exception scenario
        String ruleName = "testRule";
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "testAlarmIdentity");

        Mockito.when(restTemplate.exchange(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))
                .thenThrow(new HttpClientErrorException(null, null, null));

        // Act
        transactionLoggerService.sendLoggerMessage(ruleName, alarmMap);

        // Assert
        // Add assertions as per your requirements, e.g., assert that logger.error is called with expected parameters
    }
}