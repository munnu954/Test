The `NullPointerException` you're encountering is likely due to `lookupServicePath` being null, which results in the concatenation operation failing. To resolve this, we need to ensure that both `lookupServiceName` and `lookupServicePath` are properly initialized in the test environment.

Here's how you can adjust the test setup to include these values, ensuring that the string concatenation doesn't result in a `NullPointerException`:

### Updated Test Code

```java
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.*;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.*;

@RunWith(SpringRunner.class)
@SpringBootTest
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService iVAPPDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    private Map<String, Object> request;
    private UTSEquipmentList utsEquipmentList;

    // Mock the @Value annotations
    @Value("${lookup.application.name}")
    private String lookupServiceName = "mockServiceName";

    @Value("${lookup.request.url.path}")
    private String lookupServicePath = "/mockPath";

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);

        // Set up request and utsEquipmentList with necessary initializations
        request = new HashMap<>();
        utsEquipmentList = new UTSEquipmentList();
        utsEquipmentList.setEquipmentLst(new EquipmentLst());

        // Mock the IVAPPDeviceUtil behavior
        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://mockService");
    }

    @Test
    public void testGetDeviceDetailsv3_success() throws Exception {
        // Setup mock responses
        String serviceUrl = "http://mockService/mockPath";
        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn(serviceUrl);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());

        UTSEquipmentList mockResponse = new UTSEquipmentList();
        mockResponse.setEquipmentLst(new EquipmentLst()); // Ensure it's initialized
        ResponseEntity<UTSEquipmentList> responseEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(UTSEquipmentList.class)))
            .thenReturn(responseEntity);

        when(iVAPPDeviceUtil.covertV3Format(any(UTSEquipmentList.class))).thenReturn(utsEquipmentList);

        // Execute the method
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);

        // Verify
        assertNotNull(result);
        verify(iVAPPDeviceUtil).covertV3Format(mockResponse);
    }

    @Test
    public void testGetDeviceDetailsv3_internalServerError() throws Exception {
        // Setup mock responses
        String serviceUrl = "http://mockService/mockPath";
        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn(serviceUrl);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(UTSEquipmentList.class)))
            .thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR));

        // Execute the method
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);

        // Verify
        assertNull(result.getEquipmentLst().getEquipmentContainer());
    }

    @Test
    public void testGetDeviceDetailsv3_generalException() throws Exception {
        // Setup mock responses
        String serviceUrl = "http://mockService/mockPath";
        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn(serviceUrl);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(UTSEquipmentList.class)))
            .thenThrow(new RuntimeException("General Exception"));

        // Execute the method
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);

        // Verify
        assertNull(result.getEquipmentLst().getEquipmentContainer());
    }
}
```

### Key Adjustments:
1. **Mocking `@Value` Annotations**: Directly assign values to `lookupServiceName` and `lookupServicePath` to ensure they are not null during tests. This approach bypasses the need for Spring to inject these values.
   
2. **Service URL Setup**: Ensure that the concatenated `serviceUrl` is mocked to match the expected format.

3. **Mock Initialization**: Ensure that `MockitoAnnotations.initMocks(this)` is called in the `setUp` method for initializing the mocks correctly.

By making these adjustments, you should be able to avoid `NullPointerException` related to the string concatenation issue.