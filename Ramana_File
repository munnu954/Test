Here is the modified KafkaConsumer class code:

@Service
public class KafkaConsumer 

    @Value("file.source")
    private String sourceFilePath;

    @Value("file.destination")
    private String destinationFolderPath;

    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaConsumer.class);

    @Autowired
    private FlinkApiController flinkApi;

    @KafkaListener(topics="spring.kafka.producer.topic-name", groupId="spring.kafka.consumer.group-id")
    public void consume(SpaceCollector message) throws IOException, CsvValidationException 
        LOGGER.info(String.format("Message received -> 

        String inputFilePath = message.getINPUT_FILE_PATH();
        if(inputFilePath != null        !inputFilePath.isEmpty()) 
            sourceFilePath = inputFilePath;
        

        writeCsvFile();
        List<String[]> rows = retrieveCsvFile();
        deleteCsvFile();

        String response = flinkApi.triggerJob(rows, message);
        LOGGER.info("Flink Response:" + response);
    

    private void writeCsvFile() throws IOException 
        Path sourcePath = Paths.get(sourceFilePath);
        Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString());

        Files.copy(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);
    

    private List<String[]> retrieveCsvFile() throws IOException, CsvValidationException 
        List<String[]> rows = new ArrayList<>();

        try (CSVParser parser = new CSVParser(new FileReader(sourceFilePath), CSVFormat.DEFAULT)) 
            for (CSVRecord record : parser) 
                String[] row = new String[record.size()];
                for (int i = 0; i < record.size(); i++) 
                    row[i] = record.get(i);
                
                rows.add(row);
                LOGGER.info("CSV row: ", Arrays.toString(row));
            
            LOGGER.info("Successfully read  rows from CSV file ", rows.size(), sourceFilePath);
         catch (IOException e) 
            LOGGER.error("Error reading CSV file ", sourceFilePath, e);
            throw e;
        
        return rows;
    

    private void deleteCsvFile() throws IOException 
        Files.deleteIfExists(Paths.get(sourceFilePath));
    
 

Changes made:

1. Added a null check for input file path before using it to set the source file path.
2. Injected FlinkApiController as a dependency using @Autowired annotation.
3. Modified the triggerJob() method call to pass the rows list and message object as parameters.
4. Wrapped the code inside try-catch block to handle IOException and CsvValidationException in retrieveCsvFile() method. Also, added a throw statement to propagate the exception to the caller method.
5. Moved the LOGGER.error statement inside the catch block in retrieveCsvFile() method.