Certainly! Below is the updated JUnit 5 test class that uses Reflection APIs to invoke the private method `closeReader()` in the `MessageReaderService` class without making it public:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.HashMap;

@ExtendWith(MockitoExtension.class)
public class MessageReaderServiceTest {

    @Mock
    VMBParams vmbParams;

    @Mock
    ApolloServiceHealth apolloServiceHealth;

    @Mock
    RuleLoadingService ruleLoadingService;

    @InjectMocks
    MessageReaderService messageReaderService;

    @Test
    public void testInitializeMessageReaderService() {
        // Test the initialization of MessageReaderService
        messageReaderService.intialializeMessageReaderService();
    }

    @Test
    public void testProcessMessageFromRuleNotifierVMB() {
        // Test processMessageFromRuleNotifierVMB method
        messageReaderService.processMessageFromRuleNotifierVMB();
    }

    @Test
    public void testRemoveOrLoadRule() throws Exception {
        HashMap<String, Object> ruleUpdateMap = new HashMap<>();
        ruleUpdateMap.put(AlarmPostingConstants.RULEID, 1L);
        ruleUpdateMap.put(AlarmPostingConstants.OPERATION, AlarmPostingConstants.DELETE);

        Method method = MessageReaderService.class.getDeclaredMethod("removeOrloadRule", HashMap.class);
        method.setAccessible(true);
        method.invoke(messageReaderService, ruleUpdateMap);

        verify(ruleLoadingService, times(1)).removeRule(1L);
    }

    @Test
    public void testRetryReaderConnection() throws Exception {
        Method closeReaderMethod = MessageReaderService.class.getDeclaredMethod("closeReader");
        closeReaderMethod.setAccessible(true);

        // Create a spy of the messageReaderService
        MessageReaderService spyMessageReaderService = spy(messageReaderService);

        // Invoke the private closeReader method using reflection
        closeReaderMethod.invoke(spyMessageReaderService);

        verify(spyMessageReaderService, times(1)).closeReader();
    }

    @Test
    public void testCloseReader() throws Exception {
        // Create a spy of the messageReaderService
        MessageReaderService spyMessageReaderService = spy(messageReaderService);

        // Use reflection to access and invoke the private closeReader method
        Method method = MessageReaderService.class.getDeclaredMethod("closeReader");
        method.setAccessible(true);
        method.invoke(spyMessageReaderService);

        verify(spyMessageReaderService, times(1)).closeReader();
    }
}

```

In this updated version:
1. The `testRetryReaderConnection` method now uses Reflection to access the private `closeReader` method.
2. Similarly, the `testCloseReader` method also uses Reflection to access and invoke the private `closeReader` method.

This way, you can test the private method without changing its access level.