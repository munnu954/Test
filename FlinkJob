Here is an example of a Cucumber glue code that covers the given Feature and Scenario:

```java
import cucumber.api.java.en.Given;
import cucumber.api.java.en.When;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.And;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class FlinkJobSubmissionSteps {
    private FlinkApiController flinkApiController;
    private KafkaAuditProducer kafkaAuditProducer;
    private UnifiedAuditMessage unifiedAuditMessage;
    private String fileType;
    private String result;
    
    @Given("^I have a UnifiedAuditMessage with a \"(.*)\" file$")
    public void iHaveUnifiedAuditMessageWithFileType(String fileType) {
        this.unifiedAuditMessage = mock(UnifiedAuditMessage.class);
        this.fileType = fileType;
    }
    
    @When("^I call the triggerJob method with the UnifiedAuditMessage and \"(.*)\" as the fileType$")
    public void iCallTriggerJobMethod(String fileType) {
        this.fileType = fileType;
        this.flinkApiController = mock(FlinkApiController.class);
        this.kafkaAuditProducer = mock(KafkaAuditProducer.class);
        
        when(flinkApiController.triggerJob(eq(unifiedAuditMessage), eq(fileType))).thenReturn("Job submitted");
        
        this.result = flinkApiController.triggerJob(unifiedAuditMessage, fileType);
    }
    
    @Then("^the job should be submitted to the Flink API$")
    public void theJobShouldBeSubmittedToFlinkAPI() {
        verify(flinkApiController, times(1)).triggerJob(eq(unifiedAuditMessage), eq(fileType));
        assertEquals("Job submitted", result);
    }
    
    @And("^the job status should be updated$")
    public void theJobStatusShouldBeUpdated() {
        verify(kafkaAuditProducer, times(1)).createMessageAndLog(eq(unifiedAuditMessage.getInputFilePath()), 
            eq(unifiedAuditMessage.getUrl()), 
            eq(unifiedAuditMessage.getPort()), 
            eq(unifiedAuditMessage.getOutputFilePath()), 
            eq(unifiedAuditMessage.getDelimiters()), 
            eq(fileType), 
            anyString(), 
            eq(unifiedAuditMessage.getNo_of_records_in_the_file()), 
            eq(unifiedAuditMessage.getNo_of_records_processed()), 
            eq(unifiedAuditMessage.getNo_of_records_failed()), 
            eq(unifiedAuditMessage.getJob_id()), 
            eq(unifiedAuditMessage.getJar_id()), 
            eq(unifiedAuditMessage.getCollector_id()), 
            eq(unifiedAuditMessage.getExceptions()), 
            eq(unifiedAuditMessage.getJobStatus()));
    }
}
```

Please note that the above code uses Mockito to mock the dependencies (`FlinkApiController` and `KafkaAuditProducer`) and verify the method invocations. You may need to adjust the mock calls and assertions according to your specific implementation.