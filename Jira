import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.util.Collector;
import org.json.JSONObject;

public static class CsvtoJsonTonesTransformer implements FlatMapFunction<String, String> {
    private String[] headers = null;

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        if (headers == null) {
            headers = s.split(",");  // Store the header row for key names
            return;  // Skip processing the header row
        }

        String[] values = s.split(",");  // Assuming the CSV is comma-separated
        JSONObject jsonObject = new JSONObject();

        for (int i = 0; i < headers.length; i++) {
            if (i < values.length) {  // Check if i is within bounds
                String fieldName = headers[i].trim().replace("\"", "");  // Assuming the headers are wrapped in quotes
                String[] nestedKeys = fieldName.split("\\.");  // Assuming nested fields are separated by dots

                // Building the nested JSON structure dynamically
                JSONObject currentContext = jsonObject;
                for (int j = 0; j < nestedKeys.length - 1; j++) {
                    if (!currentContext.has(nestedKeys[j])) {
                        currentContext.put(nestedKeys[j], new JSONObject());
                    }
                    currentContext = currentContext.getJSONObject(nestedKeys[j]);
                }
                currentContext.put(nestedKeys[nestedKeys.length - 1], values[i].trim().replace("\"", ""));  // Assuming the values are wrapped in quotes

                // Assuming the top-level header contains the ObjectName
                if (i == 0) {
                    jsonObject.put("ObjectName", fieldName);
                }
            }
        }

        // Emit the JSON string representing the transformed object
        collector.collect(jsonObject.toString());
    }
}