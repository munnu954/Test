Certainly! To achieve 100% code coverage for the `Health health()` method, we need to add test cases that cover all possible branches of the conditional statements related to closing the `Statement` and `Connection`. Here are the additional test cases to cover the remaining branches:

```java
@Test
void testHealthWithOpenStatementAndConnection() throws SQLException {
    Connection conn = mock(Connection.class);
    when(ds.getConnection()).thenReturn(conn);
    Statement stmt = mock(Statement.class);
    when(conn.createStatement()).thenReturn(stmt);
    when(stmt.isClosed()).thenReturn(false);
    when(conn.isClosed()).thenReturn(false);
    ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);

    Health health = databaseHealthContributor.health();
    assertEquals("UP", health.getStatus().getCode());
}

@Test
void testHealthWithOpenStatementAndClosedConnection() throws SQLException {
    Connection conn = mock(Connection.class);
    when(ds.getConnection()).thenReturn(conn);
    Statement stmt = mock(Statement.class);
    when(conn.createStatement()).thenReturn(stmt);
    when(stmt.isClosed()).thenReturn(false);
    when(conn.isClosed()).thenReturn(true);
    ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);

    Health health = databaseHealthContributor.health();
    assertEquals("UP", health.getStatus().getCode());
}

@Test
void testHealthWithNullConnection() throws SQLException {
    when(ds.getConnection()).thenReturn(null);
    ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);

    Health health = databaseHealthContributor.health();
    assertEquals("DOWN", health.getStatus().getCode());
}

@Test
void testHealthWithOpenConnectionAndNullStatement() throws SQLException {
    Connection conn = mock(Connection.class);
    when(ds.getConnection()).thenReturn(conn);
    when(conn.createStatement()).thenReturn(null);
    when(conn.isClosed()).thenReturn(false);
    ReflectionTestUtils.setField(databaseHealthContributor, "ds", ds);

    Health health = databaseHealthContributor.health();
    assertEquals("DOWN", health.getStatus().getCode());
}
```

These additional test cases cover all possible scenarios related to the `Statement` and `Connection` being open or closed, as well as situations where one or both objects are null. Running these tests along with the existing ones should provide 100% code coverage for the `Health health()` method.