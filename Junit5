I have made changes in the LinkAggregationUtil class to add a MappingJackson2HttpMessageConverter to the RestTemplate bean in the AppConfig class. This converter will handle the conversion of JSON response to LinkAggregationResponse object.

Updated AppConfig class: 

```java
@Configuration
public class AppConfig {
    Map<String, String> configData = new HashMap<>();
    
    @Value("${com.tcoms.linkaggregation.service.name}")
    String tcomsLinkAggregationServiceName;
    
    @Value("${com.tcoms.linkaggregation.service.url}")
    String tcomsLinkAggregationServiceNameUrl;
    
    @Bean("configMap")
    public Map<String, String> getConfigData() {
        configData.put("tcomsLinkAggregationServiceName", tcomsLinkAggregationServiceName);
        configData.put("tcomsLinkAggregationServiceNameUrl", tcomsLinkAggregationServiceNameUrl);
        return configData;
    }
    
    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        RestTemplate restTemplate = builder
                .setConnectTimeout(Duration.ofMillis(20000))
                .setReadTimeout(Duration.ofMillis(100000))
                .build();
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
        return restTemplate;
    }
}
```

Updated LinkAggregationUtil class:

```java
@Component
public class LinkAggregationUtil {
    
    @Autowired
    RestTemplate restTemplate;
    
    private static final Logger logger = LoggerFactory.getLogger(LinkAggregationUtil.class);
    
    public String findServiceForName(String name) {
        return name.contains("http") ? name.toLowerCase() : "https://uts-ple.verizon.com/" + name.toLowerCase();
    }
    
    public boolean validate(LinkAggregationRequest request) throws InputInvalidException {
        if(request.getSystem()==null || request.getSystem().isEmpty()) {
            throw new InputInvalidException(LinkAggregationConstants.NO_SYS_PROVIDED);
        }
        if((request.getId()==null || request.getId().isEmpty()) && (request.getName()==null || request.getName().isEmpty())) {
            throw new InputInvalidException(LinkAggregationConstants.ID_OR_NAME_NULL);
        }
        return true;
    }
    
    public HttpHeaders addSecurityDtlsToMS() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        String plainCreds = "MICROSERVICE: MICROSERVICE123";
        byte[] plainCredsBytes = plainCreds.getBytes();
        byte[] base64CredsBytes = Base64.encodeBase64(plainCredsBytes, false);
        String base64Creds = new String(base64CredsBytes);
        headers.add("Authorization", "Basic" + base64Creds);
        return headers;
    }
    
    public LinkAggregationResponse getLinkAggregationResults (String url, Map<String, String> map) throws NoDataFoundException, LinkAggregationException {
        try {
            HttpEntity<Map<String, String>> httpEntity = new HttpEntity<Map<String, String>>(map, addSecurityDtlsToMS());
            ResponseEntity<LinkAggregationResponse> response = restTemplate.postForEntity(url, httpEntity, LinkAggregationResponse.class);
            if (null != response && null != response.getBody() && !ObjectUtils.isEmpty(response.getBody())) {
                return response.getBody();
            }
        } catch(RestClientException e) {
            if(null != e.getMessage() && e.getMessage().contains("404")) {
                throw new NoDataFoundException(LinkAggregationConstants.NO_DATA_FOUND);
            }
            throw new LinkAggregationException(LinkAggregationConstants.EXCEPTION_MSG_URL + url + LinkAggregationConstants.EXCEPTION_MSG + e.getMessage());
        } catch (Exception e) {
            throw new LinkAggregationException(LinkAggregationConstants.EXCEPTION_MSG_URL + url + LinkAggregationConstants.EXCEPTION_MSG + e.getMessage());
        }
        throw new NoDataFoundException(LinkAggregationConstants.NO_DATA_FOUND);
    }
}
```

These changes should fix the "UnknownContentTypeException" error when trying to extract the JSON response into the LinkAggregationResponse object.