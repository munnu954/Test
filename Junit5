Certainly! Below is an example of JUnit 5 test cases to cover the two branches of the `if` and `else if` blocks within the `SegmentProcessor` class for achieving 100% code coverage.

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class SegmentProcessorTest {

    private SegmentProcessor segmentProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private CircuitInfo circuitInfo;
    private ClrComponent.CircuitComp circuitComp;
    private Node node;

    @BeforeEach
    public void setUp() {
        segmentProcessor = SegmentProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        
        // Initializing mock objects
        circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("TestCircuit");
        circuitInfo.setType("TestType");
        circuitInfo.setServiceType("TestService");
        circuitInfo.setBw("100Gbps");
        circuitInfo.setStatus("Active");
        circuitInfo.setTcomsSegment("TestSegment");

        circuitComp = new ClrComponent.CircuitComp();
        circuitComp.setCircuitInfo(Collections.singletonList(circuitInfo));

        clrComponent = new ClrComponent();
        clrComponent.setType("TestComponentType");
        clrComponent.setCircuitComp(Collections.singletonList(circuitComp));

        node = new Node();
        node.setAid("TestAID");

        // Adding node to the map
        clliNodeMap.put("aclli", Collections.singletonList(node));
        clliNodeMap.put("zclli", Collections.singletonList(node));
    }

    @Test
    public void testProcess_withAclliKey() {
        segmentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);

        assertEquals(1, links.size());
        Link segment = links.get(0);
        assertNotNull(segment);
        assertEquals("TestComponentType", segment.getLinkType());
    }

    @Test
    public void testProcess_withZclliKey() {
        // Remove aclli key and ensure only zclli key exists
        clliNodeMap.remove("aclli");

        segmentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);

        assertEquals(1, links.size());
        Link segment = links.get(0);
        assertNotNull(segment);
        assertEquals("TestComponentType", segment.getLinkType());
    }
}
```

In these test cases:
- `testProcess_withAclliKey` tests the scenario where the `clliNodeMap` contains the key "aclli".
- `testProcess_withZclliKey` tests the scenario where the `clliNodeMap` does not contain the key "aclli" but contains the key "zclli".

These tests ensure that both branches of the `if-else if` statement are covered, providing full code coverage for that section.