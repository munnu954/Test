I apologize for the oversight. The `completedFuture` method is a part of the `java.util.concurrent.CompletableFuture` class. You should import this class to resolve the issue. Here's the corrected code:

```java
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.ListTopicsOptions;
import org.apache.kafka.clients.admin.ListTopicsResult;

import java.util.Arrays;
import java.util.HashSet;
import java.util.concurrent.CompletableFuture;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class KafkaTopicUtilTest {

    @Autowired
    private KafkaTopicUtil kafkaTopicUtil;

    @MockBean
    private AdminClient adminClient;

    @MockBean
    private ListTopicsOptions listTopicsOptions;

    @MockBean
    private ListTopicsResult listTopicsResult;

    @Test
    public void testIsKafkaTopicPresent() throws Exception {
        // Define topic name
        String topicName = "test-topic";

        // Mock behaviors
        when(adminClient.listTopics(listTopicsOptions)).thenReturn(listTopicsResult);
        when(listTopicsResult.names()).thenReturn(CompletableFuture.completedFuture(new HashSet<>(Arrays.asList("test-topic", "another-topic"))));

        // Call the method to test
        boolean isPresent = kafkaTopicUtil.iskafkaTopicPresent(topicName);

        // Assert the result
        assertTrue(isPresent);
    }

    @Test
    public void testIsKafkaTopicPresentWithException() throws Exception {
        // Define topic name
        String topicName = "test-topic";

        // Mock behaviors
        when(adminClient.listTopics(listTopicsOptions)).thenThrow(new RuntimeException("Test exception"));

        // Call the method to test and assert an exception is thrown
        assertThrows(RuntimeException.class, () -> kafkaTopicUtil.iskafkaTopicPresent(topicName));
    }
}
```
This should resolve the issue with the `completedFuture` method call. The `CompletableFuture.completedFuture` method is used here to create a completed CompletableFuture that contains the given value.