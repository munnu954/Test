@Service
public class CoconutServiceVersion3 {

    @Autowired
    CoconutDeviceDao coconutDeviceDao;

    @Autowired
    EuipmentListCoconutDeviceDao euipmentListCoconutDeviceDao;

    @Autowired
    EquipmentListCoconutDeviceV3Dao equipmentListCoconutDeviceV3Dao;

    private CoconutDeviceMSConstants coconutDeviceMSConstants;

    private static Logger logger = LoggerFactory.getLogger(CoconutServiceVersion3.class);

    // newly created for v3api
    public UTSEquipmentList getCOCONUTEquipListV3(EquipmentInputRequest request, UTSEquipmentList utsEquipmentList) 
            throws InternalServerErrorException, NoDataFoundException, InterruptedException, ExecutionException, DaoException {
        try {
            String qry = null;
            String fullQuery = null;
            Map<String, Object> criteria = request.getRequestParameters();
            qry = queryBasedOnParameter(criteria);
            fullQuery = "select COUNT(*) from (" + qry + ")";
            Integer skip = 0;
            Integer limit = 10;

            if (criteria.containsKey("pageNo")) {
                if (criteria.get("pageNo").equals("1")) {
                    skip = 0;
                } else {
                    skip = (Integer.parseInt(criteria.get("pageNo").toString()) * Integer.parseInt(criteria.get("size").toString()));
                    skip = skip - Integer.parseInt(criteria.get("size").toString());
                }
            } else {
                skip = 0;
            }

            if (criteria.containsKey("size")) {
                limit = skip + Integer.parseInt(criteria.get("size").toString());
            } else {
                limit = 10;
            }

            qry = "select * from (select t.*, rownum as rn from (" + qry;
            qry = qry.concat(" ) t ) WHERE rn BETWEEN " + skip + " and " + limit + " ";

            if (criteria.containsKey("sortByField")) {
                qry = qry.concat(" order by " + criteria.get("sortByField") + " ");
            }
            if (criteria.containsKey("sortDirection")) {
                qry = qry.concat(" " + criteria.get("sortDirection") + " ");
            }

            UTSEquipmentList response = new UTSEquipmentList();
            response = equipmentListCoconutDeviceV3Dao.getEquipListDaoV3(criteria, qry, fullQuery, utsEquipmentList, request);
            return response;
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            throw new InternalServerErrorException(ex.getMessage());
        }
    }

    private String queryBasedOnParameter(Map<String, Object> queryParams) {
        StringBuilder finalQuery = new StringBuilder();

        if ("LOCATION".equalsIgnoreCase((String) queryParams.get("outputControl"))) {
            finalQuery.append(coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);

            // Check for locationCLLI parameter
            if (queryParams.containsKey("locationCLLI")) {
                finalQuery.append(" AND locationCLLI = '").append(queryParams.get("locationCLLI")).append("' ");
            }

            // Check for siteName parameter
            if (queryParams.containsKey("siteName")) {
                finalQuery.append(" AND siteName = '").append(queryParams.get("siteName")).append("' ");
            }
        }

        return finalQuery.toString();
    }
}

Please update the CoconutServiceVersion3 code by applying the above 3 mentioned conditions such that the finalQuery should checks if the `locationCLLI` and `siteName` parameters are present in the `queryParams` map. If they are present, it appends the corresponding conditions to the `finalQuery`. If they are not present, it does not append anything to the `finalQuery`. The resulting `finalQuery` will work even without `locationCLLI` or `siteName`.