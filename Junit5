To cover all 8 branches of the specified `else if` block in the `createAlarm` method, you will need to test different combinations of `perceivedSeverity` and `stateValue` values. Here's the JUnit5 test case code that covers those branches:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.internal.util.reflection.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
    }

    @Test
    void testCreateAlarmBranches() throws Exception {
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);

        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);

        String clearedState = "cleared";
        Integer clearedStateValue = stateMap.get(clearedState);

        // Test case 1: perceivedSeverity == null, stateValue == clearedStateValue
        runTestCase(null, clearedStateValue, -1);

        // Test case 2: perceivedSeverity != null and empty, stateValue == clearedStateValue
        runTestCase("", clearedStateValue, -1);

        // Test case 3: perceivedSeverity != null and not empty, stateValue == clearedStateValue
        runTestCase("SomeValue", clearedStateValue, 1);

        // Test case 4: perceivedSeverity == null, stateValue != clearedStateValue
        runTestCase(null, 5, 1);

        // Test case 5: perceivedSeverity != null and empty, stateValue != clearedStateValue
        runTestCase("", 5, 1);

        // Test case 6: perceivedSeverity != null and not empty, stateValue != clearedStateValue
        runTestCase("SomeValue", 5, 1);

        // Test case 7: perceivedSeverity == null, stateValue == null
        runTestCase(null, null, 1);

        // Test case 8: perceivedSeverity != null and empty, stateValue == null
        runTestCase("", null, 1);
    }

    private void runTestCase(String perceivedSeverity, Integer stateValue, int expectedPerceivedSeverity) throws Exception {
        String jsonTemplate = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"%s\", \"perceivedSeverity\":\"%s\", \"sequenceId\":\"23423\"}";
        String jsonStr = String.format(jsonTemplate, stateValue != null ? "cleared" : "notCleared", perceivedSeverity);
        JsonNode json = objectMapper.readTree(jsonStr);

        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

        Alarm alarm = alarmRepositoryImpl.createAlarm(jsonStr);

        assertNotNull(alarm);
        assertEquals(expectedPerceivedSeverity, alarm.getPerceivedSeverity());
    }
}
```

This code should cover all the branches of the `else if` block in the `createAlarm` method. The `runTestCase` method is used to simplify testing different combinations of `perceivedSeverity` and `stateValue`. The expected values are asserted to ensure the correctness of the branch logic.