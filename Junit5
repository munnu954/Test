Here is the Junit5 test case code to cover the for loop in the applyPostingRule method of PostingRuleProcessingService class for 100% code coverage:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private Alarm alarm;

    @Test
    void testApplyPostingRuleForLoop() throws Exception {
        PostingRule processingRule = new PostingRule(1, "Rule1", 1, 1, "Criteria1");

        PostingRuleProcessingService service = new PostingRuleProcessingService();
        service.setRuleLoadingService(ruleLoadingService);
        service.setTopoApiClient(topoApiClient);
        service.setUtils(utils);

        Map<String, Object> alarmMap = new HashMap<>();
        JsonNode jsonNode = Mockito.mock(JsonNode.class);
        JsonNode topologyObjectsNode = Mockito.mock(JsonNode.class);
        Mockito.when(jsonNode.at("/TBL_response/topologyObjects")).thenReturn(topologyObjectsNode);

        // Mocking the behavior of utils.evaluateExpression
        Mockito.when(utils.evaluateExpression(Mockito.anyString(), Mockito.anyMap())).thenReturn("MockedObject");

        // Mocking the behavior of topoApiClient.fetchTopologyTraversalDetails
        Mockito.when(topoApiClient.fetchTopologyTraversalDetails(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(null);

        // Mocking the behavior of AlarmPostingConstants.getObjectMapper
        Mockito.when(AlarmPostingConstants.getObjectMapper()).thenReturn(new ObjectMapper());

        // Mocking the behavior of alarm.getTopologyDetails
        Mockito.when(alarm.getTopologyDetails()).thenReturn("{}");

        Mockito.when(topologyObjectsNode.isArray()).thenReturn(true);
        Mockito.when(topologyObjectsNode.elements()).thenReturn(Mockito.mock(Iterator.class));

        // Mocking the behavior of utils.evaluateExpression for topologyDetailsAlarmedObjectExpression
        Mockito.when(utils.evaluateExpression(Mockito.anyString(), Mockito.anyMap())).thenReturn("{}");

        // Call the applyPostingRule method
        service.applyPostingRule(alarm, processingRule, alarmMap);

        // Verify the interactions
        Mockito.verify(utils, Mockito.times(1)).evaluateExpression(Mockito.anyString(), Mockito.anyMap());
        Mockito.verify(topoApiClient, Mockito.times(1)).fetchTopologyTraversalDetails(Mockito.any(), Mockito.any(), Mockito.any());
        Mockito.verify(utils, Mockito.times(2)).evaluateExpression(Mockito.anyString(), Mockito.anyMap());
    }
}
```

In this test case code, the interactions with RuleLoadingService, TopologyApiClient, and AlarmPostingUtils are mocked to test the behavior of the applyPostingRule method. The method calls are verified to ensure that the for loop is executed and all the necessary methods are called within the loop.