@Test
void testApplyPostingRule_withNullComponentIdReq() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClientMock);

    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
    when(topoApiClientMock.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok("{}"));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
    assertNull(result.getComponentId());
}

@Test
void testApplyPostingRule_withEmptyTopologyData() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClientMock);

    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
    when(topoApiClientMock.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok("{}"));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
    assertNull(result.getComponentId());
}

@Test
void testApplyPostingRule_withMissingTopologyObjectsNode() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClientMock);

    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
    when(topoApiClientMock.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok("{\"key\": \"value\"}"));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
    assertNull(result.getComponentId());
}

@Test
void testApplyPostingRule_withNonArrayTopologyObjectsNode() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClientMock);

    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
    when(topoApiClientMock.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok("{\"topologyObjects\": {\"key\": \"value\"}}"));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
    assertNull(result.getComponentId());
}

@Test
void testApplyPostingRule_withInvalidTopoObjectEligibilityValue() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClientMock);

    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("InvalidValue");
    when(topoApiClientMock.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok("{\"topologyObjects\": [{\"key1\": \"value1\"}]}"));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
    assertNull(result.getComponentId());
}

@Test
void testApplyPostingRule_withEmptyAlarmedObject() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClientMock);

    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("");
    when(topoApiClientMock.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok("{\"topologyObjects\": [{\"key1\": \"value1\"}]}"));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
    assertNull(result.getComponentId());
}

@Test
void testApplyPostingRule_withNullAlarmTopologyDetails() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClientMock);

    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
    when(topoApiClientMock.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok("{\"topologyObjects\": [{\"key1\": \"value1\"}]}"));
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
    when(alarmPostingConstantsMock.getObjectMapper()).thenReturn(objectMapperMock);
    when(objectMapperMock.createObjectNode()).thenReturn(objectNodeMock);

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
}

@Test
void testApplyPostingRule_withInvalidTopologyDetails() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClientMock);

    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
    when(topoApiClientMock.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok("{\"topologyObjects\": [{\"key1\": \"value1\"}]}"));
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
    when(alarmPostingConstantsMock.getObjectMapper()).thenReturn(objectMapperMock);
    when(objectMapperMock.createObjectNode()).thenReturn(objectNodeMock);
    when(objectMapperMock.readTree(anyString())).thenThrow(new IOException());

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
}

@Test
void testApplyPostingRule_withException() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1, "testrule", 1, 1, "{\"key\": \"value\"}");
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "topoApiClient", topoApiClientMock);

    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");
    when(topoApiClientMock.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenThrow(new RestClientException(""));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
}