public static class CsvToJsonMRFCFileTransformer extends RichFlatMapFunction<String, String> {

    String[] headers;
    JSONObject commonObj;
    int index = 0;

    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String value, Collector<String> out) throws Exception {
        String[] lines = value.split(System.lineSeparator());
        for (String line : lines) {
            String[] arr;
            if (index < 3) {
                arr = line.split(",");
                if (headers == null && index == 2) {
                    headers = arr;
                    index++;
                    continue;
                } else if (commonObj == null && index == 1) {
                    commonObj = getJSONObject(headers, arr, null);
                }
            }

            if (headers != null && index > 2) {
                arr = line.split(",");
                if (headers.length == arr.length) {
                    JSONObject obj = getJSONObject(headers, arr, commonObj);
                    this.successIntCounter.add(1);
                    out.collect(obj.toString());
                } else {
                    this.failureIntCounter.add(1);
                }
            }

            index++;
        }
    }

    JSONObject getJSONObject(String[] headerArr, String[] dataArr, JSONObject commonJSON) throws JSONException {
        JSONObject obj;
        if (commonJSON == null) {
            obj = new JSONObject();
        } else {
            obj = new JSONObject(commonJSON.toString());
        }
        for (int i = 0; i < dataArr.length; i++) {
            String jsonkey = headerArr[i].trim().replace("\"", "");
            String jsonValue = dataArr[i].trim().replace("\"", "");
            obj.put(jsonkey, jsonValue);
        }
        return obj;
    }

}
```