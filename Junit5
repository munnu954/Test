import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private AbstractClrComponentProcessor abstractClrComponentProcessor;
    private CircuitInfo circuitInfo;
    private Link circuit;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;

    @BeforeEach
    void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        abstractClrComponentProcessor = mock(AbstractClrComponentProcessor.class);
        circuitInfo = mock(CircuitInfo.class);
        circuit = mock(Link.class);
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = mock(ClrComponent.class);
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger();
    }

    @Test
    void testProcessWhenClrComponentIsNotNullAndCircuitInfoIsNotNull() {
        when(clrComponent.getTrunkGroupComp()).thenReturn(Arrays.asList(mock(TrunkGroupComp.class)));
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(Arrays.asList(mock(CktLst.class)));
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(Arrays.asList(circuitInfo));

        when(circuitInfo.getCircuitName()).thenReturn("circuitName");
        when(circuitInfo.getType()).thenReturn("type");
        when(circuitInfo.getServiceType()).thenReturn("serviceType");
        when(circuitInfo.getBw()).thenReturn("bandwidth");
        when(circuitInfo.getStatus()).thenReturn("status");

        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verify(circuit).addAttribute(new Attribute("circuitName", "circuitName", "/site?id=123"));
        verify(circuit).addAttribute(new Attribute("type", "type", "--"));
        verify(circuit).addAttribute(new Attribute("serviceType", "serviceType", "--"));
        verify(circuit).addAttribute(new Attribute("bandwidth", "bandwidth", "--"));
        verify(circuit).addAttribute(new Attribute("status", "status", "--"));
        verify(abstractClrComponentProcessor).addPortToLink(circuit, nodes, 0);
        verify(abstractClrComponentProcessor).addPortToLink(circuit, nodes, 1);
        verify(links).add(circuit);
    }

    @Test
    void testProcessWhenClrComponentIsNotNullAndCircuitInfoIsNull() {
        when(clrComponent.getTrunkGroupComp()).thenReturn(Arrays.asList(mock(TrunkGroupComp.class)));
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst()).thenReturn(Arrays.asList(mock(CktLst.class)));
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo()).thenReturn(new ArrayList<>());

        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verifyNoInteractions(circuit);
    }

    @Test
    void testProcessWhenClrComponentIsNull() {
        trunkProcessor.process(nodes, links, null, clrComponentList, clliNodeMap, 0, ukCount, "sourceSys");

        verifyNoInteractions(circuit);
    }
}