@Test
void testMain() {
    SpringApplication app = Mockito.mock(SpringApplication.class);
    ConfigurableApplicationContext appContext = Mockito.mock(ConfigurableApplicationContext.class);
    MessageConsumer messageConsumerService = Mockito.mock(MessageConsumer.class);

    when(app.run(any(String[].class))).thenReturn(appContext);
    when(appContext.getBean(MessageConsumer.class)).thenReturn(messageConsumerService);

    UWAUpdatesHandlerApplication.main(new String[]{"arg1", "arg2"});

    verify(appContext, times(1)).start();
    verify(messageConsumerService, times(1)).start();
}

@Test
void testMainException() {
    SpringApplication app = Mockito.mock(SpringApplication.class);
    ConfigurableApplicationContext appContext = Mockito.mock(ConfigurableApplicationContext.class);

    when(app.run(any(String[].class))).thenThrow(new RuntimeException("Mocked Exception"));

    UWAUpdatesHandlerApplication.main(new String[]{"arg1", "arg2"});

    verify(appContext, never()).start();
}

@Test
void testShutdownHook() {
    MessageConsumer messageConsumerService = Mockito.mock(MessageConsumer.class);
    ConfigurableApplicationContext appContext = Mockito.mock(ConfigurableApplicationContext.class);

    UWAUpdatesHandlerApplication app = new UWAUpdatesHandlerApplication();
    app.messageConsumerService = messageConsumerService;

    Thread thread = app.new Thread() {
        @Override
        public void run() {
            app.messageConsumerService.shutdown();
            appContext.stop();
        }
    };

    thread.run();

    verify(messageConsumerService, times(1)).shutdown();
    verify(appContext, times(1)).stop();
}