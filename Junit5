DECLARE
  v_count NUMBER;
BEGIN
  -- Check if rows with MASK = 2 exist
  SELECT COUNT(*) INTO v_count
  FROM utl_trace
  WHERE MASK = 2;

  IF v_count > 0 THEN
    -- Update MASK to 128 where it's currently 2
    UPDATE utl_trace
    SET MASK = 128
    WHERE MASK = 2;

    DBMS_OUTPUT.PUT_LINE('Updated ' || SQL%ROWCOUNT || ' rows.');
    COMMIT; -- Important: Commit the changes
  ELSE
    DBMS_OUTPUT.PUT_LINE('No rows found with MASK = 2.');
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
    ROLLBACK; -- Rollback in case of errors
END;
/

Explanation:
 * DECLARE: We declare a variable v_count to store the number of rows with MASK = 2.
 * Check for Existing Rows:
   * We use a SELECT COUNT(*) query to count the rows in the utl_trace table where MASK is equal to 2.
   * The result is stored in the v_count variable.
 * Conditional Update:
   * We use an IF statement to check if v_count is greater than 0. If it is, it means rows with MASK = 2 exist.
   * UPDATE Statement: - We execute an UPDATE statement to set the MASK column to 128 for all rows where MASK is currently 2.
     * SQL%ROWCOUNT returns the number of rows affected by the UPDATE statement.
     * DBMS_OUTPUT.PUT_LINE is used to display the number of updated rows.
     * COMMIT: It's crucial to COMMIT the transaction to make the changes permanent in the database.
 * No Rows Found:
   * If v_count is 0, it means no rows with MASK = 2 were found.
   * DBMS_OUTPUT.PUT_LINE is used to display a message indicating that no rows were found.
 * Exception Handling:
   * We use an EXCEPTION block to handle any potential errors during the process.
   * If an error occurs, DBMS_OUTPUT.PUT_LINE displays the error message using SQLERRM.
   * ROLLBACK: It's essential to ROLLBACK the transaction in case of errors to prevent partial updates.
 * / (Slash):
   * The / at the end of the script executes the PL/SQL block.
How to Run This Script:
 * Open SQL Developer: Open your Oracle SQL Developer tool.
 * Open a Worksheet: Open a new SQL Worksheet or use an existing one.
 * Copy and Paste: Copy the PL/SQL code above and paste it into the worksheet.
 * Execute: Click the "Run Script" button (usually a green play button) or press F5.
 * View Output: The output from DBMS_OUTPUT.PUT_LINE will be displayed in the "Script Output" or "DBMS Output" panel. Make sure this panel is visible.
Important Notes:
 * Permissions: Ensure that the user you are using to execute this script has the necessary permissions to update the utl_trace table.
 * Backup: It's always a good practice to take a backup of your data before making any changes, especially in production environments.
 * Testing: Test this script in a development or test environment before running it in production.
