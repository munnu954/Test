To achieve 100% code coverage for the specified conditions and branches in the `OutageMdnEventsMessageListener` class, let's address the remaining uncovered branches. We'll write test cases for the following scenarios:

1. **Missing `eventId` or `ecpdId`**: Ensure both conditions where either field is missing are covered.
2. **Exception with a long message during JSON processing**: Ensure the truncation logic is covered.
3. **Exception with a long message during sensitivity check**: Ensure the truncation logic is tested.

Here are the additional JUnit 5 test cases:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.schema.GenericRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;
import com.fasterxml.jackson.core.JsonProcessingException;

import java.lang.reflect.Field;
import java.util.ArrayList;

public class OutageMdnEventsMessageListenerTest {

    @Mock
    private BatchLoaderUtils utils;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private SensitiveProfileManager profileManager;

    @InjectMocks
    private OutageMdnEventsMessageListener listener;

    private static final String PRODUCER_TOPIC = "test-topic";

    @BeforeEach
    public void setup() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(utils.returnHeaders(any())).thenReturn(new ArrayList<>());

        listener = new OutageMdnEventsMessageListener(profileManager, utils);

        // Set private fields using reflection
        setPrivateField(listener, "producerTopic", PRODUCER_TOPIC);
    }

    private void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }

    @Test
    public void testOnMessageWithMissingEventId() throws JsonProcessingException {
        OutageMdnEvent event = new OutageMdnEvent();
        event.setEcpdId("456");
        String payload = "{\"ECPD_ID\":\"456\",\"MDN\":\"789\"}";

        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(payload.getBytes());
        when(utils.convert(anyString(), eq(OutageMdnEvent.class))).thenReturn(event);

        assertDoesNotThrow(() -> listener.onMessage(message));

        // Ensure no records are sent if eventId is missing
        verify(utils, never()).sendMessageAsync(any(), anyString(), anyString(), anyString(), any(), anyChar(), any());
    }

    @Test
    public void testOnMessageWithMissingEcpdId() throws JsonProcessingException {
        OutageMdnEvent event = new OutageMdnEvent();
        event.setEventId("123");
        String payload = "{\"EVENT_ID\":\"123\",\"MDN\":\"789\"}";

        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(payload.getBytes());
        when(utils.convert(anyString(), eq(OutageMdnEvent.class))).thenReturn(event);

        assertDoesNotThrow(() -> listener.onMessage(message));

        // Ensure no records are sent if ecpdId is missing
        verify(utils, never()).sendMessageAsync(any(), anyString(), anyString(), anyString(), any(), anyChar(), any());
    }

    @Test
    public void testJsonProcessingExceptionWithLongMessage() throws JsonProcessingException {
        String payload = "{\"EVENT_ID\":\"123\",\"ECPD_ID\":\"456\",\"MDN\":\"789\"}";
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(payload.getBytes());

        String longErrorMessage = "This is a very long JSON processing error message that exceeds 200 characters to test the truncation logic in the exception handling block. " +
                                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ultricies metus vel mi volutpat, at fermentum nulla vehicula.";
        doThrow(new JsonProcessingException(longErrorMessage) {}).when(utils).convert(anyString(), eq(OutageMdnEvent.class));

        SystemException thrown = assertThrows(SystemException.class, () -> listener.onMessage(message));

        assertTrue(thrown.getMessage().contains("Erroneous payload received from NSP topic"));
        verify(utils).saveFailedRecords(eq(PRODUCER_TOPIC), anyString(), eq(payload), eq(TYSConstants.NETWORK_OUTAGE.getValue()), eq('N'), eq(TYSConstants.EC_UNCATEGORIZED.getValue()), argThat(msg -> msg.length() <= 200 && longErrorMessage.startsWith(msg)));
    }

    @Test
    public void testSensitivityCheckExceptionWithLongMessage() throws JsonProcessingException {
        OutageMdnEvent event = new OutageMdnEvent();
        event.setEcpdId("456");
        event.setEventId("123");
        String payload = "{\"EVENT_ID\":\"123\",\"ECPD_ID\":\"456\",\"MDN\":\"789\"}";

        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(payload.getBytes());
        when(utils.convert(anyString(), eq(OutageMdnEvent.class))).thenReturn(event);

        String longErrorMessage = "This is a very long sensitivity check error message that exceeds 200 characters to test the truncation logic in the exception handling block. " +
                                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ultricies metus vel mi volutpat, at fermentum nulla vehicula.";
        when(profileManager.getSensitiveAccount(event.getEcpdId())).thenThrow(new RuntimeException(longErrorMessage));

        SystemException thrown = assertThrows(SystemException.class, () -> listener.onMessage(message));

        assertTrue(thrown.getMessage().contains("Sensitivity check failed"));
        verify(utils).saveFailedRecords(eq(PRODUCER_TOPIC), anyString(), eq(payload), eq(TYSConstants.NETWORK_OUTAGE.getValue()), eq('N'), eq(NSPConstants.EC_SENSITIVITY_CHECK_FAILED.getValue()), argThat(msg -> msg.length() <= 200 && longErrorMessage.startsWith(msg)));
    }
}
```

### Explanation:

- **testOnMessageWithMissingEventId**: Tests the scenario where `eventId` is missing, ensuring that no message is processed further.

- **testOnMessageWithMissingEcpdId**: Tests the scenario where `ecpdId` is missing, ensuring that no message is processed further.

- **testJsonProcessingExceptionWithLongMessage**: Tests JSON processing exceptions with a long error message to ensure the truncation logic is correctly tested.

- **testSensitivityCheckExceptionWithLongMessage**: Tests sensitivity check exceptions with a long error message to ensure the truncation logic is correctly tested.

These additional test cases cover all the remaining branches of the specified conditions and exceptions in the `onMessage` method.