```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;

import com.example.demo.BatchLoaderUtils;
import com.example.demo.KafkaFalloutService;
import com.example.demo.SHAEventMessageListener;
import com.example.demo.SensitiveProfileManager;
import com.example.demo.SHAVbsmEvent;
import com.example.demo.SystemException;
import com.example.demo.TYSConstants;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;


class SHAEventMessageListenerTest {
    @InjectMocks
    SHAEventMessageListener shaEventMessageListener;

    @Mock
    SensitiveProfileManager profIleManager;

    @Mock
    BatchLoaderUtils utils;

    @Mock
    KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    KafkaFalloutService failedMessageService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void onMessage_EmptyPayload() {
        Message<GenericRecord> message = Mockito.mock(Message.class);
        Mockito.when(message.getData()).thenReturn(new byte[0]);

        Assertions.assertThrows(SystemException.class, () -> shaEventMessageListener.onMessage(message));
    }

    @Test
    void onMessage_ConvertPayloadException() {
        Message<GenericRecord> message = Mockito.mock(Message.class);
        Mockito.when(message.getData()).thenReturn("payload".getBytes());
        Mockito.when(utils.convert(anyString(), any())).thenThrow(new RuntimeException());

        Assertions.assertThrows(SystemException.class, () -> shaEventMessageListener.onMessage(message));
    }

    @Test
    void onMessage_EcpdIdNotPresent() {
        Message<GenericRecord> message = Mockito.mock(Message.class);
        Mockito.when(message.getData()).thenReturn("{\"field\": \"value\"}".getBytes());

        shaEventMessageListener.onMessage(message);

        Mockito.verifyNoInteractions(profIleManager);
        Mockito.verifyNoInteractions(utils);
        Mockito.verifyNoInteractions(kafkaTemplate);
    }

    @Test
    void onMessage_SensitivityCheckDone() {
        Message<GenericRecord> message = Mockito.mock(Message.class);
        Mockito.when(message.getData()).thenReturn("{\"ecpd_profile_id\": \"ecpdId\"}".getBytes());

        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("ecpdId");
        Mockito.when(utils.convert(anyString(), any())).thenReturn(event);

        SensitiveProfileManager.SensitiveResponse response = new SensitiveProfileManager.SensitiveResponse();
        response.setSensitive(true);
        Mockito.when(profIleManager.getSensitiveAccount(anyString())).thenReturn(response);

        shaEventMessageListener.onMessage(message);

        Mockito.verifyNoInteractions(utils);
        Mockito.verifyNoInteractions(kafkaTemplate);
    }

    @Test
    void onMessage_SendMessageSuccess() throws ExecutionException, InterruptedException {
        Message<GenericRecord> message = Mockito.mock(Message.class);
        Mockito.when(message.getData()).thenReturn("{\"ecpd_profile_id\": \"ecpdId\"}".getBytes());

        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("ecpdId");
        Mockito.when(utils.convert(anyString(), any())).thenReturn(event);

        SensitiveProfileManager.SensitiveResponse response = new SensitiveProfileManager.SensitiveResponse();
        response.setSensitive(false);
        Mockito.when(profIleManager.getSensitiveAccount(anyString())).thenReturn(response);

        ProducerRecord<String, String> producerRecord = Mockito.mock(ProducerRecord.class);
        Mockito.when(utils.returnHeaders(anyString())).thenReturn(new ArrayList<>());
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.complete(Mockito.mock(SendResult.class));
        Mockito.when(kafkaTemplate.send(any())).thenReturn(future);

        shaEventMessageListener.onMessage(message);

        Mockito.verify(utils).sendMessageAsync(producerRecord, anyString(), anyString(), anyString(), anyString(), anyChar(), anyString());
    }

    @Test
    void onMessage_SendMessageException() throws ExecutionException, InterruptedException {
        Message<GenericRecord> message = Mockito.mock(Message.class);
        Mockito.when(message.getData()).thenReturn("{\"ecpd_profile_id\": \"ecpdId\"}".getBytes());

        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("ecpdId");
        Mockito.when(utils.convert(anyString(), any())).thenReturn(event);

        SensitiveProfileManager.SensitiveResponse response = new SensitiveProfileManager.SensitiveResponse();
        response.setSensitive(false);
        Mockito.when(profIleManager.getSensitiveAccount(anyString())).thenReturn(response);

        ProducerRecord<String, String> producerRecord = Mockito.mock(ProducerRecord.class);
        Mockito.when(utils.returnHeaders(anyString())).thenReturn(new ArrayList<>());
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.completeExceptionally(new RuntimeException());
        Mockito.when(kafkaTemplate.send(any())).thenReturn(future);

        shaEventMessageListener.onMessage(message);

        Mockito.verify(failedMessageService).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar(), anyString(), anyString());
    }

    @Test
    void onMessage_GenericException() {
        Message<GenericRecord> message = Mockito.mock(Message.class);
        Mockito.when(message.getData()).thenReturn("{\"ecpd_profile_id\": \"ecpdId\"}".getBytes());
        Mockito.when(utils.convert(anyString(), any())).thenThrow(new RuntimeException());

        shaEventMessageListener.onMessage(message);

        Mockito.verify(failedMessageService).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar(), anyString(), anyString());
    }
}
```