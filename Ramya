public static class CsvToJsonNestedHierarchyTransformer implements FlatMapFunction<String, String> {
    private String currentObjectName;
    private JsonObject currentObject;
    private List<JsonObject> resultList;

    @Override
    public void flatMap(String input, Collector<String> collector) throws Exception {
        String[] arr = input.split(",");
        String objectName = arr[0].trim();

        if (!objectName.isEmpty()) {
            // New object encountered
            if (currentObject != null) {
                resultList.add(currentObject); // Add the previous object's JSON to the result list
            }

            currentObjectName = objectName;
            currentObject = new JsonObject();
            resultList = new ArrayList<>();

            currentObject.addProperty("ObjectName", currentObjectName);
        }

        // Process data within the object
        if (arr.length > 1) {
            String key = arr[1].trim();
            String value = arr[2].trim();

            if (value.equals("|")) {
                // Subsection header, skip
                return;
            }

            if (value.startsWith("min") || value.startsWith("max") || value.startsWith("average")) {
                // Handle nested metrics
                String metricType = value.substring(0, value.indexOf(" "));
                JsonObject metricObject = new JsonObject();
                metricObject.addProperty("Min", arr[3].trim());
                metricObject.addProperty("Average", arr[4].trim());
                metricObject.addProperty("Max", arr[5].trim());
                metricObject.addProperty("Cumulative Counter Value", arr[6].trim());

                currentObject.add(key, metricObject);
            } else {
                // Handle regular key-value pairs
                currentObject.addProperty(key, value);
            }
        }
    }

    @Override
    public void close() throws Exception {
        if (currentObject != null) {
            resultList.add(currentObject); // Add the last object's JSON to the result list
        }

        for (JsonObject obj : resultList) {
            collector.collect(obj.toString());
        }
    }
}
