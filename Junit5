import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class FlinkClusterUploadJobControllerTest {

    private RestTemplate restTemplate = new RestTemplate();

    // Positive Scenario: Test uploading a job to Flink Cluster
    @Test
    public void testJobUpload() {
        String inputFilePath = "job.jar";
        String topicName = "topic";
        String bootstrapServerUrl = "bootstrapServerUrl";
        
        String url = "http://localhost:8081/Jars/upload";
        
        // Build the URL with query parameters
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url)
                .queryParam("input", inputFilePath)
                .queryParam("topic", topicName)
                .queryParam("bootstrapServer", bootstrapServerUrl);
        
        // Make the POST request to upload the job
        ResponseEntity<String> response = restTemplate.postForEntity(builder.toUriString(), null, String.class);
        
        // Verify the response status and body
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getBody().contains("Job uploaded successfully"));
    }
}



Dependencies to be added to pom.xml file:

```

org.springframework.boot
spring-boot-starter-web


org.springframework.boot
spring-boot-starter-test
test

```

Import statements:

```
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
```

Positive Scenario Test Case Code:

```
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class JobUploadControllerTest {

@Autowired
private TestRestTemplate restTemplate;

@Test
public void testJobUpload() {
String url = "http://localhost:8081/Jars/upload?input=inputFilePath&topic=topicName&bootstrapServer=bootstrapServerUrl";
ResponseEntity response = restTemplate.postForEntity(url, null, String.class);
Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
Assertions.assertTrue(response.getBody().contains("Job uploaded successfully."));
}
}
```

Negative Scenario Test Case Code 1: Invalid input file path

```
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class JobUploadControllerTest {

@Autowired
private TestRestTemplate restTemplate;

@Test
public void testJobUploadInvalidInputFilePath() {
String url = "http://localhost:8081/Jars/upload?input=invalidFilePath&topic=topicName&bootstrapServer=bootstrapServerUrl";
ResponseEntity response = restTemplate.postForEntity(url, null, String.class);
Assertions.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
Assertions.assertTrue(response.getBody().contains("Invalid input file path."));
}
}
```

Negative Scenario Test Case Code 2: Invalid topic name

```
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class JobUploadControllerTest {

@Autowired
private TestRestTemplate restTemplate;

@Test
public void testJobUploadInvalidTopicName() {
String url = "http://localhost:8081/Jars/upload?input=inputFilePath&topic=invalidTopicName&bootstrapServer=bootstrapServerUrl";
ResponseEntity response = restTemplate.postForEntity(url, null, String.class);
Assertions.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
Assertions.assertTrue(response.getBody().contains("Invalid topic name."));
}
}
```

Negative Scenario Test Case Code 3: Invalid bootstrap server URL

```
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class JobUploadControllerTest {

@Autowired
private TestRestTemplate restTemplate;

@Test
public void testJobUploadInvalidBootstrapServerUrl() {
String url = "http://localhost:8081/Jars/upload?input=inputFilePath&topic=topicName&bootstrapServer=invalidBootstrapServerUrl";
ResponseEntity response = restTemplate.postForEntity(url, null, String.class);
Assertions.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
Assertions.assertTrue(response.getBody().contains("Invalid bootstrap server URL."));
}
}
```