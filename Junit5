To achieve 100% code coverage for the classes `CommonWrapperController` and `CircuitDetailsProvider`, we need to create JUnit 5 test cases that cover all paths, including try-catch blocks. Here's an example of how you might structure these tests using JUnit 5 and Mockito for mocking dependencies.

### Test cases for `CommonWrapperController`

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.util.NestedServletException;

import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

@ExtendWith(MockitoExtension.class)
public class CommonWrapperControllerTest {

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @InjectMocks
    private CommonWrapperController commonWrapperController;

    private MockMvc mockMvc;

    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup(commonWrapperController).build();
    }

    @Test
    void testGetClrGraphicsSuccess() throws Exception {
        String circuitId = "testCircuitId";
        String sourceSys = "sourceSys";
        String cnd = "Y";
        String phyModel = "phyModel";
        String expectedResponse = "expected response";

        when(clrGraphicsService.getClrGraphics(anyString(), anyString(), anyString(), anyString()))
                .thenReturn(expectedResponse);

        String response = commonWrapperController.getClrGraphics(
                URLDecoder.decode(circuitId, StandardCharsets.UTF_8.toString()), 
                sourceSys, 
                cnd, 
                phyModel
        );

        assertEquals(expectedResponse, response);
    }

    @Test
    void testGetClrGraphicsWithException() {
        String circuitId = "testCircuitId%";
        String sourceSys = "sourceSys";
        String cnd = null;
        String phyModel = "phyModel";

        when(clrGraphicsService.getClrGraphics(anyString(), anyString(), anyString(), anyString()))
                .thenReturn("");

        assertDoesNotThrow(() -> {
            commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);
        });
    }
}
```

### Test cases for `CircuitDetailsProvider`

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Test
    void testGetCircuitDetailsSuccess() {
        String circuitId = "123";
        String phyModel = "model1";
        String expectedJsonResponse = "{\"someKey\":\"someValue\"}";

        when(restClientUtil.callEndpoint(anyString(), any(), anyMap()))
                .thenReturn(expectedJsonResponse);

        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, phyModel);

        assertNotNull(response);
        // Additional assertions can be added based on expected CircuitDetailResponse contents
    }

    @Test
    void testGetCircuitDetailsNoResponse() {
        String circuitId = "123";
        String phyModel = "model1";

        when(restClientUtil.callEndpoint(anyString(), any(), anyMap()))
                .thenReturn(null);

        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, phyModel);

        assertNull(response);
    }
}
```

### Key Points:
- **Mocking**: We use Mockito to mock dependencies (`ClrGraphicsService` and `RestClientUtil`), allowing us to simulate different behaviors and exceptions.
- **Exception Handling**: We ensure that the `try-catch` block in `CommonWrapperController` is covered by testing with inputs that will cause URL decoding issues.
- **Assertions**: We use `assertEquals`, `assertNotNull`, and `assertNull` to verify expected outcomes.
- **Setup**: The `MockMvc` setup helps in testing Spring MVC controllers.

Make sure that the `CircuitDetailResponse`, `ClrGraphicsService`, and `RestClientUtil` classes/interfaces are correctly defined in your project for these test cases to work. Adjust the test data and assertions according to the actual behavior and expected responses of your application.