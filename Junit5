To achieve 100% code coverage for the `AccountEcpdStoreController` class, you need to write JUnit 5 test cases that cover all the endpoints within the controller. Since the controller relies on the `AccountEcpdService`, you can use mocking to simulate the behavior of the service. Below is an example of how you can implement these test cases using JUnit 5 and Mockito:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;
import static org.springframework.http.MediaType.APPLICATION_JSON;

@RunWith(MockitoExtension.class)
public class AccountEcpdStoreControllerTest {

    @InjectMocks
    private AccountEcpdStoreController accountEcpdStoreController;

    @Mock
    private AccountEcpdService accountService;

    private WebTestClient webTestClient;

    @BeforeEach
    public void setup() {
        webTestClient = WebTestClient.bindToController(accountEcpdStoreController).build();
    }

    @Test
    public void testGetAllAccountEcpdStore() {
        when(accountService.getAllAccountEcpds()).thenReturn(Flux.just("Ecpd1", "Ecpd2"));

        webTestClient.get().uri("/account-ecpd-store/all")
                .accept(APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBodyList(String.class)
                .hasSize(2)
                .contains("Ecpd1", "Ecpd2");
    }

    @Test
    public void testGetEcpdByAcctId() {
        when(accountService.getEcpdByAcctId(anyString())).thenReturn(Mono.just("Ecpd1"));

        webTestClient.get().uri("/account-ecpd-store/account/{acountid}", "123")
                .accept(APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(String.class)
                .isEqualTo("Ecpd1");
    }

    @Test
    public void testGetCount() {
        when(accountService.accountEcpdStoreCount()).thenReturn(Mono.just(2L));

        webTestClient.get().uri("/account-ecpd-store/count")
                .accept(APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(Long.class)
                .isEqualTo(2L);
    }
}
```

### Explanation:
1. **Setup**: The `WebTestClient` is set up to test the reactive endpoints of the `AccountEcpdStoreController`. The `accountService` is mocked using Mockito.

2. **Test `getAllAccountEcpdStore`**: This test case mocks the `getAllAccountEcpds` method of the service to return a `Flux` with two elements and verifies the response.

3. **Test `getEcpdByAcctId`**: This test case mocks the `getEcpdByAcctId` method to return a `Mono` with a single element and verifies that the correct element is returned for a given account ID.

4. **Test `getCount`**: This test case mocks the `accountEcpdStoreCount` method to return a `Mono` with a count of 2 and verifies the response.

This setup ensures that all the endpoints in the `AccountEcpdStoreController` are covered, and the expected behavior is tested.