To achieve 100% code coverage for the `convert(MtnInsightsAttributes[] listKeyAttributes)` and `convertEcpd(MtnInsightsAttributes attr)` methods, we will need to write JUnit 5 test cases that simulate the conditions under which the exceptions are thrown within these methods. Below is the test case implementation.

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

public class MtnInsightsManagerTest {

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    private MtnInsightsAttributes mockAttr;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mockAttr = mock(MtnInsightsAttributes.class);
    }

    @Test
    public void testConvertListKeyAttributesThrowsSystemException() throws Exception {
        // Arrange
        MtnInsightsAttributes[] listKeyAttributes = new MtnInsightsAttributes[]{mockAttr, mockAttr};

        // Simulate JsonProcessingException
        when(mockAttr.getEcpdId()).thenThrow(new JsonProcessingException("Mock exception") {});

        // Act & Assert
        Exception exception = assertThrows(SystemException.class, () -> {
            mtnInsightsManager.convert(listKeyAttributes);
        });

        // Verify that the exception message is as expected
        assertEquals("Mock exception", exception.getMessage());
    }

    @Test
    public void testConvertEcpdThrowsSystemException() throws Exception {
        // Arrange
        when(mockAttr.getEcpdId()).thenReturn("someEcpdId");
        when(mockAttr.getMtn()).thenReturn("someMtn");

        // Simulate JsonProcessingException
        when(mockAttr.getInsightValues()).thenThrow(new JsonProcessingException("Mock exception") {});

        // Act & Assert
        Exception exception = assertThrows(SystemException.class, () -> {
            mtnInsightsManager.convertEcpd(mockAttr);
        });

        // Verify that the exception message is as expected
        assertEquals("Mock exception", exception.getMessage());
    }

    @Test
    public void testConvertEcpdHandlesNormalFlow() throws Exception {
        // Arrange
        when(mockAttr.getEcpdId()).thenReturn("someEcpdId");
        when(mockAttr.getMtn()).thenReturn("someMtn");
        when(mockAttr.getInsightValues()).thenReturn("someValue");
        when(mockAttr.getUpdateBy()).thenReturn("user");
        when(mockAttr.getUpdateTs()).thenReturn(new Date());

        // Act
        EcpdByKeyEntity entity = mtnInsightsManager.convertEcpd(mockAttr);

        // Assert
        assertNotNull(entity);
        assertEquals("someEcpdId", entity.getPk().getEcpdId());
        assertEquals("someMtn", entity.getPk().getMtn());
    }

    @Test
    public void testConvertListKeyAttributesHandlesNormalFlow() throws Exception {
        // Arrange
        MtnInsightsAttributes[] listKeyAttributes = new MtnInsightsAttributes[]{mockAttr};

        // Simulate normal behavior
        when(mockAttr.getEcpdId()).thenReturn("someEcpdId");
        when(mockAttr.getMtn()).thenReturn("someMtn");
        when(mockAttr.getInsightValues()).thenReturn("someValue");

        // Act
        List<MtnInsightsEntity> entities = mtnInsightsManager.convert(listKeyAttributes);

        // Assert
        assertNotNull(entities);
        assertEquals(1, entities.size());
        assertEquals("someEcpdId", entities.get(0).getPk().getEcpdId());
        assertEquals("someMtn", entities.get(0).getPk().getMtn());
    }
}
```

### Explanation:
1. **Setup**: The `@BeforeEach` method initializes mocks and sets up the test environment.

2. **Test for `convert(MtnInsightsAttributes[] listKeyAttributes)`**:
   - A test case is created to simulate a `JsonProcessingException`. The test asserts that the `SystemException` is thrown with the expected message.

3. **Test for `convertEcpd(MtnInsightsAttributes attr)`**:
   - Another test case simulates a `JsonProcessingException` when calling `getInsightValues()`. The test verifies that the `SystemException` is thrown correctly.

4. **Normal Flow Tests**: 
   - Additional tests are included to ensure that both methods operate correctly when provided with valid input, confirming that they do not throw exceptions in those scenarios.

This code will help achieve the desired test coverage and ensure that the exception handling in the methods is adequately tested.