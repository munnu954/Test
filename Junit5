Apologies for the confusion. Here's an additional test case to cover the missed branch of the `filterAccountNum()` method:

```java
@Test
void testFilterAccountNumWithLeadingZeros() {
    assertEquals("12345", invokePrivateMethod("filterAccountNum", eventsMessageListener, "000012345-67"));
}
```

This test case covers the scenario where the account number has leading zeros.

Here's the explanation of the test case:

1. The `testFilterAccountNumWithLeadingZeros()` method is the new test case.
2. Inside the test case, the `invokePrivateMethod()` is used to call the private `filterAccountNum()` method.
3. The input parameter `"000012345-67"` is passed to the `filterAccountNum()` method.
4. The expected output is `"12345"`, which is asserted using the `assertEquals()` method.

This test case, along with the previous test cases, should provide 100% branch coverage for the `filterAccountNum()` method.

The complete set of test cases now looks like this:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.lang.reflect.Method;
import org.junit.jupiter.api.Test;
import org.springframework.util.ReflectionUtils;

class EventsMessageListenerTest {

    private EventsMessageListener eventsMessageListener = new EventsMessageListener();

    @Test
    void testFilterAccountNum() {
        assertEquals("12345", invokePrivateMethod("filterAccountNum", eventsMessageListener, "12345-67"));
        assertEquals("12345", invokePrivateMethod("filterAccountNum", eventsMessageListener, "00012345"));
    }

    @Test
    void testFilterAccountNumWithNoHyphen() {
        assertEquals("12345", invokePrivateMethod("filterAccountNum", eventsMessageListener, "12345"));
    }

    @Test
    void testFilterAccountNumWithLeadingZeros() {
        assertEquals("12345", invokePrivateMethod("filterAccountNum", eventsMessageListener, "000012345-67"));
    }

    private Object invokePrivateMethod(String methodName, Object object, Object... args) {
        try {
            Method method = EventsMessageListener.class.getDeclaredMethod(methodName, getParameterTypes(args));
            ReflectionUtils.makeAccessible(method);
            return method.invoke(object, args);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private Class<?>[] getParameterTypes(Object... args) {
        Class<?>[] parameterTypes = new Class<?>[args.length];
        for (int i = 0; i < args.length; i++) {
            parameterTypes[i] = args[i].getClass();
        }
        return parameterTypes;
    }
}
```

The new test case `testFilterAccountNumWithLeadingZeros()` covers the scenario where the account number has leading zeros. This, along with the previous test cases, should provide 100% branch coverage for the `filterAccountNum()` method.