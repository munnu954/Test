Here is an example of how you can write JUnit5 test cases covering the specific if block in the `removeOrloadRule` method of the `MessageReaderService` class without making the method public:

```java
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.lang.reflect.Field;
import java.util.HashMap;

public class MessageReaderServiceTest {

    @Test
    public void testRemoveOrloadRule() throws Exception {
        MessageReaderService messageReaderService = new MessageReaderService();
        RulesLoadingService mockRulesLoadingService = Mockito.mock(RulesLoadingService.class);
        HashMap<Long, Object> ruleMap = new HashMap<>();
        ruleMap.put(123L, "testRule");
        Mockito.when(mockRulesLoadingService.getRuleMap()).thenReturn(ruleMap);

        Field rulesLoadingServiceField = MessageReaderService.class.getDeclaredField("rulesLoadingService");
        rulesLoadingServiceField.setAccessible(true);
        rulesLoadingServiceField.set(messageReaderService, mockRulesLoadingService);

        HashMap<String, Object> ruleUpdateMap = new HashMap<>();
        ruleUpdateMap.put("ruleid", 123L);

        messageReaderService.removeOrloadRule(ruleUpdateMap);

        // Verify if the logger.info statement is called
        // This is just an assertion for the logging statement, you can add more meaningful assertions as per your logic
        Mockito.verify(messageReaderService.logger).info(Mockito.anyString());
    }
}
```

In this test case, we are creating an instance of `MessageReaderService`, mocking the `RulesLoadingService` dependency, and setting it using reflection. We then create a dummy `ruleUpdateMap` and call the `removeOrloadRule` method. Lastly, we verify if the `logger.info` statement is called.

Make sure to include appropriate imports and annotations as per your project setup. Also, please adjust the test case according to your specific requirements and logic.