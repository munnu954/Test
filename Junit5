import com.verizon.vbg.ledger.config.DataSourceConfig;
import com.verizon.vbg.ledger.config.DataSourceModal;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;

import javax.sql.DataSource;

@ExtendWith(MockitoExtension.class)
class DataSourceConfigTest {

    @Mock
    private DataSourceModal dataSourceModal;

    @Mock
    private EntityManagerFactoryBuilder builder;

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @Test
    void testFalloutDataSource() {
        Mockito.when(dataSourceModal.getUrl()).thenReturn("jdbc:mysql://localhost:3306/db");
        Mockito.when(dataSourceModal.getUsername()).thenReturn("user");
        Mockito.when(dataSourceModal.getPassword()).thenReturn("password");
        Mockito.when(dataSourceModal.getDriver()).thenReturn("com.mysql.cj.jdbc.Driver");

        DataSource dataSource = dataSourceConfig.falloutDataSource();
        Assertions.assertNotNull(dataSource);
        Assertions.assertTrue(dataSource instanceof DriverManagerDataSource);
        Assertions.assertEquals("jdbc:mysql://localhost:3306/db", ((DriverManagerDataSource) dataSource).getUrl());
        Assertions.assertEquals("user", ((DriverManagerDataSource) dataSource).getUsername());
        Assertions.assertEquals("password", ((DriverManagerDataSource) dataSource).getPassword());
        Assertions.assertEquals("com.mysql.cj.jdbc.Driver", ((DriverManagerDataSource) dataSource).getDriverClassName());
    }

    @Test
    void testFalloutEntityManagerFactory() {
        Mockito.when(builder.dataSource(Mockito.any(DataSource.class))).thenReturn(builder);
        Mockito.when(builder.packages("com.verizon.vbg.ledger.entity")).thenReturn(builder);
        Mockito.when(builder.persistenceUnit("fallout-db")).thenReturn(builder);
        Mockito.when(builder.build()).thenReturn(null);

        dataSourceConfig.entityManagerFactoryBean(builder, dataSourceConfig.falloutDataSource());
        Mockito.verify(builder, Mockito.times(1)).dataSource(Mockito.any(DataSource.class));
        Mockito.verify(builder, Mockito.times(1)).packages("com.verizon.vbg.ledger.entity");
        Mockito.verify(builder, Mockito.times(1)).persistenceUnit("fallout-db");
        Mockito.verify(builder, Mockito.times(1)).build();
    }

    @Test
    void testFalloutTransactionManager() {
        Mockito.when(dataSourceConfig.entityManagerFactoryBean(Mockito.any(EntityManagerFactoryBuilder.class), Mockito.any(DataSource.class))).thenReturn(null);
        JpaTransactionManager transactionManager = dataSourceConfig.falloutTransactionManager(dataSourceConfig.entityManagerFactoryBean(builder, dataSourceConfig.falloutDataSource()));
        Assertions.assertNotNull(transactionManager);
    }
}