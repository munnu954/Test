import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(MockitoExtension.class)
public class AlarmPostingUtilsTest {

    @InjectMocks
    private AlarmPostingUtils alarmPostingUtils;

    @Mock
    private Logger LOG;

    @Test
    void parseWithMissingAttribute() throws Exception {
        // Arrange
        String expression = "%attribute1:missingAttribute%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("attribute1", "someValue");

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("%attribute1:missingAttribute%", result);
    }

    @Test
    void parseWithMissingAttributeInArray() throws Exception {
        // Arrange
        String expression = "%attribute1:names[0]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("attribute1", "someValue");

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("%attribute1:names[0]%", result);
    }

    @Test
    void parseWithMissingArrayElement() throws Exception {
        // Arrange
        String expression = "%attribute1:names[2]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("attribute1", "someValue");
        srcMap.put("names", List.of("John", "Jane"));

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("%attribute1:names[2]%", result);
    }

    @Test
    void parseWithMissingNestedAttribute() throws Exception {
        // Arrange
        String expression = "%attribute1:details.unknown%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("attribute1", "someValue");
        srcMap.put("details", Map.of("name", "John"));

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("%attribute1:details.unknown%", result);
    }

    @Test
    void parseWithInvalidArrayIndex() throws Exception {
        // Arrange
        String expression = "%attribute1:names[-1]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("attribute1", "someValue");
        srcMap.put("names", List.of("John", "Jane"));

        // Act
        String result = alarmPostingUtils.parse(expression, srcMap, "");

        // Assert
        assertEquals("%attribute1:names[-1]%", result);
    }
}