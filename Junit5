To write JUnit 5 test cases that cover the false condition of the `catch (JsonProcessingException e)` block, we need to simulate a scenario where `AlarmPostingConstants.getObjectMapper().writeValueAsString(obj)` throws a `JsonProcessingException`.

Here is an example of how to achieve this using Mockito to mock the behavior of the `ObjectMapper`:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private ObjectMapper objectMapper;

    @BeforeEach
    public void setUp() {
        // Set the static ObjectMapper in AlarmPostingConstants to the mocked one
        AlarmPostingConstants.setObjectMapper(objectMapper);
    }

    @Test
    public void testCheckIfJsonValueCatchBlock() throws Exception {
        // Arrange
        Object invalidObj = new Object();
        doThrow(new JsonProcessingException("Mocked Exception") {}).when(objectMapper).writeValueAsString(invalidObj);

        // Act
        boolean result = alarmRepository.checkIfJsonValue(invalidObj);

        // Assert
        assertFalse(result, "Expected the result to be false due to JsonProcessingException.");
    }
}
```

### Explanation:

1. **Test Class Setup**:
   - We use the `@ExtendWith(MockitoExtension.class)` annotation to enable Mockito support in JUnit 5.
   - We use the `@InjectMocks` annotation to create an instance of `AlarmRepositoryImpl`.
   - We use the `@Mock` annotation to create a mock `ObjectMapper`.

2. **Setup for ObjectMapper Mock**:
   - We configure the static `ObjectMapper` in `AlarmPostingConstants` to use the mocked one in the `@BeforeEach` setup method. This ensures that any call to `AlarmPostingConstants.getObjectMapper()` will return our mock.

3. **Test for Catch Block**:
   - We create an invalid object (`invalidObj`) that will cause `JsonProcessingException` when `writeValueAsString` is called.
   - We use Mockito's `doThrow` to make the `objectMapper.writeValueAsString(invalidObj)` throw a `JsonProcessingException`.
   - We call `checkIfJsonValue` with the invalid object.
   - We assert that the result should be `false`, as the catch block should handle the exception and set `isJson` to false.

This test ensures that the catch block for `JsonProcessingException` is executed, providing 100% code coverage for the `checkIfJsonValue` method.