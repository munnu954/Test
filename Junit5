To achieve 100% code coverage for the conditional statement `if (null != prevTrail.getTarget() && !prevTrail.getTarget().equalsIgnoreCase(CommonWrapperConstants.DOUBLE_DASH))`, we need to consider the following scenarios:

1. `prevTrail.getTarget()` is not null and not equal to `CommonWrapperConstants.DOUBLE_DASH`. (Already covered)
2. `prevTrail.getTarget()` is not null and equal to `CommonWrapperConstants.DOUBLE_DASH`.
3. `prevTrail.getTarget()` is null.

Here are the additional test cases to ensure all branches are covered:

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class PathProcessorTrailTargetTest {

    private PathProcessor pathProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;
    private List<ClrComponent> clrComponentList;

    @BeforeEach
    public void setUp() {
        pathProcessor = PathProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = mock(Map.class);
        ukCount = new AtomicInteger(0);
        sourceSys = "testSource";
        clrComponentList = new ArrayList<>();
    }

    @Test
    public void testProcess_TrailTargetNotNullAndNotDoubleDash() {
        // Setup ClrComponents
        ClrComponent prevClrComponent = createTrailClrComponent(true);
        ClrComponent currentClrComponent = createClrComponent(CommonWrapperConstants.CIRCUIT);

        clrComponentList.add(prevClrComponent);
        clrComponentList.add(currentClrComponent);

        Link link = new Link();
        link.setTarget("validTarget");
        links.add(link);

        // Call the method
        pathProcessor.process(nodes, links, currentClrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify the result
        assertEquals(2, links.size());
        assertEquals("validTarget", links.get(1).getSource());
    }

    @Test
    public void testProcess_TrailTargetNotNullAndDoubleDash() {
        // Setup ClrComponents
        ClrComponent prevClrComponent = createTrailClrComponent(true);
        ClrComponent currentClrComponent = createClrComponent(CommonWrapperConstants.CIRCUIT);

        clrComponentList.add(prevClrComponent);
        clrComponentList.add(currentClrComponent);

        Link link = new Link();
        link.setTarget(CommonWrapperConstants.DOUBLE_DASH); // Target is explicitly DOUBLE_DASH
        links.add(link);

        // Call the method
        pathProcessor.process(nodes, links, currentClrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify the result
        assertEquals(2, links.size());
        assertNotEquals(CommonWrapperConstants.DOUBLE_DASH, links.get(1).getSource());
    }

    @Test
    public void testProcess_TrailTargetIsNull() {
        // Setup ClrComponents
        ClrComponent prevClrComponent = createTrailClrComponent(true);
        ClrComponent currentClrComponent = createClrComponent(CommonWrapperConstants.CIRCUIT);

        clrComponentList.add(prevClrComponent);
        clrComponentList.add(currentClrComponent);

        Link link = new Link(); // Target is null
        links.add(link);

        // Call the method
        pathProcessor.process(nodes, links, currentClrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify the result
        assertEquals(2, links.size());
        assertNotEquals(CommonWrapperConstants.DOUBLE_DASH, links.get(1).getSource());
    }

    private ClrComponent createClrComponent(String type) {
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(type);

        CircuitComp circuitComp = new CircuitComp();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("testCircuit");
        circuitComp.getCircuitInfo().add(circuitInfo);
        clrComponent.getCircuitComp().add(circuitComp);

        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("testPortId");
        equipmentComp.getPortRef().add(portRef);
        clrComponent.getEquipmentComp().add(equipmentComp);

        return clrComponent;
    }

    private ClrComponent createTrailClrComponent(boolean isNotNull) {
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.TRAIL);

        if (isNotNull) {
            CircuitComp circuitComp = new CircuitComp();
            CircuitInfo circuitInfo = new CircuitInfo();
            circuitInfo.setCircuitName("testTrail");
            circuitComp.getCircuitInfo().add(circuitInfo);
            clrComponent.getCircuitComp().add(circuitComp);
        }

        return clrComponent;
    }
}
```

### Explanation:
- **Test Cases:**
  - `testProcess_TrailTargetNotNullAndNotDoubleDash`: Tests the scenario when the target is valid and not equal to `CommonWrapperConstants.DOUBLE_DASH`.
  - `testProcess_TrailTargetNotNullAndDoubleDash`: Tests when the target is explicitly set to `CommonWrapperConstants.DOUBLE_DASH`.
  - `testProcess_TrailTargetIsNull`: Tests when the target is `null`.

These test cases aim to ensure all logical branches within the `if` condition are exercised, covering scenarios where the `prevTrail.getTarget()` can be non-null and not `DOUBLE_DASH`, exactly `DOUBLE_DASH`, and `null`. Adjustments may be necessary according to your specific implementation and testing environment.