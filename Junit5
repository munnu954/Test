import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.util.StringUtils;

import java.util.Arrays;

@ExtendWith(MockitoExtension.class)
public class EcpdFeedBatchProcessorTest {

    @Mock
    private SensitivityTokenService sensitivityTokenService;

    @InjectMocks
    private EcpdFeedBatchProcessor processor;

    private EcpdGSAMSensitiveProfile profile;

    @BeforeEach
    void setUp() {
        profile = new EcpdGSAMSensitiveProfile();
        profile.setSensitivityToken("token123");
    }

    @Test
    void testProcess_withValidSensitivityToken() {
        when(sensitivityTokenService.getSensitiveTokenList()).thenReturn(Arrays.asList("token123", "token456"));

        GSAMSensitiveProfiles result = processor.process(profile);

        assertNotNull(result);
        assertEquals("token123", result.getSensitivityToken());
    }

    @Test
    void testProcess_withInvalidSensitivityToken() {
        when(sensitivityTokenService.getSensitiveTokenList()).thenReturn(Arrays.asList("token456", "token789"));

        GSAMSensitiveProfiles result = processor.process(profile);

        assertNull(result);
    }

    @Test
    void testProcess_withEmptySensitivityToken() {
        profile.setSensitivityToken("");

        when(sensitivityTokenService.getSensitiveTokenList()).thenReturn(Arrays.asList("token123", "token456"));

        GSAMSensitiveProfiles result = processor.process(profile);

        assertNull(result);
    }
}
