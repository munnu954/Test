import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.util.Collector;
import org.json.JSONObject;

public class CsvToJsonRCSMESSAGINGTransformer implements FlatMapFunction<String, String> {
    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());

        for (String str : lines) {
            String[] arr = str.split(",");

            JSONObject obj = new JSONObject();
            boolean validLine = true;

            // Using TreeMap to store keys in sorted order
            TreeMap<Integer, String> sortedMap = new TreeMap<>();

            for (int i = 0; i < arr.length; i++) {
                try {
                    // Assuming the keys are integer indices
                    int key = Integer.parseInt(arr[i].trim());
                    String value = arr[i + 1].trim().replace("target.*\\**", "replacement **");

                    sortedMap.put(key, value);
                    i++; // Skip the next element since it is the corresponding value
                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
                    validLine = false;
                    break;
                }
            }

            // Populate JSON object with sorted key-value pairs
            for (Map.Entry<Integer, String> entry : sortedMap.entrySet()) {
                obj.put(String.valueOf(entry.getKey()), entry.getValue());
            }

            // Add additional key-value pairs or modifications if needed
            obj.put("name", "FILENAME"); // Example additional key-value pair
            // ...

            if (validLine) {
                this.successIntCounter.add(1);
                collector.collect(obj.toString());
            } else {
                this.failureIntCounter.add(1);
                // Handle invalid lines if necessary
            }
        }
    }
}