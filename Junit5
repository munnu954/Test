To test the `catch(SystemException e)` block in the `saveEventLedger` method of the `EventLedgerServiceManager` class, we need to simulate a scenario where a `SystemException` is thrown during the execution of the `saveToELTable` method. We can achieve this by using Mockito to mock the behavior of the `eventLedgerRepository` or any other method that might throw a `SystemException`.

Here's an example of how you might write the JUnit 5 test case for this scenario:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.util.ReflectionTestUtils;

class EventLedgerServiceManagerTest {

    @Mock
    private EventLedgerRepository eventLedgerRepository;

    @Mock
    private EventLedgerValidator validator;

    @InjectMocks
    private EventLedgerServiceManager eventLedgerServiceManager;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(eventLedgerServiceManager, "insertToEventLedger", "true");
    }

    @Test
    void testSaveEventLedger_throwsSystemException() throws Exception {
        // Arrange
        EventLedgerRequest request = createRequest(EventLedgerConstants.EVENT_CATEGORY_INTERACTIONS, EventLedgerConstants.EVENT_CHANNEL_MYBIZ);
        
        // Mock the behavior to throw SystemException when saveToELTable is called
        doThrow(new SystemException("System error")).when(eventLedgerRepository).insert(any(EventLedgerEntity.class));

        // Act
        EventLedgerResponse response = eventLedgerServiceManager.saveEventLedger(request);

        // Assert
        assertEquals(FAILURE_CODE, response.getStatus().getCode());
        assertEquals("System error", response.getStatus().getMessage());
    }

    private EventLedgerRequest createRequest(String eventCategory, String eventChannel) {
        EventLedgerAttributes attributes = new EventLedgerAttributes();
        attributes.setEventCategory(eventCategory);
        attributes.setEventChannel(eventChannel);

        EventLedgerRequest request = new EventLedgerRequest();
        request.setKeyAttributes(attributes);
        return request;
    }
}
```

### Explanation:
- **Mocking**: We use Mockito to mock the behavior of the `eventLedgerRepository`. Specifically, we simulate a `SystemException` being thrown when the `insert` method is called.
- **Test Case `testSaveEventLedger_throwsSystemException`**: This test case sets up the request and then triggers the `saveEventLedger` method. The catch block for `SystemException` should be executed because of the mocked exception.
- **Assertion**: We verify that the response's status code matches `FAILURE_CODE` and that the message matches "System error", which is the message we used for the `SystemException`.

This test case ensures that the `catch(SystemException e)` block is executed and that the method handles the exception as expected.