@Test
public void testConvertToMtnInsights_withAggregateInsights() {
  // Mock data
  List<MtnInsightsEntity> entities = new ArrayList<>();
  MtnInsightsEntity entity = new MtnInsightsEntity();
  entity.setPk(new MtnInsightsPK("ecpdId", "mtn", "category", "mtnoutage"));
  entity.setCatagory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
  entity.setProdId("outageId");
  entity.setInsightValues("{\"key1\": \"value1\"}");
  entities.add(entity);

  String aggrCategory = entity.getCatagory();
  String aggrProdId = entity.getProdId();
  AggregateInsightsEntity aggregateInsightsEntity = new AggregateInsightsEntity();
  aggregateInsightsEntity.setPk(new AggregateInsightsPK(aggrCategory, aggrProdId, "someAggName"));
  aggregateInsightsEntity.setAggrValue("{\"outage_id\":\"oldOutageId\"}");

  // Mock AggregateInsightsRepository behavior
  AggregateInsightsRepository mockRepository = Mockito.mock(AggregateInsightsRepository.class);
  Mockito.when(mockRepository.findByPkAggrCategoryAndPkAggrProdId(aggrCategory, aggrProdId))
      .thenReturn(aggregateInsightsEntity);

  // Call the method with flag set to true
  MtnInsightsManager manager = new MtnInsightsManager(null, mockRepository, null, null, null, null);
  InsightsMtn insightsMtn = manager.convertToMtnInsights(entities, true);

  // Assertions
  Assert.assertNotNull(insightsMtn);
  Assert.assertEquals(1, insightsMtn.getCategoryInsights().length);
  Assert.assertEquals(1, insightsM
