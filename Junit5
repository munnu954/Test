import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

public class CoconutServiceVersion3Test {

    @InjectMocks
    private CoconutServiceVersion3 coconutServiceVersion3;

    @Before
    public void setUp() {
        // Initialize the mocks and inject them into CoconutServiceVersion3
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testQueryBasedOnParameter_OnlyLocationCLLI() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("locationCLLI", "ABC123");

        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        String result = (String) method.invoke(coconutServiceVersion3, params);

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'abc123'");
        assertEquals(expectedQuery, result);
    }

    @Test
    public void testQueryBasedOnParameter_OnlySiteName() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("siteName", "MySite");

        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        String result = (String) method.invoke(coconutServiceVersion3, params);

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'mysite'");
        assertEquals(expectedQuery, result);
    }

    @Test
    public void testQueryBasedOnParameter_BothLocationCLLIAndSiteName() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("locationCLLI", "ABC123");
        params.put("siteName", "MySite");

        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        String result = (String) method.invoke(coconutServiceVersion3, params);

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY +
                CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'abc123'") +
                CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'mysite'");
        assertEquals(expectedQuery, result);
    }

    @Test
    public void testQueryBasedOnParameter_NoParameters() throws Exception {
        Map<String, Object> params = new HashMap<>();

        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        String result = (String) method.invoke(coconutServiceVersion3, params);

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;
        assertEquals(expectedQuery, result);
    }
}