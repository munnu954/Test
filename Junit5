import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class AlarmOperationsAPITest {

    @InjectMocks
    private AlarmOperationsAPI alarmOperationsAPI;

    @Mock
    private RestTemplate restTemplate;

    @Test
    void testFetchTopologyTraversalDetails() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // Mocking the dependencies
        ResponseEntity<String> responseEntity = mock(ResponseEntity.class);
        when(responseEntity.getStatusCode()).thenReturn(HttpStatus.OK);
        when(restTemplate.exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class), any(Class.class))
                .thenReturn(responseEntity);

        // Create input parameters
        HashMap<String, Object> alarmTagValueMap = new HashMap<>();
        alarmTagValueMap.put("alarmIdentity", "123456");
        String componentIdReq = "COMPONENT_ID";
        String tbl = "OSSNAME";
        String tag = null;
        String limit = "100";

        // Using reflection to access the private method fetchTopologyTraversalDetails
        Method method = AlarmOperationsAPI.class.getDeclaredMethod("fetchTopologyTraversalDetails", HashMap.class, String.class, String.class, String.class, String.class);
        method.setAccessible(true);
        ResponseEntity<String> result = (ResponseEntity<String>) method.invoke(alarmOperationsAPI, alarmTagValueMap, componentIdReq, tbl, tag, limit);

        // Verify the result
        assertEquals(HttpStatus.OK, result.getStatusCode());
    }
}