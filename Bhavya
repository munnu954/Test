If you cannot modify the `RedisConfigProperties` class to add getter methods, you can still work with the existing fields by using Mockito's capability to directly access public fields. However, you need to ensure that you're accessing the fields correctly in the test setup.

Here’s how you can handle the mocking without modifying the `RedisConfigProperties` class:

### Using PowerMockito

You can use PowerMockito, which provides extended capabilities for mocking, including the ability to mock final classes and static methods, but since you just want to access public fields, we’ll simply use standard Mockito.

### Adjusted Test Class

Here’s how your test class can look without requiring changes to the `RedisConfigProperties`:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class RedisConfigCTITest {

    @InjectMocks
    private RedisConfigCTI redisConfigCTI;

    @Mock
    private RedisConfigProperties cacheProps;

    @BeforeEach
    void setUp() {
        // Directly mocking public fields of the RedisConfigProperties
        cacheProps.commandTimeout = 60000L;
        cacheProps.shutdownTimeout = 10000L;
        cacheProps.standalone = true; // Set default for standalone tests
        cacheProps.standaloneHost = "localhost";
        cacheProps.standalonePort = 6379;
        cacheProps.ioThreads = 2;
        cacheProps.compThreads = 4;
        cacheProps.master = "mymaster";
        cacheProps.node = Arrays.asList("localhost:26379");
        cacheProps.username = "user";
        cacheProps.sentinelpassword = "password";
    }

    @Test
    void testGetConnectionFactoryStandalone() {
        // Test standalone Redis configuration
        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();
        
        assertNotNull(connectionFactory);
        // Add additional assertions based on the expected state of the connection factory
    }

    @Test
    void testGetConnectionFactorySentinel() {
        // Modify properties for sentinel tests
        cacheProps.standalone = false;

        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();
        
        assertNotNull(connectionFactory);
        // Add additional assertions based on the expected state of the connection factory
    }

    @Test
    void testGetConnectionFactorySentinelWithScaleThreadsViaRuntime() {
        // Test sentinel configuration with runtime scaling
        cacheProps.scaleThreadsViaRuntime = true;

        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();
        
        assertNotNull(connectionFactory);
        // Add additional assertions based on the expected state of the connection factory
    }

    @Test
    void testGetConnectionFactorySentinelWithDefaultThreads() {
        // Test sentinel configuration with config-based scaling
        cacheProps.scaleThreadsViaRuntime = false;
        cacheProps.ioThreads = 0;
        cacheProps.compThreads = 0;

        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();
        
        assertNotNull(connectionFactory);
        // Add additional assertions based on the expected state of the connection factory
    }
    
    // Add more tests for edge cases, such as when properties are null or empty
}
```

### Key Changes:
1. **Direct Field Access**: The fields of `cacheProps` are accessed and set directly within the `setUp()` method. Since they are public, this is permitted.
2. **No Getter Methods Required**: Since you cannot modify the `RedisConfigProperties` class, this approach works around the need for getter methods.
3. **Test Isolation**: Each test can modify the properties of `cacheProps` as needed without affecting other tests.

This approach allows you to work with the existing structure of the `RedisConfigProperties` class while still achieving the desired behavior in your tests. Each test can set up its own configuration by modifying the public fields of the mocked `cacheProps` instance.