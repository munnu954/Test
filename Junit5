import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.ListTopicsOptions;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

class KafkaTopicUtilTest {

@Test
void testIskafkaTopicPresent() throws ExecutionException, InterruptedException {
// Given
String topicName = "testTopic";
String bootstrapServers = "localhost:9092";
KafkaTopicUtil.bootstarpServers = bootstrapServers;
KafkaTopicUtil kafkaTopicUtil = new KafkaTopicUtil();

AdminClient adminClient = Mockito.mock(AdminClient.class);
ListTopicsResult listTopicsResult = Mockito.mock(ListTopicsResult.class);

Mockito.when(adminClient.listTopics(Mockito.any(ListTopicsOptions.class))).thenReturn(listTopicsResult);

// Test case 1: Topic present in the list
Set<String> topicNames = new HashSet<>();
topicNames.add(topicName);
Mockito.when(listTopicsResult.names()).thenReturn(() -> topicNames.stream());

boolean result = kafkaTopicUtil.iskafkaTopicPresent(topicName);
assertTrue(result);

// Test case 2: Topic not present in the list
Set<String> emptyTopicNames = new HashSet<>();
Mockito.when(listTopicsResult.names()).thenReturn(() -> emptyTopicNames.stream());

result = kafkaTopicUtil.iskafkaTopicPresent("nonExistentTopic");
assertFalse(result);
}
}