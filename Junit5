**JUnit5 Test Case Covering Both Branches**

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.ProducerRecord;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class NetworkOutageEventsMessageListenerTest {

    @Mock
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    private NetworkOutageEventsMessageListener messageListener;

    @BeforeEach
    public void setUp() {
        messageListener = new NetworkOutageEventsMessageListener(batchLoaderUtils);
    }

    @Test
    public void testEmptyPayload() throws Exception {
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(new byte[]{});

        messageListener.onMessage(message);

        verify(batchLoaderUtils).saveFailedRecords(
                anyString(), anyString(), eq(""),
                eq(TYSConstants.NETWORK_OUTAGE.getValue()), eq('-'), eq(TYSConstants.EC_UNCATEGORIZED.getValue()),
                anyString());
    }

    @Test
    public void testJsonProcessingException() throws Exception {
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn("invalid json".getBytes());

        messageListener.onMessage(message);

        verify(batchLoaderUtils).saveFailedRecords(
                anyString(), anyString(), anyString(),
                eq(TYSConstants.NETWORK_OUTAGE.getValue()), eq('-'), eq(TYSConstants.EC_UNCATEGORIZED.getValue()),
                anyString());
    }

    @Test
    public void testKafkaSendError() throws Exception {
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn("{\"eventId\": \"123\"}".getBytes());
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("topic", "key", "payload");
        when(batchLoaderUtils.returnHeaders(anyString())).thenReturn(new ArrayList<>());

        doThrow(new RuntimeException()).when(kafkaTemplate).send(any());

        messageListener.onMessage(message);

        verify(batchLoaderUtils).saveFailedRecords(
                anyString(), anyString(), eq("{\"eventId\": \"123\"}"),
                eq(TYSConstants.NETWORK_OUTAGE.getValue()), eq('-'), eq(TYSConstants.EC_KAFKA_ERROR.getValue()),
                anyString());
    }

    @Test
    public void testSuccessfulKafkaSend() throws Exception {
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn("{\"eventId\": \"123\"}".getBytes());
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("topic", "key", "payload");
        when(batchLoaderUtils.returnHeaders(anyString())).thenReturn(new ArrayList<>());

        messageListener.onMessage(message);

        verify(kafkaTemplate).send(producerRecord);
    }
}
```