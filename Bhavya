

Feature: Testing Polling Service

Scenario: Two threads created for two space collector records present in the repository
    Given Two records in space collector repository
    When the scheduler runs
    Then verify the thread is running





import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.And;

public class PollingStepDefinitions {
    private SpaceCollector spaceCollector1;
    private SpaceCollector spaceCollector2;
    private Thread thread1;
    private Thread thread2;

    @Given("Two records in space collector repository")
    public void twoRecordsInSpaceCollectorRepository() {
        // Setting up two records in the space collector repository
        String id1 = UUID.randomUUID().toString();
        spaceCollector1 = SpaceCollector.builder()
                .id(id1)
                .port(9090)
                .username("admin1")
                .password("secret1")
                .sshPrivateKey("pk1")
                .sshPublicKey("ppk1")
                .connectionType("ssh1")
                .enabled(true)
                .inputFilePath("C:/Temp1")
                .outputFilePath("D:/Temp1")
                .build();

        String id2 = UUID.randomUUID().toString();
        spaceCollector2 = SpaceCollector.builder()
                .id(id2)
                .port(9091)
                .username("admin2")
                .password("secret2")
                .sshPrivateKey("pk2")
                .sshPublicKey("ppk2")
                .connectionType("ssh2")
                .enabled(true)
                .inputFilePath("C:/Temp2")
                .outputFilePath("D:/Temp2")
                .build();
    }

    @When("the scheduler runs")
    public void theSchedulerRuns() {
        // Starting two threads for the scheduler
        PollingServiceImpl pollingService = new PollingServiceImpl();

        thread1 = new Thread(() -> pollingService.pollDeviceDB(spaceCollector1));
        thread1.start();

        thread2 = new Thread(() -> pollingService.pollDeviceDB(spaceCollector2));
        thread2.start();
    }

    @Then("verify the thread is running")
    public void verifyTheThreadIsRunning() {
        // Verifying that both threads are running
        assertTrue(thread1.isAlive());
        assertTrue(thread2.isAlive());
    }
}