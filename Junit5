import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.ListTopicsOptions;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.apache.kafka.common.errors.ResourceNotFoundException;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;

import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutionException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

class KafkaTopicUtilTest {

    @Test
    void testIsKafkaTopicPresent() throws ExecutionException, InterruptedException {
        // Mocking the AdminClient
        AdminClient mockAdminClient = Mockito.mock(AdminClient.class);

        // Mocking the listTopicsResult
        ListTopicsResult mockListTopicsResult = Mockito.mock(ListTopicsResult.class);
        when(mockListTopicsResult.names()).thenReturn(Set.of("topic1", "topic2"));

        // Mocking the AdminClient creation and listTopics call
        try (AdminClient adminClient = mockAdminClient) {
            ListTopicsOptions listTopicsOptions = new ListTopicsOptions().listInternal(true);
            when(adminClient.listTopics(listTopicsOptions)).thenReturn(mockListTopicsResult);

            KafkaTopicUtil.isKafkaTopicPresent("topic1");
        } catch (Exception e) {
            // This block will be covered when an exception occurs
            assertTrue(e instanceof ResourceNotFoundException);
        }
    }
}