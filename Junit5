To achieve 100% code coverage for the `checkIfNull` method, including the `else` and `catch` blocks, you can write JUnit 5 test cases that handle both scenarios. Specifically, you need to:

1. Test the `else` block where `resultMsg.put(mapSet.getKey(), updatedMsg)` is executed.
2. Test the `catch` block by causing an exception within the try block.

Hereâ€™s an example of how you can write these test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;

public class PostingServiceTest {

    private PostingService postingService;

    @BeforeEach
    void setUp() {
        postingService = new PostingService();
    }

    @Test
    void testCheckIfNull_CatchBlock() {
        // Create an invalid JSON string to trigger an exception
        String invalidJson = "{invalidJson}";

        // Call the method with the invalid JSON
        String result = postingService.checkIfNull(invalidJson);

        // Assert that the result is null since the exception was caught
        assertNull(result);
    }

    @Test
    void testCheckIfNull_ElseBlock() {
        String validJson = "{\"key1\":\"value1\", \"key2\":{\"nested_key\":\"nested_value\"}}";
        
        // Mock the ObjectMapper to ensure the else block is executed
        ObjectMapper mockMapper = mock(ObjectMapper.class);
        AlarmPostingConstants.setObjectMapper(mockMapper);

        try {
            // Set up the mock to return a nested map
            Map<String, Object> nestedMap = new HashMap<>();
            nestedMap.put("nested_key", "nested_value");
            when(mockMapper.readValue(anyString(), eq(Map.class))).thenReturn(nestedMap);
            when(mockMapper.writeValueAsString(any())).thenReturn("{\"nested_key\":\"nested_value\"}");

            // Call the method with the valid JSON
            String result = postingService.checkIfNull(validJson);

            // Assert that the result is not null and contains the nested value
            assertNotNull(result);
            assertTrue(result.contains("\"nested_key\":\"nested_value\""));
        } catch (Exception e) {
            fail("Exception thrown while testing else block: " + e.getMessage());
        }
    }
}
```

In the `testCheckIfNull_CatchBlock` method, an invalid JSON string is passed to the `checkIfNull` method to trigger an exception, ensuring the catch block is executed.

In the `testCheckIfNull_ElseBlock` method, a valid JSON string is passed to the `checkIfNull` method. By mocking the `ObjectMapper`, you can control the behavior to ensure the `else` block is executed. Specifically, the mock `ObjectMapper` returns a nested map, causing the `else` block to be invoked where `resultMsg.put(mapSet.getKey(), updatedMsg)` is executed.

These test cases should help you achieve 100% code coverage for the `checkIfNull` method, including the `else` and `catch` blocks.