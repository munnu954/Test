To achieve 100% code coverage for the specified conditional statement within the `process` method of the `PortProcessor` class, we need to create JUnit 5 test cases that test both branches of the condition:

1. When `prevEqtObject.getShelfID()` is `null`.
2. When `prevEqtObject.getShelfID()` is not `null`.

Here is an example of how you might structure your JUnit 5 test cases to cover these scenarios:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class PortProcessorTest {

    private PortProcessor portProcessor;

    @BeforeEach
    public void setUp() {
        portProcessor = PortProcessor.getInstance();
    }

    @Test
    public void testProcess_WithShelfIDNull() {
        // Arrange
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "testSource";

        // Create previous ClrComponent with EquipmentComp and PortRef
        ClrComponent prevClrComponent = new ClrComponent();
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef prevPortRef = new PortRef();
        prevPortRef.setShelfID(null); // ShelfID is null
        prevPortRef.setPortID("prevPortID");
        equipmentComp.setPortRef(Collections.singletonList(prevPortRef));
        prevClrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        clrComponentList.add(prevClrComponent);

        // Create current ClrComponent
        EquipmentComp currentEquipmentComp = new EquipmentComp();
        PortRef currentPortRef = new PortRef();
        currentPortRef.setPortID("currentPortID");
        currentEquipmentComp.setPortRef(Collections.singletonList(currentPortRef));
        clrComponent.setEquipmentComp(Collections.singletonList(currentEquipmentComp));

        // Act
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size());
        assertEquals("prevPortID", links.get(0).getSource());
        assertEquals("currentPortID", links.get(0).getTarget());
    }

    @Test
    public void testProcess_WithShelfIDNotNull() {
        // Arrange
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "testSource";

        // Create previous ClrComponent with EquipmentComp and PortRef
        ClrComponent prevClrComponent = new ClrComponent();
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef prevPortRef = new PortRef();
        prevPortRef.setShelfID("prevShelfID"); // ShelfID is not null
        prevPortRef.setPortID("prevPortID");
        equipmentComp.setPortRef(Collections.singletonList(prevPortRef));
        prevClrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        clrComponentList.add(prevClrComponent);

        // Create current ClrComponent
        EquipmentComp currentEquipmentComp = new EquipmentComp();
        PortRef currentPortRef = new PortRef();
        currentPortRef.setPortID("currentPortID");
        currentEquipmentComp.setPortRef(Collections.singletonList(currentPortRef));
        clrComponent.setEquipmentComp(Collections.singletonList(currentEquipmentComp));

        // Act
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size());
        assertEquals("prevPortID", links.get(0).getSource());
        assertEquals("currentPortID", links.get(0).getTarget());
    }
}
```

### Explanation:
1. **Setup**: Each test case initializes a `PortProcessor` instance and sets up the environment needed for the test.
2. **Test for `prevEqtObject.getShelfID()` being `null`**:
   - Creates a `ClrComponent` with an `EquipmentComp` that has a `PortRef` with `null` as its `shelfID`.
   - Calls the `process` method.
   - Asserts that a `Link` has been created with the expected source and target.
3. **Test for `prevEqtObject.getShelfID()` being not `null`**:
   - Similar to the previous test, but sets a non-null `shelfID`.
   - Calls the `process` method and asserts the link creation as before.

These tests can be expanded based on additional requirements or edge cases that may arise in the actual implementation.