The issue is that the `queryBasedOnParameter` method is not appending the base query (`COCONUT_V3_SITE_QUERY`) to the `finalQuery` when neither `locationCLLI` nor `siteName` is present in the `queryParams`.

Here's the updated `queryBasedOnParameter` method:

```
private String queryBasedOnParameter(Map<String, Object> queryParams) {
    String query = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;
    StringJoiner finalQuery = new StringJoiner("");
    finalQuery.add(query);
    if (queryParams.containsKey("locationCLLI")) {
        finalQuery.add(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'" + ((String) queryParams.get("locationCLLI")).toLowerCase() + "'"));
    }
    if (queryParams.containsKey("siteName")) {
        finalQuery.add(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'" + ((String) queryParams.get("siteName")).toLowerCase() + "'"));
    }
    return finalQuery.toString();
}
```

And here are the updated JUnit test cases:

```
@Test
public void testQueryBasedOnParameter_BothParamsPresent() throws Exception {
    Map<String, Object> queryParams = new HashMap<>();
    queryParams.put("locationCLLI", "testCLLI");
    queryParams.put("siteName", "testSiteName");

    String result = invokeQueryBasedOnParameter(queryParams);
    assertEquals("Expected query with both params", getExpectedQuery("testclli", "testsitename"), result);
}

@Test
public void testQueryBasedOnParameter_OnlyLocationCLLIPresent() throws Exception {
    Map<String, Object> queryParams = new HashMap<>();
    queryParams.put("locationCLLI", "testCLLI");

    String result = invokeQueryBasedOnParameter(queryParams);
    assertEquals("Expected query with only locationCLLI param", getExpectedQuery("testclli", null), result);
}

@Test
public void testQueryBasedOnParameter_OnlySiteNamePresent() throws Exception {
    Map<String, Object> queryParams = new HashMap<>();
    queryParams.put("siteName", "testSiteName");

    String result = invokeQueryBasedOnParameter(queryParams);
    assertEquals("Expected query with only siteName param", getExpectedQuery(null, "testsitename"), result);
}

@Test
public void testQueryBasedOnParameter_NeitherParamPresent() throws Exception {
    Map<String, Object> queryParams = new HashMap<>();

    String result = invokeQueryBasedOnParameter(queryParams);
    assertEquals("Expected query with no params", CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY, result);
}

private String invokeQueryBasedOnParameter(Map<String, Object> queryParams) throws Exception {
    Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
    method.setAccessible(true);
    return (String) method.invoke(coconutServiceVersion3, queryParams);
}

private String getExpectedQuery(String locationCLLI, String siteName) {
    StringBuilder query = new StringBuilder(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);
    if (locationCLLI != null) {
        query.append(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'" + locationCLLI + "'"));
    }
    if (siteName != null) {
        query.append(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'" + siteName + "'"));
    }
    return query.toString();
}
```

Note that I've updated the `testQueryBasedOnParameter_NeitherParamPresent` test case to expect the base query (`COCONUT_V3_SITE_QUERY`) when neither `locationCLLI` nor `siteName` is present in the `queryParams`.