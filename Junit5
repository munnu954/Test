Here's a comprehensive set of JUnit 5 test cases to achieve 100% code coverage for the `applyPostingRule` method in the `PostingRuleProcessingService` class. These test cases cover various scenarios, including normal execution, null responses, exceptions, and different conditions within the loop.

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class PostingRuleProcessingServiceTest {

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Spy
    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        // Set values for @Value annotated fields using ReflectionTestUtils
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "%Mock:TopologyExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");
    }

    @Test
    public void testApplyPostingRule_NullComponentId() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("");

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals(alarm, result);
    }

    @Test
    public void testApplyPostingRule_NullResponse() {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(null);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals(alarm, result);
    }

    @Test
    public void testApplyPostingRule_EmptyTopologyData() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals(alarm, result);
    }

    @Test
    public void testApplyPostingRule_NoTopologyObjectsNode() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        String topologyData = "{\"something\":\"value\"}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(topologyData);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals(alarm, result);
    }

    @Test
    public void testApplyPostingRule_EmptyTopologyObjectsNode() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        String topologyData = "{\"topologyObjects\":[]}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(topologyData);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals(alarm, result);
    }

    @Test
    public void testApplyPostingRule_InvalidEligibilityValue() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        String topologyData = "{\"topologyObjects\":[{\"field\":\"value\"}]}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(topologyData);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId").thenReturn("invalid");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals(alarm, result);
    }

    @Test
    public void testApplyPostingRule_ValidEligibilityValue() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        String topologyData = "{\"topologyObjects\":[{\"field\":\"value\"}]}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(topologyData);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId").thenReturn("valid").thenReturn("alarmedObject");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals("alarmedObject", alarm.getAlarmedObject());
    }

    @Test
    public void testApplyPostingRule_TopologyDetails() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        String topologyData = "{\"topologyObjects\":[{\"field\":\"value\"}]}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(topologyData);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId").thenReturn("valid").thenReturn("alarmedObject").thenReturn("{\"detailKey\":\"detailValue\"}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals("alarmedObject", alarm.getAlarmedObject());
        assertNotNull(alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_ExceptionHandling() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        String topologyData = "{\"topologyObjects\":[{\"field\":\"value\"}]}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(topologyData);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        doThrow(new RuntimeException("Test Exception")).when(utils).evaluateExpression("valid", new HashMap<>());

        assertDoesNotThrow(() -> postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap));
    }
}
```

### Explanation:
- **Setup**: The `setUp` method initializes the mocks and sets the fields annotated with `@Value` using `ReflectionTestUtils`.
- **Test Cases**:
  - `testApplyPostingRule_NullComponentId`: Tests the scenario when `componentId` is null or empty.
  - `testApplyPostingRule_NullResponse`: Tests the scenario when the response from `topoApiClient` is null.
  - `testApplyPostingRule_EmptyTopologyData`: Tests the scenario when the topology data is empty.
  - `testApplyPostingRule_NoTopologyObjectsNode`: Tests the scenario when the `topologyObjects` node is missing.
  - `testApplyPostingRule_EmptyTopologyObjectsNode`: Tests the scenario when the `topologyObjects` node is empty.
  - `testApplyPostingRule_InvalidEligibilityValue`: Tests the scenario when the eligibility value doesn't match the expression.
  - `testApplyPostingRule_ValidEligibilityValue`: Tests