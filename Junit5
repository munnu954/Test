Sure! Below are the JUnit 5 test cases designed to achieve 100% code coverage for the specified `else if` block in the `postAlarmForEachIteration` method of the `AlarmRepositoryImpl` class.

Here's the necessary setup and test cases for the `postAlarmForEachIteration` method:

```java
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.SqlRowSet;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @Mock
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private SqlRowSet rs;

    private Alarm alarm;
    private String compId;

    @BeforeEach
    public void setUp() {
        alarm = new Alarm();
        alarm.setAlarmIdentity("testAlarmIdentity");
        alarm.setAlarmUpdatedTime("2023/10/01 12:00:00.000");
        alarm.setState(1);
        alarm.setSequenceID(1L);
        alarm.setExternalAlarmId("externalAlarmId");
        alarm.setSourceSystemId("sourceSystemId");
        alarm.setAlarmType(1);
        alarm.setPerceivedSeverity(1);
        alarm.setProbableCause("probableCause");
        alarm.setSpecificProblem("specificProblem");
        alarm.setServiceAffecting(true);
        alarm.setAlarmRaisedTime("2023/10/01 12:00:00.000");
        alarm.setAlarmReportingTime("2023/10/01 12:00:00.000");
        alarm.setRawMessage("rawMessage");
        alarm.setTag(new String[]{"tag1", "tag2"});
        alarm.setComponentId("componentId");
        alarm.setAlarmedObject("alarmedObject");
        alarm.setReportingObject("reportingObject");
        alarm.setEquipmentObject("equipmentObject");
        alarm.setTid("tid");
        alarm.setAid("aid");
        alarm.setStage(1);
        alarm.setExtTopologyDetails("extTopologyDetails");
        alarm.setTopologyDetails("topologyDetails");

        compId = "testCompId";

        when(postgresConf.getAlarmStateMap()).thenReturn(new HashMap<>() {{
            put(postgresConf.getAlarmStateCleared(), 0);
            put(postgresConf.getAlarmStateUnclorrelated(), 2);
            put(postgresConf.getAlarmStateRelated(), 3);
            put(postgresConf.getAlarmStateRootCause(), 4);
            put(postgresConf.getAlarmStateStandalone(), 5);
        }});
    }

    @Test
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void testPostAlarmForEachIteration_StateUnclorrelated() throws Exception {
        when(rs.next()).thenReturn(true);
        when(rs.getInt("state")).thenReturn(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateUnclorrelated()));
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));

        when(jdbcTemplate.queryForRowSet(anyString(), any(Object[].class))).thenReturn(rs);

        int result = alarmRepository.postAlarmForEachIteration(alarm, compId);

        assertEquals(0, result);
        assertEquals(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateUnclorrelated()).intValue(), alarm.getState());
    }

    @Test
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void testPostAlarmForEachIteration_StateRelated() throws Exception {
        when(rs.next()).thenReturn(true);
        when(rs.getInt("state")).thenReturn(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateRelated()));
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));

        when(jdbcTemplate.queryForRowSet(anyString(), any(Object[].class))).thenReturn(rs);

        int result = alarmRepository.postAlarmForEachIteration(alarm, compId);

        assertEquals(0, result);
        assertEquals(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateRelated()).intValue(), alarm.getState());
    }

    @Test
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void testPostAlarmForEachIteration_StateRootCause() throws Exception {
        when(rs.next()).thenReturn(true);
        when(rs.getInt("state")).thenReturn(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateRootCause()));
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));

        when(jdbcTemplate.queryForRowSet(anyString(), any(Object[].class))).thenReturn(rs);

        int result = alarmRepository.postAlarmForEachIteration(alarm, compId);

        assertEquals(0, result);
        assertEquals(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateRootCause()).intValue(), alarm.getState());
    }

    @Test
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void testPostAlarmForEachIteration_StateStandalone() throws Exception {
        when(rs.next()).thenReturn(true);
        when(rs.getInt("state")).thenReturn(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateStandalone()));
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));

        when(jdbcTemplate.queryForRowSet(anyString(), any(Object[].class))).thenReturn(rs);

        int result = alarmRepository.postAlarmForEachIteration(alarm, compId);

        assertEquals(0, result);
        assertEquals(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateStandalone()).intValue(), alarm.getState());
    }
}
```

### Explanation:
1. **Setup**: The `setUp` method initializes the `Alarm` object and configures the mocks for `JdbcTemplate`, `AlarmPostingUtils`, `PostGreDataBaseConfig`, and `PostingRuleProcessingService`.
2. **Mocking**: The `when` statements mock the behavior of the `SqlRowSet` and `JdbcTemplate` to simulate database interactions.
3. **Test Cases**: Each test case corresponds to one of the states (`Unclorrelated`, `Related`, `RootCause`, `Standalone`) and verifies that the `state` of the `Alarm` object is set correctly when the specified conditions are met.

These tests should cover the specified `else if` block in the `postAlarmForEachIteration` method, ensuring that the state of the `Alarm` is set correctly according to the different possible states from `PostGreDataBaseConfig`.