Here is an example of JUnit 5 test cases that aim to achieve 100% code coverage for the `KafkaTopicUtil` class, including coverage for try and catch blocks:

```java
import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.ListTopicsOptions;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutionException;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(MockitoExtension.class)
public class KafkaTopicUtilTest {

    @Mock
    private AdminClient adminClient;

    @Test
    public void testIsKafkaTopicPresent() throws ExecutionException, InterruptedException {
        KafkaTopicUtil.bootstarpServers = "localhost:9092";
        String topicName = "test-topic";

        KafkaTopicUtil kafkaTopicUtil = new KafkaTopicUtil();

        Properties properties = new Properties();
        properties.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaTopicUtil.bootstarpServers);

        try {
            Mockito.when(AdminClient.create(properties)).thenReturn(adminClient);
            ListTopicsResult listTopicsResult = Mockito.mock(ListTopicsResult.class);
            Set<String> topicNames = new HashSet<>();
            topicNames.add("another-topic");
            topicNames.add(topicName);
            Mockito.when(listTopicsResult.names()).thenReturn(() -> topicNames.stream());
            Mockito.when(adminClient.listTopics(Mockito.any(ListTopicsOptions.class))).thenReturn(listTopicsResult);

            boolean result = kafkaTopicUtil.isKafkaTopicPresent(topicName);
            assertTrue(result);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testIsKafkaTopicNotPresent() throws ExecutionException, InterruptedException {
        KafkaTopicUtil.bootstarpServers = "localhost:9092";
        String topicName = "test-topic";

        KafkaTopicUtil kafkaTopicUtil = new KafkaTopicUtil();

        Properties properties = new Properties();
        properties.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, KafkaTopicUtil.bootstarpServers);

        try {
            Mockito.when(AdminClient.create(properties)).thenReturn(adminClient);
            ListTopicsResult listTopicsResult = Mockito.mock(ListTopicsResult.class);
            Set<String> topicNames = new HashSet<>();
            topicNames.add("another-topic");
            Mockito.when(listTopicsResult.names()).thenReturn(() -> topicNames.stream());
            Mockito.when(adminClient.listTopics(Mockito.any(ListTopicsOptions.class))).thenReturn(listTopicsResult);

            boolean result = kafkaTopicUtil.isKafkaTopicPresent(topicName);
            assertFalse(result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

In this example, we use Mockito to create a mock `AdminClient` and mock the behavior of the Kafka AdminClient methods to simulate the list of topics. The test methods then verify that the `isKafkaTopicPresent` method in the `KafkaTopicUtil` works as expected for both cases where the topic is present and not present.
