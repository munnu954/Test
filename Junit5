Certainly! To achieve 100% code coverage for the conditional statement that checks if `prevEqtObject.getShelfID()` is `null`, we need to create JUnit 5 test cases that cover both branches of the condition:

1. **Branch where `prevEqtObject.getShelfID()` is `null`:** This branch will execute the code inside the if-statement.
2. **Branch where `prevEqtObject.getShelfID()` is not `null`:** This will cover the else-part where the code does not execute the if-statement.

Hereâ€™s how you can write the test cases:

### JUnit 5 Test Cases

```java
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

class PortProcessorTest {

    private PortProcessor portProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        portProcessor = PortProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "testSource";
    }

    @Test
    void testProcess_WithNullShelfID() {
        // Arrange
        PortRef prevEqtObject = new PortRef();
        prevEqtObject.setPortID("port1");
        prevEqtObject.setShelfID(null); // Setting ShelfID to null

        // Create a Node for the previous equipment object
        Node prevNode = new Node();
        prevNode.setPortId("port1");
        nodes.add(prevNode); // Add Node to nodes list

        // Previous Link setup
        Link prevLink = new Link();
        prevLink.setTarget("port1");
        links.add(prevLink); // Add a previous link

        // Create previous CLR component
        EquipmentComp prevEquipmentComp = new EquipmentComp();
        prevEquipmentComp.setPortRef(Collections.singletonList(prevEqtObject));
        
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setEquipmentComp(Collections.singletonList(prevEquipmentComp));
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        
        clrComponentList.add(prevClrComponent); // Add previous component to the list

        // Act
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);

        // Assert
        assertFalse(links.isEmpty(), "Links should be created when shelf ID is null.");
    }

    @Test
    void testProcess_WithNonNullShelfID() {
        // Arrange
        PortRef prevEqtObject = new PortRef();
        prevEqtObject.setPortID("port2");
        prevEqtObject.setShelfID("shelf1"); // Setting ShelfID to a non-null value

        // Create a Node for the previous equipment object
        Node prevNode = new Node();
        prevNode.setPortId("port2");
        nodes.add(prevNode); // Add Node to nodes list

        // Previous Link setup
        Link prevLink = new Link();
        prevLink.setTarget("port2");
        links.add(prevLink); // Add a previous link

        // Create previous CLR component
        EquipmentComp prevEquipmentComp = new EquipmentComp();
        prevEquipmentComp.setPortRef(Collections.singletonList(prevEqtObject));
        
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setEquipmentComp(Collections.singletonList(prevEquipmentComp));
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        
        clrComponentList.add(prevClrComponent); // Add previous component to the list

        // Act
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size(), "There should only be one link created when shelf ID is non-null.");
    }
}
```

### Explanation:
1. **testProcess_WithNullShelfID**:
   - This test sets the `ShelfID` of the previous equipment component to `null`.
   - It creates a `Node` corresponding to the port ID and adds it to the `nodes` list.
   - After calling the `process` method, it asserts that links should be created when the shelf ID is `null`.

2. **testProcess_WithNonNullShelfID**:
   - This test sets the `ShelfID` of the previous equipment component to a non-null value.
   - Similar to the previous test, it creates a `Node` corresponding to the port ID.
   - After calling the `process` method, it asserts that only one link should exist since the branch with `ShelfID` being `null` is not executed.

These tests ensure that both branches of the conditional statement are covered, achieving 100% code coverage for that specific part of the `process` method. Please run these tests and let me know if you have any further questions or issues!