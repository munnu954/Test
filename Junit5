import org.junit.jupiter.api.Test;
import org.springframework.batch.item.file.FlatFileParseException;
import org.springframework.batch.item.file.MultiResourceItemReader;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.batch.item.file.transform.RangeArrayPropertyEditor;
import org.springframework.batch.item.file.transform.FixedLengthTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import java.util.Collections;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@SpringBootTest
public class EcpdFeedBatchConfigurationTest {

    @Autowired
    private EcpdFeedBatchConfiguration ecpdFeedBatchConfiguration;

    @MockBean
    private ErrorFileMovement errorFileMovement;

    @Test
    public void testReader() {
        MultiResourceItemReader reader = ecpdFeedBatchConfiguration.reader(new FlatFileItemReaderBuilder().build());
        // Add test cases for the reader method
    }

    @Test
    public void testFileSkipPolicy() {
        EcpdFeedBatchConfiguration.EcpdFeedBatchConfigurationAccessor accessor = new EcpdFeedBatchConfiguration.EcpdFeedBatchConfigurationAccessor(ecpdFeedBatchConfiguration);
        EcpdFeedBatchConfiguration.FileSkipPolicy fileSkipPolicy = accessor.createFileSkipPolicy();
        // Add test cases for the FileSkipPolicy class
    }

    @Test
    public void testFileSkipListener() {
        EcpdFeedBatchConfiguration.EcpdFeedBatchConfigurationAccessor accessor = new EcpdFeedBatchConfiguration.EcpdFeedBatchConfigurationAccessor(ecpdFeedBatchConfiguration);
        EcpdFeedBatchConfiguration.FileSkipListener fileSkipListener = accessor.createFileSkipListener();
        // Add test cases for the FileSkipListener class
    }

    @Test
    public void testErrorFileMovementMethods() {
        String errorDirectoryPath = "errorDir";
        String fileName = "test.txt";
        String data = "sample data";

        ecpdFeedBatchConfiguration.errorFileMovement.writeErrorRecordsToFile(errorDirectoryPath, fileName, data);
        verify(errorFileMovement, times(1)).writeErrorRecordsToFile(errorDirectoryPath, fileName, data);

        String sourceFilePath = "source/test.txt";
        String destinationDirectory = "destination";
        ecpdFeedBatchConfiguration.errorFileMovement.moveErrorFile(sourceFilePath, destinationDirectory);
        verify(errorFileMovement, times(1)).moveErrorFile(sourceFilePath, destinationDirectory);

        String srcPath = "srcPath";
        String destPath = "destPath";
        ecpdFeedBatchConfiguration.errorFileMovement.moveErrorFiletoErrorDir(fileName, srcPath, destPath);
        verify(errorFileMovement, times(1)).moveErrorFiletoErrorDir(fileName, srcPath, destPath);

        String message = "[file [test.txt]]";
        ecpdFeedBatchConfiguration.errorFileMovement.extractFileNamePath(message);
        verify(errorFileMovement, times(1)).extractFileNamePath(message);
    }
}