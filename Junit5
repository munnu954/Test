import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.Optional;

class YourTestClass {

    @Mock
    private EmployeeRepository employeeRepo;

    @InjectMocks
    private YourServiceClass service;  // Assuming there is a service class using the employeeRepo

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testDeleteNonExistentRecord() {
        // Set up mock behavior to return Optional.empty() for non-existent employee
        when(employeeRepo.findById(999)).thenReturn(Optional.empty());

        // Define the behavior of deleteEmployeeById method to handle the Optional result from findById
        when(service.deleteEmployeeById(999)).thenThrow(new ResourceNotFoundException("Entity not found for id: 999"));

        // Verify the correct handling of the exception
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, () -> {
            service.deleteEmployeeById(999);  // Assuming there is a method deleteEmployeeById in the service using employeeRepo
        });

        String expectedMessage = "Entity not found for id: 999";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}