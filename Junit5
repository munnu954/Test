To resolve the persistent `NullPointerException` issues, we must ensure that all objects are properly initialized and match the expected conditions within the `CableProcessor` class. Here’s a step-by-step approach to address these issues:

1. **Ensure `PortRef` and `EquipmentComp` are not null**: Make sure that the `PortRef` and `EquipmentComp` objects are correctly initialized and attached to the `prevClrComponent`.

2. **Ensure `Node` is correctly initialized and retrievable**: Ensure that the `Node` objects are initialized with the correct `shelfId` and `portId` values and that these nodes can be found during the processing.

Here’s the updated test code:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;

public class CableProcessorTest {

    private CableProcessor cableProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    public void setup() {
        cableProcessor = CableProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "TestSource";

        // Initialize nodes with expected values
        nodes.add(createNode("Shelf1", "Port1"));
        nodes.add(createNode("Shelf1:Strand1", "Port1"));
    }

    @Test
    public void testProcessWithEquipmentCompAndPortRef() {
        // Setup a previous ClrComponent with valid EquipmentComp and PortRef
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);

        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(Collections.singletonList(createPortRef("Port1", "Site1")));
        prevClrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        clrComponentList.add(prevClrComponent);

        // Setup the current ClrComponent
        setupClrComponent("Shelf1", "Strand1");

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Validate results
        assertEquals(2, links.size(), "There should be two links after processing with valid EquipmentComp and PortRef");
    }

    @Test
    public void testProcessWithoutEquipmentComp() {
        // Setup a previous ClrComponent without EquipmentComp
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        clrComponentList.add(prevClrComponent);

        // Setup the current ClrComponent
        setupClrComponent("Shelf1", "Strand1");

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Validate no additional link is created
        assertEquals(1, links.size(), "There should be one link since EquipmentComp is missing");
    }

    @Test
    public void testProcessWithEmptyEquipmentComp() {
        // Setup a previous ClrComponent with empty EquipmentComp
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);
        prevClrComponent.setEquipmentComp(new ArrayList<>()); // Empty list
        clrComponentList.add(prevClrComponent);

        // Setup the current ClrComponent
        setupClrComponent("Shelf1", "Strand1");

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Validate no additional link is created
        assertEquals(1, links.size(), "There should be one link since EquipmentComp is empty");
    }

    @Test
    public void testProcessWithEquipmentCompButNoPortRef() {
        // Setup a previous ClrComponent with EquipmentComp but no PortRef
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.PORT);

        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(new ArrayList<>()); // Empty PortRef
        prevClrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        clrComponentList.add(prevClrComponent);

        // Setup the current ClrComponent
        setupClrComponent("Shelf1", "Strand1");

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Validate no additional link is created
        assertEquals(1, links.size(), "There should be one link since PortRef is empty");
    }

    private Node createNode(String shelfId, String portId) {
        Node node = new Node();
        node.setShelfId(shelfId);
        node.setPortId(portId);
        return node;
    }

    private PortRef createPortRef(String portId, String siteCode) {
        PortRef portRef = new PortRef();
        portRef.setPortID(portId);
        portRef.setSiteCode(siteCode);
        return portRef;
    }

    private void setupClrComponent(String shelfId, String strandNumber) {
        clrComponent.setType(CommonWrapperConstants.CABLE);
        CableComp cableComp = new CableComp();
        cableComp.setElementId(shelfId);
        CablePairDetail pairDetail = new CablePairDetail();
        pairDetail.setStrandNumber(strandNumber);
        cableComp.setCablePairDetails(Collections.singletonList(pairDetail));
        clrComponent.setCableComp(Collections.singletonList(cableComp));
    }
}
```

### Key Adjustments:

- **Node and PortRef Initialization**: The `createNode` and `createPortRef` methods ensure that each necessary object is initialized properly with valid data, reducing the risk of `NullPointerException`.

- **Consistent Setup**: Each test method calls these utility functions to create and set up the necessary objects, ensuring that each test case starts with a properly initialized state.

- **Matching `shelfId` and `portId`**: Verify that `shelfId` and `portId` values used in the nodes match the expected conditions within the `CableProcessor`.

These changes should help ensure that all necessary objects and fields are properly initialized, minimizing the chance of encountering `NullPointerException`.