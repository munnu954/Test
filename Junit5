Sure, here are some Junit5 testcases for covering the else block for 100% code coverage:

```
@Test
public void testParseWithEmptyString() {
    String value = "";
    Map<String, Object> srcMap = new HashMap<>();
    String ruleName = "ruleName";
    String expected = "";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

@Test
public void testParseWithNullString() {
    String value = null;
    Map<String, Object> srcMap = new HashMap<>();
    String ruleName = "ruleName";
    String expected = "";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

@Test
public void testParseWithEmptyMap() {
    String value = "foo:bar";
    Map<String, Object> srcMap = new HashMap<>();
    String ruleName = "ruleName";
    String expected = "";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

@Test
public void testParseWithNullMap() {
    String value = "foo:bar";
    Map<String, Object> srcMap = null;
    String ruleName = "ruleName";
    String expected = "";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

@Test
public void testParseWithEmptyRuleName() {
    String value = "foo:bar";
    Map<String, Object> srcMap = new HashMap<>();
    String ruleName = "";
    String expected = "";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

@Test
public void testParseWithNullRuleName() {
    String value = "foo:bar";
    Map<String, Object> srcMap = new HashMap<>();
    String ruleName = null;
    String expected = "";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

@Test
public void testParseWithNoMatches() {
    String value = "foo:bar";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("foo", "bar");
    String ruleName = "ruleName";
    String expected = "foo:bar";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

@Test
public void testParseWithOneMatch() {
    String value = "foo:bar";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("foo", "bar");
    String ruleName = "ruleName";
    String expected = "bar";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

@Test
public void testParseWithTwoMatches() {
    String value = "foo:bar baz:qux";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("foo", "bar");
    srcMap.put("baz", "qux");
    String ruleName = "ruleName";
    String expected = "bar qux";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

@Test
public void testParseWithThreeMatches() {
    String value = "foo:bar baz:qux qux:bar";
    Map<String, Object> srcMap = new HashMap<>();
    srcMap.put("foo", "bar");
    srcMap.put("baz", "qux");
    String ruleName = "ruleName";
    String expected = "bar qux bar";
    String actual = AlarmPostingUtils.parse(value, srcMap, ruleName);
    assertEquals(expected, actual);
}

