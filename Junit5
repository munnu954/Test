@RunWith(MockitoJUnitRunner.class)
public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Test
    public void testApplyPostingRule() throws Exception {
        // Mock data
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> response = ResponseEntity.ok("Topology Data");
        String componentIdReq = "ComponentId";
        String topologyDetails = "{\"topology\": \"details\"}";

        JsonNode jsonNode = new ObjectMapper().readTree("{ \"topoObjectKey\": \"topoObjectValue\" }");

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("EvaluatedExpression");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), any())).thenReturn(response);
        when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), eq(componentIdReq)).thenReturn(response);
        when(utils.evaluateExpression(eq("evaluatedTopologyObjectEligibilityValue"), anyMap())).thenReturn("EvaluatedExpression");
        when(utils.evaluateExpression(eq("evaluatedTopologyDetailsAlarmedObjectExpression"), anyMap())).thenReturn("EvaluatedExpression");
        when(AlarmPostingConstants.getObjectMapper().createObjectNode()).thenReturn((ObjectNode) jsonNode);
        when(AlarmPostingConstants.getObjectMapper().readTree(anyString())).thenReturn(jsonNode);

        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertion or verification as needed
        assertNotNull(alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_NoTopologyData() throws Exception {
        // Mock data
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> response = ResponseEntity.ok("");
        String componentIdReq = "ComponentId";

        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), any())).thenReturn(response);
        when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), eq(componentIdReq)).thenReturn(response);

        alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertion or verification as needed
        assertNull(alarm.getTopologyDetails());
    }
}