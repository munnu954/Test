Positive test case for AC1:

@Test
public void testTriggerJobSuccessful() {
    // Mocking the required dependencies
    RestTemplate restTemplate = mock(RestTemplate.class);
    ResponseEntity<String> response = new ResponseEntity<>(HttpStatus.OK);
    when(restTemplate.postForEntity(anyString(), any(HttpEntity.class), eq(String.class))).thenReturn(response);

    FlinkApiController flinkApiController = new FlinkApiController();
    flinkApiController.setRestTemplate(restTemplate);

    // Creating a sample UnifiedAuditMessage for testing
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    auditMsg.setInputFilePath("sample.csv");

    // Triggering the job
    String result = flinkApiController.triggerJob(auditMsg, ".csv");

    // Asserting the result
    assertEquals("Job submitted", result);
}

Negative test case for AC2:

@Test
public void testTriggerJobFailed() {
    // Mocking the required dependencies
    RestTemplate restTemplate = mock(RestTemplate.class);
    ResponseEntity<String> response = new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    when(restTemplate.postForEntity(anyString(), any(HttpEntity.class), eq(String.class))).thenReturn(response);

    FlinkApiController flinkApiController = new FlinkApiController();
    flinkApiController.setRestTemplate(restTemplate);

    // Creating a sample UnifiedAuditMessage for testing
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    auditMsg.setInputFilePath("sample.csv");

    // Triggering the job
    String result = flinkApiController.triggerJob(auditMsg, ".csv");

    // Asserting the result
    assertEquals("Job is not triggered", result);
}