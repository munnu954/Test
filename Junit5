Sure! Below is the JUnit 5 test case that ensures 100% code coverage for the specific block inside the `removeOrloadRule` method:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.lang.reflect.Method;
import java.util.HashMap;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class MessageReaderServiceTest {

    @InjectMocks
    private MessageReaderService messageReaderService;

    @Mock
    private RuleLoadingService rulesLoadingService;

    @Mock
    private VMBParams params;

    @Mock
    private ApolloServiceHealth healthChecker;

    @BeforeEach
    public void setUp() {
        // Initialize the mocks and the service
    }

    @Test
    public void testRemoveOrloadRuleContainsKey() throws Exception {
        HashMap<String, Object> ruleUpdateMap = new HashMap<>();
        ruleUpdateMap.put(AlarmPostingConstants.RULEID, 1);
        ruleUpdateMap.put(AlarmPostingConstants.OPERATION, AlarmPostingConstants.UPDATE);

        HashMap<Long, String> ruleMap = new HashMap<>();
        ruleMap.put(1L, "Sample Rule");

        when(rulesLoadingService.getRuleMap()).thenReturn(ruleMap);

        Method method = MessageReaderService.class.getDeclaredMethod("removeOrloadRule", HashMap.class);
        method.setAccessible(true);

        method.invoke(messageReaderService, ruleUpdateMap);

        verify(rulesLoadingService).removeRule(1L);
        verify(rulesLoadingService).loadPostingRule(1L);
        verify(rulesLoadingService).getRuleMap();

        // Ensure the logger message by capturing the log output or via a logging framework test utility
    }

    @Test
    public void testRemoveOrloadRuleDoesNotContainKey() throws Exception {
        HashMap<String, Object> ruleUpdateMap = new HashMap<>();
        ruleUpdateMap.put(AlarmPostingConstants.RULEID, 1);
        ruleUpdateMap.put(AlarmPostingConstants.OPERATION, AlarmPostingConstants.UPDATE);

        HashMap<Long, String> ruleMap = new HashMap<>();
        // Do not put the rule in the map to simulate the "does not contain" case

        when(rulesLoadingService.getRuleMap()).thenReturn(ruleMap);

        Method method = MessageReaderService.class.getDeclaredMethod("removeOrloadRule", HashMap.class);
        method.setAccessible(true);

        method.invoke(messageReaderService, ruleUpdateMap);

        verify(rulesLoadingService).removeRule(1L);
        verify(rulesLoadingService).loadPostingRule(1L);
        verify(rulesLoadingService).getRuleMap();

        // Ensure the logger message by capturing the log output or via a logging framework test utility
    }
}
```

Here, two test cases are provided:
1. `testRemoveOrloadRuleContainsKey`: This simulates the condition where the `ruleMap` contains the `ruleid`. It verifies the code block inside the `if` statement.
2. `testRemoveOrloadRuleDoesNotContainKey`: This simulates the condition where the `ruleMap` does not contain the `ruleid`. It ensures the execution path does not hit the code block inside the `if` statement.

Both test cases use reflection to access the private `removeOrloadRule` method. They then invoke the method and verify the interactions with the `rulesLoadingService` mock, ensuring the correct behavior.