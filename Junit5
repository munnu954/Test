To achieve 100% code coverage for the `onMessage(Message<GenericRecord> message)` method in the `SHAEventMessageListener` class, we need to cover all possible execution paths, including branches for conditionals and exception handling. Here's how you can write JUnit 5 test cases for this method:

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import org.apache.pulsar.client.api.schema.GenericRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.support.SendResult;
import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;

public class SHAEventMessageListenerTest {

    @Mock
    private SensitiveProfileManager profileManager;

    @Mock
    private BatchLoaderUtils utils;

    @InjectMocks
    private SHAEventMessageListener listener;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testOnMessageWithEmptyPayload() {
        Message<GenericRecord> message = new GenericMessage<>(new byte[0]);
        
        assertThrows(SystemException.class, () -> {
            listener.onMessage(message);
        });
    }

    @Test
    public void testOnMessageWithInvalidEcpdId() throws Exception {
        String payload = "{\"ecpd_profile_id\": \"\"}";
        Message<GenericRecord> message = new GenericMessage<>(payload.getBytes());
        
        when(utils.convert(any(String.class), eq(SHAVbsmEvent.class)))
            .thenReturn(new SHAVbsmEvent());

        listener.onMessage(message);

        verifyNoInteractions(profileManager);
    }

    @Test
    public void testOnMessageWithSensitiveAccount() throws Exception {
        String payload = "{\"ecpd_profile_id\": \"sensitive\"}";
        Message<GenericRecord> message = new GenericMessage<>(payload.getBytes());
        
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("sensitive");
        
        when(utils.convert(any(String.class), eq(SHAVbsmEvent.class)))
            .thenReturn(event);
        
        SensitiveResponse response = new SensitiveResponse();
        response.setSensitive(true);
        
        when(profileManager.getSensitiveAccount("sensitive"))
            .thenReturn(response);

        listener.onMessage(message);

        verify(profileManager).getSensitiveAccount("sensitive");
    }

    @Test
    public void testOnMessageWithNonSensitiveAccount() throws Exception {
        String payload = "{\"ecpd_profile_id\": \"non-sensitive\"}";
        Message<GenericRecord> message = new GenericMessage<>(payload.getBytes());
        
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("non-sensitive");
        
        when(utils.convert(any(String.class), eq(SHAVbsmEvent.class)))
            .thenReturn(event);
        
        SensitiveResponse response = new SensitiveResponse();
        response.setSensitive(false);
        
        when(profileManager.getSensitiveAccount("non-sensitive"))
            .thenReturn(response);
        
        when(utils.returnHeaders(any(String.class)))
            .thenReturn(List.of(new RecordHeader(KafkaHeaders.MESSAGE_KEY, "some-key".getBytes())));

        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.complete(null);
        when(utils.sendMessageAsync(any(), any(), any(), any(), any(), anyChar(), any()))
            .thenReturn(future);

        listener.onMessage(message);

        verify(utils).sendMessageAsync(any(), any(), any(), any(), any(), anyChar(), any());
    }

    @Test
    public void testOnMessageExceptionHandling() throws Exception {
        String payload = "{\"ecpd_profile_id\": \"non-sensitive\"}";
        Message<GenericRecord> message = new GenericMessage<>(payload.getBytes());
        
        when(utils.convert(any(String.class), eq(SHAVbsmEvent.class)))
            .thenThrow(new JsonProcessingException("JSON error") {});

        listener.onMessage(message);

        // No further interactions should be made
    }
}
```

### Key Points:
- **Mockito** is used to mock dependencies like `SensitiveProfileManager` and `BatchLoaderUtils`.
- **Assertions** are used to ensure that exceptions are thrown where expected.
- **Verify** methods ensure that the correct methods are called on mocked objects.
- **CompletableFuture** is used to mock async Kafka message sending behavior.
- Each test case covers different branches of the method, ensuring all logic paths are tested.