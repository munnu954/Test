**Test Case for getAEnd() method**

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class CircuitDetailsProviderGetAEndTests {

    private CircuitDetailsProvider circuitDetailsProvider;
    private RestClientUtil restClientUtil;

    @BeforeEach
    void setUp() {
        restClientUtil = mock(RestClientUtil.class);
        circuitDetailsProvider = new CircuitDetailsProvider();
        circuitDetailsProvider.restClientUtil = restClientUtil;
    }

    @Test
    void shouldReturnAEndWhenCircuitHasAEndWithMatchingCLLI() {
        // Given
        Circuit circuit = new Circuit();
        AEnd aEnd = new AEnd();
        aEnd.setPortChannel(List.of(new PortChannel()));
        aEnd.getPortChannel().get(0).setPortRef(List.of(new PortRef()));
        aEnd.getPortChannel().get(0).getPortRef().get(0).setClliCode("CLLI");
        circuit.setAEnd(List.of(aEnd));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        response.getCircuitData().setCircuitLst(List.of(new CircuitLst()));
        response.getCircuitData().getCircuitLst().get(0).setCircuit(List.of(circuit));

        // When
        AEnd result = circuitDetailsProvider.getAEnd("circuitId", "CLLI", response);

        // Then
        assertEquals(aEnd, result);
    }

    @Test
    void shouldReturnAEndWhenCircuitHasCLRComponentWithAEndAndMatchingCLLI() {
        // Given
        Circuit circuit = new Circuit();
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("PORT");
        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(List.of(new PortRef()));
        equipmentComp.getPortRef().get(0).setClliCode("CLLI");
        clrComponent.setEquipmentComp(List.of(equipmentComp));
        List<ClrComponent> clrComponents = new ArrayList<>();
        clrComponents.add(clrComponent);
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setClr(List.of(new PathLst()));
        circuitInfo.getClr().get(0).setPath(List.of(new Path()));
        circuitInfo.getClr().get(0).getPath().get(0).setClrComponent(clrComponents);
        AEnd aEnd = new AEnd();
        aEnd.setPortChannel(List.of(new PortChannel()));
        aEnd.getPortChannel().get(0).setPortRef(List.of(new PortRef()));
        aEnd.getPortChannel().get(0).getPortRef().get(0).setClliCode("CLLI");
        circuitInfo.setAEnd(List.of(aEnd));
        circuit.setClr(List.of(circuitInfo));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        response.getCircuitData().setCircuitLst(List.of(new CircuitLst()));
        response.getCircuitData().getCircuitLst().get(0).setCircuit(List.of(circuit));

        // When
        AEnd result = circuitDetailsProvider.getAEnd("circuitId", "CLLI", response);

        // Then
        assertEquals(aEnd, result);
    }

    @Test
    void shouldReturnAEndWhenCircuitHasCLRComponentWithCircuitPathLinkComponentWithAEndAndMatchingCLLI() {
        // Given
        Circuit circuit = new Circuit();
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("PORT");
        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(List.of(new PortRef()));
        equipmentComp.getPortRef().get(0).setClliCode("CLLI");
        clrComponent.setEquipmentComp(List.of(equipmentComp));
        Path path = new Path();
        path.setClrComponent(List.of(clrComponent));
        ClrComponent clrComponent2 = new ClrComponent();
        clrComponent2.setType("CIRCUIT_PATH_LINK");
        path.setClrComponent(List.of(clrComponent2, clrComponent));
        List<Path> paths = new ArrayList<>();
        paths.add(path);
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setClr(List.of(new PathLst()));
        circuitInfo.getClr().get(0).setPath(paths);
        AEnd aEnd = new AEnd();
        aEnd.setPortChannel(List.of(new PortChannel()));
        aEnd.getPortChannel().get(0).setPortRef(List.of(new PortRef()));
        aEnd.getPortChannel().get(0).getPortRef().get(0).setClliCode("CLLI");
        circuitInfo.setAEnd(List.of(aEnd));
        circuit.setClr(List.of(circuitInfo));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        response.getCircuitData().setCircuitLst(List.of(new CircuitLst()));
        response.getCircuitData().getCircuitLst().get(0).setCircuit(List.of(circuit));

        // When
        AEnd result = circuitDetailsProvider.getAEnd("circuitId", "CLLI", response);

        // Then
        assertEquals(aEnd, result);
    }

    @Test
    void shouldReturnAEndWhenCircuitHasCLRComponentWithCircuitComponentWithAEndAndMatchingCLLI() {
        // Given
        Circuit circuit = new Circuit();
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("TRAIL");
        CircuitComp circuitComp = new CircuitComp();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setAEnd(List.of(new AEnd()));
        circuitInfo.getAEnd().get(0).setPortChannel(List.of(new PortChannel()));
        circuitInfo.getAEnd().get(0).getPortChannel().get(0).setPortRef(List.of(new PortRef()));
        circuitInfo.getAEnd().get(0).getPortChannel().get(0).getPortRef().get(0).setClliCode("CLLI");
        circuitComp.setCircuitInfo(List.of(circuitInfo));
        clrComponent.setCircuitComp(List.of(circuitComp));
        CircuitInfo circuitInfo2 = new CircuitInfo();
        clrComponent.setCircuitComp(List.of(circuitComp, circuitInfo2));
        List<ClrComponent> clrComponents = new ArrayList<>();
        clrComponents.add(clrComponent);
        CircuitInfo circuitInfo3 = new CircuitInfo();
        circuitInfo3.setClr(List.of(new PathLst()));
        circuitInfo3.getClr().get(0).setPath(List.of(new Path()));
        circuitInfo3.getClr().get(0).getPath().get(0).setClrComponent(clrComponents);
        circuit.setClr(List.of(circuitInfo3));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        response.getCircuitData().setCircuitLst(List.of(new CircuitLst()));
        response.getCircuitData().getCircuitLst().get(0).setCircuit(List.of(circuit));

        // When
        AEnd result = circuitDetailsProvider.getAEnd("circuitId", "CLLI", response);

        // Then
        assertEquals(circuitInfo.getAEnd().get(0), result);
    }

    @Test
    void shouldReturnNullWhenCircuitDoesNotHaveAEndWithMatchingCLLI() {
        // Given
        Circuit circuit = new Circuit();
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());
        response.getCircuitData().setCircuitLst(List.of(new CircuitLst()));
        response.getCircuitData().getCircuitLst().get(0).setCircuit(List.of(circuit));

        // When
        AEnd result = circuitDetailsProvider.getAEnd("circuitId", "CLLI", response);

        // Then
        assertNull(result);
    }

    