public static class CsvtoJsonRTROCSnTransformer extends RichFlatMapFunction<String, String> {
    private List<String> headers = new ArrayList<>();
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    private String fileName;

    public CsvtoJsonRTROCSnTransformer(String fileName) {
        this.fileName = fileName;
    }

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());

        // Extract headers from line 1 of the CSV
        String line1 = lines[0];
        if (!line1.isEmpty()) {
            String[] columns = line1.split(",");
            for (int i = 0; i < columns.length; i++) {
                headers.add(columns[i].trim());
            }
        }

        for (int i = 3; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");
            if (headers.size() < 2 || headers.size() > arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }
            JSONObject obj = new JSONObject();
            obj.put("FILENAME", fileName);

            // Processing jsonkey-value pairs from columns 1 and 2
            obj.put(headers.get(0), arr[0].trim());
            obj.put(headers.get(1), arr[1].trim());

            // Processing jsonkey-value pairs from columns 3 to 8
            for (int j = 2; j < Math.min(headers.size(), arr.length); j++) {
                String jsonkey = headers.get(j).trim().replace("\"", "");
                String jsonvalue = arr[j].trim().replace("\"", "");
                obj.put(jsonkey, jsonvalue);
            }

            this.successIntCounter.add(1);
            collector.collect(obj.toString());
        }
    }
}