import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.*;
import org.junit.jupiter.api.Test;

import java.io.Serializable;

import static org.junit.jupiter.api.Assertions.assertEquals;

@Data
@AllArgsConstructor
@NoArgsConstructor
@ToString
@Builder
@LuceneIndex(name = "COLLECTION_AUDIT")
public class CollectionAudit implements Serializable {
    private String id;
    private String collectorId;
    private ProcessType processType;
    private String jarId;
    private String jobId;
    private String flinkJobId;
    public String jobStatus;
    private String inputFilePath;
    private String outputFilePath;
    @JsonIgnore
    private String auditTopic;
    private String url;
    private String flinkURL;
    private Integer port;
    private String delimiters;
    private String fileType;
    private String dateReceived;
    private String dateProcessed;
    private Integer noOfRecordsInTheFile;
    private Integer noOfRecordsProcessed;
    private Integer noOfRecordsFailed;
    private String exceptions;
    private String bootstrapServer;
}

public enum ProcessType{
    Collector, Transformer
}

class CollectionAuditTest {

    @Test
    void testToString_AllFieldsSet() {
        CollectionAudit audit = CollectionAudit.builder()
                .id("id1")
                .collectorId("collectorId1")
                .processType(ProcessType.Collector)
                .jarId("jarId1")
                .jobId("jobId1")
                .flinkJobId("flinkJobId1")
                .jobStatus("jobStatus1")
                .inputFilePath("inputFilePath1")
                .outputFilePath("outputFilePath1")
                .auditTopic("auditTopic1")
                .url("url1")
                .flinkURL("flinkURL1")
                .port(1)
                .delimiters("delimiters1")
                .fileType("fileType1")
                .dateReceived("dateReceived1")
                .dateProcessed("dateProcessed1")
                .noOfRecordsInTheFile(1)
                .noOfRecordsProcessed(1)
                .noOfRecordsFailed(1)
                .exceptions("exceptions1")
                .bootstrapServer("bootstrapServer1")
                .build();
        String expectedToString = "CollectionAudit(id=id1, collectorId=collectorId1, processType=Collector, jarId=jarId1, jobId=jobId1, flinkJobId=flinkJobId1, jobStatus=jobStatus1, inputFilePath=inputFilePath1, outputFilePath=outputFilePath1, auditTopic=auditTopic1, url=url1, flinkURL=flinkURL1, port=1, delimiters=delimiters1, fileType=fileType1, dateReceived=dateReceived1, dateProcessed=dateProcessed1, noOfRecordsInTheFile=1, noOfRecordsProcessed=1, noOfRecordsFailed=1, exceptions=exceptions1, bootstrapServer=bootstrapServer1)";
        assertEquals(expectedToString, audit.toString());
    }

    @Test
    void testToString_Builder_AllFieldsSet() {
        String expectedToString = "CollectionAudit.CollectionAuditBuilder(id=id1, collectorId=collectorId1, processType=Collector, jarId=jarId1, jobId=jobId1, flinkJobId=flinkJobId1, jobStatus=jobStatus1, inputFilePath=inputFilePath1, outputFilePath=outputFilePath1, auditTopic=auditTopic1, url=url1, flinkURL=flinkURL1, port=1, delimiters=delimiters1, fileType=fileType1, dateReceived=dateReceived1, dateProcessed=dateProcessed1, noOfRecordsInTheFile=1, noOfRecordsProcessed=1, noOfRecordsFailed=1, exceptions=exceptions1, bootstrapServer=bootstrapServer1)";
        assertEquals(expectedToString, CollectionAudit.builder()
                .id("id1")
                .collectorId("collectorId1")
                .processType(ProcessType.Collector)
                .jarId("jarId1")
                .jobId("jobId1")
                .flinkJobId("flinkJobId1")
                .jobStatus("jobStatus1")
                .inputFilePath("inputFilePath1")
                .outputFilePath("outputFilePath1")
                .auditTopic("auditTopic1")
                .url("url1")
                .flinkURL("flinkURL1")
                .port(1)
                .delimiters("delimiters1")
                .fileType("fileType1")
                .dateReceived("dateReceived1")
                .dateProcessed("dateProcessed1")
                .noOfRecordsInTheFile(1)
                .noOfRecordsProcessed(1)
                .noOfRecordsFailed(1)
                .exceptions("exceptions1")
                .bootstrapServer("bootstrapServer1")
                .toString());
    }

    @Test
    void testToString_Builder_NoFieldsSet() {
        String expectedToString = "CollectionAudit.CollectionAuditBuilder()";
        assertEquals(expectedToString, CollectionAudit.builder().toString());
    }
}