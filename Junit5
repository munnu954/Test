Certainly! To achieve 100% code coverage for the `checkIfNotEmpty` method in the `EventLedgerServiceManager` class, you need to write JUnit 5 test cases that cover all possible branches. There are six branches to consider:

1. The input is `null`.
2. The input is an empty string.
3. The input is the string `"null"` (case insensitive).
4. The input is a non-empty string.

Here's how you can write the JUnit 5 test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class EventLedgerServiceManagerTest {

    private EventLedgerServiceManager serviceManager;

    @BeforeEach
    public void setUp() {
        serviceManager = new EventLedgerServiceManager();
    }

    @Test
    public void testCheckIfNotEmpty_NullInput() {
        String input = null;
        boolean result = serviceManager.checkIfNotEmpty(input);
        assertFalse(result, "Expected false for null input");
    }

    @Test
    public void testCheckIfNotEmpty_EmptyString() {
        String input = "";
        boolean result = serviceManager.checkIfNotEmpty(input);
        assertFalse(result, "Expected false for empty string input");
    }

    @Test
    public void testCheckIfNotEmpty_NullString() {
        String input = "null";
        boolean result = serviceManager.checkIfNotEmpty(input);
        assertFalse(result, "Expected false for 'null' string input");
    }

    @Test
    public void testCheckIfNotEmpty_NullStringCaseInsensitive() {
        String input = "NULL";
        boolean result = serviceManager.checkIfNotEmpty(input);
        assertFalse(result, "Expected false for 'NULL' string input (case insensitive)");
    }

    @Test
    public void testCheckIfNotEmpty_WhitespaceString() {
        String input = "   "; // Only whitespace
        boolean result = serviceManager.checkIfNotEmpty(input);
        assertTrue(result, "Expected true for whitespace string input");
    }

    @Test
    public void testCheckIfNotEmpty_ValidString() {
        String input = "valid string";
        boolean result = serviceManager.checkIfNotEmpty(input);
        assertTrue(result, "Expected true for a valid non-empty string input");
    }
}
```

### Explanation:
- Each test method corresponds to a specific branch of the `checkIfNotEmpty` method.
- The `assertFalse` and `assertTrue` methods are used to check the expected outcomes based on the input values.
- The `@BeforeEach` annotation is used to initialize the `EventLedgerServiceManager` instance before each test case runs.

This setup will ensure that all branches of the `checkIfNotEmpty` method are tested and covered, providing 100% code coverage for that method.