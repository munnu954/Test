Here's an example of how you can write JUnit 5 test cases for the `SHAEventMessageListener` class:

```
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.SettableListenableFuture;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class SHAEventMessageListenerTest {

    @InjectMocks
    private SHAEventMessageListener shaEventMessageListener;

    @Mock
    private SensitiveProfileManager sensitiveProfileManager;

    @Mock
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private Message<GenericRecord> message;

    @Test
    void testOnMessage_EmptyPayload() {
        // Arrange
        when(message.getData()).thenReturn(new byte[0]);

        // Act and Assert
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));
        verify(batchLoaderUtils, never()).convert(any(), any());
    }

    @Test
    void testOnMessage_NullEcpdId() {
        // Arrange
        String payload = "{\"mdn\":\"1234567890\"}";
        when(message.getData()).thenReturn(payload.getBytes());
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId(null);
        when(batchLoaderUtils.convert(payload, SHAVbsmEvent.class)).thenReturn(event);

        // Act and Assert
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));
        verify(batchLoaderUtils, never()).sendMessageAsync(any());
    }

    @Test
    void testOnMessage_SensitiveAccount() throws JsonProcessingException {
        // Arrange
        String payload = "{\"ecpd_profile_id\":\"1234567890\",\"mdn\":\"1234567890\"}";
        when(message.getData()).thenReturn(payload.getBytes());
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("1234567890");
        when(batchLoaderUtils.convert(payload, SHAVbsmEvent.class)).thenReturn(event);
        SensitiveResponse sensitiveResponse = new SensitiveResponse();
        sensitiveResponse.setSensitive(true);
        when(sensitiveProfileManager.getSensitiveAccount(event.getEcpdId())).thenReturn(sensitiveResponse);

        // Act and Assert
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));
        verify(batchLoaderUtils, never()).sendMessageAsync(any());
    }

    @Test
    void testOnMessage_NonSensitiveAccount() throws JsonProcessingException {
        // Arrange
        String payload = "{\"ecpd_profile_id\":\"1234567890\",\"mdn\":\"1234567890\"}";
        when(message.getData()).thenReturn(payload.getBytes());
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("1234567890");
        when(batchLoaderUtils.convert(payload, SHAVbsmEvent.class)).thenReturn(event);
        SensitiveResponse sensitiveResponse = new SensitiveResponse();
        sensitiveResponse.setSensitive(false);
        when(sensitiveProfileManager.getSensitiveAccount(event.getEcpdId())).thenReturn(sensitiveResponse);
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("topic", "key", "value");
        when(batchLoaderUtils.returnHeaders(any())).thenReturn(new ArrayList<>());
        SettableListenableFuture<SendResult<String, String>> future = new SettableListenableFuture<>();
        future.set(new SendResult<>("topic", 1, 1L));
        when(batchLoaderUtils.sendMessageAsync(any())).thenReturn(future);

        // Act and Assert
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));
        verify(batchLoaderUtils).sendMessageAsync(any());
    }

    @Test
    void testOnMessage_Exception() {
        // Arrange
        when(message.getData()).thenReturn(null);

        // Act and Assert
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));
        verify(batchLoaderUtils, never()).convert(any(), any());
    }
}
```

In the above test class, we have covered all the possible branches of the `onMessage` method.

- `testOnMessage_EmptyPayload`: Tests the scenario where the payload is empty.
- `testOnMessage_NullEcpdId`: Tests the scenario where the `ecpdId` is null.
- `testOnMessage_SensitiveAccount`: Tests the scenario where the account is sensitive.
- `testOnMessage_NonSensitiveAccount`: Tests the scenario where the account is not sensitive.
- `testOnMessage_Exception`: Tests the scenario where an exception occurs.

We have used Mockito to mock the dependencies and verify the interactions. The `assertDoesNotThrow` method is used to verify that no