```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

class PathProcessorTest {

    private PathProcessor pathProcessor;

    @BeforeEach
    void setUp() {
        pathProcessor = PathProcessor.getInstance();
    }

    @Test
    void testProcess_noPreviousComponents() {
        // Given
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = createClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = Map.of();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "TEST_SOURCE";

        // When
        pathProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Then
        Assertions.assertEquals(1, links.size());
        Assertions.assertEquals("circuit", links.get(0).getLinkType());
        Assertions.assertEquals("Unknown0", links.get(0).getSource());
        Assertions.assertNull(links.get(0).getTarget());
    }

    @Test
    void testProcess_previousComponentIsPort() {
        // Given
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = createClrComponent();
        ClrComponent prevClrComponent = createPreviousClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Map.of();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "TEST_SOURCE";

        // When
        pathProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Then
        Assertions.assertEquals(2, links.size());
        Assertions.assertEquals("Unknown0", links.get(1).getSource());
        Assertions.assertEquals("Unknown1", links.get(1).getTarget());
    }

    @Test
    void testProcess_previousComponentIsTrail_setSource() {
        // Given
        List<Node> nodes = new ArrayList<>();
        Node node = new Node();
        node.setPortId("port1");
        nodes.add(node);
        List<Link> links = new ArrayList<>();
        Link prevLink = new Link();
        prevLink.setTarget("port1");
        links.add(prevLink);
        ClrComponent clrComponent = createClrComponent();
        ClrComponent prevClrComponent = createPreviousTrail();
        prevClrComponent.setCircuitComp(List.of(createCircuitInfoWithNullCreatedBySys()));
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Map.of();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "TEST_SOURCE";

        // When
        pathProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Then
        Assertions.assertEquals(2, links.size());
        Assertions.assertEquals("port1", links.get(1).getSource());
        Assertions.assertNull(links.get(1).getTarget());
    }

    @Test
    void testProcess_previousComponentIsTrail_setTarget() {
        // Given
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        Link prevLink = new Link();
        prevLink.setTarget("Unknown0");
        links.add(prevLink);
        ClrComponent clrComponent = createClrComponent();
        ClrComponent prevClrComponent = createPreviousTrail();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Map.of();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "TEST_SOURCE";

        // When
        pathProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Then
        Assertions.assertEquals(2, links.size());
        Assertions.assertEquals("Unknown0", links.get(1).getSource());
        Assertions.assertEquals("Unknown1", links.get(1).getTarget());
    }

    @Test
    void testProcess_previousComponentIsSegment_prevCableTargetNull() {
        // Given
        List<Node> nodes = new ArrayList<>();
        Node node = new Node();
        node.setPortId("port1");
        nodes.add(node);
        List<Link> links = new ArrayList<>();
        Link prevLink = new Link();
        prevLink.setTarget("port1");
        links.add(prevLink);
        ClrComponent clrComponent = createClrComponent();
        ClrComponent prevClrComponent = createSegment();
        prevClrComponent.setCircuitComp(List.of(createCircuitInfoWithNullCreatedBySys()));
        prevClrComponent.setCableComp(List.of(createCableCompWithNullLocationZ()));
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Map.of();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "TEST_SOURCE";

        // When
        pathProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Then
        Assertions.assertEquals(3, links.size());
        Assertions.assertEquals("port1", links.get(2).getSource());
        Assertions.assertEquals("Unknown1", links.get(2).getTarget());
    }

    @Test
    void testProcess_previousComponentIsSegment_prevCableTargetNotNull() {
        // Given
        List<Node> nodes = new ArrayList<>();
        Node node = new Node();
        node.setPortId("port1");
        nodes.add(node);
        List<Link> links = new ArrayList<>();
        Link prevLink = new Link();
        prevLink.setTarget("port1");
        links.add(prevLink);
        ClrComponent clrComponent = createClrComponent();
        ClrComponent prevClrComponent = createSegment();
        prevClrComponent.setCircuitComp(List.of(createCircuitInfoWithNullCreatedBySys()));
        prevClrComponent.setCableComp(List.of(createCableCompWithNotNullLocationZ()));
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Map.of();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "TEST_SOURCE";

        // When
        pathProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Then
        Assertions.assertEquals(3, links.size());
        Assertions.assertEquals("Unknown1", links.get(2).getSource());
        Assertions.assertEquals("Unknown2", links.get(2).getTarget());
    }

    @Test
    void testProcess_previousComponentIsCable() {
        // Given
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        Link prevLink = new Link();
        prevLink.setTarget("Unknown0");
        links.add(prevLink);
        ClrComponent clrComponent = createClrComponent();
        ClrComponent prevClrComponent = createCable();
        prevClrComponent.setCircuitComp(List.of(createCircuitInfoWithNullCreatedBySys()));
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);
        Map<String, List<Node>> clliNodeMap = Map.of();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "TEST_SOURCE";

        // When
        pathProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Then
        Assertions.assertEquals(2, links.size());
        }