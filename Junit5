The error you are seeing suggests that the `createAlarm` method is returning `null`. This could be happening due to various reasons, including misconfiguration or issues in the method's logic. To diagnose this, we should first ensure that the method `createAlarm` is correctly implemented and that the test setup is accurate.

Here's a complete example of how you might address this issue:

1. Ensure the `createAlarm` method in your `AlarmRepositoryImpl` class is functioning as expected.
2. Update the unit tests to correctly mock dependencies and verify the behavior.

Here is the updated JUnit 5 test cases code, ensuring that the setup and mocking are done correctly:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.HashMap;
import java.util.Map;

class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 0);
        perceivedSeverityMap.put("Cleared", -1);

        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 0);
        alarmStateMap.put("Uncleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
    }

    @Test
    void testCreateAlarm_perceivedSeverityNullAndStateCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Cleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn(null).when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Cleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityEmptyAndStateCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Cleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn("").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Cleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityNotNullAndStateCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Cleared\", \"perceivedSeverity\": \"Indeterminate\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn("Indeterminate").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Cleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityNullAndStateNotCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Uncleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn(null).when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Uncleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityEmptyAndStateNotCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Uncleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn("").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Uncleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityNotNullAndStateNotCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Uncleared\", \"perceivedSeverity\": \"Indeterminate\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn("Indeterminate").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Uncleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }
}
```

### Key Points:
1. **Spying on `AlarmRepositoryImpl`**: By using `Mockito.spy()`, we partially mock the instance to control the behavior of specific methods.
2. **Mocking `getValueFromNormalizedMsg` Method**: The `doReturn().when()` construct ensures that the `getValueFromNormalizedMsg` method returns the desired values.
3. **Assertions**: The `assertNotNull(alarm)` ensures that the `createAlarm` method does not return `null`. If the assertion fails, it suggests that there might be an issue with the method itself or the test setup.

### Debugging Tips:
1. **Check `createAlarm` Logic**: Ensure that the `createAlarm` method in `AlarmRepositoryImpl` is correctly implemented and does not return `null` under normal circumstances.
2. **Review Mappings**: Verify the mappings in `PostGreDataBaseConfig` to ensure they return the expected values.

By ensuring the method logic is correct and the test setup is accurate, you should be able to resolve the `null` issue and have passing test cases.