To achieve 100% code coverage for the `LOGGER.info` statement in the `sendMessageAsync` method of the `EventsMessageListener` class, you can use reflection to access private fields and methods of the `EventsMessageListener` class in your JUnit5 test cases.

Here's a sample JUnit5 test case code snippet to cover the `LOGGER.info` statement mentioned:

```java
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import static org.mockito.Mockito.mock;

public class EventsMessageListenerTest {

    @Test
    public void testSendMessageAsync() throws Exception {
        // Mock the dependencies
        KafkaTemplate<String, String> kafkaTemplate = mock(KafkaTemplate.class);
        KafkaFalloutService failedMessageService = mock(KafkaFalloutService.class);
        BatchLoaderUtils batchLoaderUtils = mock(BatchLoaderUtils.class);
        RequestJSONString requestJSONString = new RequestJSONString();
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("testTopic", "testKey", "testPayload");

        // Set up the EventsMessageListener instance
        EventsMessageListener eventsMessageListener = new EventsMessageListener();
        eventsMessageListener.kafkaTemplate = kafkaTemplate;
        eventsMessageListener.failedMessageService = failedMessageService;
        eventsMessageListener.utils = batchLoaderUtils;

        // Invoke the sendMessageAsync method using reflection
        MockedStatic<EventsMessageListener> eventsMessageListenerMock = Mockito.mockStatic(EventsMessageListener.class);
        eventsMessageListenerMock.when(() -> EventsMessageListener.class , "sendMessageAsync", Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()).thenCallRealMethod();
        eventsMessageListenerMock.when(() -> EventsMessageListener.class, "filterAccountNum", Mockito.any()).thenCallRealMethod();
        
        String accountNum = "123-456";
        requestJSONString.getService().getServiceBody().getCallRequest().getBody().getRelinquishingCustomerDetails().setAccountNumber(accountNum);
        
        eventsMessageListener.sendMessageAsync(producerRecord, "testTransactionId", "testPayload", "testProducerTopic", "testInsightName", 'N', requestJSONString);

        // Verify the behavior or assertions as needed
    }
}
```

In this test case, we are using `Mockito.mockStatic` to mock the `EventsMessageListener` class and its private methods. By mocking the static method `sendMessageAsync`, we can cover the `LOGGER.info` statement in the `sendMessageAsync` method.

Ensure that you have properly set up your test environment and include any necessary dependencies for your JUnit test. This test case uses Mockito for mocking objects and behavior.

By following this approach, you should be able to cover the desired `LOGGER.info` statement in your JUnit test and achieve 100% code coverage for the `sendMessageAsync` method.