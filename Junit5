To achieve 100% code coverage for the `hasRecords()` method in the `KafkaFalloutService` class, you'll need to write a JUnit 5 test case that mocks the behavior of `KafkaFalloutRepository`. This will involve setting expectations on the `countBySystemName` method to return a controlled value and verifying the behavior of the service method based on that value. Hereâ€™s how you can write the test:

```java
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class KafkaFalloutServiceTest {

    @Mock
    private KafkaFalloutRepository repository;

    @InjectMocks
    private KafkaFalloutService kafkaFalloutService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testHasRecords_WhenRecordsExist() {
        // Arrange
        when(repository.countBySystemName(TYSConstants.SYSTEM_NAME.getValue())).thenReturn(5L);

        // Act
        boolean result = kafkaFalloutService.hasRecords();

        // Assert
        assertTrue(result);
    }

    @Test
    public void testHasRecords_WhenNoRecordsExist() {
        // Arrange
        when(repository.countBySystemName(TYSConstants.SYSTEM_NAME.getValue())).thenReturn(0L);

        // Act
        boolean result = kafkaFalloutService.hasRecords();

        // Assert
        assertFalse(result);
    }
}
```

### Explanation:

- **Mocks and Annotations**: 
  - `@Mock` is used to create a mock object for `KafkaFalloutRepository`.
  - `@InjectMocks` is used to inject the mock repository into the `KafkaFalloutService`.

- **`setUp` Method**: 
  - `MockitoAnnotations.openMocks(this)` initializes the mocks before each test.

- **Test Cases**:
  - `testHasRecords_WhenRecordsExist`: Simulates a scenario where the repository method returns a positive count, asserting that `hasRecords()` returns `true`.
  - `testHasRecords_WhenNoRecordsExist`: Simulates a scenario where the repository method returns zero, asserting that `hasRecords()` returns `false`.

This approach ensures that the `hasRecords()` method is tested for both scenarios, achieving full coverage for this method.