Sure, here's the JUnit 5 test cases that cover all the 8 branches of the `else if((perceivedSeverity==null || (perceivedSeverity!= null && perceivedSeverity.toString().isEmpty()))&&(stateValue==postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared()))) alarm.setPerceivedSeverity(-1);` block in the `createAlarm()` method of the `AlarmRepositoryImpl` class:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.HashMap;
import java.util.Map;

class AlarmRepositoryImplTest {

    private final PostGreDataBaseConfig postgresConf = Mockito.mock(PostGreDataBaseConfig.class);
    private final AlarmRepositoryImpl alarmRepositoryImpl = new AlarmRepositoryImpl(postgresConf);

    @Test
    void testCreateAlarm_PerceivedSeverityIsNull_AlarmStateIsCleared() throws Exception {
        // Arrange
        String msg = "{\"perceivedSeverity\":null, \"State\":\"Cleared\"}";
        Mockito.when(postgresConf.getAlarmStateMap()).thenReturn(getAlarmStateMap());
        Mockito.when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        Assertions.assertNotNull(alarm);
        Assertions.assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityIsEmpty_AlarmStateIsCleared() throws Exception {
        // Arrange
        String msg = "{\"perceivedSeverity\":\"\", \"State\":\"Cleared\"}";
        Mockito.when(postgresConf.getAlarmStateMap()).thenReturn(getAlarmStateMap());
        Mockito.when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        Assertions.assertNotNull(alarm);
        Assertions.assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityIsNotNullAndNotEmpty_AlarmStateIsCleared() throws Exception {
        // Arrange
        String msg = "{\"perceivedSeverity\":\"Critical\", \"State\":\"Cleared\"}";
        Mockito.when(postgresConf.getAlarmStateMap()).thenReturn(getAlarmStateMap());
        Mockito.when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        Mockito.when(postgresConf.getPerceivedSeverityMap()).thenReturn(getPerceivedSeverityMap());

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        Assertions.assertNotNull(alarm);
        Assertions.assertEquals(5, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityIsNull_AlarmStateIsNotCleared() throws Exception {
        // Arrange
        String msg = "{\"perceivedSeverity\":null, \"State\":\"New\"}";
        Mockito.when(postgresConf.getAlarmStateMap()).thenReturn(getAlarmStateMap());
        Mockito.when(postgresConf.getAlarmStateNew()).thenReturn("New");
        Mockito.when(postgresConf.getPerceivedSeverityMap()).thenReturn(getPerceivedSeverityMap());
        Mockito.when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        Assertions.assertNotNull(alarm);
        Assertions.assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityIsEmpty_AlarmStateIsNotCleared() throws Exception {
        // Arrange
        String msg = "{\"perceivedSeverity\":\"\", \"State\":\"New\"}";
        Mockito.when(postgresConf.getAlarmStateMap()).thenReturn(getAlarmStateMap());
        Mockito.when(postgresConf.getAlarmStateNew()).thenReturn("New");
        Mockito.when(postgresConf.getPerceivedSeverityMap()).thenReturn(getPerceivedSeverityMap());
        Mockito.when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        Assertions.assertNotNull(alarm);
        Assertions.assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityIsNotNullAndNotEmpty_AlarmStateIsNotCleared() throws Exception {
        // Arrange
        String msg = "{\"perceivedSeverity\":\"Critical\", \"State\":\"New\"}";
        Mockito.when(postgresConf.getAlarmStateMap()).thenReturn(getAlarmStateMap());
        Mockito.when(postgresConf.getAlarmStateNew()).thenReturn("New");
        Mockito.when(postgresConf.getPerceivedSeverityMap()).thenReturn(getPerceivedSeverityMap());

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        Assertions.assertNotNull(alarm);
        Assertions.assertEquals(5, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityIsNull_AlarmStateIsNull() throws Exception {
        // Arrange
        String msg = "{\"perceivedSeverity\":null, \"State\":null}";
        Mockito.when(postgresConf.getAlarmStateMap()).thenReturn(getAlarmStateMap());
        Mockito.when(postgresConf.getAlarmStateNew()).thenReturn("New");
        Mockito.when(postgresConf.getPerceivedSeverityMap()).thenReturn(getPerceivedSeverityMap());
        Mockito.when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        Assertions.assertNotNull(alarm);
        Assertions.assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityIsEmpty_AlarmStateIsNull() throws Exception {
        // Arrange
        String msg = "{\"perceivedSeverity\":\"\", \"State\":null}";
        Mockito.when(postgresConf.getAlarmStateMap()).thenReturn(getAlarmStateMap());
        Mockito.when(postgresConf.getAlarmStateNew()).thenReturn("New");
        Mockito.when(postgresConf.getPerceivedSeverityMap()).thenReturn(getPerceivedSeverityMap());
        Mockito.when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        Assertions.assertNotNull(alarm);
        Assertions.assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityIsNotNullAndNotEmpty_AlarmStateIsNull() throws Exception {
        // Arrange
        String msg = "{\"perceivedSeverity\":\"Critical\", \"State\":null}";
        Mockito.when(postgresConf.getAlarmStateMap()).thenReturn(getAlarmStateMap());
        Mockito.when(postgresConf.getAlarmStateNew()).thenReturn("New");
        Mockito.when(postgresConf.getPerceivedSeverityMap()).thenReturn(getPerceivedSeverityMap());

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        // Assert
        Assertions.assertNotNull(alarm);
        Assertions.assertEquals(5, alarm.getPerceivedSeverity());
    }

    private Map<String, Integer> getAlarmStateMap() {
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 0);
        alarmStateMap.put("New", 1);
        return alarmStateMap;
    }

    private Map<String, Integer> getPerceivedSeverityMap() {
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Critical", 5);
        perceivedSeverityMap.put("Indeterminate", 0);
        return perceivedSeverityMap;
    }
}
```

This test suite covers all the 8 branches of the `else if((perceivedSeverity==null || (perceivedSeverity!= null && perceivedSeverity.toString().isEmpty()))&&(stateValue==postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared()))) alarm.setPerceivedSeverity(-1);` block in the `createAlarm()` method of the `AlarmRepositoryImpl` class. The test cases are as follows:

1. `testCreateAlarm_PerceivedSeverityIsNull_AlarmStateIsCleared()`: Covers the case where `perceivedSeverity` is `null` and the `state` is `Cleared`.
2. `testCreateAlarm_PerceivedSeverityIsEmpty_AlarmStateIsCleared()`: Covers the case where `perceivedSeverity` is an empty string and the `state` is `Cleared`.
3. `testCreateAlarm_PerceivedSeverityIsNotNullAndNotEmpty_AlarmStateIsCleared()`: Covers the case where `perceivedSeverity` is not `null` and not an empty string, and the `state` is `Cleared`.
4. `testCreateAlarm_PerceivedSeverityIsNull_AlarmStateIsNotCleared()`: Covers the case where `perceivedSeverity` is `null` and the `state` is not `Cleared`.
5. `testCreateAlarm_PerceivedSeverityIsEmpty_AlarmStateIsNotCleared()`: Covers the case where `perceivedSeverity` is an empty string and the `state` is not `Cleared`.
6. `testCreateAlarm_PerceivedSeverityIsNotNullAndNotEmpty_AlarmStateIsNotCleared()`: Covers the case where `perceivedSeverity` is not `null` and not an empty string, and the `state` is not `Cleared`.
7. `testCreateAlarm_PerceivedSeverityIsNull_AlarmStateIsNull()`: Covers the case where `perceivedSeverity` is `null` and the `state` is `null`.
8. `testCreateAlarm_PerceivedSeverityIsEmpty_AlarmStateIsNull()`: Covers the case where `perceivedSeverity` is an empty string and the `state` is `null`.
9. `testCreateAlarm_PerceivedSeverityIsNotNullAndNotEmpty_AlarmStateIsNull()`: Covers the case where `perceivedSeverity` is not `null` and not an empty string, and the `state` is `null`.

These test cases ensure that the `createAlarm()` method of the `AlarmRepositoryImpl` class handles all the possible combinations of `perceivedSeverity` and `state` values correctly, and that the `perceivedSeverity` is set to the appropriate value based on the input.