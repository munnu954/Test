To achieve 100% code coverage for the `@Builder` functionality of the `CollectionAudit` class, you need to write test cases that cover all possible scenarios you might encounter when using the builder. This includes creating instances with all attributes, with a subset of attributes, and also ensuring edge cases like null values are handled. Here's how you can write such test cases using JUnit 5:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CollectionAuditBuilderTest {

    @Test
    void testFullBuilder() {
        CollectionAudit collectionAudit = CollectionAudit.builder()
                .id("1")
                .collectorId("collector123")
                .processType(ProcessType.Collector)
                .jarId("jar001")
                .jobId("job002")
                .flinkJobId("flink003")
                .jobStatus("active")
                .inputFilePath("/input/path")
                .outputFilePath("/output/path")
                .auditTopic("topic001")
                .url("http://example.com")
                .flinkURL("http://flink.com")
                .port(8080)
                .delimiters(",")
                .fileType("csv")
                .dateReceived("2023-10-10")
                .dateProcessed("2023-10-11")
                .noofRecordsInTheFile(100)
                .noofRecordsProcessed(98)
                .noofRecordsFailed(2)
                .exceptions("Some exception")
                .bootstrapServer("server001")
                .build();

        assertNotNull(collectionAudit);
        assertEquals("1", collectionAudit.getId());
        assertEquals("collector123", collectionAudit.getCollectorId());
        assertEquals(ProcessType.Collector, collectionAudit.getProcessType());
        assertEquals("jar001", collectionAudit.getJarId());
        assertEquals("job002", collectionAudit.getJobId());
        assertEquals("flink003", collectionAudit.getFlinkJobId());
        assertEquals("active", collectionAudit.getJobStatus());
        assertEquals("/input/path", collectionAudit.getInputFilePath());
        assertEquals("/output/path", collectionAudit.getOutputFilePath());
        assertNull(collectionAudit.getAuditTopic());
        assertEquals("http://example.com", collectionAudit.getUrl());
        assertEquals("http://flink.com", collectionAudit.getFlinkURL());
        assertEquals(8080, collectionAudit.getPort());
        assertEquals(",", collectionAudit.getDelimiters());
        assertEquals("csv", collectionAudit.getFileType());
        assertEquals("2023-10-10", collectionAudit.getDateReceived());
        assertEquals("2023-10-11", collectionAudit.getDateProcessed());
        assertEquals(100, collectionAudit.getNoofRecordsInTheFile());
        assertEquals(98, collectionAudit.getNoofRecordsProcessed());
        assertEquals(2, collectionAudit.getNoofRecordsFailed());
        assertEquals("Some exception", collectionAudit.getExceptions());
        assertEquals("server001", collectionAudit.getBootstrapServer());
    }

    @Test
    void testPartialBuilder() {
        CollectionAudit collectionAudit = CollectionAudit.builder()
                .id("2")
                .collectorId("collector124")
                .processType(ProcessType.Transformer)
                .build();

        assertNotNull(collectionAudit);
        assertEquals("2", collectionAudit.getId());
        assertEquals("collector124", collectionAudit.getCollectorId());
        assertEquals(ProcessType.Transformer, collectionAudit.getProcessType());
        assertNull(collectionAudit.getJarId());
        assertNull(collectionAudit.getJobId());
        assertNull(collectionAudit.getFlinkJobId());
        assertNull(collectionAudit.getJobStatus());
        assertNull(collectionAudit.getInputFilePath());
        assertNull(collectionAudit.getOutputFilePath());
        assertNull(collectionAudit.getAuditTopic());
        assertNull(collectionAudit.getUrl());
        assertNull(collectionAudit.getFlinkURL());
        assertNull(collectionAudit.getPort());
        assertNull(collectionAudit.getDelimiters());
        assertNull(collectionAudit.getFileType());
        assertNull(collectionAudit.getDateReceived());
        assertNull(collectionAudit.getDateProcessed());
        assertNull(collectionAudit.getNoofRecordsInTheFile());
        assertNull(collectionAudit.getNoofRecordsProcessed());
        assertNull(collectionAudit.getNoofRecordsFailed());
        assertNull(collectionAudit.getExceptions());
        assertNull(collectionAudit.getBootstrapServer());
    }

    @Test
    void testEmptyBuilder() {
        CollectionAudit collectionAudit = CollectionAudit.builder().build();

        assertNotNull(collectionAudit);
        assertNull(collectionAudit.getId());
        assertNull(collectionAudit.getCollectorId());
        assertNull(collectionAudit.getProcessType());
        assertNull(collectionAudit.getJarId());
        assertNull(collectionAudit.getJobId());
        assertNull(collectionAudit.getFlinkJobId());
        assertNull(collectionAudit.getJobStatus());
        assertNull(collectionAudit.getInputFilePath());
        assertNull(collectionAudit.getOutputFilePath());
        assertNull(collectionAudit.getAuditTopic());
        assertNull(collectionAudit.getUrl());
        assertNull(collectionAudit.getFlinkURL());
        assertNull(collectionAudit.getPort());
        assertNull(collectionAudit.getDelimiters());
        assertNull(collectionAudit.getFileType());
        assertNull(collectionAudit.getDateReceived());
        assertNull(collectionAudit.getDateProcessed());
        assertNull(collectionAudit.getNoofRecordsInTheFile());
        assertNull(collectionAudit.getNoofRecordsProcessed());
        assertNull(collectionAudit.getNoofRecordsFailed());
        assertNull(collectionAudit.getExceptions());
        assertNull(collectionAudit.getBootstrapServer());
    }

    @Test
    void testBuilderWithNullValues() {
        CollectionAudit collectionAudit = CollectionAudit.builder()
                .id(null)
                .collectorId(null)
                .processType(null)
                . jarId(null)
                . jobId(null)
                . flinkJobId(null)
                . jobStatus(null)
                . inputFilePath(null)
                . outputFilePath(null)
                . auditTopic(null)
                . url(null)
                . flinkURL(null)
                . port(null)
                . delimiters(null)
                . fileType(null)
                . dateReceived(null)
                . dateProcessed(null)
                . noofRecordsInTheFile(null)
                . noofRecordsProcessed(null)
                . noofRecordsFailed(null)
                . exceptions(null)
                . bootstrapServer(null)
                .build();

        assertNotNull(collectionAudit);
        assertNull(collectionAudit.getId());
        assertNull(collectionAudit.getCollectorId());
        assertNull(collectionAudit.getProcessType());
        assertNull(collectionAudit.getJarId());
        assertNull(collectionAudit.getJobId());
        assertNull(collectionAudit.getFlinkJobId());
        assertNull(collectionAudit.getJobStatus());
        assertNull(collectionAudit.getInputFilePath());
        assertNull(collectionAudit.getOutputFilePath());
        assertNull(collectionAudit.getAuditTopic());
        assertNull(collectionAudit.getUrl());
        assertNull(collectionAudit.getFlinkURL());
        assertNull(collectionAudit.getPort());
        assertNull(collectionAudit.getDelimiters());
        assertNull(collectionAudit.getFileType());
        assertNull(collectionAudit.getDateReceived());
        assertNull(collectionAudit.getDateProcessed());
        assertNull(collectionAudit.getNoofRecordsInTheFile());
        assertNull(collectionAudit.getNoofRecordsProcessed());
        assertNull(collectionAudit.getNoofRecordsFailed());
        assertNull(collectionAudit.getExceptions());
        assertNull(collectionAudit.getBootstrapServer());
    }
}
```

These unit tests cover all possible usage scenarios for the `CollectionAudit` builder, ensuring that:
1. The builder can create a fully populated `CollectionAudit` instance.
2. The builder can create a partially populated `CollectionAudit` instance.
3. The builder can create an empty `CollectionAudit` instance.
4. The builder can handle null values without throwing exceptions.