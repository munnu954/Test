import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.flink.util.Collector;

import java.io.IOException;

public class CsvToJsonConversion implements FlatMapFunction<String, String> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void flatMap(String input, Collector<String> collector) {
        try {
            String[] lines = input.split("\n");

            ObjectNode resultNode = objectMapper.createObjectNode();
            String currentObjectKey = null;
            ObjectNode currentObject = null;

            for (String line : lines) {
                String[] values = line.split(",");

                if (values.length > 1) {
                    String jsonKey = values[1].trim().replace("\"", "");
                    String jsonValue = values[2].trim().replace("\"", "");

                    if (jsonKey.isEmpty()) {
                        // If key is empty, it's a nested object
                        currentObject = objectMapper.createObjectNode();
                        currentObjectKey = jsonValue;
                    } else {
                        // If key is not empty, it's a field in the current object
                        if (currentObject != null) {
                            currentObject.put(jsonKey, jsonValue);
                        } else {
                            // If there's no currentObject, it's a field in the main object
                            resultNode.put(jsonKey, jsonValue);
                        }
                    }
                }
            }

            if (currentObject != null && currentObjectKey != null) {
                resultNode.set(currentObjectKey, currentObject);
            }

            collector.collect(resultNode.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
