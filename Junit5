import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.net.URI;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.doThrow;


@ExtendWith(MockitoExtension.class)
public class ApiOperationTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlarmGroupingParams configParams;

    @InjectMocks
    private ApiOperation apiOperation;


    @Test
    void testGetAlarmDetailsById_HttpClientErrorExceptionNotFound() {
        // Mock the config parameters
        when(configParams.getAlarmFetchURL()).thenReturn("http://example.com/alarms");
        when(configParams.getAlarmFilterKey()).thenReturn("test-key");

        // Mock the RestTemplate to throw a 404 exception
        doThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND, "Not Found")).when(restTemplate)
                .exchange(Mockito.any(String.class), Mockito.any(HttpMethod.class), Mockito.any(HttpEntity.class), Mockito.eq(String.class));


        String result = apiOperation.getAlarmDetailsById("someAlarmId");

        // Assert that the result is null (as expected when 404 occurs)
        assertNull(result);

        //Verify that the logger.warn was called (this requires setting up a mock for your logger)

       // Mockito.verify(logger).warn(Mockito.anyString());
    }
}