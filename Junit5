To achieve 100% code coverage for the `SystemException` catch block in the `saveEvents` method and the catch block in the `renderEvents` method of the `EventManager` class, you can write JUnit 5 test cases using mocking frameworks like Mockito to simulate the conditions that lead to exceptions being thrown. Below are the test cases for both methods:

### JUnit 5 Test Case for `saveEvents` Method

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventManagerTest {

    @Mock
    private EventsRepository eventsRepository;

    @Mock
    private EventsValidator validator;

    @InjectMocks
    private EventManager eventManager;

    private static final Logger LOGGER = LoggerFactory.getLogger(EventManagerTest.class);

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testSaveEvents_systemException() throws SystemException {
        EventSaveRequest request = mock(EventSaveRequest.class);

        doThrow(new SystemException("System exception occurred")).when(validator).validateInsert(request);

        EventResponse response = eventManager.saveEvents(request);

        assertEquals("FAILURE_CODE", response.getStatus().getCode());
        assertEquals("System exception occurred", response.getStatus().getMessage());
    }
}
```

### JUnit 5 Test Case for `renderEvents` Method

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventManagerTest {

    @Mock
    private EventsRepository eventsRepository;

    @Mock
    private EventsValidator validator;

    @InjectMocks
    private EventManager eventManager;

    private static final Logger LOGGER = LoggerFactory.getLogger(EventManagerTest.class);

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testRenderEvents_exception() {
        EventSearchRequest searchRequest = mock(EventSearchRequest.class);
        when(searchRequest.getServiceHeader()).thenReturn("Header");

        doThrow(new RuntimeException("Runtime exception occurred")).when(validator).validateRetrieve(searchRequest);

        EventSearchResponse response = eventManager.renderEvents(searchRequest);

        assertEquals("INVALID_CODE", response.getStatus().getCode());
        assertEquals("Runtime exception occurred", response.getStatus().getMessage());
    }
}
```

### Explanation:
1. **Mocking**: The test cases use Mockito to mock the dependencies of the `EventManager` class, such as `EventsRepository` and `EventsValidator`.

2. **Simulating Exceptions**: The `doThrow` method is used to simulate exceptions when certain methods are called. This allows you to test the exception handling code in the `EventManager` methods.

3. **Assertions**: The test cases verify that the `ServiceStatus` code and message are set correctly when exceptions are thrown, ensuring that the `catch` blocks are executed properly. 

4. **Setup**: The `@BeforeEach` annotated `setUp` method initializes the mocks before each test. 

These test cases cover the scenarios where exceptions are thrown, leading to the execution of the catch blocks, thus achieving 100% code coverage for those parts of the `EventManager` class.