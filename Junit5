org.junit.jupiter.api.Test;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

public class MessageReaderServiceTest {

    @Test
    public void testInitializeMessageReaderService() throws Exception {
        MessageReaderService messageReaderService = new MessageReaderService();

        // Set private field `reader` to null
        Field readerField = MessageReaderService.class.getDeclaredField("reader");
        readerField.setAccessible(true);
        readerField.set(messageReaderService, null);

        // Call the private method `initializeMessageReaderService` using reflection
        Method initializeMessageReaderServiceMethod = MessageReaderService.class.getDeclaredMethod("intialializeMessageReaderService");
        initializeMessageReaderServiceMethod.setAccessible(true);
        initializeMessageReaderServiceMethod.invoke(messageReaderService);

        // Check if `reader` is not null after initialization
        assertNotNull(readerField.get(messageReaderService));

        // Set private field `reader` to a valid value
        Reader<byte[]> mockReader = mock(Reader.class);
        readerField.set(messageReaderService, mockReader);

        // Call the private method `initializeMessageReaderService` using reflection
        initializeMessageReaderServiceMethod.invoke(messageReaderService);

        // Check if `reader` is not null after initialization
        assertNotNull(readerField.get(messageReaderService));
    }
}
```

In this test case, we first set the `reader` field to null and then call