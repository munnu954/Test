Here are some JUnit test cases for the TextToJsonJob:


import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class TextToJsonJobTest {

    private static final String INPUT_FILE_PATH = "src/test/resources/input.txt";
    private static final String OUTPUT_FILE_PATH = "src/test/resources/output.json";

    @Parameterized.Parameters(name = "Test with input file: {0}")
    public static Collection<Object[]> data() throws IOException {
        return Arrays.asList(new Object[][]{
            {INPUT_FILE_PATH},
        });
    }

    private final String inputFilePath;

    public TextToJsonJobTest(String inputFilePath) {
        this.inputFilePath = inputFilePath;
    }

    @Test
    public void testUploadToFlinkCluster() throws Exception {
        TextToJsonJob job = new TextToJsonJob();
        job.setInputFilePath(inputFilePath);
        job.setOutputFilePath(OUTPUT_FILE_PATH);
        job.run();

        assertEquals(0, job.getJobExecutionResult().getFailures().size());
    }

    @Test
    public void testTextToJsonTransformerJob() throws Exception {
        TextToJsonJob job = new TextToJsonJob();
        job.setInputFilePath(inputFilePath);
        job.setOutputFilePath(OUTPUT_FILE_PATH);
        job.run();

        String output = readFile(OUTPUT_FILE_PATH);
        assertEquals("{\"key1\":\"value1\",\"key2\":\"value2\"}", output);
    }

    @Test
    public void testOutputInExpectedJsonFormat() throws Exception {
        TextToJsonJob job = new TextToJsonJob();
        job.setInputFilePath(inputFilePath);
        job.setOutputFilePath(OUTPUT_FILE_PATH);
        job.run();

        String output = readFile(OUTPUT_FILE_PATH);
        JSONObject jsonObject = new JSONObject(output);
        assertEquals("value1", jsonObject.get("key1"));
        assertEquals("value2", jsonObject.get("key2"));
    }

    @Test
    public void testHandleLargeInputFiles() throws Exception {
        TextToJsonJob job = new TextToJsonJob();
        job.setInputFilePath("src/test/resources/large_input.txt");
        job.setOutputFilePath(OUTPUT_FILE_PATH);
        job.run();

        String output = readFile(OUTPUT_FILE_PATH);
        assertEquals("{\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\",\"key4\":\"value4\",\"key5\":\"value5\",\"key6\":\"value6\",\"key7\":\"value7\",\"key8\":\"value8\",\"key9\":\"value9\",\"key10\":\"value10\"}", output);
    }

    @Test
    public void testHandleEmptyInputFiles() throws Exception {
        TextToJsonJob job = new TextToJsonJob();
        job.setInputFilePath("src/test/resources/empty_input.txt");
        job.setOutputFilePath(OUTPUT_FILE_PATH);
        job.run();

        String output = readFile(OUTPUT_FILE_PATH);
        assertEquals("", output);
    }

    private String readFile(String filePath) throws IOException {
        StringBuilder builder = new StringBuilder();
        try (
            FileReader reader = new FileReader(filePath);
            BufferedReader bufferedReader = new BufferedReader(reader)
        ) {
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                builder.append(line);
            }
        }
        return builder.toString();
    }
}