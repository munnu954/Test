To create JUnit 5 test cases for the specific branch of the `validateIterator` method in the `MtnInsightsValidator` class that you mentioned, you need to mock the input data to trigger the specific conditions. Below are the JUnit 5 test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;
    private MtnInsightsAttributes attributes;
    private String logVal;

    @BeforeEach
    public void setUp() {
        validator = new MtnInsightsValidator();
        attributes = new MtnInsightsAttributes();
        logVal = "LogVal "; // Example log value
    }

    @Test
    public void testValidateIterator_NetworkOutageCategory() {
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName(null);

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_NetworkOutageName() {
        attributes.setInsightCategory(null);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_NetworkOutageNameSecond() {
        attributes.setInsightCategory(null);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(1));

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_BothCategoryAndName() {
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_EmptyAttributes() {
        attributes.setInsightCategory("");
        attributes.setInsightName("");

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_NullCategoryAndValidName() {
        attributes.setInsightCategory(null);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_ValidCategoryAndNullName() {
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName(null);

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_ValidCategoryAndEmptyName() {
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName("");

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_EmptyCategoryAndValidName() {
        attributes.setInsightCategory("");
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }

    @Test
    public void testValidateIterator_NullCategoryAndEmptyName() {
        attributes.setInsightCategory(null);
        attributes.setInsightName("");

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, logVal);
        });

        Assertions.assertEquals(logVal + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, exception.getMessage());
    }
}
```

### Explanation

1. **Setup**: A `MtnInsightsValidator` instance and a `MtnInsightsAttributes` instance are created before each test.
   
2. **Test Cases**: Each test case is designed to trigger the specific branch condition where either the insight category or insight name (or both) match the conditions that lead to an `InvalidRequestException` being thrown with the message defined in the constants.

3. **Assertions**: The tests assert that the expected exception is thrown and that the message matches what's expected for that branch.

These tests ensure that the specific branch logic is covered, and they handle the conditions that lead to the triggering of the `InvalidRequestException` with the network outage mandatory message.