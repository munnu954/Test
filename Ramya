import org.apache.flink.api.common.accumulators.IntCounter;
import org.apache.flink.api.common.functions.RichFlatMapFunction;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.util.Collector;
import org.apache.flink.api.java.tuple.Tuple2;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONException;
import org.json.JSONObject;

public class CsvToJsonMRFCnTransformer extends RichFlatMapFunction<Tuple2<String, CollectionAudit>, Tuple2<JSONObject, CollectionAudit>> {
    private static final Logger LOGGER = LoggerFactory.getLogger(CsvToJsonMRFCnTransformer.class);

    private String[] commonHeaders;
    private String[] headers;
    private JSONObject commonObj;
    private int index = 0;
    private final IntCounter successIntCounter = new IntCounter();
    private final IntCounter failureIntCounter = new IntCounter();
    private final PublishAuditMessage pubAuditMsg = new PublishAuditMessage();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(Tuple2<String, CollectionAudit> tupleValue, Collector<Tuple2<JSONObject, CollectionAudit>> out) {
        CollectionAudit message = tupleValue.f1;
        String csvContent = tupleValue.f0;

        try {
            if (message != null && csvContent != null) {
                String[] lines = csvContent.split(System.lineSeparator());
                String fileName = message.getInputFilePath().substring(message.getInputFilePath().lastIndexOf("/") + 1); // Extracting file name from inputFilePath
                LOGGER.debug("Processing file: {}", fileName);

                for (String line : lines) {
                    LOGGER.debug("Processing line: {}", line);
                    String[] arr;
                    if (index < 2) {
                        arr = line.split(",");
                        if (index == 0) {
                            commonHeaders = arr;
                            LOGGER.debug("Set common headers: {}", (Object) commonHeaders);
                        } else if (index == 1) {
                            commonObj = createJSONObject(commonHeaders, arr, null, fileName);
                            LOGGER.debug("Created common JSON object: {}", commonObj);
                        }
                        index++;
                        continue;
                    }

                    arr = line.split(",");
                    if (headers == null) {
                        headers = arr;
                        LOGGER.debug("Set headers: {}", (Object) headers);
                        index++;
                        continue;
                    }

                    if (headers.length == arr.length) {
                        JSONObject obj = createJSONObject(headers, arr, commonObj, fileName);
                        LOGGER.debug("Created JSON object: {}", obj);
                        this.successIntCounter.add(1);
                        out.collect(Tuple2.of(obj, message));
                    } else {
                        this.failureIntCounter.add(1);
                        LOGGER.error("Mismatched CSV line, header length: {}, data length: {}", headers.length, arr.length);
                    }
                }
            } else {
                LOGGER.error("Message or CSV content is null. Message: {}, CSV Content: {}", message, csvContent);
            }
        } catch (Exception e) {
            LOGGER.error("Error while trying to transform from CSV to JSON", e);
            pubAuditMsg.publishFlinkConversionStatus(message, null, JobStatus.FLINK_JOB_FAILED);
        }
    }

    private JSONObject createJSONObject(String[] headerArr, String[] dataArr, JSONObject commonJSON, String fileName) throws JSONException {
        JSONObject obj = (commonJSON == null) ? new JSONObject() : new JSONObject(commonJSON.toString());
        for (int i = 0; i < dataArr.length; i++) {
            String jsonKey = headerArr[i].trim().replace("\"", "");
            String jsonValue = dataArr[i].trim().replace("\"", "");
            obj.put(jsonKey, jsonValue);
        }
        obj.put("FILENAME", fileName);
        return obj;
    }

    public Integer getSuccessIntCounter() {
        return this.successIntCounter.getLocalValue();
    }

    public Integer getFailureIntCounter() {
        return this.failureIntCounter.getLocalValue();
    }
}
