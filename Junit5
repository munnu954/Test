Certainly! Let's write JUnit 5 test cases for the `retryConsumerConnection()` and `shutdown()` methods in the `MessageConsumer` class. We'll use Mockito to mock dependencies and `ReflectionTestUtils` to set private fields and invoke private methods.

Here's the updated test class with test cases for `retryConsumerConnection()` and `shutdown()`:

```java
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(MockitoExtension.class)
public class MessageConsumerTest {

    @Mock
    private CustomHealthChecker healthChecker;
    @Mock
    private Environment environment;
    @Mock
    private MeterRegistry meterRegistry;
    @Mock
    private MessageProducer messageProducer;
    @Mock
    private Consumer<byte[]> consumer;
    @Mock
    private HistogramBuckets histogramBuckets;

    @InjectMocks
    private MessageConsumer messageConsumer;

    @BeforeEach
    public void setUp() {
        // Initialize any required fields
        ReflectionTestUtils.setField(messageConsumer, "VMBConnectionFailureThresholdCount", 3);
        when(environment.getProperty(anyString())).thenReturn("test");
        when(histogramBuckets.histogramBoundaries()).thenReturn(new double[]{0.1, 1.0, 10.0});
    }

    @Test
    public void testRetryConsumerConnection() {
        // Simulate failure condition
        ReflectionTestUtils.setField(messageConsumer, "failureVMBConnectionCount", 3);

        // Call the private method using ReflectionTestUtils
        ReflectionTestUtils.invokeMethod(messageConsumer, "retryConsumerConnection");

        // Verify that healthChecker is set to unhealthy and System.exit is called
        verify(healthChecker, times(1)).setHealth(false, "VMB connection failure threshold count reached in consumer");
        // Note: System.exit() is difficult to test directly, so ensure logic up to it is verified.
    }

    @Test
    public void testRetryConsumerConnectionBelowThreshold() {
        // Simulate a condition where the failure count is below the threshold
        ReflectionTestUtils.setField(messageConsumer, "failureVMBConnectionCount", 2);
        when(VMBUtil.createConsumerConnection(any(), any())).thenReturn(mock(Consumer.class));

        // Call the private method using ReflectionTestUtils
        ReflectionTestUtils.invokeMethod(messageConsumer, "retryConsumerConnection");

        // Verify that a new consumer connection is attempted
        verify(consumer, never()).close();
        verify(healthChecker, never()).setHealth(anyBoolean(), anyString());
    }

    @Test
    public void testShutdown() {
        // Set the consumer to a mock object
        ReflectionTestUtils.setField(messageConsumer, "consumer", consumer);

        // Call the shutdown method
        messageConsumer.shutdown();

        // Verify that the consumer is closed
        verify(consumer, times(1)).close();
    }
}
```

### Explanation:

- **Test Setup**: We use `@BeforeEach` to set up the necessary mocks and fields before each test. This includes setting the failure threshold count and stubbing necessary methods.

- **`testRetryConsumerConnection()`**: This test simulates the condition where the failure count exceeds the threshold. It checks that the `setHealth` method on the `healthChecker` is called to set the service as unhealthy. Testing `System.exit()` directly is not straightforward, so we ensure the logic leading up to it is correct.

- **`testRetryConsumerConnectionBelowThreshold()`**: This test simulates the condition where the failure count is below the threshold. It verifies that a new consumer connection is attempted without setting the health to unhealthy.

- **`testShutdown()`**: This test verifies that the `shutdown()` method properly closes the consumer. We mock the consumer object and ensure it's closed when `shutdown()` is called.

These tests should cover the essential logic for the `retryConsumerConnection()` and `shutdown()` methods.