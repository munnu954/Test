To cover the branches in the `EventLedgerServiceManager` class with JUnit 5 test cases, we will create a test class that mocks the dependencies and verifies the behavior for each branch in the if statements. Here's an example of how you might write these test cases:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.util.ReflectionTestUtils;

class EventLedgerServiceManagerTest {

    @Mock
    private EventLedgerRepository eventLedgerRepository;

    @Mock
    private EventLedgerValidator validator;

    @InjectMocks
    private EventLedgerServiceManager eventLedgerServiceManager;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(eventLedgerServiceManager, "insertToEventLedger", "true");
    }

    @Test
    void testSaveEventLedger_interactionsChannelTrue() {
        // Arrange
        EventLedgerRequest request = createRequest(EventLedgerConstants.EVENT_CATEGORY_INTERACTIONS, EventLedgerConstants.EVENT_CHANNEL_MYBIZ);
        ReflectionTestUtils.setField(eventLedgerServiceManager, "insertToEventLedger", EventLedgerConstants.TRUE);

        // Act
        EventLedgerResponse response = eventLedgerServiceManager.saveEventLedger(request);

        // Assert
        assertEquals(SUCCESS_CODE, response.getStatus().getCode());
        verify(eventLedgerRepository).insert(any(EventLedgerEntity.class));
    }

    @Test
    void testSaveEventLedger_interactionsChannelFalse() {
        // Arrange
        EventLedgerRequest request = createRequest(EventLedgerConstants.EVENT_CATEGORY_INTERACTIONS, "otherChannel");
        
        // Act
        EventLedgerResponse response = eventLedgerServiceManager.saveEventLedger(request);

        // Assert
        assertEquals(SUCCESS_CODE, response.getStatus().getCode());
        verify(eventLedgerRepository).insert(any(EventLedgerEntity.class));
    }

    @Test
    void testSaveEventLedger_nonInteractionsChannelMyBizTrue() {
        // Arrange
        EventLedgerRequest request = createRequest("otherCategory", EventLedgerConstants.EVENT_CHANNEL_MYBIZ);
        
        // Act
        EventLedgerResponse response = eventLedgerServiceManager.saveEventLedger(request);

        // Assert
        assertEquals(SUCCESS_CODE, response.getStatus().getCode());
        verify(eventLedgerRepository).insert(any(EventLedgerEntity.class));
    }

    @Test
    void testSaveEventLedger_nonInteractionsChannelMyBizFalse() {
        // Arrange
        EventLedgerRequest request = createRequest("otherCategory", "otherChannel");
        
        // Act
        EventLedgerResponse response = eventLedgerServiceManager.saveEventLedger(request);

        // Assert
        assertEquals(SUCCESS_CODE, response.getStatus().getCode());
        verify(eventLedgerRepository).insert(any(EventLedgerEntity.class));
    }

    @Test
    void testSaveEventLedger_interactionsChannelMyBizInsertFalse() {
        // Arrange
        EventLedgerRequest request = createRequest(EventLedgerConstants.EVENT_CATEGORY_INTERACTIONS, EventLedgerConstants.EVENT_CHANNEL_MYBIZ);
        ReflectionTestUtils.setField(eventLedgerServiceManager, "insertToEventLedger", EventLedgerConstants.FALSE);

        // Act
        EventLedgerResponse response = eventLedgerServiceManager.saveEventLedger(request);

        // Assert
        assertEquals(SUCCESS_CODE, response.getStatus().getCode());
        verify(eventLedgerRepository).insert(any(EventLedgerEntity.class));
    }

    @Test
    void testSaveEventLedger_throwsInvalidRequestException() throws Exception {
        // Arrange
        EventLedgerRequest request = createRequest(EventLedgerConstants.EVENT_CATEGORY_INTERACTIONS, EventLedgerConstants.EVENT_CHANNEL_MYBIZ);
        doThrow(new InvalidRequestException("Invalid Request")).when(validator).validateStore(request);

        // Act
        EventLedgerResponse response = eventLedgerServiceManager.saveEventLedger(request);

        // Assert
        assertEquals(INVALID_CODE, response.getStatus().getCode());
        assertEquals("Invalid Request", response.getStatus().getMessage());
    }

    private EventLedgerRequest createRequest(String eventCategory, String eventChannel) {
        EventLedgerAttributes attributes = new EventLedgerAttributes();
        attributes.setEventCategory(eventCategory);
        attributes.setEventChannel(eventChannel);

        EventLedgerRequest request = new EventLedgerRequest();
        request.setKeyAttributes(attributes);
        return request;
    }
}
```

### Explanation:
- **Mocks**: We use Mockito to mock dependencies (`EventLedgerRepository` and `EventLedgerValidator`).
- **ReflectionTestUtils**: This utility is used to set the private field `insertToEventLedger` in the `EventLedgerServiceManager`.
- **Test Cases**: We create several test cases to cover different branches:
  - `testSaveEventLedger_interactionsChannelTrue`: Tests the branch where both conditions are true.
  - `testSaveEventLedger_interactionsChannelFalse`: Tests when the event channel is not `MYBIZ`.
  - `testSaveEventLedger_nonInteractionsChannelMyBizTrue` and `testSaveEventLedger_nonInteractionsChannelMyBizFalse`: Test non-interaction categories.
  - `testSaveEventLedger_interactionsChannelMyBizInsertFalse`: Tests when `insertToEventLedger` is set to `false`.
  - `testSaveEventLedger_throwsInvalidRequestException`: Tests exception handling for invalid requests.

These tests provide 100% coverage for the specified branches in the if statements of the `saveEventLedger` method.