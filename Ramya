import com.jcraft.jsch.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class SSHServiceTest {

    @InjectMocks
    private SSHService sshService;

    @Mock
    private CollectorUtil collectorUtil;

    @Mock
    private DateUtil dateUtil;

    @Mock
    private LuceneCollectionAuditRepository luceneCollectionAuditRepo;

    @Mock
    private JSchFactory jschFactory;

    @Mock
    private OutputStreamCreator outputStreamCreator;

    @Mock
    private KafkaProducerService kafkaProducerService;

    @Mock
    private S3Service s3Service;

    @Mock
    private JSch jsch;

    @Mock
    private Session session;

    @Mock
    private ChannelSftp channelSftp;

    private SpaceCollector sp;
    private String dateReceived;
    private String auditTopic;

    @BeforeEach
    void setUp() throws Exception {
        sp = new SpaceCollector();
        sp.setUserName("user");
        sp.setUrl("host");
        sp.setPassword("password");
        sp.setPort(22);
        sp.setInputFilePath("/remote/path");
        sp.setOutputFilePath("/local/path");

        dateReceived = "2023-01-01";
        auditTopic = "audit-topic";

        when(jschFactory.createJSch()).thenReturn(jsch);
        when(jsch.getSession(anyString(), anyString(), anyInt())).thenReturn(session);
        when(session.openChannel("sftp")).thenReturn(channelSftp);
        doNothing().when(session).connect();
        doNothing().when(channelSftp).connect();
        doNothing().when(channelSftp).disconnect();
        doNothing().when(session).disconnect();
    }

    @Test
    void retrieveData_success() throws Exception {
        when(FileUtil.getDirectory(sp.getInputFilePath())).thenReturn("/remote/path");
        when(FileUtil.getDirectory(sp.getOutputFilePath())).thenReturn("/local/path");
        when(channelSftp.ls(anyString())).thenReturn(new Vector<>());

        boolean result = sshService.retrieveData(sp, dateReceived, auditTopic);

        assertTrue(result);
        verify(session).connect();
        verify(channelSftp).connect();
        verify(channelSftp).disconnect();
        verify(session).disconnect();
    }

    @Test
    void retrieveAndProcessDirectory() throws Exception {
        ChannelSftp.LsEntry file = mock(ChannelSftp.LsEntry.class);
        SftpATTRS attrs = mock(SftpATTRS.class);
        when(file.getAttrs()).thenReturn(attrs);
        when(attrs.isDir()).thenReturn(true);
        Vector<ChannelSftp.LsEntry> files = new Vector<>();
        files.add(file);

        when(channelSftp.ls(anyString())).thenReturn(files);
        when(file.getFilename()).thenReturn("file.txt");
        when(channelSftp.get(anyString())).thenReturn(mock(OutputStream.class));

        sshService.retrieveAndProcessDirectory(sp, dateReceived, auditTopic, "/remote/path", "/local/path", channelSftp);

        verify(channelSftp).ls("/remote/path");
    }

    @Test
    void processDownloadedFile() throws Exception {
        List<String> filesList = new ArrayList<>();
        filesList.add("/local/path/file.txt");

        when(FileUtil.readFilesInDirectory(anyString())).thenReturn(filesList);
        when(FileUtil.getFileNameWithoutExtn(anyString())).thenReturn("file");
        when(ZipUtil.isZipFile(anyString())).thenReturn(false);

        sshService.processDownloadedFile(sp, dateReceived, auditTopic, "/local/path/file.txt", "/local/path");

        verify(s3Service).pushToS3(anyString(), anyString());
    }

    @Test
    void createAuditObject() {
        String auditInputFilePath = "/remote/path/file.txt";
        String auditJobStatus = "SUCCESS";
        String auditExceptions = "";

        CollectionAudit audit = sshService.createAuditObject(sp, auditInputFilePath, auditJobStatus, auditExceptions);

        assertNotNull(audit);
        assertEquals(auditInputFilePath, audit.getInputFilePath());
        assertEquals(auditJobStatus, audit.getJobStatus());
        assertEquals(auditExceptions, audit.getExceptions());
    }

    @Test
    void getAuditStatusMap() {
        Vector<ChannelSftp.LsEntry> files = new Vector<>();
        ChannelSftp.LsEntry file = mock(ChannelSftp.LsEntry.class);
        files.add(file);

        List<CollectionAudit> audits = new ArrayList<>();
        CollectionAudit audit = new CollectionAudit();
        audit.setInputFilePath("/remote/path/file.txt");
        audit.setJobStatus("SUCCESS");
        audits.add(audit);

        when(file.getAttrs()).thenReturn(mock(SftpATTRS.class));
        when(file.getAttrs().isDir()).thenReturn(false);
        when(file.getFilename()).thenReturn("file.txt");
        when(luceneCollectionAuditRepo.findLatestByFilePaths(anyList())).thenReturn(audits);

        Map<String, String> auditStatusMap = sshService.getAuditStatusMap(files, "/remote/path");

        assertNotNull(auditStatusMap);
        assertEquals("SUCCESS", auditStatusMap.get("/remote/path/file.txt"));
    }

    @Test
    void partitionList() {
        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);
        List<List<Integer>> partitions = sshService.partitionList(list, 2);

        assertEquals(3, partitions.size());
        assertEquals(Arrays.asList(1, 2), partitions.get(0));
        assertEquals(Arrays.asList(3, 4), partitions.get(1));
        assertEquals(Collections.singletonList(5), partitions.get(2));
    }

    @Test
    void getJsch() throws JSchException {
        when(jschFactory.createJSch()).thenReturn(jsch);

        JSch result = sshService.getJsch("host", "password");

        assertNotNull(result);
        verify(jsch).addIdentity("/prod/eclapp/lib/id_rsa_decoded");
        verify(jsch).setKnownHosts(System.getProperty("user.home") + SSHService.SSH_KNOWN_HOSTS);
    }
}
