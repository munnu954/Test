Sure! Here is an example of JUnit test cases covering all the branches of the @Builder annotation for the CollectionAudit class:

```    public void testBuilder() {
        CollectionAudit collectionAudit = CollectionAudit.builder()
                .id("123")
                .collectorId("456")
                .processType(ProcessType.Collector)
                .jarId("789")
                .jobId("101112")
                .flinkJobId("131415")
                .jobStatus("SUCCESS")
                .inputFilePath("/path/to/input/file.txt")
                .outputFilePath("/path/to/output/file.txt")
dateReceived("2024-07-07")
                .dateProcessed("2024-07-08")
                .noOfRecordsInTheFile(100)
                .noOfRecordsProcessed(90)
                .noOfRecordsFailed(10)
                .exceptions("Error occurred")
                .bootstrapServer("localhost:9092")
                .build();

        assertEquals("123", collectionAudit.getId());
        assertEquals("456", collectionAudit.getCollectorId());
        assertEquals(ProcessType.Collector, collectionAudit.getProcessType());
        // Add more assertions for other fields
    }
}
```

You can create additional test cases to cover different scenarios and ensure 100% code coverage for the @Builder annotation in the CollectionAudit class. 

