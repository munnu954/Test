public class CsvToJsonFlinkJob extends RichFlatMapFunction<String, String> {

    @Override
    public void flatMap(String input, Collector<String> collector) throws Exception {
        String[] values = input.split(",");
        String objectName = values[2];
        String beginDate = getColumnValue("BEGIN DATE", values);
        String endDate = getColumnValue("END DATE", values);
        String ticketNumber = getColumnValue("TICKET NUMBER", values);

        JsonObject json = new JsonObject();
        json.addProperty("ObjectName", objectName);
        json.addProperty("Begin Date", beginDate);
        json.addProperty("End Date", endDate);
        json.addProperty("Ticket Number", ticketNumber);

        // Handle different sections and details dynamically
        handleSection(objectName, values, json);

        collector.collect(json.toString());
    }

    private String getColumnValue(String columnHeader, String[] values) {
        for (int i = 0; i < values.length; i++) {
            if (values[i].trim().equals(columnHeader)) {
                return values[i + 1].trim(); // Assuming the value is in the next column
            }
        }
        return "";
    }

    private void handleSection(String objectName, String[] values, JsonObject json) {
        JsonObject sectionJson = new JsonObject();

        // Assuming section headers are in the row with "MAX AVERAGE MIN CUMULATIVE COUNTER VALUE"
        String[] headers = values[values.length - 1].split(",");
        
        // Assuming details start from the row after section headers
        String[] details = values[values.length - 2].split(",");
        
        for (int i = 0; i < details.length; i++) {
            sectionJson.addProperty(headers[i].trim(), details[i].trim());
        }

        // Add section to the main JSON
        json.add(objectName, sectionJson);
    }
}
