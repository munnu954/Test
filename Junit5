```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.Arrays;

import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import com.google.common.collect.ImmutableMap;
import com.netflix.spectator.api.NoopRegistry;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

class UserInsightsValidatorTest {

    @InjectMocks
    private UserInsightsValidator userInsightsValidator;

    @Mock
    private AbstractInsightsValidator abstractInsightsValidator;

    @BeforeEach
    void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    @DisplayName("Test validate method with valid UserInsightsRequest")
    void testValidateWithValidUserInsightsRequest() throws InvalidRequestException {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setServiceHeader(new ServiceHeader());
        Mockito.doNothing().when(abstractInsightsValidator).validate(request.getServiceHeader());

        userInsightsValidator.validate(request);
    }

    @Test
    @DisplayName("Test validate method with null UserInsightsRequest")
    void testValidateWithNullUserInsightsRequest() {
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validate(null);
        });

        assertEquals("Request cannot be null", exception.getMessage());
    }

    @Test
    @DisplayName("Test validate method with invalid request type")
    void testValidateWithInvalidRequestType() throws InvalidRequestException {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        request.setServiceHeader(new ServiceHeader());
        Mockito.doNothing().when(abstractInsightsValidator).validate(request.getServiceHeader());

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validate(request);
        });

        assertEquals("Invalid request type ", exception.getMessage());
    }

    @Test
    @DisplayName("Test validate method with null keyAttributes and listKeyAttributes")
    void testValidateWithNullKeyAttributesAndListKeyAttributes() throws InvalidRequestException {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setServiceHeader(new ServiceHeader());
        Mockito.doNothing().when(abstractInsightsValidator).validate(request.getServiceHeader());

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validate(request);
        });

        assertEquals("Either KeyAttributes (Single) or ListKeyAttributes (Multiple) are required.", exception.getMessage());
    }

    @Test
    @DisplayName("Test validate method with null keyAttributes but valid listKeyAttributes")
    void testValidateWithNullKeyAttributesButValidListKeyAttributes() throws InvalidRequestException {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setListKeyAttributes(new UserInsightsAttributes[]{new UserInsightsAttributes()});
        request.setServiceHeader(new ServiceHeader());
        Mockito.doNothing().when(abstractInsightsValidator).validate(request.getServiceHeader());

        userInsightsValidator.validate(request);
    }

    @Test
    @DisplayName("Test validate method with valid keyAttributes but null listKeyAttributes")
    void testValidateWithValidKeyAttributesButNullListKeyAttributes() throws InvalidRequestException {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setKeyAttributes(new UserInsightsAttributes());
        request.setServiceHeader(new ServiceHeader());
        Mockito.doNothing().when(abstractInsightsValidator).validate(request.getServiceHeader());

        userInsightsValidator.validate(request);
    }

    @Test
    @DisplayName("Test validateIterator method with valid UserInsightsAttributes")
    void testValidateIteratorWithValidUserInsightsAttributes() throws InvalidRequestException {
        String logVal = "ListKeyAttributes";
        UserInsightsAttributes userInsightsAttributes = new UserInsightsAttributes();
        userInsightsAttributes.setUserId("userId");
        userInsightsAttributes.setEcpdId("ecpdId");
        userInsightsAttributes.setInsightCategory("insightCategory");
        userInsightsAttributes.setInsightName("insightName");

        userInsightsValidator.validateIterator(null, userInsightsAttributes, logVal);
    }

    @Test
    @DisplayName("Test validateIterator method with null UserInsightsAttributes")
    void testValidateIteratorWithNullUserInsightsAttributes() throws InvalidRequestException {
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validateIterator(null, null, "ListKeyAttributes");
        });

        assertEquals("ListKeyAttributes: Invalid Request", exception.getMessage());
    }

    @Test
    @DisplayName("Test validateIterator method with empty userId")
    void testValidateIteratorWithEmptyUserId() throws InvalidRequestException {
        String logVal = "ListKeyAttributes";
        UserInsightsAttributes userInsightsAttributes = new UserInsightsAttributes();
        userInsightsAttributes.setEcpdId("ecpdId");
        userInsightsAttributes.setInsightCategory("insightCategory");
        userInsightsAttributes.setInsightName("insightName");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validateIterator(null, userInsightsAttributes, logVal);
        });

        assertEquals("ListKeyAttributes: Invalid Request", exception.getMessage());
    }

    @Test
    @DisplayName("Test validateIterator method with empty ecpdId")
    void testValidateIteratorWithEmptyEcpdId() throws InvalidRequestException {
        String logVal = "ListKeyAttributes";
        UserInsightsAttributes userInsightsAttributes = new UserInsightsAttributes();
        userInsightsAttributes.setUserId("userId");
        userInsightsAttributes.setInsightCategory("insightCategory");
        userInsightsAttributes.setInsightName("insightName");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validateIterator(null, userInsightsAttributes, logVal);
        });

        assertEquals("ListKeyAttributes: Invalid Request", exception.getMessage());
    }

    @Test
    @DisplayName("Test validateIterator method with empty insightCategory")
    void testValidateIteratorWithEmptyInsightCategory() throws InvalidRequestException {
        String logVal = "ListKeyAttributes";
        UserInsightsAttributes userInsightsAttributes = new UserInsightsAttributes();
        userInsightsAttributes.setUserId("userId");
        userInsightsAttributes.setEcpdId("ecpdId");
        userInsightsAttributes.setInsightName("insightName");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validateIterator(null, userInsightsAttributes, logVal);
        });

        assertEquals("ListKeyAttributes: Invalid Request", exception.getMessage());
    }

    @Test
    @DisplayName("Test validateIterator method with empty insightName")
    void testValidateIteratorWithEmptyInsightName() throws InvalidRequestException {
        String logVal = "ListKeyAttributes";
        UserInsightsAttributes userInsightsAttributes = new UserInsightsAttributes();
        userInsightsAttributes.setUserId("userId");
        userInsightsAttributes.setEcpdId("ecpdId");
        userInsightsAttributes.setInsightCategory("insightCategory");

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validateIterator(null, userInsightsAttributes, logVal);
        });

        assertEquals("ListKeyAttributes: Invalid Request", exception.getMessage());
    }

    @Test
    @DisplayName("Test validate method with valid UserInsightsSearchRequest")
    void testValidateWithValidUserInsightsSearchRequest() throws InvalidRequestException {
        UserInsightsSearchRequest request = new UserInsightsSearchRequest();
        request.setServiceHeader(new ServiceHeader());
        JSONObject jsonObject = new JSONObject(ImmutableMap.of("userId", "userId", "ecpdId", "ecpdId", "insightCategory", new JSONArray(Arrays.asList("insightCategory")), "insightName", new JSONArray(Arrays.asList("insightName"))));
        request.setServiceRequest(jsonObject);

        Mockito.doNothing().when(abstractInsightsValidator).validate(request.getServiceHeader());

        userInsightsValidator.validate(request);
    }

    @Test
    @DisplayName("Test validate method with null UserInsightsSearchRequest")
    void testValidateWithNullUserInsightsSearchRequest() {
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userInsightsValidator.validate(null);
        });

        assertEquals("Request cannot