Here's an example of a Spring Boot code to call the Flink API to trigger an uploaded jar file:

```java
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

@RestController
public class FlinkJobController {

    @PostMapping("/submitJob")
    public String submitJob(@RequestParam String jarFile) {
        final String flinkRestApiUrl = "http://flink-cluster:8081/jars/upload";
        RestTemplate restTemplate = new RestTemplate();

        // Upload the jar file to Flink cluster
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("jarfile", new FileSystemResource(jarFile));
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(body, headers);
        ResponseEntity<String> response = restTemplate.postForEntity(flinkRestApiUrl, entity, String.class);

        if (response.getStatusCode() == HttpStatus.OK) {
            // Get the uploaded jar's path
            String jarPath = response.getBody();

            // Trigger the submitted job
            String triggerJobUrl = "http://flink-cluster:8081/jars/" + jarPath + "/run";
            ResponseEntity<String> triggerJobResponse = restTemplate.postForEntity(triggerJobUrl, null, String.class);

            if (triggerJobResponse.getStatusCode() == HttpStatus.ACCEPTED) {
                return "Job submitted successfully";
            } else {
                return "Failed to trigger the job";
            }
        } else {
            return "Failed to upload the jar";
        }
    }
}
```

In this example, we have a `FlinkJobController` with a `submitJob` method to submit a Flink job. It uses the `RestTemplate` to make HTTP requests to the Flink cluster's REST API to upload the jar file and trigger the job. The `jarFile` parameter is the path of the submitted jar file. Make sure to replace "flink-cluster:8081" with the actual Flink cluster address and port.