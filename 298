It looks like there are several issues with your JUnit test cases. Specifically, the JSON strings are incorrectly formatted. Additionally, you need to ensure that the `createAlarm` method in `AlarmRepositoryImpl` throws the expected exceptions when invalid input is provided. Here is the corrected and updated code for your JUnit 5 test cases:

```java
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;

class AlarmRepositoryImplTest {

    @Test
    void createAlarm_withEmptyJson_shouldThrowException() {
        // Arrange
        String jsonMessage = "";

        // Act and Assert
        AlarmRepositoryImpl impl = new AlarmRepositoryImpl();
        assertThrows(Exception.class, () -> impl.createAlarm(jsonMessage));
    }

    @Test
    void createAlarm_withMissingRequiredFields_shouldThrowException() {
        // Arrange
        String jsonMessage = "{\"externalAlarmId\": \"ext-alarm-id\"}";

        // Act and Assert
        AlarmRepositoryImpl impl = new AlarmRepositoryImpl();
        assertThrows(Exception.class, () -> impl.createAlarm(jsonMessage));
    }

    @Test
    void createAlarm_withInvalidDataTypes_shouldThrowException() {
        // Arrange
        String jsonMessage = "{\"externalAlarmId\": \"ext-alarm-id\", \"sourceSystemId\": 123, " +
                             "\"alarmType\": [], \"state\": \"invalid\", \"perceivedSeverity\": \"error\", " +
                             "\"probableCause\": null, \"alarmRaisedTime\": \"not-a-date\", \"alarmUpdatedTime\": \"not-a-date\", " +
                             "\"alarmReportingTime\": \"not-a-date\", \"alarmDetails\": null, \"alarmedObject\": null, " +
                             "\"reportingObject\": null, \"alarmedObjectType\": null, \"specificProblem\": null, " +
                             "\"tid\": null, \"aid\": null, \"componentId\": null, \"extTopologyDetails\": null, " +
                             "\"topologyDetails\": null, \"count\": \"not-a-number\", \"sequenceID\": \"not-a-number\", \"tag\": 123}";

        // Act and Assert
        AlarmRepositoryImpl impl = new AlarmRepositoryImpl();
        assertThrows(Exception.class, () -> impl.createAlarm(jsonMessage));
    }
}
```

Here are the key changes:

1. Fixed the JSON formatting for the `createAlarm_withInvalidDataTypes_shouldThrowException` test case.
2. Ensured that each test case follows a consistent structure: Arrange, Act, and Assert.
3. Used the `assertThrows` method to check if an exception is thrown when calling `createAlarm` with invalid input.

Make sure that your `createAlarm` method in the `AlarmRepositoryImpl` class is designed to handle these invalid inputs and throw the appropriate exceptions. If it doesn't currently do that, you will need to implement that logic.