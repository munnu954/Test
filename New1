Sure! We can implement the logic to check if the `value` is an instance of `String`. If it is, we will use `toString()`, otherwise, we will use `writeValueAsString` to ensure that we convert the value to a valid JSON string correctly.

Hereâ€™s the updated `removeNullValuesInJsonAttributes` method reflecting these requirements:

```java
public HashMap<String, Object> removeNullValuesInJsonAttributes(Map<String, Object> msg) {
    HashMap<String, Object> resultMsg = new HashMap<>(msg);
    try {
        for (Map.Entry<String, Object> iterate : msg.entrySet()) {
            Object value = iterate.getValue();
            HashMap<String, Object> updatedMsg;

            // Convert the value to a valid JSON string
            String jsonString;
            if (value instanceof String) {
                jsonString = value.toString(); // Use toString() for String values
            } else {
                jsonString = RulesConstants.getObjectMapper().writeValueAsString(value); // Use writeValueAsString for other types
            }

            // Parse the JSON string back to a HashMap
            updatedMsg = RulesConstants.getObjectMapper().readValue(jsonString, HashMap.class);

            // Recursively call the method to remove null values in nested JSON objects
            updatedMsg = removeNullValuesInJsonAttributes(updatedMsg);

            // Remove null or empty values from updatedMsg
            updatedMsg.values().removeIf(v -> v == null || (v instanceof String && v.toString().isEmpty()));

            // If updatedMsg is not empty, put it back into the result
            if (!updatedMsg.isEmpty()) {
                resultMsg.put(iterate.getKey(), updatedMsg);
            } else {
                resultMsg.remove(iterate.getKey());
            }
        }
    } catch (Exception e) {
        logger.error("Exception occurred while trying to remove null/empty values from json attributes: " + e);
    }
    return resultMsg;
}
```

### Key Changes:
1. **Type Checking**: 
   - The code checks if `value` is an instance of `String`. If true, it directly uses `toString()`.
   - If `value` is not a string, it uses `writeValueAsString` to convert it into a valid JSON string.

2. **Parsing Logic**: 
   - After creating the `jsonString`, it is parsed back into a `HashMap` regardless of whether it originated from a string or was serialized.

3. **Preservation of Logic**: 
   - The recursive call to `removeNullValuesInJsonAttributes(updatedMsg)` remains to ensure that nested JSON objects are processed correctly, and the logic for removing null or empty values is retained.

This implementation will handle both string and non-string values appropriately, ensuring that the method works as expected.