To achieve 100% code coverage for the for loop in the `applyPostingRule` method of the `PostingRuleProcessingService` class without making the fields public, we can use Mockito along with JUnit5 to mock the private fields and test the functionality. Here's an example of how you can write JUnit5 test cases to cover the for loop branches:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private ResponseEntity<String> responseEntity;

    @Test
    void testApplyPostingRule() throws Exception {
        PostingRule rule = new PostingRule(1, "Rule1", 1, 1, "Criteria1");
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("TestAlarm");
        HashMap<String, Object> alarmMap = new HashMap<>();

        PostingRuleProcessingService service = new PostingRuleProcessingService();
        service.ruleLoadingService = ruleLoadingService;
        service.topoApiClient = topoApiClient;
        service.utils = utils;

        when(ruleLoadingService.getRuleMap()).thenReturn(new HashMap<>());
        when(utils.evaluateExpression(anyString(), any())).thenReturn("Value");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), any())).thenReturn(responseEntity);
        when(responseEntity.getBody()).thenReturn("{}");

        service.applyPostingRule(alarm, rule, alarmMap);

        // Add verification/assertions based on your logic inside the for loop
        verify(utils, atLeastOnce()).evaluateExpression(anyString(), any());
        verify(topoApiClient, atLeastOnce()).fetchTopologyTraversalDetails(any(), any(), any());
    }

    // Add more test cases to cover various scenarios and branches inside the for loop
}
```

Please note that this is a basic example, and you should customize it according to your specific logic and conditions within the for loop for more comprehensive test coverage. You can add more test cases to cover different scenarios and edge cases to ensure thorough testing.