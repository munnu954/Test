import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.OffsetDateTime;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EnrichmentServiceTest {

    @Mock
    private CbrsSuppressionRepository cbrsSuppressionRepository;

    @Mock
    private AlarmPostingRepository alarmPostingRepository;

    @InjectMocks
    private EnrichmentService enrichmentService;

    @Test
    void enrichGeneratedCbrsSuppressionAlarm_AlarmDetailsExist_Success() {
        CbrsSuppressionAlarm cbrsSuppressionAlarm = new CbrsSuppressionAlarm();
        cbrsSuppressionAlarm.setAlarmIdentity("TestAlarmIdentity");
        AlarmDetailsModel alarmDetailsModel = new AlarmDetailsModel("{\"key\": \"value\"}", 1L);

        when(alarmPostingRepository.findByAlarmIdentity(any())).thenReturn(Optional.of(alarmDetailsModel));
        when(alarmPostingRepository.updateAlarmDetails(any(), any(), any())).thenReturn(1);
        when(cbrsSuppressionRepository.updateAlarmEnrichmentTime(any(), any())).thenReturn(1);

        enrichmentService.enrichGeneratedCbrsSuppressionAlarm(cbrsSuppressionAlarm);

        verify(alarmPostingRepository, times(1)).findByAlarmIdentity(any());
        verify(alarmPostingRepository, times(1)).updateAlarmDetails(any(), any(), any());
        verify(cbrsSuppressionRepository, times(1)).updateAlarmEnrichmentTime(any(), any());
    }

    @Test
    void enrichGeneratedCbrsSuppressionAlarm_AlarmDetailsNotExist_NoActionTaken() {
        CbrsSuppressionAlarm cbrsSuppressionAlarm = new CbrsSuppressionAlarm();
        cbrsSuppressionAlarm.setAlarmIdentity("TestAlarmIdentity");

        when(alarmPostingRepository.findByAlarmIdentity(any())).thenReturn(Optional.empty());

        enrichmentService.enrichGeneratedCbrsSuppressionAlarm(cbrsSuppressionAlarm);

        verify(alarmPostingRepository, times(1)).findByAlarmIdentity(any());
        verifyNoInteractions(alarmPostingRepository, cbrsSuppressionRepository);
    }

}
```