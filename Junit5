Here's a JUnit test case covering all branches of the `getDeviceDetailsv3` method for 100% code coverage. This test case assumes you're using JUnit 4 and Mockito for mocking dependencies:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.HashMap;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService ivappDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    private DeviceListInputRequest request;
    private UTSEquipmentList utsEquipmentList;

    @Before
    public void setUp() {
        request = new DeviceListInputRequest();
        Map<String, Object> requestParams = new HashMap<>();
        requestParams.put("key", "value");
        request.setRequestParameters(requestParams);

        utsEquipmentList = new UTSEquipmentList();
    }

    @Test
    public void testGetDeviceDetailsv3_Success() throws Exception {
        String serviceName = "http://testService";
        String servicePath = "/testPath";
        String dataServiceUrl = serviceName.concat(servicePath);

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn(serviceName);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());

        ObjectMapper mapper = new ObjectMapper();
        JsonNode mockResponse = mapper.readTree("{ \"equipmentLst\": { \"equipmentContainer\": [] }}");

        ResponseEntity<JsonNode> responseEntity = ResponseEntity.ok(mockResponse);

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenReturn(responseEntity);

        when(iVAPPDeviceUtil.covertv3format(any(JsonNode.class))).thenReturn(new UTSEquipmentList());

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNotNull(result);
    }

    @Test
    public void testGetDeviceDetailsv3_HttpServerErrorException() {
        String serviceName = "http://testService";
        String servicePath = "/testPath";
        String dataServiceUrl = serviceName.concat(servicePath);

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn(serviceName);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenThrow(new HttpServerErrorException(org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR));

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNull(result.getEquipmentLst());
    }

    @Test
    public void testGetDeviceDetailsv3_OtherException() {
        String serviceName = "http://testService";
        String servicePath = "/testPath";
        String dataServiceUrl = serviceName.concat(servicePath);

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn(serviceName);
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenThrow(new RuntimeException());

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNull(result.getEquipmentLst());
    }
}
```

### Explanation:

1. **Setup**: The `setUp` method initializes the mock objects and test data, which are used across all test cases.
2. **testGetDeviceDetailsv3_Success**: This test simulates a successful scenario where the REST call returns a valid response.
3. **testGetDeviceDetailsv3_HttpServerErrorException**: This test simulates a scenario where the REST call throws an `HttpServerErrorException`.
4. **testGetDeviceDetailsv3_OtherException**: This test simulates a scenario where the REST call throws a general `Exception`.

These tests use Mockito to mock the dependencies and assert that the correct behavior is executed for each branch of the method.