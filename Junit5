import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class SpaceCollectorCompositePKTest {

    @Test
    public void testEquals() {
        SpaceCollectorCompositePK pk1 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());
        SpaceCollectorCompositePK pk2 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());

        assertEquals(pk1, pk2);
    }

    @Test
    public void testNotEquals() {
        SpaceCollectorCompositePK pk1 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());
        SpaceCollectorCompositePK pk2 = new SpaceCollectorCompositePK("port2", "url2", "connectionType2", false, LocalDateTime.now());

        assertEquals(false, pk1.equals(pk2));
    }

    @Test
    public void testHashCode() {
        SpaceCollectorCompositePK pk1 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());
        SpaceCollectorCompositePK pk2 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());

        assertEquals(pk1.hashCode(), pk2.hashCode());
    }

    @Test
    public void testNotEqualsHashCode() {
        SpaceCollectorCompositePK pk1 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());
        SpaceCollectorCompositePK pk2 = new SpaceCollectorCompositePK("port2", "url2", "connectionType2", false, LocalDateTime.now());

        assertEquals(false, pk1.hashCode() == pk2.hashCode());
    }

}
```

This Junit test class covers all methods in the `SpaceCollectorCompositePK` class to achieve 100% code coverage. It tests the `equals` and `hashCode` methods for both cases where objects are equal and not equal.





@RunWith(MockitoJUnitRunner.class)
public class SpaceCollectorCompositePKTest {

    @Test
    public void testEquals() {
        SpaceCollectorCompositePK pk1 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());
        SpaceCollectorCompositePK pk2 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());

        Assert.assertTrue(pk1.equals(pk2));
    }

    @Test
    public void testNotEquals() {
        SpaceCollectorCompositePK pk1 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());
        SpaceCollectorCompositePK pk2 = new SpaceCollectorCompositePK("port2", "url2", "connectionType2", false, LocalDateTime.now());

        Assert.assertFalse(pk1.equals(pk2));
    }

    @Test
    public void testHashCode() {
        SpaceCollectorCompositePK pk1 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());
        SpaceCollectorCompositePK pk2 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());

        Assert.assertEquals(pk1.hashCode(), pk2.hashCode());
    }

    @Test
    public void testNotHashCode() {
        SpaceCollectorCompositePK pk1 = new SpaceCollectorCompositePK("port1", "url1", "connectionType1", true, LocalDateTime.now());
        SpaceCollectorCompositePK pk2 = new SpaceCollectorCompositePK("port2", "url2", "connectionType2", false, LocalDateTime.now());

        Assert.assertNotEquals(pk1.hashCode(), pk2.hashCode());
    }

}
```

This JUnit test class ensures 100% code coverage for the `SpaceCollectorCompositePK` class by testing the `equals` and `hashCode` methods. The tests cover both positive and negative scenarios.