import org.apache.sshd.server.SshServer;
import org.apache.sshd.server.auth.password.PasswordAuthenticator;
import org.apache.sshd.server.auth.password.StaticPasswordAuthenticator;
import org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory;
import org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.mockito.Mockito.*;

class SshServerTest {

    @Mock
    private SshServer sshServer;

    private SshServerConnection sshServerConnection;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        sshServerConnection = new SshServerConnection(sshServer);
    }

    @Test
    void testStartServer() throws IOException {
        sshServerConnection.startServer();
        verify(sshServer).start();
    }

    @Test
    void testStart() throws IOException {
        String sshHost = "localhost";
        int sshPort = 22;
        String hostedPath = "/path/to/hosted/files";

        when(sshServer.getHost()).thenReturn(sshHost);
        when(sshServer.getPort()).thenReturn(sshPort);

        sshServerConnection.start();

        verify(sshServer).setHost(sshHost);
        verify(sshServer).setPort(sshPort);
        verify(sshServer).setKeyPairProvider(any(SimpleGeneratorHostKeyProvider.class));
        verify(sshServer).setSubsystemFactories(Collections.singletonList(new SftpSubsystemFactory()));
        verify(sshServer).setPasswordAuthenticator(any(PasswordAuthenticator.class));
        verify(sshServer).setFileSystemFactory(any(VirtualFileSystemFactory.class));
        verify(sshServer).start();
    }
}
