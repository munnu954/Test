Certainly! To ensure that we cover all branches of the `if (!ObjectUtils.isEmpty(aggregateInsightsEntity))` statement in the `convertToMtnInsights` method, we need to simulate both scenarios where `aggregateInsightsEntity` is non-empty and empty. Here's how you can write the JUnit 5 test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.apache.commons.lang.ObjectUtils;

public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testConvertToMtnInsights_AggregateInsightsEntityNotEmpty() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        // Create non-empty AggregateInsightsEntity
        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue(EventLedgerConstants.OUTAGE_ID + "outage123" + EventLedgerConstants.COMMA_SEPARATOR);

        // Mock repository call to return a non-empty aggregate entity
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(eq(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE), eq("outage123")))
                .thenReturn(aggregateEntity);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
        assertEquals(1, result.getCategoryInsights()[0].getInsights().length);
    }

    @Test
    public void testConvertToMtnInsights_AggregateInsightsEntityEmpty() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        // Mock repository call to return null (simulating empty aggregate entity)
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(eq(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE), eq("outage123")))
                .thenReturn(null);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
        assertEquals(1, result.getCategoryInsights()[0].getInsights().length);
    }
}
```

### Explanation:

1. **Non-Empty Aggregate Entity Test**:
   - Sets up a `MtnInsightsEntity` with the `MTNOUTAGE` insight name.
   - Mocks the `aggrInsightRepository` to return a non-empty `AggregateInsightsEntity` when queried with specific parameters.
   - Verifies that the `convertToMtnInsights` method processes this correctly by checking the result's composition.

2. **Empty Aggregate Entity Test**:
   - Sets up another `MtnInsightsEntity` with the same conditions as the first test.
   - Mocks the `aggrInsightRepository` to return `null`, simulating the absence of an aggregate entity.
   - Ensures that the method correctly handles this by checking the result remains valid and contains the expected insights.

These tests focus specifically on the branch controlled by the `if (!ObjectUtils.isEmpty(aggregateInsightsEntity))` statement, ensuring both paths (entity present and entity absent) are executed and verified.