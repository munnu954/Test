import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertNull;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    private ObjectMapper objectMapper = new ObjectMapper();

    @Test
    public void testGetArrayValueForTagsException() throws Exception {
        // Create a JsonNode with a malformed array
        String jsonString = "{\"tag\": \"[WLS\"}";
        JsonNode jsonNode = objectMapper.readTree(jsonString);

        // Call the method and verify that it returns null
        String[] result = alarmRepository.getArrayValueForTags(jsonNode, "tag");
        assertNull(result);
    }

    @Test
    public void testGetArrayValueForTagsNullJsonNode() {
        // Call the method with a null JsonNode
        String[] result = alarmRepository.getArrayValueForTags(null, "tag");
        assertNull(result);
    }

    @Test
    public void testGetArrayValueForTagsMissingKey() throws Exception {
        // Create a JsonNode without the key
        String jsonString = "{\"otherKey\": \"value\"}";
        JsonNode jsonNode = objectMapper.readTree(jsonString);

        // Call the method and verify that it returns null
        String[] result = alarmRepository.getArrayValueForTags(jsonNode, "tag");
        assertNull(result);
    }
}