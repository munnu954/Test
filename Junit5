Here is a sample JUnit test case for the given XmlToJsonConverter class, focusing on the ETAS file type transformation:

```java
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;
import org.apache.flink.runtime.testutils.MiniClusterWithClientResource;
import org.apache.flink.test.util.MiniClusterResource;
import org.apache.flink.test.util.MiniClusterResourceConfiguration;
import org.apache.flink.util.TestLogger;
import org.junit.ClassRule;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class XmlToJsonConverterTest extends TestLogger {

    @ClassRule
    public static MiniClusterResource miniClusterResource = new MiniClusterResource(
            new MiniClusterResourceConfiguration.Builder()
                    .setNumberSlotsPerTaskManager(1)
                    .setNumberTaskManagers(1)
                    .build());

    @Test
    public void testEtasTransformation() throws Exception {
        // Define input values
        String primaryKey = "measInfo";
        String filePath = "src/test/resources/files/ETAS.xml";
        String fileName = "ETAS.xml";

        // Create ETAS file content (example: 40 records)
        String etasFileContent = "<ETAS></ETAS>";  // Example content for ETAS file

        // Set up the XmlToJsonConverter instance
        XmlToJsonConverter converter = new XmlToJsonConverter(primaryKey, filePath, fileName);

        // Execute the flatMap method with the test input
        converter.flatMap(etasFileContent, collector);

        // Verify the successIntCounter and failureIntCounter counts
        assertEquals(40, converter.getSuccessCount());
        assertEquals(0, converter.getFailureCount());
    }
}
```

Please note that in the given code, some pieces are missing, such as the `Collector` object and imports for required classes. You would need to replace `collector` with the appropriate `Collector` object or create a mock `Collector` for testing purposes. You will also need to import the necessary classes and resolve any compilation errors related to missing classes or methods. Additionally, you would need to configure your IDE or build tool to include the necessary Flink dependencies.