import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.jdbc.BadSqlGrammarException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Test
    void testPerformUpdateforACK_BadSqlGrammarException() {
        // Arrange
        ReflectionTestUtils.setField(alarmRepository, "jdbcTemplate", jdbcTemplate);
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        // Act
        int result = alarmRepository.performUpdateforACK("appliedaction", "alarmupdatedtime", "alarmidentity", 123);

        // Assert
        assertEquals(0, result);
        verify(alarmRepository.LOG, times(1)).error(any(String.class));
    }

    @Test
    void testPerformUpdateforOpNote_BadSqlGrammarException() {
        // Arrange
        ReflectionTestUtils.setField(alarmRepository, "jdbcTemplate", jdbcTemplate);
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        // Act
        int result = alarmRepository.performUpdateforOpNote("opNoteText", "alarmupdatedtime", "alarmidentity", 123);

        // Assert
        assertEquals(0, result);
        verify(alarmRepository.LOG, times(1)).error(any(String.class));
    }

    @Test
    void testPerformClearbyfeed_BadSqlGrammarException() {
        // Arrange
        ReflectionTestUtils.setField(alarmRepository, "jdbcTemplate", jdbcTemplate);
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        // Act
        int result = alarmRepository.performClearbyfeed(1, "cleartime", "alarmupdatedtime", "appliedaction", "alarmidentity", 123);

        // Assert
        assertEquals(0, result);
        verify(alarmRepository.LOG, times(1)).error(any(String.class));
    }

    @Test
    void testPerformUpdateforHandleEvent_BadSqlGrammarException() {
        // Arrange
        ReflectionTestUtils.setField(alarmRepository, "jdbcTemplate", jdbcTemplate);
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        // Act
        int result = alarmRepository.performUpdateforHandleEvent("handledByidIMPACT", "alarmupdatedtime", "alarmidentity", 123);

        // Assert
        assertEquals(0, result);
        verify(alarmRepository.LOG, times(1)).error(any(String.class));
    }

    @Test
    void testPerformUpdateforHandleTicket_BadSqlGrammarException() {
        // Arrange
        ReflectionTestUtils.setField(alarmRepository, "jdbcTemplate", jdbcTemplate);
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        // Act
        int result = alarmRepository.performUpdateforHandleTicket("ticket", "ticketStatus", "alarmupdatedtime", "alarmidentity", 123);

        // Assert
        assertEquals(0, result);
        verify(alarmRepository.LOG, times(1)).error(any(String.class));
    }
}