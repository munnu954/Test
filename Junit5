To achieve 100% code coverage for the `convertToMtnInsights` method in the `MtnInsightsManager` class, we need to write JUnit 5 test cases that cover all possible branches and variations of input data. We'll use mocks for dependencies like `MtnInsightsRepository`, `AggregateInsightsRepository`, and others. Below is an example of how these test cases can be structured:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @Mock
    private EcpdByKeyRepository ecpdByKeyRepository;

    @Mock
    private MtnInsightsValidator validator;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    private List<MtnInsightsEntity> entities;

    @BeforeEach
    public void setUp() {
        entities = new ArrayList<>();

        // Initialize entities with mock data
        MtnInsightsPK pk1 = new MtnInsightsPK();
        pk1.setInsightName("SampleInsightName1");
        MtnInsightsEntity entity1 = new MtnInsightsEntity();
        entity1.setPk(pk1);
        entity1.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");
        entity1.setInsightValues("Value1");
        entities.add(entity1);

        MtnInsightsPK pk2 = new MtnInsightsPK();
        pk2.setInsightName("SampleInsightName2");
        MtnInsightsEntity entity2 = new MtnInsightsEntity();
        entity2.setPk(pk2);
        entity2.setCatagory("INSIGHT_CATEGORY_NETWORK_OUTAGE");
        entity2.setInsightValues("Value2");
        entities.add(entity2);
    }

    @Test
    public void testConvertToMtnInsights_withFlagTrue() {
        // Define mock behavior
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(anyString(), anyString())).thenReturn(null);

        // Call the method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_withFlagFalse() {
        // Define mock behavior
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(anyString(), anyString())).thenReturn(null);

        // Call the method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, false);

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_withAggregateInsights() {
        // Prepare mock AggregateInsightsEntity
        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue("OUTAGE_ID12345,");

        // Define mock behavior
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(anyString(), anyString()))
            .thenReturn(aggregateEntity);

        // Call the method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_withNoEligibleData() {
        // Manipulate entities for specific condition
        for (MtnInsightsEntity entity : entities) {
            entity.setInsightValues("EVENT_CUSTOMER_STATUS");
        }

        // Call the method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("INSIGHT_CATEGORY_NETWORK_OUTAGE", result.getCategoryInsights()[0].getCategory());
    }
}
```

### Explanation:

1. **Set Up**: We initialize a list of `MtnInsightsEntity` objects for testing. These are configured to simulate various conditions.

2. **Test Method Variations**:
   - **With Flag True**: Test with the `flag` parameter set to `true`.
   - **With Flag False**: Test with the `flag` parameter set to `false`.
   - **With Aggregate Insights**: Simulate a scenario where aggregate insights are retrieved and processed.
   - **With No Eligible Data**: Test a condition where specific insight values trigger special handling.

3. **Mocking**: We use Mockito to define behaviors for the repository methods, simulating conditions without relying on an actual database.

4. **Assertions**: We verify that the method returns the expected results based on the input conditions.

These test cases cover the different branches within the `convertToMtnInsights` method to ensure full coverage.