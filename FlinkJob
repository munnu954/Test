public class CsvtoJsonDRAnTransformer extends RichFlatMapFunction<String, String> {
    private List<Map<String, String>> headersList;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    private String fileName;

    public CsvtoJsonDRAnTransformer(String fileName) {
        this.fileName = fileName;
    }

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());

        // Parse headers
        headersList = parseHeaders(lines, 0, 11, "ColumnA", "ColumnB");

        for (int i = 12; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");
            if (headersList == null || headersList.size() != arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }
            JSONObject obj = new JSONObject();
            obj.put("FILENAME", fileName);
            for (int j = 0; j < arr.length; j++) {
                Map<String, String> headers = headersList.get(j);
                String jsonkey = headers.get("jsonkey");
                String jsonvalue = headers.get("jsonvalue");
                String value = arr[j].trim().replace(jsonvalue, "");
                obj.put(jsonkey, value);
            }
            this.successIntCounter.add(1);
            collector.collect(obj.toString());
        }
    }

    private List<Map<String, String>> parseHeaders(String[] lines, int startLine, int endLine, String keyColumn, String valueColumn) {
        List<Map<String, String>> headersList = new ArrayList<>();
        for (int i = startLine; i < endLine; i++) {
            String line = lines[i];
            String[] columns = line.split(",");
            if (columns.length == 2) {
                Map<String, String> headers = new HashMap<>();
                String jsonkey = columns[getColumnIndex(columns, keyColumn)].trim().replace("\"", "");
                String jsonvalue = columns[getColumnIndex(columns, valueColumn)].trim().replace("\"", "");
                headers.put("jsonkey", jsonkey);
                headers.put("jsonvalue", jsonvalue);
                headersList.add(headers);
            }
        }
        return headersList;
    }

    private int getColumnIndex(String[] columns, String column) {
        for (int i = 0; i < columns.length; i++) {
            if (columns[i].trim().equalsIgnoreCase(column)) {
                return i;
            }
        }
        return -1;
    }
}