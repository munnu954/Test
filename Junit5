Here is an example of how you can write JUnit5 test cases to cover all branches of the if statement in the `applyPostingRules` method of the `PostingRuleProcessingService` class for 100% code coverage:

```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Test
    public void testApplyPostingRules_withMatchResultAndNoPostingRuleMatch() {
        PostingRule postingRule1 = new PostingRule(1, "Rule 1", 1, 1, "Matching Criteria 1");
        PostingRule postingRule2 = new PostingRule(2, "Rule 2", 2, 1, "Matching Criteria 2");

        when(ruleLoadingService.getRuleMap()).thenReturn(Map.of(1L, postingRule1, 2L, postingRule2));

        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("Test Alarm");

        alarm = postingRuleProcessingService.applyPostingRules(alarm);

        assertEquals(postingRule2, alarm.getPostingRule());
    }

    @Test
    public void testApplyPostingRules_withHigherPriorityPostingRuleMatch() {
        PostingRule postingRule1 = new PostingRule(1, "Rule 1", 1, 1, "Matching Criteria 1");
        PostingRule postingRule2 = new PostingRule(2, "Rule 2", 2, 1, "Matching Criteria 2");

        when(ruleLoadingService.getRuleMap()).thenReturn(Map.of(1L, postingRule1, 2L, postingRule2));

        Evaluation evaluation = new Evaluation();
        evaluation.setResult(true);
        when(postingRule1.matchFilter(anyMap())).thenReturn(evaluation);
        when(postingRule2.matchFilter(anyMap())).thenReturn(evaluation);

        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("Test Alarm");

        alarm = postingRuleProcessingService.applyPostingRules(alarm);

        assertEquals(postingRule2, alarm.getPostingRule());
    }

    // Add more test cases to cover other branches of the if statement

}

```

In the above test cases, `when` and `thenReturn` methods are used to mock the behavior of dependencies and the `applyPostingRules` method is called with different scenarios to cover all branches of the if statement. You can expand on these test cases to include more scenarios and cover all possible paths in the method.