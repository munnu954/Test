To achieve 100% code coverage for the `sendMessageAsync` method in the `BatchLoaderUtils` class, we need to write JUnit 5 test cases that cover both successful and failed message sending scenarios. We'll use mocking to handle interactions with the `KafkaTemplate` and `KafkaFalloutService`. Here's how you can write the test cases:

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.util.concurrent.CompletableFuture;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.SettableListenableFuture;

@ExtendWith(MockitoExtension.class)
public class BatchLoaderUtilsTest {

    @InjectMocks
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    private ProducerRecord<String, String> producerRecord;
    private String transactionId;
    private String payload;
    private String producerTopic;
    private String insightName;
    private char sensitivityCheckDone;
    private String errorCategory;

    @BeforeEach
    public void setUp() {
        producerRecord = new ProducerRecord<>("topic", "key", "value");
        transactionId = "123";
        payload = "{\"data\":\"sample\"}";
        producerTopic = "sampleTopic";
        insightName = "insight";
        sensitivityCheckDone = 'N';
        errorCategory = "error";
    }

    @Test
    public void testSendMessageAsync_Success() {
        // Arrange
        SettableListenableFuture<SendResult<String, String>> future = new SettableListenableFuture<>();
        RecordMetadata metadata = new RecordMetadata(null, 0L, 0, 0L, Long.valueOf(0), 0, 0);
        SendResult<String, String> sendResult = new SendResult<>(producerRecord, metadata);
        future.set(sendResult);

        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Act
        batchLoaderUtils.sendMessageAsync(producerRecord, transactionId, payload, producerTopic, insightName, sensitivityCheckDone, errorCategory);

        // Assert
        verify(failedMessageService, never()).saveFailedRecords(any(), any(), any(), any(), anyChar(), any(), any());
    }

    @Test
    public void testSendMessageAsync_Failure() {
        // Arrange
        SettableListenableFuture<SendResult<String, String>> future = new SettableListenableFuture<>();
        future.setException(new RuntimeException("Kafka send exception"));

        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Act
        batchLoaderUtils.sendMessageAsync(producerRecord, transactionId, payload, producerTopic, insightName, sensitivityCheckDone, errorCategory);

        // Assert
        verify(failedMessageService, times(1)).saveFailedRecords(eq(producerTopic), eq(transactionId), eq(payload), eq(insightName), eq(sensitivityCheckDone), eq(errorCategory), anyString());
    }
}
```

### Explanation:

1. **Setup**: We use `@Mock` to create mock instances of `KafkaTemplate` and `KafkaFalloutService`. The `@InjectMocks` annotation is used to inject these mocks into the `BatchLoaderUtils` instance.

2. **Test Setup**: Initialize common variables in the `setUp` method, which runs before each test. This reduces redundancy.

3. **Success Scenario**:
   - Mock the `kafkaTemplate.send` method to return a successful `CompletableFuture`.
   - Verify that `failedMessageService.saveFailedRecords` is never called, indicating that no failure occurred.

4. **Failure Scenario**:
   - Mock the `kafkaTemplate.send` method to return a `CompletableFuture` that throws an exception.
   - Verify that `failedMessageService.saveFailedRecords` is called once with the correct parameters.

These tests cover all branches of the `sendMessageAsync` method, ensuring both successful and failed message sending paths are tested.