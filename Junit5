To achieve 100% code coverage for the `applyPostingRule` method in the `PostingRuleProcessingService` class, we need to write JUnit 5 test cases that cover all possible branches of the for loop `for (JsonNode jsonNodeTmp : topologyObjectsNode)`.

Since some of the required fields are not accessible directly, we will use reflection to set these private fields before executing the test cases.

Here's an example of how you can write JUnit 5 test cases to cover the for loop:

```java
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.util.ReflectionUtils;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class PostingRuleProcessingServiceTest {

    @Test
    void testApplyPostingRuleForLoop() throws Exception {
        // Create a mock alarm, rule, and alarmMap
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule(1, "Rule", 1, 1, "Matching Criteria");
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mock TopologyApiClient response
        TopologyApiClient topoApiClient = mock(TopologyApiClient.class);
        when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, "componentId")).thenReturn(ResponseEntity.ok("{}"));

        // Set private fields using Reflection
        PostingRuleProcessingService service = new PostingRuleProcessingService();
        Field ruleLoadingServiceField = PostingRuleProcessingService.class.getDeclaredField("ruleLoadingService");
        ruleLoadingServiceField.setAccessible(true);
        ReflectionUtils.setField(ruleLoadingServiceField, service, new RuleLoadingService());

        Field topoApiClientField = PostingRuleProcessingService.class.getDeclaredField("topoApiClient");
        topoApiClientField.setAccessible(true);
        ReflectionUtils.setField(topoApiClientField, service, topoApiClient);

        Field alarmedObjectExpressionField = PostingRuleProcessingService.class.getDeclaredField("alarmedObjectExpression");
        alarmedObjectExpressionField.setAccessible(true);
        ReflectionUtils.setField(alarmedObjectExpressionField, service, "%TopoObject:OSS_Names[0]%");

        // Test the method
        try (MockedStatic<AlarmPostingUtils> mockedUtils = mockStatic(AlarmPostingUtils.class)) {
            mockedUtils.when(() -> AlarmPostingUtils.evaluateExpression("%Alarm:reportingObject%", alarmMap)).thenReturn("componentId");

            Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

            // Assert the result as needed
            assertEquals(alarm, result);
        }
    }
}
```

This test case sets up the necessary mocks and uses reflection to set the private fields before testing the `applyPostingRule` method. You can expand upon this test case to cover other scenarios and branches within the `for` loop.