To achieve full coverage for the else block in the given Java method using JUnit 5, you need to write test cases that will force the code to take those paths. For this specific piece of code:

```java
else {
    parsedValue.replace(startIndex, endIndex, RulesConstants.EMPTYSTRING);
}
```

You should write test cases where the conditions required for the else block execution are met. Here's how you can do it step by step:

1. **Include Imports**: Make sure you have all necessary imports.
2. **Mock Dependencies**: Mock the `srcMap`, `RulesConstants`, etc.
3. **Test Cases**: Create test cases for different scenarios which should lead to the else block being executed.

Here's a complete example of JUnit 5 test cases achieving this:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;

public class AlarmPostingUtilsTest {

    @Mock
    private Environment env;
    
    @InjectMocks
    private AlarmPostingUtils alarmPostingUtils;

    private Map<String, Object> srcMap;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        srcMap = new HashMap<>();
    }

    @Test
    public void testParse_ElseCase_NoAttributeNameInSrcMap() throws JsonProcessingException {
        srcMap.put("validKey", "validValue");
        String value = "%invalidKey%";
        String expectedResult = "";
        
        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        assertEquals(expectedResult, result);
    }

    @Test
    public void testParse_ElseCase_NegativeArrayIndex() throws JsonProcessingException {
        srcMap.put("arrayKey", new String[]{"value1", "value2"});
        String value = "%arrayKey[-1]%";
        String expectedValue = "";
        
        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        assertEquals(expectedValue, result);
    }

    @Test
    public void testParse_ElseCase_InvalidArrayIndexFormat() throws JsonProcessingException {
        srcMap.put("arrayKey", new String[]{"value1", "value2"});
        String value = "%arrayKey[NotANumber]%";
        String expectedValue = "";
        
        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        assertEquals(expectedValue, result);
    }

    @Test
    public void testParse_ElseCase_JsonFieldNotInJsonMap() throws JsonProcessingException {
        Map<String, Object> jsonMap = new HashMap<>();
        jsonMap.put("field1", "value1");
        srcMap.put("jsonKey", jsonMap);
        
        String value = "%jsonKey.nonExistentField%";
        String expectedValue = "";
        
        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        assertEquals(expectedValue, result);
    }

    @Test
    public void testParse_ElseCase_ArrayAttributeNotInJsonMap() throws JsonProcessingException {
        Map<String, Object> jsonMap = new HashMap<>();
        jsonMap.put("field1", new String[]{"value1", "value2"});
        srcMap.put("jsonKey", jsonMap);
        
        String value = "%jsonKey.field2[0]%";
        String expectedValue = "";
        
        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        assertEquals(expectedValue, result);
    }

    @Test
    public void testParse_ElseCase_NegativeArrayIndexInJsonMap() throws JsonProcessingException {
        Map<String, Object> jsonMap = new HashMap<>();
        jsonMap.put("field1", new String[]{"value1", "value2"});
        srcMap.put("jsonKey", jsonMap);
        
        String value = "%jsonKey.field1[-1]%";
        String expectedValue = "";
        
        String result = AlarmPostingUtils.parse(value, srcMap, "testRule");
        assertEquals(expectedValue, result);
    }
}
```

### Explanation:

- **Mocking**: Mocking the environment and other dependencies.
- **@BeforeEach**: Initializes mocks and sets up the `srcMap`.
- **Test Cases**:
  - **No Attribute Name in `srcMap`**: Forces the else block by using a non-existent key.
  - **Negative Array Index**: Forces the else block with a negative array index.
  - **Invalid Array Index Format**: Forces the else block with invalid array index syntax.
  - **JSON Field Not in JSON Map**: Tests a JSON field that doesn’t exist in the provided map.
  - **Array Attribute Not in JSON Map**: Tests an array attribute that doesn’t exist in the JSON map.
  - **Negative Array Index in JSON Map**: Forces the else block with a negative array index within a JSON map.

These test cases will exercise various paths through the else blocks ensuring full code coverage for those scenarios.