import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.client.RestTemplate;

import static org.mockito.Mockito.*;

class FlinkApiControllerTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private KafkaTemplate<String, Object> kafkaTemplate;
    
    @InjectMocks
    private FlinkApiController flinkApiController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void triggerJob_SubmissionSuccessful_PublishNewFormat() {
        // Arrange
        UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
        auditMsg.setInputFilePath("input/file.csv");
        String fileType = ".csv";
        String programArgs = "--input-file input/file.csv";
        String jobID = "job123";

        ResponseEntity<String> response = new ResponseEntity<>(HttpStatus.OK);

        when(restTemplate.postForEntity(anyString(), any(HttpEntity.class), eq(String.class))).thenReturn(response);
        when(restTemplate.getForObject(anyString(), eq(JsonNode.class))).thenReturn(createJobStatusJsonNode("FINISHED"));

        // Act
        flinkApiController.triggerJob(auditMsg, fileType);

        // Assert
        verify(kafkaTemplate, times(1)).send(eq("3459-DEV-COLLECTION-AUDIT-QUEUE"), any(UnifiedAuditMessage.class));
    }

    @Test
    void triggerJob_SubmissionNotSuccessful_PublishNewFormat() {
        // Arrange
        UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
        auditMsg.setInputFilePath("input/file.csv");
        String fileType = ".csv";
        String programArgs = "--input-file input/file.csv";

        ResponseEntity<String> response = new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

        when(restTemplate.postForEntity(anyString(), any(HttpEntity.class), eq(String.class))).thenReturn(response);

        // Act
        flinkApiController.triggerJob(auditMsg, fileType);

        // Assert
        verify(kafkaTemplate, times(1)).send(eq("3459-DEV-COLLECTION-AUDIT-QUEUE"), any(UnifiedAuditMessage.class));
    }

    private JsonNode createJobStatusJsonNode(String state) {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode jsonNode = objectMapper.createObjectNode();
        jsonNode.put("state", state);
        return jsonNode;
    }
}
Note: Please make sure to replace any specific dependencies that are needed and verify the imports in the beginning.