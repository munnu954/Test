SpaceCollector.java:

@Data
public class SpaceCollector {
    @JsonProperty("id")
    private String id;

    @JsonProperty("url")
    private String url;

    @JsonProperty("port")
    private int port;

    @JsonProperty("username")
    private String username;

    @JsonProperty("password")
    private String password;

    private String sshPublicKey;
    private String sshPrivateKey;

    @JsonProperty("connection_type")
    private String connectionType;

    private boolean enabled;
    private String inputFilePath;
    private String outputFilePath;
    private int pollingDuration;

    // Getters and setters for all fields
}


KafkaProducerService.java:

@Service
public class KafkaProducerService {

    private static final Logger Logger = LoggerFactory.getLogger(KafkaProducerService.class);

    @Value("${spring.kafka.producer.topic-name}")
    private String topicName;

    private final KafkaTemplate<String, Object> kafkaTemplate;

    @Autowired
    public KafkaProducerService(KafkaTemplate<String, Object> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate; 
    }

    public String sendJsonMessage(SpaceCollector spaceCollector) {
        if (spaceCollector.getId() == null) {
            return "SpaceCollector json must have an id";
        }

        if (spaceCollector.getUrl() == null || spaceCollector.getUrl().isEmpty()) {
            return "SpaceCollector json must have a non-empty url";
        }

        if (spaceCollector.getPort() == 0) {
            return "SpaceCollector json must have a non-zero port number";
        }

        if (!"API".equals(spaceCollector.getConnectionType())) {
            return "SpaceCollector json must have a connection_type of 'API'";
        }

        if (spaceCollector.getUsername() == null || spaceCollector.getPassword() == null) {
            return "SpaceCollector json must have a non-null username and password";
        }

        Logger.info(String.format("Message sent %s", spaceCollector)); 
        kafkaTemplate.send(topicName, spaceCollector); 
        return "jsonMessage sent successfully"; 
    }

    public void sendErrorMessage(String message){
        Map<String, Object> map = new HashMap<>();
        map.put("STATUS", "FAIL");
        map.put("MESSAGE", message);
        kafkaTemplate.send(topicName, map);
    }
}


CollectorController.java:

@RestController 
@RequestMapping("/api/kafka")
public class CollectorController {

    @Autowired
    KafkaProducerService kafkaProducer;

    @PostMapping
    public ResponseEntity<String> pushSpaceCollectorData(@RequestBody SpaceCollector spaceCollector) {
        String validationMessage = kafkaProducer.sendJsonMessage(spaceCollector);
        
        if (validationMessage != null) {
            return ResponseEntity.badRequest().body(validationMessage);
        }
        
        return ResponseEntity.ok("SpaceCollector data pushed to Kafka topic successfully");
    }
}


CollectorApiReader.java: 

@Component
public class CollectorApiReader {

    private static final Logger LOGGER = LoggerFactory.getLogger(CollectorApiReader.class);

    public void initialize(SpaceCollector spaceCollector) { 
        LOGGER.info("Initialized Api Reader", spaceCollector); 
    }
}


CollectorInitializerService.java:

@Service
public class CollectorInitializerService{
    private static final Logger LOGGER = LoggerFactory.getLogger(CollectorInitializerService.class);
    private final CollectorApiReader collectorApiReader;
    private final Validator validator;

    @Autowired
    KafkaProducerService kafkaProducer;

    @Autowired
    public CollectorInitializerService(CollectorApiReader collectorApiReader, Validator validator) {
        this.collectorApiReader = collectorApiReader;
        this.validator = validator;
    }

    @Kafkalistener(topics="${spring.kafka.producer.topic-name}",groupId = "${spring.kafka.consumer.group-id}")
    public void consume(SpaceCollector spaceCollector) {
        LOGGER.info(String.format("Received SpaceCollector data: {}", spaceCollector)); 
        collectorApiReader.initialize(spaceCollector);
    }
}