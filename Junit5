import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.net.URI;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

@ExtendWith(MockitoExtension.class)
public class ApiOperationTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlarmGroupingParams configParams;

    @InjectMocks
    private ApiOperation apiOperation;

    @BeforeEach
    void setUp() {
        when(configParams.getAlarmFetchURL()).thenReturn("http://mock-url.com");
        when(configParams.getAlarmFilterKey()).thenReturn("mock-auth-key");
    }

    @Test
    void testGetAlarmDetailsById_NotFoundException() {
        String alarmIdentity = "test-alarm-id";
        String mockUrl = configParams.getAlarmFetchURL();
        
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", configParams.getAlarmFilterKey());
        RequestEntity<Object> requestEntity = new RequestEntity<>(null, headers, HttpMethod.POST, URI.create(mockUrl));

        // Simulate HttpClientErrorException.NotFound exception
        when(restTemplate.exchange(eq(mockUrl), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND, "Not Found"));

        // Execute method and verify result
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        assertNull(result, "Expected result to be null when NotFound exception is thrown");
    }
}