Sure, here is a sample JUnit 5 test case code covering all the branches of the specified `else if` block. 

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private PostgresConf postgresConf;

    private ObjectMapper objectMapper;
    private Map<String, Integer> alarmStateMap;

    @BeforeEach
    public void setUp() {
        objectMapper = new ObjectMapper();
        alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 0);
        alarmStateMap.put("New", 1);

        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityMap().get("Indeterminate")).thenReturn(2);
    }

    @Test
    public void testCreateAlarm_NullPerceivedSeverity_ClearedState() throws Exception {
        String msg = "{\"state\":\"Cleared\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_EmptyPerceivedSeverity_ClearedState() throws Exception {
        String msg = "{\"state\":\"Cleared\", \"perceivedSeverity\":\"\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_NotNullPerceivedSeverity_ClearedState() throws Exception {
        String msg = "{\"state\":\"Cleared\", \"perceivedSeverity\":\"Critical\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getPerceivedSeverityMap().get("Critical")).thenReturn(5);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertEquals(5, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_NullPerceivedSeverity_NotClearedState() throws Exception {
        String msg = "{\"state\":\"New\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertEquals(2, alarm.getPerceivedSeverity()); //Indeterminate
    }

    @Test
    public void testCreateAlarm_EmptyPerceivedSeverity_NotClearedState() throws Exception {
        String msg = "{\"state\":\"New\", \"perceivedSeverity\":\"\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertEquals(2, alarm.getPerceivedSeverity()); //Indeterminate
    }

    @Test
    public void testCreateAlarm_NotNullPerceivedSeverity_NotClearedState() throws Exception {
        String msg = "{\"state\":\"New\", \"perceivedSeverity\":\"Major\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getPerceivedSeverityMap().get("Major")).thenReturn(4);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertEquals(4, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_UnmappedPerceivedSeverity() throws Exception {
        String msg = "{\"state\":\"New\", \"perceivedSeverity\":\"Unknown\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertEquals(2, alarm.getPerceivedSeverity()); //Indeterminate
    }

    @Test
    public void testCreateAlarm_NullPerceivedSeverity_NullState() throws Exception {
        String msg = "{}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertEquals(2, alarm.getPerceivedSeverity()); //Indeterminate
    }
}
```

In this test class, we create a mock `PostgresConf` and inject it into the `AlarmRepositoryImpl` to ensure that the `else if` block is covered under all scenarios:

1. When `perceivedSeverity` is null and the state is "Cleared".
2. When `perceivedSeverity` is an empty string and the state is "Cleared".
3. When `perceivedSeverity` is not null and the state is "Cleared".
4. When `perceivedSeverity` is null and the state is "New".
5. When `perceivedSeverity` is an empty string and the state is "New".
6. When `perceivedSeverity` is not null and the state is "New".
7. When `perceivedSeverity` is a value not mapped in `perceivedSeverityMap`.
8. When both `perceivedSeverity` and state are not provided in the input JSON.

These test cases will ensure that the target block is fully covered under different input scenarios.