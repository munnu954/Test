Here's an example of JUnit5 test cases for the `DataSourceConfig` class, using Mockito to mock the `DataSourceModal` class:

```java
import com.verizon.vbg.ledger.repository.DataSourceModal;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class DataSourceConfigTest {

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @Mock
    private DataSourceModal dataSourceModal;

    @Mock
    private EntityManagerFactoryBuilder entityManagerFactoryBuilder;

    @BeforeEach
    void setUp() {
        when(dataSourceModal.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        when(dataSourceModal.getPassword()).thenReturn("password");
        when(dataSourceModal.getUsername()).thenReturn("username");
        when(dataSourceModal.getDriver()).thenReturn("org.h2.Driver");
    }

    @Test
    void testFalloutDataSource() {
        DataSource dataSource = dataSourceConfig.falloutDataSource();
        assertNotNull(dataSource);
        DriverManagerDataSource driverManagerDataSource = (DriverManagerDataSource) dataSource;
        assert driverManagerDataSource.getUrl().equals("jdbc:h2:mem:testdb");
        assert driverManagerDataSource.getUsername().equals("username");
        assert driverManagerDataSource.getPassword().equals("password");
        assert driverManagerDataSource.getDriverClassName().equals("org.h2.Driver");
    }

    @Test
    void testFalloutEntityManagerFactory() {
        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = dataSourceConfig.entityManagerFactoryBean(entityManagerFactoryBuilder, dataSourceConfig.falloutDataSource());
        assertNotNull(entityManagerFactoryBean);
        assert entityManagerFactoryBean.getPersistenceUnitName().equals("fallout-db");
        assert entityManagerFactoryBean.getPackagesToScan().contains("com.verizon.vbg.ledger.entity");
    }

    @Test
    void testFalloutTransactionManager() {
        EntityManagerFactory entityManagerFactory = dataSourceConfig.entityManagerFactoryBean(entityManagerFactoryBuilder, dataSourceConfig.falloutDataSource()).getObject();
        JpaTransactionManager jpaTransactionManager = (JpaTransactionManager) dataSourceConfig.falloutTransactionManager(entityManagerFactory);
        assertNotNull(jpaTransactionManager);
        assert jpaTransactionManager.getEntityManagerFactory().equals(entityManagerFactory);
    }
}
```

The test cases cover the following:

1. `testFalloutDataSource()`: Checks if the `falloutDataSource()` method returns a valid `DataSource` instance with the expected properties.
2. `testFalloutEntityManagerFactory()`: Checks if the `entityManagerFactoryBean()` method returns a valid `LocalContainerEntityManagerFactoryBean` instance with the expected persistence unit name and package to scan.
3. `testFalloutTransactionManager()`: Checks if the `falloutTransactionManager()` method returns a valid `JpaTransactionManager` instance with the expected `EntityManagerFactory`.

The `@ExtendWith(MockitoExtension.class)` annotation is used to enable Mockito in the test class. The `@InjectMocks` and `@Mock` annotations are used to inject the mocked `DataSourceModal` instance into the `DataSourceConfig` class.

In the `setUp()` method, the expected behavior of the `DataSourceModal` class is mocked using the `when()` and `thenReturn()` methods of Mockito.

Note that this test suite does not involve any real database connection or repository interactions, as the focus is on testing the `DataSourceConfig` class in isolation.