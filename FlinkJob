import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest
public class LuceneSpaceCollectorRepositoryTest {

    @InjectMocks
    private LuceneSpaceCollectorRepository luceneSpaceCollectorRepository;

    @Mock
    private LuceneTemplate luceneTemplate;

    @Test
    public void testUpdateClusterStateToConnecting() {
        String id = "123";
        String expectedQuery = "{\"update_fields\":{\"clusterState\":\"CONNECTING\"}," +
                              "\"query\":{\"bool\":{\"must\":[{\"term\":{\"id\":\"123\"}}," +
                              " \"must_not\":[{\"term\":{\"clusterState\":\"CONNECTING\"}},{\"term\":{\"clusterState\":\"RUNNING\"}}]}}}";
        Mockito.when(luceneTemplate.updateByQuery(expectedQuery)).thenReturn(1);

        int result = luceneSpaceCollectorRepository.updateClusterStateToConnecting(id);

        assertEquals(1, result);
    }

    @Test
    public void testFindTerminatedDevices() {
        String nTimeAgo = "2023-01-01";
        String expectedQuery = "{\"query\":{\"bool\":{\"must\":[{\"range\":{\"lastAliveTime\":{\"lt\":\"2023-01-01\"}}}," +
                              " {\"term\":{\"clusterState\": \"RUNNING\"}}]}}}";
        List<SpaceCollector> expectedSpaceCollectors = Arrays.asList(new SpaceCollector(), new SpaceCollector());
        Mockito.when(luceneTemplate.findByQuery(expectedQuery, SpaceCollector.class)).thenReturn(expectedSpaceCollectors);

        List<SpaceCollector> result = luceneSpaceCollectorRepository.findTerminatedDevices(nTimeAgo);

        assertEquals(expectedSpaceCollectors, result);
    }

    @Test
    public void testFindAllByEnabledAndNotRunning() {
        String expectedQuery = "{\"query\":{\"bool\":{\"must\":[{\"term\":{\"enabled\":\"true\"}}]}," + 
                               "{\"must_not\":[{\"term\":{\"clusterState\":\"RUNNING\"}}]}}}";
        List<SpaceCollector> expectedSpaceCollectors = Arrays.asList(new SpaceCollector());
        Mockito.when(luceneTemplate.findByQuery(expectedQuery, SpaceCollector.class)).thenReturn(expectedSpaceCollectors);

        List<SpaceCollector> result = luceneSpaceCollectorRepository.findAllByEnabledAndNotRunning();

        assertEquals(expectedSpaceCollectors, result);
    }
}