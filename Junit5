To create JUnit 5 test cases that cover all branches of the specified else statement in your `DeduplicationUtils` class, we need to focus on the conditions in which the method `removeNullValuesInJsonAttributes` processes nested JSON values. 

Here's how you can write the test cases:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class DeduplicationUtilsTest {

    private DeduplicationUtils deduplicationUtils;

    @BeforeEach
    void setUp() {
        deduplicationUtils = new DeduplicationUtils();
    }

    @Test
    void testRemoveNullValuesInJsonAttributes_NestedJsonWithAllNullValues() throws JsonProcessingException {
        Map<String, Object> input = new HashMap<>();
        input.put("type", "RAN");
        input.put("equipmentType", "EBH");
        input.put("RAN", new HashMap<String, Object>() {{
            put("nodeId", null);
            put("cellId", "");
            put("du", null);
            put("technology", null);
        }});

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("type", "RAN");
        expectedOutput.put("equipmentType", "EBH");
        expectedOutput.put("RAN", new HashMap<String, Object>()); // Empty nested JSON

        Map<String, Object> result = deduplicationUtils.removeNullValuesInJsonAttributes(input);
        assertEquals(expectedOutput, result);
    }

    @Test
    void testRemoveNullValuesInJsonAttributes_NestedJsonMixedValues() throws JsonProcessingException {
        Map<String, Object> input = new HashMap<>();
        input.put("type", "RAN");
        input.put("equipmentType", "EBH");
        input.put("RAN", new HashMap<String, Object>() {{
            put("nodeId", "node123");
            put("cellId", "");
            put("du", null);
            put("technology", "4G");
        }});

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("type", "RAN");
        expectedOutput.put("equipmentType", "EBH");
        expectedOutput.put("RAN", new HashMap<String, Object>() {{
            put("nodeId", "node123");
            put("technology", "4G");
        }}); // Retains only non-null values

        Map<String, Object> result = deduplicationUtils.removeNullValuesInJsonAttributes(input);
        assertEquals(expectedOutput, result);
    }

    @Test
    void testRemoveNullValuesInJsonAttributes_EmptyJson() throws JsonProcessingException {
        Map<String, Object> input = new HashMap<>();
        input.put("type", "RAN");
        input.put("equipmentType", "EBH");
        input.put("RAN", new HashMap<String, Object>()); // Empty nested JSON

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("type", "RAN");
        expectedOutput.put("equipmentType", "EBH");
        expectedOutput.put("RAN", new HashMap<String, Object>()); // Remains empty

        Map<String, Object> result = deduplicationUtils.removeNullValuesInJsonAttributes(input);
        assertEquals(expectedOutput, result);
    }

    @Test
    void testRemoveNullValuesInJsonAttributes_NonJsonValue() {
        Map<String, Object> input = new HashMap<>();
        input.put("type", "RAN");
        input.put("equipmentType", "EBH");
        input.put("nonJsonKey", "Just a string");

        Map<String, Object> expectedOutput = new HashMap<>(input); // No changes expected

        Map<String, Object> result = deduplicationUtils.removeNullValuesInJsonAttributes(input);
        assertEquals(expectedOutput, result);
    }

    @Test
    void testRemoveNullValuesInJsonAttributes_MixedNestedJson() throws JsonProcessingException {
        Map<String, Object> input = new HashMap<>();
        input.put("type", "RAN");
        input.put("equipmentType", null);
        input.put("RAN", new HashMap<String, Object>() {{
            put("nodeId", null);
            put("cellId", null);
            put("du", null);
            put("technology", "5G");
        }});

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("type", "RAN");
        expectedOutput.put("RAN", new HashMap<String, Object>() {{
            put("technology", "5G");
        }}); // Retains only non-null values

        Map<String, Object> result = deduplicationUtils.removeNullValuesInJsonAttributes(input);
        assertEquals(expectedOutput, result);
    }
}
```

### Explanation:
1. **testRemoveNullValuesInJsonAttributes_NestedJsonWithAllNullValues**: Tests a nested JSON where all values are null or empty.
2. **testRemoveNullValuesInJsonAttributes_NestedJsonMixedValues**: Tests a nested JSON with mixed values (some null and some valid).
3. **testRemoveNullValuesInJsonAttributes_EmptyJson**: Tests an empty nested JSON to ensure it remains empty after processing.
4. **testRemoveNullValuesInJsonAttributes_NonJsonValue**: Tests a scenario where there are no JSON values, and the input should remain unchanged.
5. **testRemoveNullValuesInJsonAttributes_MixedNestedJson**: Tests a case where some values are null, and only non-null values should be retained.

These test cases ensure that all branches of the else statement are covered, leading to 100% code coverage for that specific section.