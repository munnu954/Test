@Component
public class DeduplicationUtils {
    Logger logger = LogManager.getLogger(this.getClass());

    public HashMap<String, Object> removeNullValuesInJsonAttributes(Map<String, Object> msg) {
        HashMap<String, Object> resultMsg = new HashMap<>(msg);

        try {
            for (Map.Entry<String, Object> iterate : msg.entrySet()) {
                Object value = iterate.getValue();

                // Ensure proper JSON parsing by handling String values correctly
                if (value instanceof String) {
                    value = value.toString();
                } else {
                    value = RulesConstants.getObjectMapper().writeValueAsString(value);
                }

                if (checkIfJsonValue(value)) {
                    HashMap<String, Object> updatedMsg = removeNullValuesInJsonAttributes(
                            RulesConstants.getObjectMapper().readValue(value.toString(), HashMap.class));
                    resultMsg.put(iterate.getKey(), updatedMsg);
                } else {
                    if (value == null || value.toString().isEmpty()) {
                        resultMsg.remove(iterate.getKey());
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Exception occurred while trying to remove null/empty values from JSON attributes: " + e);
        }
        return resultMsg;
    }

    public boolean checkIfJsonValue(Object obj) {
        boolean isJson = false;
        try {
            String jsonString = RulesConstants.getObjectMapper().writeValueAsString(obj).trim();
            isJson = jsonString.startsWith("{") || jsonString.indexOf("{") == 1;
        } catch (JsonProcessingException e) {
            return isJson;
        }
        return isJson;
    }
}