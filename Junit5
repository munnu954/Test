import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SegmentProcessorTest {

    @Test
    void testProcessAclliKeyExists() {
        // Setup
        SegmentProcessor segmentProcessor = SegmentProcessor.getInstance();
        List<Node> nodes = mock(List.class);
        List<Link> links = mock(List.class);
        ClrComponent clrComponent = mock(ClrComponent.class);
        List<ClrComponent> clrComponentList = mock(List.class);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        clliNodeMap.put("aclli", mock(List.class));
        AtomicInteger ukCount = mock(AtomicInteger.class);

        // Call process method
        segmentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);

        // Verify that addSourceInfoToLink was called with clliNodeMap.get("aclli")
        verify(segmentProcessor, times(1)).addSourceInfoToLink(any(Link.class), eq(clliNodeMap.get("aclli")));
    }

    @Test
    void testProcessZclliKeyExists() {
        // Setup
        SegmentProcessor segmentProcessor = SegmentProcessor.getInstance();
        List<Node> nodes = mock(List.class);
        List<Link> links = mock(List.class);
        ClrComponent clrComponent = mock(ClrComponent.class);
        List<ClrComponent> clrComponentList = mock(List.class);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        clliNodeMap.put("zclli", mock(List.class));
        AtomicInteger ukCount = mock(AtomicInteger.class);

        // Call process method
        segmentProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);

        // Verify that addSourceInfoToLink was called with clliNodeMap.get("zclli")
        verify(segmentProcessor, times(1)).addSourceInfoToLink(any(Link.class), eq(clliNodeMap.get("zclli")));
    }
}