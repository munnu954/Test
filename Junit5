To achieve 100% code coverage for the `validateIterator` method in the `MtnInsightsValidator` class, we need to write unit tests for all possible branches and conditions in the method. Below are the JUnit 5 test cases covering all branches:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;

public class MtnInsightsValidatorTest {

    @InjectMocks
    private MtnInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testValidateIterator_AllFieldsPresentAndValid() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("validEcpdId");
        attributes.setMtn("validMtn");
        attributes.setInsightCategory("VBGMyBiz");
        attributes.setInsightName("MyBizReg");
        attributes.setOutageId("validOutageId");

        assertDoesNotThrow(() -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    public void testValidateIterator_InvalidMyBizAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("validEcpdId");
        attributes.setMtn("");  // Invalid MTN
        attributes.setInsightCategory("VBGMyBiz");
        attributes.setInsightName("MyBizReg");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    public void testValidateIterator_InvalidNetworkOutageAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("");  // Invalid EcpdId
        attributes.setMtn("validMtn");
        attributes.setInsightCategory("VBGNxOutage");
        attributes.setInsightName("mtnoutage");
        attributes.setOutageId("validOutageId");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    public void testValidateIterator_EmptyInsightCategoryAndName() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("validEcpdId");
        attributes.setMtn("validMtn");
        attributes.setInsightCategory("");
        attributes.setInsightName("");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    public void testValidateIterator_MissingRequiredFields() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        // Missing all fields

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }
    
    @Test
    public void testValidateIterator_OnlyInsightCategory() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setInsightCategory("VBGNxOutage");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    public void testValidateIterator_OnlyInsightName() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setInsightName("mtnoutage");

        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, "LogVal"));
    }
}
```

### Explanation:

- **Test Setup**: We use `@BeforeEach` to initialize the `MtnInsightsValidator` object before each test case.
  
- **Test Cases**:
  - **AllFieldsPresentAndValid**: Tests when all required fields are provided and valid. It should not throw an exception.
  - **InvalidMyBizAttributes**: Tests invalid attributes for "MyBiz" insights. It should throw an `InvalidRequestException`.
  - **InvalidNetworkOutageAttributes**: Tests invalid attributes for "Network Outage" insights. It should throw an `InvalidRequestException`.
  - **EmptyInsightCategoryAndName**: Tests when both `insightCategory` and `insightName` are empty. It should throw an `InvalidRequestException`.
  - **MissingRequiredFields**: Tests when all fields are missing. It should throw an `InvalidRequestException`.
  - **OnlyInsightCategory**: Tests when only `insightCategory` is provided. It should throw an `InvalidRequestException`.
  - **OnlyInsightName**: Tests when only `insightName` is provided. It should throw an `InvalidRequestException`.

These test cases cover all branches and conditions in the `validateIterator` method, providing 100% code coverage.