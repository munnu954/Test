Positive Test Case:

@Test
public void testConsumeSuccessfulCollection() throws Exception {
    // Given
    SpaceCollector message = new SpaceCollector();
    // Set necessary properties of space collector object

    JobStatus expectedJobStatus = JobStatus.COLLECTION_SUCCESSFUL;

    // When
    boolean result = consumerService.consume(message);

    // Then
    assertTrue(result);

    verify(kafkaProducerService, times(1)).writeMessage(any(JsonNode.class), anyString(), eq("3459-DEV-COLLECTION-AUDIT-QUEUE"));

    ArgumentCaptor<JsonNode> captor = ArgumentCaptor.forClass(JsonNode.class);
    verify(kafkaProducerService).writeMessage(captor.capture(), anyString(), eq("3459-DEV-COLLECTION-AUDIT-QUEUE"));

    JsonNode auditQueueJSON = captor.getValue();
    assertEquals(expectedJobStatus.toString(), auditQueueJSON.get("job_status").asText());
}

Negative Test Case:

@Test
public void testConsumeFailedCollection() throws Exception {
    // Given
    SpaceCollector message = new SpaceCollector();
    // Set necessary properties of space collector object

    JobStatus expectedJobStatus = JobStatus.COLLECTION_FAILED;

    // Mock SSHService to throw an exception
    doThrow(new Exception("SSH error")).when(sshService).retrieveData(any(SpaceCollector.class));

    // When
    boolean result = consumerService.consume(message);

    // Then
    assertTrue(result);

    verify(kafkaProducerService, times(1)).writeMessage(any(JsonNode.class), anyString(), eq("3459-DEV-COLLECTION-AUDIT-QUEUE"));

    ArgumentCaptor<JsonNode> captor = ArgumentCaptor.forClass(JsonNode.class);
    verify(kafkaProducerService).writeMessage(captor.capture(), anyString(), eq("3459-DEV-COLLECTION-AUDIT-QUEUE"));

    JsonNode auditQueueJSON = captor.getValue();
    assertEquals(expectedJobStatus.toString(), auditQueueJSON.get("job_status").asText());
}