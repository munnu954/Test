Certainly! To achieve 100% code coverage for the `isValidData` method in the `BatchLoaderUtils` class, you need to test all possible branches of the method. Specifically, this includes testing for `null`, blank, empty, and valid strings.

Here's a JUnit 5 test class with test cases that cover each branch:

```java
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BatchLoaderUtilsTest {

    private BatchLoaderUtils batchLoaderUtils;

    @BeforeEach
    public void setUp() {
        batchLoaderUtils = new BatchLoaderUtils();
    }

    @Test
    public void testIsValidData_NullInput() {
        String input = null;
        Boolean result = batchLoaderUtils.isValidData(input);
        assertFalse(result, "Expected false for null input");
    }

    @Test
    public void testIsValidData_BlankInput() {
        String input = "   "; // Blank input with spaces
        Boolean result = batchLoaderUtils.isValidData(input);
        assertFalse(result, "Expected false for blank input");
    }

    @Test
    public void testIsValidData_EmptyInput() {
        String input = ""; // Empty input
        Boolean result = batchLoaderUtils.isValidData(input);
        assertFalse(result, "Expected false for empty input");
    }

    @Test
    public void testIsValidData_ValidInput() {
        String input = "Valid data"; // Valid input
        Boolean result = batchLoaderUtils.isValidData(input);
        assertTrue(result, "Expected true for valid input");
    }
}
```

### Explanation:

1. **Test Setup**: A new instance of `BatchLoaderUtils` is created before each test to ensure a clean state.

2. **Null Input Test**: The method should return `false` when the input is `null`.

3. **Blank Input Test**: The method should return `false` for input that consists only of whitespace (e.g., "   ").

4. **Empty Input Test**: The method should return `false` for an empty string (`""`).

5. **Valid Input Test**: The method should return `true` for a non-empty, non-blank string (e.g., "Valid data").

By covering these scenarios, you ensure that all logical branches of the `isValidData` method are tested, achieving 100% code coverage.