import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.sink.SinkFunction;
import org.apache.flink.streaming.util.TestHarnessUtil;
import org.junit.jupiter.api.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

public class MainTest {

    private static final String INPUT_FILE_PATH = "input.csv";
    private static final String BOOTSTRAP_SERVER = "localhost:9092";
    private static final String TOPIC = "testTopic";
    private static final String OUTPUT_KAFKA_MESSAGE = "{'key1': 'value1', 'key2': 'value2'}";

    private Main main;

    @BeforeEach
    public void setup() {
        main = new Main();
    }

    @AfterEach
    public void teardown() {
        deleteIfExists(INPUT_FILE_PATH);
    }

    @Test
    public void testMainPositive() throws Exception {
        // Arrange
        ParameterTool parameterTool = mock(ParameterTool.class);
        when(parameterTool.get("bootstarpServer")).thenReturn(BOOTSTRAP_SERVER);
        when(parameterTool.get("Topic")).thenReturn(TOPIC);
        when(parameterTool.getRequired("input")).thenReturn(INPUT_FILE_PATH);
        when(parameterTool.get("fileType")).thenReturn("Gigamon");

        StreamExecutionEnvironment env = mock(StreamExecutionEnvironment.class);
        when(env.fromElements(OUTPUT_KAFKA_MESSAGE)).thenReturn(mock(DataStream.class));

        KafkaSink<String> kafkaSink = mock(KafkaSink.class);
        when(kafkaSink.setBootstrapServers(BOOTSTRAP_SERVER)).thenReturn(kafkaSink);
        when(kafkaSink.setRecordSerializer(any())).thenReturn(kafkaSink);
        when(kafkaSink.setDeliveryGuarantee(DeliveryGuarantee.AT_LEAST_ONCE)).thenReturn(kafkaSink);

        DataStream<String> jsonStream = mock(DataStream.class);
        when(jsonStream.flatMap(any(CsvtoJsonGigamonTransformer.class))).thenReturn(jsonStream);

        // Act
        main.overrideStreamExecutionEnvironment(env);
        main.overrideKafkaSink(kafkaSink);
        main.testMain(parameterTool, jsonStream);

        // Assert
        verify(env).execute();
        verify(jsonStream).sinkTo(kafkaSink);
    }

    @Test
    public void testMainNegative_FileNotFound() throws Exception {
        // Arrange
        ParameterTool parameterTool = mock(ParameterTool.class);
        when(parameterTool.get("bootstarpServer")).thenReturn(BOOTSTRAP_SERVER);
        when(parameterTool.get("Topic")).thenReturn(TOPIC);
        when(parameterTool.getRequired("input")).thenReturn(INPUT_FILE_PATH);
        when(parameterTool.get("fileType")).thenReturn("Gigamon");

        StreamExecutionEnvironment env = mock(StreamExecutionEnvironment.class);
        when(env.fromElements(OUTPUT_KAFKA_MESSAGE)).thenReturn(mock(DataStream.class));

        KafkaSink<String> kafkaSink = mock(KafkaSink.class);
        when(kafkaSink.setBootstrapServers(BOOTSTRAP_SERVER)).thenReturn(kafkaSink);
        when(kafkaSink.setRecordSerializer(any())).thenReturn(kafkaSink);
        when(kafkaSink.setDeliveryGuarantee(DeliveryGuarantee.AT_LEAST_ONCE)).thenReturn(kafkaSink);

        DataStream<String> jsonStream = mock(DataStream.class);
        when(jsonStream.flatMap(any(CsvtoJsonGigamonTransformer.class))).thenReturn(jsonStream);

        // Act and Assert
        Assertions.assertThrows(FileNotFoundException.class, () -> {
            main.overrideStreamExecutionEnvironment(env);
            main.overrideKafkaSink(kafkaSink);
            main.testMain(parameterTool, jsonStream);
        });
    }

    @Test
    public void testReadCSVFilePositive() throws IOException {
        // Arrange
        String expectedContent = "content";

        createFile(INPUT_FILE_PATH, expectedContent);

        // Act
        String actualContent = main.readCSVFile(INPUT_FILE_PATH);

        // Assert
        Assertions.assertEquals(expectedContent, actualContent);
    }

    @Test
    public void testReadCSVFileNegative_FileNotFound() {
        // Act and Assert
        Assertions.assertThrows(FileNotFoundException.class, () -> {
            main.readCSVFile(INPUT_FILE_PATH);
        });
    }

    @Test
    public void testCsvtoJsonConversionPositive() throws Exception {
        // Arrange
        String input = "value1, value2";
        Collector<String> collector = mock(Collector.class);

        // Act
        main.csvtoJsonConversion().flatMap(input, collector);

        // Assert
        verify(collector).collect(OUTPUT_KAFKA_MESSAGE);
    }

    @Test
    public void testCsvtoJsonConversionNegative() throws Exception {
        // Arrange
        String input = ""; // invalid input
        Collector<String> collector = mock(Collector.class);

        // Act
        main.csvtoJsonConversion().flatMap(input, collector);

        // Assert
        verify(collector, never()).collect(anyString());
    }

    private void createFile(String filePath, String content) throws IOException {
        Path path = Paths.get(filePath);
        Files.write(path, content.getBytes());
    }

    private void deleteIfExists(String filePath) {
        File file = new File(filePath);
        if (file.exists()) {
            file.delete();
        }
    }
}