Sure! Below is a JUnit 5 test class for the `getArrayValueForTags` method in your `AlarmRepositoryImpl` class. The test cases will cover the branches of the conditional statements, including the specific case for valid JSON arrays, as well as the catch block to ensure full code coverage.

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class AlarmRepositoryImplTest {

    private AlarmRepositoryImpl alarmRepository;
    private JsonNode jsonNode;
    private ObjectMapper objectMapper;

    @BeforeEach
    public void setUp() {
        alarmRepository = new AlarmRepositoryImpl();
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testGetArrayValueForTags_ValidJsonArray() throws Exception {
        String jsonString = "{\"tag\": [\"CBRS\", \"WLS\"]}";
        jsonNode = objectMapper.readTree(jsonString);

        String[] result = alarmRepository.getArrayValueForTags(jsonNode, "tag");

        assertArrayEquals(new String[] {"CBRS", "WLS"}, result);
    }

    @Test
    public void testGetArrayValueForTags_SingleQuotedArray() throws Exception {
        String jsonString = "{\"tag\": \"['WLS']\"}";
        jsonNode = objectMapper.readTree(jsonString);

        String[] result = alarmRepository.getArrayValueForTags(jsonNode, "tag");

        assertArrayEquals(new String[] {"WLS"}, result);
    }

    @Test
    public void testGetArrayValueForTags_CommaSeparatedValues() throws Exception {
        String jsonString = "{\"tag\": \"CBRS,WLS\"}";
        jsonNode = objectMapper.readTree(jsonString);

        String[] result = alarmRepository.getArrayValueForTags(jsonNode, "tag");

        assertArrayEquals(new String[] {"CBRS", "WLS"}, result);
    }

    @Test
    public void testGetArrayValueForTags_EmptyTag() throws Exception {
        String jsonString = "{\"tag\": \"\"}";
        jsonNode = objectMapper.readTree(jsonString);

        String[] result = alarmRepository.getArrayValueForTags(jsonNode, "tag");

        assertArrayEquals(new String[] {""}, result);
    }

    @Test
    public void testGetArrayValueForTags_NullTag() throws Exception {
        String jsonString = "{}"; // No tag present
        jsonNode = objectMapper.readTree(jsonString);

        String[] result = alarmRepository.getArrayValueForTags(jsonNode, "tag");

        assertNull(result);
    }

    @Test
    public void testGetArrayValueForTags_InvalidJson() throws Exception {
        String jsonString = "{\"tag\": \"[invalid json]}"; // Malformed JSON
        jsonNode = objectMapper.readTree(jsonString);

        String[] result = alarmRepository.getArrayValueForTags(jsonNode, "tag");

        assertNull(result); // Expecting null due to exception
    }
}
```

### Explanation of Test Cases:
1. **testGetArrayValueForTags_ValidJsonArray**: Tests valid JSON array input to ensure it correctly parses and returns the array.
  
2. **testGetArrayValueForTags_SingleQuotedArray**: Tests a single-quoted string that resembles an array, ensuring it extracts the inner string correctly.
  
3. **testGetArrayValueForTags_CommaSeparatedValues**: Tests a string containing comma-separated values, ensuring it splits and returns them as an array.
  
4. **testGetArrayValueForTags_EmptyTag**: Tests how the method handles an empty tag string.
  
5. **testGetArrayValueForTags_NullTag**: Tests the scenario where the tag key does not exist in the JSON, expecting a null return.
  
6. **testGetArrayValueForTags_InvalidJson**: Tests the catch block by providing a malformed JSON string, ensuring it returns null without throwing an exception.

### Notes:
- Each test initializes the `AlarmRepositoryImpl` and prepares the JSON input using `ObjectMapper`.
- Assertions are used to check the expected output of the `getArrayValueForTags` method.
- The tests cover both normal and edge cases, including validating that exceptions are properly handled. 

With these test cases, you should achieve 100% code coverage for the `getArrayValueForTags` method. Make sure to include the appropriate dependencies for JUnit 5 and Mockito in your project to run these tests.