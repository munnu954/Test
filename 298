Sure! I can help you write JUnit 5 test cases to achieve 100% code coverage for the `parse` method in the `AlarmPostingUtils` class. Here's an example of how you can write the test cases:

```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class AlarmPostingUtilsTest {

    private Map<String, Object> srcMap;
    private String ruleName;

    @BeforeEach
    public void setup() {
        srcMap = new HashMap<>();
        srcMap.put("attribute1", "value1");
        srcMap.put("attribute2", "value2");
        ruleName = "rule1";
    }

    @Test
    public void testParse_WhenValueContainsNoMatch_ShouldReturnOriginalValue() {
        String value = "No matches";
        String result = AlarmPostingUtils.parse(value, srcMap, ruleName);
        Assertions.assertEquals(value, result);
    }

    @Test
    public void testParse_WhenValueContainsMatchWithNoAttribute_ShouldReturnEmptyString() {
        String value = "%attribute3%";
        String result = AlarmPostingUtils.parse(value, srcMap, ruleName);
        Assertions.assertEquals("", result);
    }

    @Test
    public void testParse_WhenValueContainsMatchWithExistingAttribute_ShouldReturnAttributeValue() {
        String value = "%attribute1%";
        String result = AlarmPostingUtils.parse(value, srcMap, ruleName);
        Assertions.assertEquals("value1", result);
    }

    @Test
    public void testParse_WhenValueContainsMatchWithNestedAttribute_ShouldReturnNestedAttributeValue() {
        srcMap.put("attribute4", "value4");
        String value = "%attribute2.attribute4%";
        String result = AlarmPostingUtils.parse(value, srcMap, ruleName);
        Assertions.assertEquals("value4", result);
    }

    // Add more test cases to cover other branches and edge cases

}
```

Feel free to add more test cases to cover other branches and edge cases. Remember to assert the expected values using `Assertions.assertEquals` or other appropriate assertion methods based on your requirements.