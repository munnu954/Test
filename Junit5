To achieve full coverage of the specified conditional statements within the `ctionMessage` method of the `EventsMessageListener` class, we need to ensure that we cover scenarios where each condition evaluates to both true and false. Below are test cases specifically targeting these conditions:

```java
import com.verizon.vbg.ledger.listener.EventsMessageListener;
import com.verizon.vbg.ledger.service.MtnEcpdService;
import com.verizon.vbg.ledger.service.CTIEcpdService;
import com.verizon.vbg.ledger.service.KafkaFalloutService;
import com.verizon.vbg.ledger.util.BatchLoaderUtils;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.util.StringUtils;

import static org.mockito.Mockito.*;

class EventsMessageListenerConditionalTests {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @Mock
    private MtnEcpdService mtnEcpdService;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @Mock
    private BatchLoaderUtils utils;

    @Mock
    private CTIEcpdService ctiEcpdService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "outbound-cti-event");
    }

    @Test
    void testCtionMessage_validSensitivityData() {
        // Prepare a payload with valid sensitivity data
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"RELEASE\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";
        
        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock dependencies
        when(utils.isValidData("Y")).thenReturn(true);  // Sensitivity is valid
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setEcpd("ecpd-123");
        ctiDataStore.setSensitivity("Y");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that the message is not sent due to sensitivity
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    void testCtionMessage_invalidSensitivityData() {
        // Prepare a payload with invalid sensitivity data
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"RELEASE\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";
        
        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock dependencies
        when(utils.isValidData("N")).thenReturn(false);  // Sensitivity is invalid
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setEcpd("ecpd-123");
        ctiDataStore.setSensitivity("N");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that the message is processed since sensitivity is invalid
        verify(kafkaTemplate, times(1)).send(any());
    }

    @Test
    void testCtionMessage_sensitivityDataWithLength() {
        // Prepare a payload with sensitivity data that has length
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"RELEASE\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock dependencies
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setEcpd("ecpd-123");
        ctiDataStore.setSensitivity("YES");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that the message is not sent due to sensitivity having length
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    void testCtionMessage_sensitivityFlagNotY() {
        // Prepare a payload with sensitivity flag not equal to "Y"
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"RELEASE\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock dependencies
        CTIDataStore ctiDataStore = new CTIDataStore();
        ctiDataStore.setEcpd("ecpd-123");
        ctiDataStore.setSensitivity("N");
        when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that the message is processed since sensitivity flag is not "Y"
        verify(kafkaTemplate, times(1)).send(any());
    }
}
```

### Explanation of Test Scenarios:

1. **Valid Sensitivity Data**: Tests when the sensitivity data is valid (`"Y"`), ensuring the message is not sent due to sensitivity.

2. **Invalid Sensitivity Data**: Tests when sensitivity is invalid (e.g., `"N"`), ensuring the message is processed.

3. **Sensitivity Data with Length**: Covers cases where the sensitivity string is present and has a length, ensuring the message is not sent if flagged.

4. **Sensitivity Flag Not `"Y"`**: Tests when the sensitivity flag is something other than `"Y"`, ensuring the message is processed.

These test cases are intended to fully cover the branches related to sensitivity checks within the `ctionMessage` method. Adjust the mock data and assertions as necessary to align with your specific logic and behavior.