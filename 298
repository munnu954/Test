catch (HttpClientErrorException | HttpServerErrorException ex) {
    ex.printStackTrace();
    LOGGER.error("Error triggering job", ex.getMessage());

    FileMetadata metadata = kafkaConsumer.logMetadata(collector, fileType, ex);

    if (ex.getRawStatusCode() == 500 && ex.getResponseBodyAsString().contains("Non existent jar id passed to flink cluster")) {
        // Handle Non existent jar id passed to flink cluster exception
        kafkaInputProducer.sendFailureMessage(collector, fileType, ex);
        kafkaConsumer.writeLogToFile(metadata, destinationFolderPath);
    } else if (ex.getResponseBodyAsString().contains("Non existent jar id passed to flink cluster")) {
        // Handle Non existent jar id passed to flink cluster exception
        LOGGER.error("Non existent jar id passed to flink cluster. Given a non existent jar id of the job When the transform job is triggered with the non existent jar id");
    } else if (ex.getRawStatusCode() == 500 && ex.getResponseBodyAsString().contains("Internal server error")) {
        // Handle Internal Server Error exception
        kafkaInputProducer.sendFailureMessage(collector, fileType, ex);
        kafkaConsumer.writeLogToFile(metadata, destinationFolderPath);
    } else {
        // Handle other exceptions
        // Handle existing exception logic here
    }
}