Certainly! Below is the JUnit 5 test code that aims to achieve 100% code coverage for the `for` loop inside the `applyPostingRule` method of the `PostingRuleProcessingService` class. This test code will utilize reflection to access private fields.

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private Environment env;

    private Alarm alarm;
    private PostingRule postingRule;
    private HashMap<String, Object> alarmMap;
    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();

    @BeforeEach
    void setUp() throws Exception {
        alarm = new Alarm();
        alarm.setAlarmIdentity("testAlarmIdentity");

        postingRule = new PostingRule(1L, "testRule", 1, 1, "testCriteria");

        alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "testAlarmIdentity");

        setPrivateField("alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");
        setPrivateField("topologyDetailsAlarmedObjectExpression", "{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}");
        setPrivateField("topologyObjectEligibilityCheckValue", "%TopoObject:OSS_Names[0]%");
        setPrivateField("topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        setPrivateField("componentIDAttributeName", "reportingObject");
    }

    private void setPrivateField(String fieldName, Object value) throws NoSuchFieldException, IllegalAccessException {
        Field field = PostingRuleProcessingService.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(postingRuleProcessingService, value);
    }

    @Test
    void testApplyPostingRule_HappyPath() throws Exception {
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("testComponentId");
        ResponseEntity<String> responseEntity = mock(ResponseEntity.class);
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(responseEntity);
        when(responseEntity.getBody()).thenReturn(getMockTopologyData());

        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        assertEquals("testComponentId", resultAlarm.getAlarmedObject());
        assertEquals("{\"topologyDetails\":{\"MO_Type\":\"testMOType\",\"TagSequence\":\"testTagSequence\",\"Name\":\"testName\"}}", resultAlarm.getTopologyDetails());
    }

    @Test
    void testApplyPostingRule_TopologyDataNotArray() throws Exception {
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("testComponentId");
        ResponseEntity<String> responseEntity = mock(ResponseEntity.class);
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(responseEntity);
        when(responseEntity.getBody()).thenReturn(getMockInvalidTopologyData());

        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        verify(utils, times(1)).evaluateExpression(anyString(), anyMap());
        assertEquals(alarm, resultAlarm);
    }

    @Test
    void testApplyPostingRule_TopologyDataMissingNode() throws Exception {
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("testComponentId");
        ResponseEntity<String> responseEntity = mock(ResponseEntity.class);
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(responseEntity);
        when(responseEntity.getBody()).thenReturn(getMockMissingTopologyData());

        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        verify(utils, times(1)).evaluateExpression(anyString(), anyMap());
        assertEquals(alarm, resultAlarm);
    }

    private String getMockTopologyData() throws Exception {
        ArrayNode arrayNode = OBJECT_MAPPER.createArrayNode();
        ObjectNode node = OBJECT_MAPPER.createObjectNode();
        node.put("OSS_Names[0]", "testComponentId");
        node.put("MO_Type", "testMOType");
        node.put("INMS_Attributes.TagSequence", "testTagSequence");
        node.put("Name", "testName");
        arrayNode.add(node);
        ObjectNode root = OBJECT_MAPPER.createObjectNode();
        root.set("topologyObjects", arrayNode);
        return OBJECT_MAPPER.writeValueAsString(root);
    }

    private String getMockInvalidTopologyData() throws Exception {
        ObjectNode root = OBJECT_MAPPER.createObjectNode();
        root.put("topologyObjects", "invalidData");
        return OBJECT_MAPPER.writeValueAsString(root);
    }

    private String getMockMissingTopologyData() throws Exception {
        ObjectNode root = OBJECT_MAPPER.createObjectNode();
        root.put("topologyObjects", null);
        return OBJECT_MAPPER.writeValueAsString(root);
    }
}
```

### Explanation:

1. **Setup and Mocking**: 
    - The `@BeforeEach` method initializes the necessary objects and sets the private fields using reflection.
  
2. **Test Cases**:
    - **Happy Path**: This test case verifies the typical flow where all conditions are met, and the alarm is updated with the topology details.
    - **Topology Data Not Array**: This test case ensures that if the topology data is not an array, the method returns the original alarm.
    - **Topology Data Missing Node**: This test case checks the scenario where the topology data node is missing, and it should return the original alarm.

3. **Mock Data**:
    - The `getMockTopologyData` method creates valid mock topology data.
    - The `getMockInvalidTopologyData` method creates an invalid topology data scenario.
    - The `getMockMissingTopologyData` method creates a scenario where the topology data node is missing.

This should give you comprehensive coverage of the `for` loop within the `applyPostingRule` method.