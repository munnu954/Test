To achieve 100% code coverage for both the `CommonWrapperController` and `CircuitDetailsProvider` classes, you'll need to write JUnit 5 test cases that cover all possible branches and exception handling. Below are the test cases for each class:

### Test Cases for `CommonWrapperController`

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

@ExtendWith(MockitoExtension.class)
class CommonWrapperControllerTest {

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @InjectMocks
    private CommonWrapperController commonWrapperController;

    private MockMvc mockMvc;

    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup(commonWrapperController).build();
    }

    @Test
    void testGetClrGraphicsWithValidData() throws Exception {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String cnd = "Y";
        String phyModel = "testPhyModel";

        when(clrGraphicsService.getClrGraphics(anyString(), anyString(), anyString(), anyString()))
            .thenReturn("Mock Response");

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        assertEquals("Mock Response", response);
    }

    @Test
    void testGetClrGraphicsWithNullSourceSysAndPhyModel() throws Exception {
        String circuitId = "testCircuitId";
        String sourceSys = null;
        String cnd = null;
        String phyModel = null;

        when(clrGraphicsService.getClrGraphics(anyString(), anyString(), anyString(), anyString()))
            .thenReturn("Mock Response");

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        assertEquals("Mock Response", response);
    }

    @Test
    void testGetClrGraphicsWithExceptionInCircuitIdDecoding() {
        String circuitId = "testCircuitId%";
        String sourceSys = "testSourceSys";
        String cnd = "Y";
        String phyModel = "testPhyModel";

        when(clrGraphicsService.getClrGraphics(anyString(), anyString(), anyString(), anyString()))
            .thenReturn("Mock Response");

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        assertEquals("Mock Response", response);
    }
}
```

### Test Cases for `CircuitDetailsProvider`

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @BeforeEach
    void setUp() {
        // Initialization if needed
    }

    @Test
    void testGetCircuitDetailsWithValidData() {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String cnd = "Y";
        String phyModel = "testPhyModel";

        String mockResponse = "{\"someField\":\"someValue\"}";
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(mockResponse);

        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        assertNotNull(response);
    }

    @Test
    void testGetCircuitDetailsWithNullValues() {
        String circuitId = null;
        String sourceSys = null;
        String cnd = "Y";
        String phyModel = null;

        String mockResponse = "{\"someField\":\"someValue\"}";
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(mockResponse);

        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        assertNotNull(response);
    }

    @Test
    void testGetCircuitDetailsWithEmptyResponse() {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String cnd = "Y";
        String phyModel = "testPhyModel";

        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(null);

        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        assertNull(response);
    }
}
```

### Explanation:

- **Mocking**: `Mockito` is used to mock the dependencies (`ClrGraphicsService` and `RestClientUtil`) to isolate the unit under test.
- **Branch Coverage**: Tests are created to cover different branches, including null and non-null values for optional parameters and exception handling.
- **Assertions**: Verify the expected behavior using assertions.
- **Setup**: Use `@BeforeEach` to set up test dependencies and configurations.

These tests aim to ensure 100% code coverage by covering all branches and exception handling paths in the provided Java classes.