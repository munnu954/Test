import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Unmarshaller;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.StringReader;

@ExtendWith(MockitoExtension.class)
public class BatchLoaderUtilsTest {

    @InjectMocks
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private Logger logger;

    private static final String VALID_XML = "<example>test</example>";
    private static final String INVALID_XML = "<example>test";

    @BeforeEach
    public void setUp() {
        batchLoaderUtils = new BatchLoaderUtils();
    }

    @Test
    public void testConvertToObjectSuccess() throws JAXBException {
        JAXBContext jaxbContext = mock(JAXBContext.class);
        Unmarshaller unmarshaller = mock(Unmarshaller.class);
        when(jaxbContext.createUnmarshaller()).thenReturn(unmarshaller);

        StringReader reader = new StringReader(VALID_XML);
        Object expectedObject = new Object();
        when(unmarshaller.unmarshal(reader)).thenReturn(expectedObject);

        Object result = batchLoaderUtils.convertToObject(VALID_XML, Object.class);
        assertEquals(expectedObject, result);
    }

    @Test
    public void testConvertToObjectJAXBException() throws JAXBException {
        JAXBContext jaxbContext = mock(JAXBContext.class);
        when(jaxbContext.createUnmarshaller()).thenThrow(new JAXBException("Error"));

        batchLoaderUtils = new BatchLoaderUtils() {
            @Override
            public <T> T convertToObject(String xml, Class<T> clazz) throws JAXBException {
                try {
                    JAXBContext jaxbContext = JAXBContext.newInstance(clazz);
                    Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
                    StringReader reader = new StringReader(xml);
                    return (T) jaxbUnmarshaller.unmarshal(reader);
                } catch (JAXBException e) {
                    logger.error("Unable to convert ", e);
                    throw e;
                }
            }
        };

        assertThrows(JAXBException.class, () -> batchLoaderUtils.convertToObject(INVALID_XML, Object.class));
        verify(logger).error(anyString(), any(JAXBException.class));
    }

    @Test
    public void testIsValidData() {
        assertFalse(batchLoaderUtils.isValidData(null));
        assertFalse(batchLoaderUtils.isValidData(""));
        assertFalse(batchLoaderUtils.isValidData(" "));
        assertFalse(batchLoaderUtils.isValidData("0"));
        assertTrue(batchLoaderUtils.isValidData("valid"));
    }
}
