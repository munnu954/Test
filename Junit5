Certainly! Below are JUnit 5 test cases to cover the two branches of the conditional statement in the `callEndpoint` method of the `RestClientUtil` class:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

@RunWith(MockitoExtension.class)
public class RestClientUtilTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private RestClientUtil restClientUtil;

    @BeforeEach
    void setUp() {
        restClientUtil = new RestClientUtil();
        restClientUtil.restTemplate = restTemplate;
    }

    @Test
    public void testCallEndpointWithNonNullResponse() {
        String url = "http://example.com";
        HttpMethod method = HttpMethod.POST;
        HttpHeaders headers = new HttpHeaders();
        String body = "requestBody";

        ResponseEntity<String> mockResponse = ResponseEntity.ok("responseBody");
        when(restTemplate.exchange(eq(url), eq(method), any(HttpEntity.class), eq(String.class)))
                .thenReturn(mockResponse);

        String response = restClientUtil.callEndpoint(url, method, headers, body);

        assertNotNull(response);
        assertEquals("responseBody", response);
    }

    @Test
    public void testCallEndpointWithNullResponse() {
        String url = "http://example.com";
        HttpMethod method = HttpMethod.POST;
        HttpHeaders headers = new HttpHeaders();
        String body = "requestBody";

        when(restTemplate.exchange(eq(url), eq(method), any(HttpEntity.class), eq(String.class)))
                .thenReturn(null);

        String response = restClientUtil.callEndpoint(url, method, headers, body);

        assertNull(response);
    }
}
```

### Explanation:

1. **Mocks and InjectMocks**:
   - `@Mock` is used to create a mock object of `RestTemplate`.
   - `@InjectMocks` is used to inject the mock `RestTemplate` into the `RestClientUtil` instance.

2. **Test Setup**:
   - The `setUp` method initializes the `RestClientUtil` with the mocked `RestTemplate`.

3. **Test Cases**:
   - **testCallEndpointWithNonNullResponse**: This test case simulates a scenario where the `exchange` method of `RestTemplate` returns a non-null `ResponseEntity`. The test verifies that the `callEndpoint` method returns the expected response body when the response is non-null.
   
   - **testCallEndpointWithNullResponse**: This test case simulates a scenario where the `exchange` method of `RestTemplate` returns null. The test verifies that the `callEndpoint` method returns null in this case.

These test cases will provide 100% code coverage for the `callEndpoint` method, covering both branches of the conditional statement.