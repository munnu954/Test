```java
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;

class TrailProcessorTest {

    @Test
    void testProcess_withNullCircuitInfo_skipsProcessing() {
        TrailProcessor processor = TrailProcessor.getInstance(null);
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCircuitComp(List.of());
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "sourceSys";

        processor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        assertTrue(nodes.isEmpty());
        assertTrue(links.isEmpty());
    }

    @Test
    void testProcess_withNoPreviousCircuitComponents_processesCurrentCircuit() {
        TrailProcessor processor = TrailProcessor.getInstance(null);
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("circuitName");
        circuitInfo.setType("TRAIL");
        clrComponent.setCircuitComp(List.of(new CircuitComp(circuitInfo)));
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "sourceSys";

        processor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        assertEquals(1, nodes.size());
        assertEquals(1, links.size());
    }

    @Test
    void testProcess_withPreviousCircuitComponent_skipsDuplicateCircuit() {
        TrailProcessor processor = TrailProcessor.getInstance(null);
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("circuitName");
        circuitInfo.setType("TRAIL");
        clrComponent.setCircuitComp(List.of(new CircuitComp(circuitInfo)));
        List<ClrComponent> clrComponentList = new ArrayList<>();
        ClrComponent previousClrComponent = new ClrComponent();
        CircuitInfo previousCircuitInfo = new CircuitInfo();
        previousCircuitInfo.setCircuitName("circuitName");
        previousCircuitInfo.setType("TRAIL");
        previousClrComponent.setCircuitComp(List.of(new CircuitComp(previousCircuitInfo)));
        clrComponentList.add(previousClrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "sourceSys";

        processor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        assertTrue(nodes.isEmpty());
        assertTrue(links.isEmpty());
    }

    @Test
    void testProcess_withPreviousCircuitComponent_processesNonDuplicateCircuit() {
        TrailProcessor processor = TrailProcessor.getInstance(null);
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("circuitName1");
        circuitInfo.setType("TRAIL");
        clrComponent.setCircuitComp(List.of(new CircuitComp(circuitInfo)));
        List<ClrComponent> clrComponentList = new ArrayList<>();
        ClrComponent previousClrComponent = new ClrComponent();
        CircuitInfo previousCircuitInfo = new CircuitInfo();
        previousCircuitInfo.setCircuitName("circuitName2");
        previousCircuitInfo.setType("TRAIL");
        previousClrComponent.setCircuitComp(List.of(new CircuitComp(previousCircuitInfo)));
        clrComponentList.add(previousClrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "sourceSys";

        processor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        assertEquals(1, nodes.size());
        assertEquals(1, links.size());
    }

    @Test
    void testProcess_withNoAEndAndZEnd_createsEquipmentFromPortChannel() {
        TrailProcessor processor = TrailProcessor.getInstance(null);
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("circuitName");
        circuitInfo.setType("TRAIL");
        AEnd aEnd = new AEnd();
        aEnd.setPortChannel(List.of(new PortRef("siteCodeA", "portIdA", "shelfIDA")));
        circuitInfo.setAEnd(List.of(aEnd));
        ZEnd zEnd = new ZEnd();
        zEnd.setPortChannel(List.of(new PortRef("siteCodeZ", "portIdZ", "shelfIdZ")));
        circuitInfo.setZEnd(List.of(zEnd));
        clrComponent.setCircuitComp(List.of(new CircuitComp(circuitInfo)));
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "sourceSys";

        processor.process(nodes, links, clrComponent, new ArrayList<>(), clliNodeMap, i, ukCount, sourceSys);

        assertEquals(2, nodes.size());
        assertEquals(1, links.size());
        assertEquals("siteCodeA", nodes.get(0).getSiteCode());
        assertEquals("portIdA", nodes.get(0).getPortId());
        assertEquals("siteCodeZ", nodes.get(1).getSiteCode());
        assertEquals("portIdZ", nodes.get(1).getPortId());
    }

    @Test
    void testProcess_withAEndAndNoZEnd_createsEquipmentFromPortChannel() {
        TrailProcessor processor = TrailProcessor.getInstance(null);
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = new ClrComponent();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("circuitName");
        circuitInfo.setType("TRAIL");
        AEnd aEnd = new AEnd();
        aEnd.setPortChannel(List.of(new PortRef("siteCodeA", "portIdA", "shelfIDA")));
        circuitInfo.setAEnd(List.of(aEnd));
        clrComponent.setCircuitComp(List.of(new CircuitComp(circuitInfo)));
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "sourceSys";

        processor.process(nodes, links, clrComponent, new ArrayList<>(), clliNodeMap, i, ukCount, sourceSys);

        assertEquals(1, nodes.size());
        assertEquals(1, links.size());
        assertEquals("siteCodeA", nodes.get(0).getSiteCode());
        assertEquals("portIdA", nodes.get(0).getPortId());
    }

    }