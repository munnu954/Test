Sure! Here's the converted JUnit test case code:

```java
@RunWith(SpringRunner.class)
@SpringBootTest
public class XmlTransformerApplicationTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    public void testXmlTransformer() throws Exception {
        // Given
        String kafkaServer = "localhost:9092";
        String filePath = "ETAS.xml";
        String fileType = "ETAS";
        String dataTopic = "3459-DEV-COLLECTION-JSON-DATA-QUEUE";
        String auditTopic = "3459-DEV-COLLECTION-AUDIT-QUEUE";
        int noofRecords = 40;

        // Check if Kafka server is running
        Properties props = new Properties();
        props.put("bootstrap.servers", kafkaServer);
        AdminClient client = AdminClient.create(props);
        Collection<Node> nodes = client.describeCluster().nodes().get();
        boolean isKafkaServerRunning = nodes != null && !nodes.isEmpty();

        // Assert Kafka server is running
        Assert.assertTrue(isKafkaServerRunning);

        // Check if topics exist in Kafka server
        Properties kafkaProperties = new Properties();
        kafkaProperties.put("bootstrap.servers", kafkaServer);
        AdminClient adminClient = AdminClient.create(kafkaProperties);
        ListTopicsResult topics = adminClient.listTopics();
        Set<String> topicsSet = topics.names().get();
        boolean isDataTopicExist = topicsSet.contains(dataTopic);
        boolean isAuditTopicExist = topicsSet.contains(auditTopic);

        // Assert topics exist
        Assert.assertTrue(isDataTopicExist);
        Assert.assertTrue(isAuditTopicExist);

        // Get the uploaded jar ID
        ResponseEntity<JsonNode> jarsResponse = restTemplate.getForEntity("/jars", JsonNode.class);
        Assert.assertEquals(HttpStatus.OK, jarsResponse.getStatusCode());
        String jarId = jarsResponse.getBody().get("files").get(0).get("id").asText();

        // Submit job with programArgs in body
        String programArgs = getProgramArgs(filePath, fileType);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        JSONObject requestBody = new JSONObject();
        requestBody.put("programArgs", programArgs);
        String jobSubmitUrl = "/jars/" + jarId + "/run";
        HttpEntity<String> request = new HttpEntity<>(requestBody.toString(), headers);
        ResponseEntity<JsonNode> response = restTemplate.postForEntity(jobSubmitUrl, request, JsonNode.class);
        Assert.assertEquals(HttpStatus.OK, response.getStatusCode());
        String jobId = response.getBody().get("jobid").asText();
        Assert.assertNotNull(jobId);

        // Wait for job completion and check accumulator details
        Thread.sleep(5000);
        ResponseEntity<JsonNode> accumulatorsResponse = restTemplate.getForEntity("/jobs/" + jobId + "/accumulators", JsonNode.class);
        Assert.assertEquals(HttpStatus.OK, accumulatorsResponse.getStatusCode());
        String accumulatorName = accumulatorsResponse.getBody().get("user-task-accumulators").get(0).get("name").asText();
        if (accumulatorName.equals("successIntCounter")) {
            int successCount = accumulatorsResponse.getBody().get("user-task-accumulators").get(0).get("value").asInt();
            Assert.assertEquals(noofRecords, successCount);
        } else {
            int failureCount = accumulatorsResponse.getBody().get("user-task-accumulators").get(0).get("value").asInt();
            Assert.assertEquals(0, failureCount);
        }
    }

    private String getProgramArgs(String filePath, String fileType) {
        String programArgsTemplate = "Some program args template"; // Replace with your program args template
        return programArgsTemplate.replace("|filePath|", filePath).replace("|fileType|", fileType);
    }
}
```

Please note that you need to replace the programArgsTemplate with your actual program arguments template. Also, make sure to configure the TestRestTemplate with the appropriate properties in your test configuration.