To achieve 100% code coverage of the specific conditional statement in the `CableProcessor` class, you need to ensure that all paths of the `if` statement are tested. This means you need to test:

1. The case where `prevClrComponent.getEquipmentComp()` is null.
2. The case where `prevClrComponent.getEquipmentComp()` is not null but empty.
3. The case where `prevClrComponent.getEquipmentComp().get(0).getPortRef()` is null.
4. The case where `prevClrComponent.getEquipmentComp().get(0).getPortRef()` is not null but empty.
5. The case where all conditions are met (i.e., none of the above are null or empty).

Here's how you can structure your test cases to cover all branches:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertNotNull;

public class CableProcessorTest {

    private CableProcessor cableProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    public void setUp() {
        cableProcessor = CableProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "testSource";
    }

    @Test
    public void testProcess_withNullEquipmentComp() {
        // Test when equipmentComp is null
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setEquipmentComp(null);
        clrComponentList.add(prevClrComponent);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    public void testProcess_withEmptyEquipmentComp() {
        // Test when equipmentComp is empty
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setEquipmentComp(new ArrayList<>());
        clrComponentList.add(prevClrComponent);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    public void testProcess_withNullPortRef() {
        // Test when portRef is null
        ClrComponent prevClrComponent = new ClrComponent();
        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(null);

        List<EquipmentComp> equipmentComps = new ArrayList<>();
        equipmentComps.add(equipmentComp);
        prevClrComponent.setEquipmentComp(equipmentComps);

        clrComponentList.add(prevClrComponent);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    public void testProcess_withEmptyPortRef() {
        // Test when portRef is empty
        ClrComponent prevClrComponent = new ClrComponent();
        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(new ArrayList<>());

        List<EquipmentComp> equipmentComps = new ArrayList<>();
        equipmentComps.add(equipmentComp);
        prevClrComponent.setEquipmentComp(equipmentComps);

        clrComponentList.add(prevClrComponent);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        assertNotNull(links);
        assertNotNull(nodes);
    }

    @Test
    public void testProcess_withValidEquipmentCompAndPortRef() {
        // Test when all conditions are met
        ClrComponent prevClrComponent = new ClrComponent();
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("port123");
        portRef.setSiteCode("site123");

        List<PortRef> portRefs = new ArrayList<>();
        portRefs.add(portRef);

        equipmentComp.setPortRef(portRefs);

        List<EquipmentComp> equipmentComps = new ArrayList<>();
        equipmentComps.add(equipmentComp);
        prevClrComponent.setEquipmentComp(equipmentComps);

        clrComponentList.add(prevClrComponent);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        assertNotNull(links);
        assertNotNull(nodes);
    }
}
```

### Explanation:

- **`testProcess_withNullEquipmentComp`**: Tests the branch where `equipmentComp` is null.
- **`testProcess_withEmptyEquipmentComp`**: Tests the branch where `equipmentComp` is not null but empty.
- **`testProcess_withNullPortRef`**: Tests the branch where `portRef` is null.
- **`testProcess_withEmptyPortRef`**: Tests the branch where `portRef` is not null but empty.
- **`testProcess_withValidEquipmentCompAndPortRef`**: Tests the branch where all objects are correctly instantiated and populated.

These test cases aim to cover every branch of the conditional statement in question, ensuring thorough testing of the method.