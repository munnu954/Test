import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class ArchivalFileMovementTest {

    @Mock
    private Path mockedPath;

    @Test
    void testMoveFilesMatchingPattern() throws Exception {
        ArchivalFileMovement archivalFileMovement = new ArchivalFileMovement();

        doReturn(mockedPath).when(archivalFileMovement).getSourceDirectory(anyString());
        doReturn("testPattern").when(archivalFileMovement).getFilePattern(anyString());
        doNothing().when(archivalFileMovement).moveFile(mockedPath, "destinationPath");

        archivalFileMovement.moveFilesMatchingPattern("sourcePattern", "destinationPath");

        verify(archivalFileMovement, times(1)).getSourceDirectory("sourcePattern");
        verify(archivalFileMovement, times(1)).getFilePattern("sourcePattern");
        verify(archivalFileMovement, times(1)).moveFile(mockedPath, "destinationPath");
    }

    @Test
    void testMoveFilesMatchingPatternWithException() throws Exception {
        ArchivalFileMovement archivalFileMovement = new ArchivalFileMovement();

        doReturn(mockedPath).when(archivalFileMovement).getSourceDirectory(anyString());
        doReturn("testPattern").when(archivalFileMovement).getFilePattern(anyString());
        doThrow(new Exception("Error moving file")).when(archivalFileMovement).moveFile(mockedPath, "destinationPath");

        assertThrows(Exception.class, () -> archivalFileMovement.moveFilesMatchingPattern("sourcePattern", "destinationPath"));

        verify(archivalFileMovement, times(1)).getSourceDirectory("sourcePattern");
        verify(archivalFileMovement, times(1)).getFilePattern("sourcePattern");
        verify(archivalFileMovement, times(1)).moveFile(mockedPath, "destinationPath");
    }
}