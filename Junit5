In order to cover all branches of the if statement mentioned in the `applyPostingRules` method of the `PostingRuleProcessingService` class without making the mentioned fields public, you can utilize Java Reflection APIs to access and set the values of those private fields. Here's a sample JUnit 5 test case code snippet that demonstrates how to achieve this:

```java
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class PostingRuleProcessingServiceTest {

    @Test
    void testApplyPostingRules() throws Exception {
        PostingRuleProcessingService service = new PostingRuleProcessingService();

        PostingRule postingRule1 = new PostingRule(1, "Rule1", 1, 1, "MatchingCriteria1");
        PostingRule postingRule2 = new PostingRule(2, "Rule2", 2, 1, "MatchingCriteria2");
        Field ruleMapField = RuleLoadingService.class.getDeclaredField("rulesMap");
        ruleMapField.setAccessible(true);
        
        RuleLoadingService ruleLoadingService = new RuleLoadingService();
        HashMap<Long, PostingRule> ruleMap = new HashMap<>();
        ruleMap.put(postingRule1.getRuleId(), postingRule1);
        ruleMap.put(postingRule2.getRuleId(), postingRule2);
        ruleMapField.set(ruleLoadingService, ruleMap);

        ReflectionUtils.setField(service, "ruleLoadingService", ruleLoadingService);
        
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("TestAlarm1");

        HashMap<String, Object> alarmMap = new HashMap<>();
        // Populate alarmMap with necessary data for matching the rules
        
        try (MockedStatic<RuleLoadingService> ruleLoadingServiceMock = Mockito.mockStatic(RuleLoadingService.class)) {
            ruleLoadingServiceMock.when(RuleLoadingService::getRuleMap).thenReturn(ruleMap);

            Alarm processedAlarm = service.applyPostingRules(alarm);

            // Assert the outcome of the processed alarm based on the rules

            verify(ruleLoadingServiceMock, times(1)).getRuleMap();
        }
    }
}
```

In the above code snippet, we are creating and setting up the necessary objects and data to test the `applyPostingRules` method. We are utilizing Mockito's MockedStatic to mock the behavior of `RuleLoadingService` and setting the private field values using ReflectionUtils from Spring. This approach allows us to cover all branches without making the private fields public. 

You can extend this test case by adding more scenarios and assertions based on the rules and expected outcomes.