Certainly! Below is a JUnit 5 test class for the `MessageReaderService`. It covers each and every branch of the `MessageReaderService` class except the `removeOrloadRule` method. For the private methods `retryReaderConnection` and `closeReader`, we will use reflection to invoke them.

```java
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(MockitoExtension.class)
public class MessageReaderServiceTest {

    @InjectMocks
    private MessageReaderService messageReaderService;

    @Mock
    private VMBParams params;

    @Mock
    private ApolloServiceHealth healthChecker;

    @Mock
    private RuleLoadingService rulesLoadingService;

    @Mock
    private Reader<byte[]> reader;

    @Mock
    private VMBConfig ruleUpdateNotifierVmbConfig;

    @Mock
    private Message<byte[]> message;

    private static final Logger logger = LogManager.getLogger(MessageReaderService.class);

    @BeforeEach
    public void setUp() {
        when(params.getReaderVMBConfig()).thenReturn(ruleUpdateNotifierVmbConfig);
        ReflectionTestUtils.setField(messageReaderService, "reader", reader);
        ReflectionTestUtils.setField(messageReaderService, "_run", true);
    }

    @Test
    public void testInitializeMessageReaderService() {
        when(VMBUtil.createReaderConnection(any(), any())).thenReturn(reader);
        messageReaderService.intialializeMessageReaderService();
        verify(logger).info("---Started initializing MessageReader---");
        verify(params).getReaderVMBConfig();
        verify(VMBUtil.class);
    }

    @Test
    public void testRun() {
        doNothing().when(messageReaderService).processMessageFromRuleNotifierVMB();
        new Thread(() -> {
            messageReaderService.run();
        }).start();
        verify(logger).info("Reader service started on topic: " + ruleUpdateNotifierVmbConfig.getTopic());
    }

    @Test
    public void testProcessMessageFromRuleNotifierVMB() throws Exception {
        when(reader.isConnected()).thenReturn(true);
        when(VMBUtil.readMessageThrows(any(), anyLong(), any(TimeUnit.class))).thenReturn(message);
        when(message.getData()).thenReturn("{\"RULETYPE\":\"POSTING\",\"RULEID\":123,\"OPERATION\":\"CREATE\"}".getBytes());

        messageReaderService.processMessageFromRuleNotifierVMB();

        verify(logger).log(Level.forName(CustomEndpointConstants.DATA, CustomEndpointConstants.DATA_VALUE),
                "Message recieved from ruleUpdateNotifier:" + new String(message.getData()) + ", MessageId:" + message.getMessageId());
    }

    @Test
    public void testProcessMessageFromRuleNotifierVMB_InvalidJson() throws Exception {
        when(reader.isConnected()).thenReturn(true);
        when(VMBUtil.readMessageThrows(any(), anyLong(), any(TimeUnit.class))).thenReturn(message);
        when(message.getData()).thenReturn("Invalid JSON".getBytes());

        messageReaderService.processMessageFromRuleNotifierVMB();

        verify(logger).warn("Message content from ruleUpdateNotifier VMB: NOT VALID" + new String(message.getData()));
    }

    @Test
    public void testRetryReaderConnection() throws Exception {
        ReflectionTestUtils.setField(messageReaderService, "failureRuleUpdateVMBConnectionCount", 5);
        when(params.getVMBConnectionFailureThresholdCount()).thenReturn(5);
        when(VMBUtil.createReaderConnection(any(), any())).thenReturn(reader);

        ReflectionTestUtils.invokeMethod(messageReaderService, "retryReaderConnection");

        verify(logger).fatal("VMB Connection failure threshold count reached in messageReader: "
                + 5 + " and Exiting the program..");
        verify(healthChecker).setHealthy(false, "VMB Connection failure threshold count reached in messageReader");
    }

    @Test
    public void testCloseReader() throws Exception {
        when(reader.isConnected()).thenReturn(true);
        ReflectionTestUtils.invokeMethod(messageReaderService, "closeReader");
        verify(VMBUtil.class);
        verify(logger).info("Closed reader connection successfully");
    }
}
```

### Explanation:

1. **Setup**: The `setUp()` method initializes the mocks and sets the necessary fields using reflection.

2. **Test Initialization**: `testInitializeMessageReaderService()` verifies that the service initializes correctly.

3. **Test Run Method**: `testRun()` verifies that the run method logs the start message correctly.

4. **Test Message Processing**: 
    - `testProcessMessageFromRuleNotifierVMB()` simulates processing valid messages.
    - `testProcessMessageFromRuleNotifierVMB_InvalidJson()` tests the handling of an invalid JSON message.

5. **Test Retry Reader Connection**: `testRetryReaderConnection()` verifies the retry logic and threshold handling using reflection.

6. **Test Close Reader**: `testCloseReader()` checks the closing of the reader connection using reflection.

Ensure you have the relevant imports and dependencies for Mockito and Spring in your project setup.