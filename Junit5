To format a string into a correct JSON format in Java, you can utilize the `ObjectMapper` class from the Jackson library. This class helps in parsing JSON strings and also formatting objects back to JSON strings. Here's a simple example to format a string into a JSON string:

```java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class JsonFormatter {
    public static void main(String[] args) {
        // Example JSON string
        String jsonString = "{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}";

        try {
            // Create an ObjectMapper instance
            ObjectMapper objectMapper = new ObjectMapper();

            // Parse the JSON string into a JsonNode
            JsonNode jsonNode = objectMapper.readTree(jsonString);

            // Pretty-print the JSON
            String formattedJson = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonNode);

            // Output the formatted JSON
            System.out.println(formattedJson);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
- **ObjectMapper**: This is the core class for JSON parsing and formatting in the Jackson library.
- **readTree**: This method is used to parse a JSON string into a `JsonNode` object.
- **writerWithDefaultPrettyPrinter**: This method enables pretty-printing, which means the JSON will be formatted with indentation and line breaks for better readability.
- **writeValueAsString**: This method converts the `JsonNode` back into a formatted JSON string.

### Steps to Run:
1. Ensure you have the Jackson library added to your project's dependencies. If you're using Maven, add the following to your `pom.xml`:

   ```xml
   <dependency>
       <groupId>com.fasterxml.jackson.core</groupId>
       <artifactId>jackson-databind</artifactId>
       <version>2.13.0</version> <!-- Make sure to use the latest version -->
   </dependency>
   ```

2. Compile and run the Java code in an environment that supports Java execution, such as an IDE or command-line interface with the Java Development Kit (JDK) installed. 

This example will take a JSON string and output it in a well-formatted JSON structure, making it easier to read and understand.