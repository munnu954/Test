Certainly! Let's create JUnit 5 test cases specifically designed to cover the two if statements you mentioned:

1. **`if(!ObjectUtils.isEmpty(insightsCaseEntities)){ }`**: This statement is checking if `insightsCaseEntities` is not empty.

2. **`if(aggregateInsightsEntity.getAggrValue().contains(appendOutage.toString())) { }`**: This statement checks if the `aggrValue` of `aggregateInsightsEntity` contains the expected outage ID string.

Here are the test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.util.ObjectUtils;

public class MtnInsightsManagerTest {

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testConvertToMtnInsights_withNonEmptyInsightsCaseEntities() {
        // Arrange
        MtnInsightsEntity entity1 = createEntity("mtnOutageCase", "VBGNxOutage", "456");
        List<MtnInsightsEntity> entities = Arrays.asList(entity1);

        MtnInsightsEntity insightsCaseEntity = createEntity("mtnOutageCase", "VBGNxOutage", "456");
        when(insightsRepository.findByPkEcpdIdAndPkMtnAndProdIdAndPkInsightCategoryInAndPkInsightNameIn(
                anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenReturn(insightsCaseEntity);

        // Act
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("VBGNxOutage", result.getCategoryInsights()[0].getCategory());
        assertTrue(result.getCategoryInsights()[0].getInsights().length > 0);
    }

    @Test
    public void testConvertToMtnInsights_withAggregateValueContainingOutageId() {
        // Arrange
        MtnInsightsEntity entity1 = createEntity("mtnoutage", "VBGNxOutage", "123");
        List<MtnInsightsEntity> entities = Arrays.asList(entity1);

        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue("\"outage_id\":\"123\",someValue");
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(anyString(), anyString()))
                .thenReturn(aggregateEntity);

        // Act
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("VBGNxOutage", result.getCategoryInsights()[0].getCategory());
        assertTrue(result.getCategoryInsights()[0].getInsights().length > 0);
    }

    private MtnInsightsEntity createEntity(String insightName, String category, String outageId) {
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setEcpdId("ecpdId");
        pk.setMtn("mtn");
        pk.setInsightCategory(category);
        pk.setInsightName(insightName);

        MtnInsightsEntity entity = new MtnInsightsEntity();
        entity.setPk(pk);
        entity.setProdId(outageId);
        entity.setInsightValues("someValue");

        return entity;
    }
}
```

### Explanation

1. **`testConvertToMtnInsights_withNonEmptyInsightsCaseEntities`**:
   - This test case is designed to trigger the `if(!ObjectUtils.isEmpty(insightsCaseEntities)){ }` condition.
   - It mocks the repository to return a non-empty `insightsCaseEntities` when queried, ensuring that the if condition is satisfied.

2. **`testConvertToMtnInsights_withAggregateValueContainingOutageId`**:
   - This test case is intended to trigger the `if(aggregateInsightsEntity.getAggrValue().contains(appendOutage.toString())) { }` condition.
   - It mocks the `AggregateInsightsRepository` to return an `AggregateInsightsEntity` whose `aggrValue` contains the expected outage ID string, ensuring the condition is met.

These test cases should adequately cover the specified if statements, ensuring they are executed and verified during testing.