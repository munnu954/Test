https://stackoverflow.com/questions/62989576/how-to-read-from-yaml-file-in-java


Here's the modified code without annotations:

public class Main {

    private static String filePath;
    private static String bootstrapServer;
    private static String topic;

    public static void main(String[] args) throws Exception {

        // Read properties from application.yml file
        Properties props = new Properties();
        try (InputStream input = new FileInputStream("src/main/resources/application.yml")) {
            props.load(input);
            filePath = props.getProperty("file.path");
            bootstrapServer = props.getProperty("spring.kafka.consumer.bootstrap-servers");
            topic = props.getProperty("spring.kafka.topic.name");
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        System.out.println("Hello world!");

        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        final FileSource<String> source = FileSource.forRecordStreamFormat(new TextLineInputFormat(), new Path(filePath)).build();

        final DataStream<String> stream = env.fromSource(source, WatermarkStrategy.noWatermarks(), "file-source");

        KafkaSink<String> sink = KafkaSink.<String>builder()
                .setBootstrapServers(bootstrapServer)
                .setRecordSerializer(KafkaRecordSerializationSchema.builder()
                        .setTopic(topic)
                        .setValueSerializationSchema(new SimpleStringSchema())
                        .build())
                .setDeliveryGuarantee(DeliveryGuarantee.AT_LEAST_ONCE)
                .build();

        stream.flatMap(new MyFlatMapFunction()).addSink(sink);

        env.execute();
    }
}


In this modified code, we read the properties from the application.yml file using a Properties object and the FileInputStream class. We then assign these properties to the corresponding variables. The rest of the code remains the same.