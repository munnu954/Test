Positive Test Case:

@Test
public void testSuccessfulJobSubmission() {
    // Create a mock RestTemplate
    RestTemplate restTemplate = Mockito.mock(RestTemplate.class);
    
    // Create a mock JsonNode for successful job submission response
    JsonNode successResponse = Mockito.mock(JsonNode.class);
    Mockito.when(successResponse.get("state").textValue()).thenReturn("FINISHED");
    
    // Mock the RestTemplate to return the successResponse when calling the GET method
    Mockito.when(restTemplate.getForObject(Mockito.eq(flinkApiUrl + "/jobs/" + jobID), Mockito.eq(JsonNode.class)))
            .thenReturn(successResponse);
    
    // Create a mock KafkaConsumer
    KafkaConsumer kafkaConsumer = Mockito.mock(KafkaConsumer.class);
    Mockito.when(kafkaConsumer.logauditData(Mockito.any(UnifiedAuditMessage.class), Mockito.anyString(), Mockito.any(Exception.class)))
            .thenReturn(new UnifiedAuditMessage());
    
    // Create a mock KafkaProducer
    KafkaProducer kafkaProducer = Mockito.mock(KafkaProducer.class);
    
    // Create an instance of the custom-data-transformation-client
    CustomDataTransformationClient client = new CustomDataTransformationClient(restTemplate, kafkaConsumer, kafkaProducer);
    
    // Create a UnifiedAuditMessage
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    auditMsg.setInputFilePath("/path/to/input/file");
    auditMsg.setUrl("http://example.com");
    auditMsg.setPort(8080);
    auditMsg.setOutputFilePath("/path/to/output/file");
    auditMsg.setDelimiters(",");
    auditMsg.setFileType("csv");
    auditMsg.setNo_of_records_in_the_file(100);
    auditMsg.setNo_of_records_processed(100);
    auditMsg.setNo_of_records_failed(0);
    auditMsg.setJob_id("job123");
    auditMsg.setJar_id("jar123");
    auditMsg.setCollector_id("col123");
    auditMsg.setExceptions("");
    
    // Call the method to be tested
    String result = client.submitJob(auditMsg);
    
    // Verify that the REST API was called to get the job status
    Mockito.verify(restTemplate, Mockito.times(2)).getForObject(Mockito.eq(flinkApiUrl + "/jobs/" + jobID), Mockito.eq(JsonNode.class));
    
    // Verify that the KafkaConsumer logauditData method was called
    Mockito.verify(kafkaConsumer, Mockito.never()).logauditData(Mockito.any(UnifiedAuditMessage.class), Mockito.anyString(), Mockito.any(Exception.class));
    
    // Verify that the KafkaProducer createMessageAndLog method was called
    Mockito.verify(kafkaProducer).createMessageAndLog(Mockito.eq(auditMsg.getInputFilePath()), Mockito.eq(auditMsg.getUrl()),
            Mockito.eq(auditMsg.getPort()), Mockito.eq(auditMsg.getOutputFilePath()), Mockito.eq(auditMsg.getDelimiters()),
            Mockito.eq(auditMsg.getFileType()), Mockito.anyString(), Mockito.eq(auditMsg.getNo_of_records_in_the_file()),
            Mockito.eq(auditMsg.getNo_of_records_processed()), Mockito.eq(auditMsg.getNo_of_records_failed()), 
            Mockito.eq(auditMsg.getJob_id()), Mockito.eq(auditMsg.getJar_id()), Mockito.eq(auditMsg.getCollector_id()), 
            Mockito.eq(auditMsg.getExceptions()));
    
    // Verify the result
    Assert.assertEquals("Job is not triggered", result);
    Assert.assertEquals(JobStatus.FLINK_JOB_SUBMITTED.toString(), auditMsg.getJobStatus());
}

Negative Test Case:

@Test
public void testFailedJobSubmission() {
    // Create a mock RestTemplate
    RestTemplate restTemplate = Mockito.mock(RestTemplate.class);
    
    // Create a mock JsonNode for failed job submission response
    JsonNode failedResponse = Mockito.mock(JsonNode.class);
    Mockito.when(failedResponse.get("state").textValue()).thenReturn("FAILED");
    
    // Mock the RestTemplate to return the failedResponse when calling the GET method
    Mockito.when(restTemplate.getForObject(Mockito.eq(flinkApiUrl + "/jobs/" + jobID), Mockito.eq(JsonNode.class)))
            .thenReturn(failedResponse);
    
    // Create a mock KafkaConsumer
    KafkaConsumer kafkaConsumer = Mockito.mock(KafkaConsumer.class);
    Mockito.when(kafkaConsumer.logauditData(Mockito.any(UnifiedAuditMessage.class), Mockito.anyString(), Mockito.any(Exception.class)))
            .thenReturn(new UnifiedAuditMessage());
    
    // Create a mock KafkaProducer
    KafkaProducer kafkaProducer = Mockito.mock(KafkaProducer.class);
    
    // Create an instance of the custom-data-transformation-client
    CustomDataTransformationClient client = new CustomDataTransformationClient(restTemplate, kafkaConsumer, kafkaProducer);
    
    // Create a UnifiedAuditMessage
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    auditMsg.setInputFilePath("/path/to/input/file");
    auditMsg.setUrl("http://example.com");
    auditMsg.setPort(8080);
    auditMsg.setOutputFilePath("/path/to/output/file");
    auditMsg.setDelimiters(",");
    auditMsg.setFileType("csv");
    auditMsg.setNo_of_records_in_the_file(100);
    auditMsg.setNo_of_records_processed(0);
    auditMsg.setNo_of_records_failed(100);
    auditMsg.setJob_id("job123");
    auditMsg.setJar_id("jar123");
    auditMsg.setCollector_id("col123");
    auditMsg.setExceptions("");
    
    // Call the method to be tested
    String result = client.submitJob(auditMsg);
    
    // Verify that the REST API was called to get the job status
    Mockito.verify(restTemplate, Mockito.times(2)).getForObject(Mockito.eq(flinkApiUrl + "/jobs/" + jobID), Mockito.eq(JsonNode.class));
    
    // Verify that the KafkaConsumer logauditData method was called
    Mockito.verify(kafkaConsumer).logauditData(Mockito.eq(auditMsg), Mockito.eq(auditMsg.getFileType()), Mockito.any(Exception.class));
    
    // Verify that the KafkaProducer createMessageAndLog method was called
    Mockito.verify(kafkaProducer).createMessageAndLog(Mockito.eq(auditMsg.getInputFilePath()), Mockito.eq(auditMsg.getUrl()),
            Mockito.eq(auditMsg.getPort()), Mockito.eq(auditMsg.getOutputFilePath()), Mockito.eq(auditMsg.getDelimiters()),
            Mockito.eq(auditMsg.getFileType()), Mockito.anyString(), Mockito.eq(auditMsg.getNo_of_records_in_the_file()),
            Mockito.eq(auditMsg.getNo_of_records_processed()), Mockito.eq(auditMsg.getNo_of_records_failed()), 
            Mockito.eq(auditMsg.getJob_id()), Mockito.eq(auditMsg.getJar_id()), Mockito.eq(auditMsg.getCollector_id()), 
            Mockito.eq(auditMsg.getExceptions()));
    
    // Verify the result
    Assert.assertEquals("Job is not triggered", result);
    Assert.assertEquals(JobStatus.FLINK_JOB_FAILED.toString(), auditMsg.getJobStatus());
}