import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.stubbing.OngoingStubbing;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class SSHServerSimulatorTest {

    @Mock
    private SshServer sshServerMock;

    @Mock
    private SimpleGeneratorHostKeyProvider keyPairProviderMock;

    @Mock
    private SftpSubsystemFactory sftpSubsystemFactoryMock;

    @Mock
    private Logger loggerMock;

    @InjectMocks
    private SSHServerSimulator sshServerSimulator;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        sshServerSimulator.setLogger(loggerMock);
    }

    @Test
    public void testStartServer_whenHostedPathIsSet_shouldSetFileSystemFactory() throws IOException {
        // Arrange
        String hostedPath = "/path/to/hosted";
        String sshHost = "localhost";
        int sshPort = 22;
        when(sshServerMock.setPort(sshPort)).thenReturn(sshServerMock);
        when(sshServerMock.setHost(sshHost)).thenReturn(sshServerMock);
        when(sshServerMock.setKeyPairProvider(any(KeyPairProvider.class))).thenReturn(sshServerMock);
        when(sshServerMock.setSubsystemFactories(any(Collection.class))).thenReturn(sshServerMock);
        when(sshServerMock.setPasswordAuthenticator(any(AuthenticationProvider.class))).thenReturn(sshServerMock);

        Path hostedPathObj = Paths.get(hostedPath);
        when(sshServerSimulator.createVirtualFileSystemFactory(hostedPathObj)).thenReturn(mock(FileSystemFactory.class));

        // Act
        sshServerSimulator.startServer(hostedPath, sshHost, sshPort);

        // Assert
        OngoingStubbing<FileSystemFactory> fileSystemFactoryStub = when(sshServerMock.setFileSystemFactory(any(FileSystemFactory.class)));
        fileSystemFactoryStub.then(invocation -> {
            FileSystemFactory fileSystemFactory = invocation.getArgument(0);
            assert fileSystemFactory instanceof VirtualFileSystemFactory;
            VirtualFileSystemFactory vfsFactory = (VirtualFileSystemFactory) fileSystemFactory;
            assertEquals(hostedPathObj, vfsFactory.getRootDir());
            return sshServerMock;
        });

        // Verify
        sshServerSimulator.startServer(hostedPath, sshHost, sshPort);
    }

    @Test
    public void testStartServer_whenHostedPathIsNotSet_shouldNotSetFileSystemFactory() throws IOException {
        // Arrange
        String hostedPath = "";
        String sshHost = "localhost";
        int sshPort = 22;
        when(sshServerMock.setPort(sshPort)).thenReturn(sshServerMock);
        when(sshServerMock.setHost(sshHost)).thenReturn(sshServerMock);
        when(sshServerMock.setKeyPairProvider(any(KeyPairProvider.class))).thenReturn(sshServerMock);
        when(sshServerMock.setSubsystemFactories(any(Collection.class))).thenReturn(sshServerMock);
        when(sshServerMock.setPasswordAuthenticator(any(AuthenticationProvider.class))).thenReturn(sshServerMock);

        // Act
        sshServerSimulator.start