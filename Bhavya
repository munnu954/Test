Here's the modified ConsumerServiceTest class to fix the NullPointerException issue:

```java
@ExtendWith(SpringExtension.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ConsumerServiceTest {
    
    private SshExceptionHandler sshExceptionHandler = new SshExceptionHandler();
    
    private static final String TOPIC = "test-topic";
    
    @Autowired
    private EmbeddedKafkaBroker embeddedKafkaBroker;
    
    @Autowired
    private KafkaProducerService kafkaProducerService;
    
    @Autowired
    private CollectorUtil collectorUtil;
    
    private SpaceCollector spaceCollector;
    
    BlockingQueue<ConsumerRecord<String, String>> records;
    KafkaMessageListenerContainer<String, String> container;
    
    @InjectMocks
    private ConsumerService consumerService;
    
    @Mock
    private SSHService sshService;
    
    @BeforeAll
    void setup() {
        Map<String, Object> configs = new HashMap<>(KafkaTestUtils.consumerProps("consumer", "false", embeddedKafkaBroker));
        
        DefaultKafkaConsumerFactory<String, String> consumerFactory = new DefaultKafkaConsumerFactory<>(configs, new StringDeserializer(),
                new StringDeserializer());
        
        ContainerProperties containerProperties = new ContainerProperties(TOPIC);
        
        container = new KafkaMessageListenerContainer<>(consumerFactory, containerProperties);
        
        records = new LinkedBlockingQueue<>();
        
        container.setupMessageListener((MessageListener<String, String>) records::add);
        
        container.start();
        ContainerTestUtils.waitForAssignment(container, 1);
    }
    
    @AfterAll
    void tearDown() {
        container.stop();
    }

    @Test
    void givenOutputFilePathNotAccessible() throws Exception {
        Mockito.when(collectorUtil.getDateAsString(Mockito.any(Date.class))).thenReturn("2021-07-20T12:00:00");

        spaceCollector = new SpaceCollector();
        spaceCollector.setUrl("192.168.1.243");
        spaceCollector.setPort(8080);
        spaceCollector.setUserName("custom");
        spaceCollector.setPassword("sshcollector");
        spaceCollector.setInputFilePath("C:/Temp/sampleMeasInfoData.xml");
        spaceCollector.setOutputFilePath("");

        JsonNode auditQueueJSON = collectorUtil.buildAuditQueueJSON(spaceCollector,
                collectorUtil.getDateAsString(new Date()), collectorUtil.getDateAsString(new Date()), "", JobStatus.COLLECTION_FAILED);
        
        Mockito.when(sshService.retrieveData(Mockito.any(SpaceCollector.class))).thenThrow(new IOException());
        
        boolean result = consumerService.consume(spaceCollector);

        // Assert that the result is true
        assertTrue(result);

        String expectedJson = auditQueueJSON.toString();
        verify(kafkaProducerService).writeMessage(expectedJson, "", "3459-DEV-COLLECTION-AUDIT-QUEUE");
    }
}
```

In this modified class, I have made the following changes:
1. Added the `@Mock` annotation for the `SSHService` dependency.
2. Initialized the `spaceCollector` variable using `new SpaceCollector()`.
3. Configured the `SSHService` mock to throw an `IOException` when `retrieveData` is called.
4. Captured the `expectedJson` value based on `auditQueueJSON.toString()` before verifying the `writeMessage` method.

Note: Make sure you have the necessary imports for the classes used in the modified code.