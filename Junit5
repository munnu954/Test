```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.quality.Strictness;
import org.springframework.test.util.ReflectionTestUtils;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryTest {
    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl; 
    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNullAndStateCleared() throws Exception {
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();

        stateMap.put("cleared", 1);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String msg = "{ \"State\":\"cleared\",\"sequenceID\":\"23423\"}";
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmptyAndStateCleared() throws Exception {
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();

        stateMap.put("cleared", 1);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String msg = "{ \"perceivedSeverity\":\"\", \"State\":\"cleared\",\"sequenceID\":\"23423\"}";
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotNullAndStateNotCleared() throws Exception {
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();

        percMap.put("Indeterminate", 1);
        stateMap.put("active", 2);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);

        String msg = "{ \"perceivedSeverity\":\"Indeterminate\", \"State\":\"active\",\"sequenceID\":\"23423\"}";
        Alarm alarm = alarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity());
    }
}
```

In this code, we have created three test cases:

1. **testCreateAlarm_PerceivedSeverityNullAndStateCleared**: This test validates the scenario where the perceived severity is null, and the state is cleared.
2. **testCreateAlarm_PerceivedSeverityEmptyAndStateCleared**: This test validates the scenario where the perceived severity is empty, and the state is cleared.
3. **testCreateAlarm_PerceivedSeverityNotNullAndStateNotCleared**: This test validates the scenario where the perceived severity is not null, and the state is not cleared.

These tests ensure that the block `else if((perceivedSeverity==null || (perceivedSeverity!= null && perceivedSeverity.toString().isEmpty()))&&(stateValue==postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared()))) alarm.setPerceivedSeverity(-1);` is covered for 100% code coverage.