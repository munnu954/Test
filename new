The issue with the provided JUnit5 test case code is that the `assertThrows` method is being used incorrectly. The `assertThrows` method expects a method reference or lambda expression that will execute the code which is expected to throw the specified exception. In this case, the `getId` method does not actually throw an exception and therefore is the incorrect code to be used within the `assertThrows` method.

Here is the correct JUnit5 test case code:

```java
@Test
@DisplayName("Test for invalid id in SpaceCollector")
void testInvalidId() {
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("");
    spaceCollector.setUrl("https://example.com");
    spaceCollector.setPort(8080);
    spaceCollector.setUsername("admin");
    spaceCollector.setPassword("password");
    spaceCollector.setSshPublicKey("publicKey");
    spaceCollector.setSshPrivateKey("privateKey");
    spaceCollector.setConnectionType("SSH");
    spaceCollector.setEnabled(true);
    spaceCollector.setInputFilePath("/input/file/path");
    spaceCollector.setOutputFilePath("/output/file/path");
    spaceCollector.setPollingDuration(60);

    IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> spaceCollector.getId());

    assertEquals("Invalid id", exception.getMessage());
}
```
In this corrected version, we are now asserting that when `spaceCollector.getId()` is called, an `IllegalArgumentException` is thrown. Additionally, we are also checking that the exception message is as expected. This will make the test run as expected.

Note: As per the actual `getId` method of `SpaceCollector` class, you should replace `"Invalid id"` with the actual exception message that is thrown.