Here's an example of JUnit 5 test cases for 100% code coverage of the `DataSourceConfig` class:

```
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringJUnitConfig
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class DataSourceConfigTest {

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @Mock
    private DataSourceModal dataSourceModal;

    @Mock
    private EntityManagerFactoryBuilder builder;

    @Test
    void testFalloutDataSource() {
        // Given
        when(dataSourceModal.getUrl()).thenReturn("test-url");
        when(dataSourceModal.getPassword()).thenReturn("test-password");
        when(dataSourceModal.getUsername()).thenReturn("test-username");
        when(dataSourceModal.getDriver()).thenReturn("test-driver");

        // When
        DataSource dataSource = dataSourceConfig.falloutDataSource();

        // Then
        assertNotNull(dataSource);
        verify(dataSourceModal, times(1)).getUrl();
        verify(dataSourceModal, times(1)).getPassword();
        verify(dataSourceModal, times(1)).getUsername();
        verify(dataSourceModal, times(1)).getDriver();
    }

    @Test
    void testEntityManagerFactoryBean() {
        // Given
        DataSource dataSource = mock(DataSource.class);
        when(builder.dataSource(dataSource)).thenReturn(builder);
        when(builder.packages(any())).thenReturn(builder);
        when(builder.persistenceUnit(any())).thenReturn(builder);
        when(builder.build()).thenReturn(mock(EntityManagerFactory.class));

        // When
        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = dataSourceConfig.entityManagerFactoryBean(builder, dataSource);

        // Then
        assertNotNull(entityManagerFactoryBean);
        verify(builder, times(1)).dataSource(dataSource);
        verify(builder, times(1)).packages(any());
        verify(builder, times(1)).persistenceUnit(any());
        verify(builder, times(1)).build();
    }

    @Test
    void testFalloutTransactionManager() {
        // Given
        EntityManagerFactory entityManagerFactory = mock(EntityManagerFactory.class);

        // When
        PlatformTransactionManager transactionManager = dataSourceConfig.falloutTransactionManager(entityManagerFactory);

        // Then
        assertNotNull(transactionManager);
    }
}
```

To achieve 100% code coverage, you may need to add additional tests for:

1. `@Configuration` and `@EnableJpaRepositories` annotations.
2. `@EnableTransactionManagement` annotation.
3. Error scenarios (e.g., `DataSourceModal` properties are null).

Note: This example uses Mockito for mocking and JUnit 5 for testing. Make sure to include the necessary dependencies in your `pom.xml` file (if using Maven) or `build.gradle` file (if using Gradle).