@Test
void testProcessWithValidPrevComponent() {
    // Arrange
    ClrComponent prevClrComponent = new ClrComponent();
    prevClrComponent.setType(CommonWrapperConstants.PORT);
    EquipmentComp equipmentComp = new EquipmentComp();
    PortRef portRef = new PortRef();
    portRef.setShelfID("test-shelf-id");
    portRef.setPortID("test-port-id");
    equipmentComp.setPortRef(List.of(portRef));
    prevClrComponent.setEquipmentComp(List.of(equipmentComp));
    clrComponentList.add(prevClrComponent);

    TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
    CktLst cktLst = new CktLst();
    CircuitInfo circuitInfo = new CircuitInfo();
    circuitInfo.setCircuitName("test-circuit");
    circuitInfo.setType("test-type");
    circuitInfo.setServiceType("test-service-type");
    circuitInfo.setBw("test-bandwidth");
    circuitInfo.setStatus("test-status");
    cktLst.setCircuitInfo(List.of(circuitInfo));
    trunkGroupComp.setCktLst(List.of(cktLst));
    clrComponent.setTrunkGroupComp(List.of(trunkGroupComp));

    // Create a mock AbstractClrComponentProcessor class
    AbstractClrComponentProcessor mockProcessor = Mockito.spy(trunkProcessor);
    Mockito.doReturn("test-port-id").when(mockProcessor).getPortId(Mockito.any());

    // Act
    mockProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

    // Assert
    Assertions.assertFalse(links.isEmpty());
    Link circuit = links.get(0);
    Assertions.assertEquals(CommonWrapperConstants.CIRCUIT, circuit.getLinkType());
    Assertions.assertEquals("test-port-id", circuit.getSource());
}