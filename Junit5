import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.RowMapperResultSetExtractor;
import org.springframework.jdbc.support.RowMapperResultSetExtractor.RowMapper;
import org.springframework.jdbc.support.rowset.SqlRowSet;

import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.Set;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @Mock
    private PostingRuleProcessingService postingRuleProcessingService;

    private Alarm alarm;

    @BeforeEach
    void setup() {
        alarm = new Alarm();
        alarm.setAlarmIdentity("123");
        alarm.setAlarmUpdatedTime("2023-04-21T10:00:00Z");
        alarm.setSequenceID(1);
    }

    @Test
    void testMergeArrayMethod() throws Exception {
        Object tagFromDb = new String[] {"tag1", "tag2"};
        Method mergeArrayMethod = AlarmRepositoryImpl.class.getDeclaredMethod("mergeArrayMethod", Object.class, Alarm.class);
        mergeArrayMethod.setAccessible(true);
        Set<String> joinedTagSet = (Set<String>) mergeArrayMethod.invoke(alarmRepositoryImpl, tagFromDb, alarm);
        Assertions.assertEquals(2, joinedTagSet.size());
        Assertions.assertTrue(joinedTagSet.contains("tag1"));
        Assertions.assertTrue(joinedTagSet.contains("tag2"));
    }

    @Test
    void testAddTagsToSet() throws Exception {
        String[] tagArray = new String[] {"tag1", "tag2"};
        Method addTagsToSet = AlarmRepositoryImpl.class.getDeclaredMethod("addTagsToSet", String[].class);
        addTagsToSet.setAccessible(true);
        Set<String> joinedSet = (Set<String>) addTagsToSet.invoke(alarmRepositoryImpl, (Object) tagArray);
        Assertions.assertEquals(2, joinedSet.size());
        Assertions.assertTrue(joinedSet.contains("tag1"));
        Assertions.assertTrue(joinedSet.contains("tag2"));
    }

    @Test
    void testPostAlarmForEachIteration_LatestAlarmScenario() {
        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(rs.next()).thenReturn(true);
        Mockito.when(rs.getTimestamp("alarmupdatedtime")).thenReturn(java.sql.Timestamp.valueOf("2023-04-21 10:00:00"));
        Mockito.when(rs.getLong("sequenceid")).thenReturn(2L);
        Mockito.when(rs.getInt("state")).thenReturn(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared()));
        Mockito.when(rs.getInt("perceivedseverity")).thenReturn(3);
        Mockito.when(rs.getString("alarmdetails")).thenReturn("{\"key\":\"value\"}");
        Mockito.when(jdbcTemplate.queryForRowSet(Mockito.anyString(), Mockito.any())).thenReturn(rs);
        Mockito.when(postingRuleProcessingService.isLateAlarmEligibleForRuleProcessing(Mockito.any(), Mockito.any())).thenReturn(true);

        int rowsAffected = alarmRepositoryImpl.postAlarmForEachIteration(alarm, "compId");
        Assertions.assertEquals(0, rowsAffected);
        Assertions.assertEquals(3, alarm.getPerceivedSeverity());
        Assertions.assertEquals(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateNew()), alarm.getState());
        Assertions.assertNotNull(alarm.getAlarmDetails());
    }

    @Test
    void testPostAlarmForEachIteration_NewAlarmScenario() {
        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(rs.next()).thenReturn(false);
        Mockito.when(jdbcTemplate.queryForRowSet(Mockito.anyString(), Mockito.any())).thenReturn(rs);
        Mockito.when(postingRuleProcessingService.isLateAlarmEligibleForRuleProcessing(Mockito.any(), Mockito.any())).thenReturn(true);

        int rowsAffected = alarmRepositoryImpl.postAlarmForEachIteration(alarm, "compId");
        Assertions.assertEquals(0, rowsAffected);
        Assertions.assertNull(alarm.getClearTime());
        Assertions.assertEquals(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateNew()), alarm.getState());
        Assertions.assertEquals(1, alarm.getCount());
        Assertions.assertEquals(1, alarm.getCountResetFlag());
    }
}