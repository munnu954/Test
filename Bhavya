Feature: Polling Service
  Scenario: One thread created for one space collector record present in repo
    Given One record in space collector repository
    When the scheduler runs
    Then verify the thread is running

  Scenario: Two threads created for two space collector record present in repo
    Given Two records in space collector repository
    When the scheduler runs
    Then verify the thread is running

Step Definitions:
```java
public class PollingTestSteps {
    private PollingServiceImpl pollingService;
    private LuceneSpaceCollectorRepository luceneSpaceCollectorRepository;
    private int initialThreadCount;
    private int finalThreadCount;
    private List<SpaceCollector> spaceCollectors;
    private List<Thread> threads;

    @Given("One record in space collector repository")
    public void thereIsOneRecordInTheSpaceCollectorRepository() {
        spaceCollectors = new ArrayList<>();
        String id = UUID.randomUUID().toString();
        SpaceCollector spaceCollector = SpaceCollector.builder()
                .id(id)
                .port(9090)
                .username("admin")
                .password("secret")
                .sshPrivateKey("pk")
                .sshPublicKey("ppk")
                .connectionType("ssh")
                .enabled(true)
                .inputFilePath("C:/Temp")
                .outputFilePath("D:/Temp")
                .build();
        spaceCollectors.add(spaceCollector);
        luceneSpaceCollectorRepository.save(spaceCollector);
    }

    @When("the scheduler runs")
    public void theSchedulerRuns() {
        PollingServiceImpl pollingService = new PollingServiceImpl();
        threads = new ArrayList<>();
        spaceCollectors.forEach(spaceCollector -> {
            Thread thread = new Thread(() -> pollingService.pollDeviceDB());
            threads.add(thread);
            thread.start();
        });
    }

    @Then("verify the thread is running")
    public void thePollerShouldCreateThread() {
        for (Thread thread : threads) {
            assertTrue(thread.isAlive());
        }
    }
}
```

Note: The actual implementation may vary based on the framework used for the testing environment. This is a general example of how the feature file and step definitions would look.