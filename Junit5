ChatbotAI here. I was created by NewWayLabs. I'll do my best to help you with the JUnit 5 test cases for the `EventsMessageListener` class.

Here's the code for the test cases:

```java
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.ReflectionUtils;

import com.example.EventsMessageListener;
import com.example.KafkaFalloutService;
import com.example.RequestJSONString;
import com.example.ServiceMessage;
import com.example.utils.BatchLoaderUtils;
import com.example.utils.TYSConstants;

@ExtendWith(MockitoExtension.class)
class EventsMessageListenerTest {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @Mock
    private AccountEcpdService accountService;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @Spy
    private BatchLoaderUtils utils;

    @BeforeEach
    void setUp() {
        // Set the protected fields using reflection
        setProtectedField("producerTopic", "test-topic");
    }

    @Test
    void testOnMessageWithEmptyPayload() {
        ConsumerRecord<String, String> record = new ConsumerRecord<>("test-topic", 0, 0L, "key", "");
        eventsMessageListener.onMessage(record, "");
    }

    @Test
    void testOnMessageWithInvalidData() {
        ConsumerRecord<String, String> record = new ConsumerRecord<>("test-topic", 0, 0L, "key", "{\"Service\":{\"ServiceBody\":{\"CallRequest\":{\"Body\":{\"RelinquishingCustomerDetails\":{\"AccountNumber\":null}}}}}");
        eventsMessageListener.onMessage(record, "{\"Service\":{\"ServiceBody\":{\"CallRequest\":{\"Body\":{\"RelinquishingCustomerDetails\":{\"AccountNumber\":null}}}}}");
    }

    @Test
    void testOnMessageSuccess() {
        String payload = "{\"Service\":{\"ServiceBody\":{\"CallRequest\":{\"Body\":{\"RelinquishingCustomerDetails\":{\"AccountNumber\":\"12345-67\"}}}}}}";
        ConsumerRecord<String, String> record = new ConsumerRecord<>("test-topic", 0, 0L, "key", payload);
        when(utils.convert(any(String.class), any(Class.class))).thenReturn(new ServiceMessage());
        when(utils.convert(any(String.class), any(Class.class))).thenReturn(new RequestJSONString());
        when(accountService.getEcpdByAcctId(any(String.class))).thenReturn(CompletableFuture.completedFuture("ecpd-123"));
        when(utils.convert(any(String.class), any(Class.class))).thenReturn(new CustomerEcpdModel());
        doNothing().when(failedMessageService).saveFailedRecords(any(String.class), any(String.class), any(String.class), any(String.class), any(Character.class));

        assertDoesNotThrow(() -> eventsMessageListener.onMessage(record, payload));
    }

    @Test
    void testOnMessageWithException() {
        String payload = "{\"Service\":{\"ServiceBody\":{\"CallRequest\":{\"Body\":{\"RelinquishingCustomerDetails\":{\"AccountNumber\":\"12345-67\"}}}}}}";
        ConsumerRecord<String, String> record = new ConsumerRecord<>("test-topic", 0, 0L, "key", payload);
        when(utils.convert(any(String.class), any(Class.class))).thenThrow(new RuntimeException("Test exception"));

        assertDoesNotThrow(() -> eventsMessageListener.onMessage(record, payload));
    }

    @Test
    void testSendMessageAsync() {
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("test-topic", null, "transaction-id", "payload", new ArrayList<>());
        RequestJSONString requestJSONString = new RequestJSONString();
        requestJSONString.getService().getServiceBody().getCallRequest().getBody().getRelinquishingCustomerDetails().setAccountNumber("12345-67");

        assertDoesNotThrow(() -> eventsMessageListener.sendMessageAsync(producerRecord, "transaction-id", "payload", "test-topic", TYSConstants.TYS_AUDIT_EVENT.getValue(), 'Y', requestJSONString));
    }

    @Test
    void testSendMessageAsyncWithException() {
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>("test-topic", null, "transaction-id", "payload", new ArrayList<>());
        RequestJSONString requestJSONString = new RequestJSONString();
        requestJSONString.getService().getServiceBody().getCallRequest().getBody().getRelinquishingCustomerDetails().setAccountNumber("12345-67");
        doThrow(new RuntimeException("Test exception")).when(failedMessageService).saveFailedRecords(any(String.class), any(String.class), any(String.class), any(String.class), any(Character.class));

        assertDoesNotThrow(() -> eventsMessageListener.sendMessageAsync(producerRecord, "transaction-id", "payload", "test-topic", TYSConstants.TYS_AUDIT_EVENT.getValue(), 'Y', requestJSONString));
    }

    @Test
    void testFilterAccountNum() {
        assertEquals("12345", eventsMessageListener.filterAccountNum("12345-67"));
        assertEquals("12345", eventsMessageListener.filterAccountNum("00012345"));
    }

    private void setProtectedField(String fieldName, Object value) {
        Field field = ReflectionUtils.findField(EventsMessageListener.class, fieldName);
        ReflectionUtils.makeAccessible(field);
        ReflectionUtils.setField(field, eventsMessageListener, value);
    }
}
```

Here's a brief explanation of the test cases:

1. `testOnMessageWithEmptyPayload()`: Tests the behavior when the payload is empty.
2. `testOnMessageWithInvalidData()`: Tests the behavior when the data in the payload is invalid.
3. `testOnMessageSuccess()`: Tests the successful execution of the `onMessage()` method.
4. `testOnMessageWithException()`: Tests the behavior when an exception is thrown during the execution of the `onMessage()` method.
5. `testSendMessageAsync()`: Tests the successful execution of the `sendMessageAsync()` method.
6. `testSendMessageAsyncWithException()`: Tests the behavior when an exception is thrown during the execution of the `sendMessageAsync()` method.
7. `testFilterAccountNum()`: Tests the `filterAccountNum()` method.

The test cases use Mockito to mock the dependencies of the `EventsMessageListener` class, and the `BatchLoaderUtils` class is partially mocked using `@Spy` annotation. The `setProtectedField()` method is used to set the protected fields of the `EventsMessageListener` class using reflection.

Please note that the test cases cover the core functionality of the `EventsMessageListener` class, but you may need to add more test cases to achieve 100% code coverage, depending on the specific requirements of your application.