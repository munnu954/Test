import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.client.RestTemplate;

import java.util.*;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class InmsProcessorServiceTest {

    @Mock
    private CircuitStitchService circuitStitchService;

    @Mock
    private RestTemplate template;

    @InjectMocks
    private InmsProcessorService inmsProcessorService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetTrailNamesFromTrailIds_successfulResponse() {
        Set<String> trailIdList = new HashSet<>(Arrays.asList("T1", "T2"));

        String dbServiceUrl = "http://test-url";
        DBServiceRequest mockedRequest = new DBServiceRequest();
        mockedRequest.setRequestQuery(SQLConstants.getTrailNameFromTrailId);

        // Mocking the service URL and response
        when(circuitStitchService.getServiceUrl(anyString())).thenReturn("http://test-url/");
        when(template.postForObject(anyString(), any(), eq(DBServiceResponse.class)))
                .thenReturn(mockDbServiceResponse());

        Map<String, String> result = inmsProcessorService.getTrailNamesFromTrailIds(trailIdList);

        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("TrailName1", result.get("T1"));
        assertEquals("TrailName2", result.get("T2"));

        verify(circuitStitchService, times(1)).getServiceUrl(anyString());
        verify(template, times(1)).postForObject(anyString(), any(), eq(DBServiceResponse.class));
    }

    @Test
    void testGetTrailNamesFromTrailIds_emptyResponse() {
        Set<String> trailIdList = new HashSet<>(Arrays.asList("T1", "T2"));

        when(circuitStitchService.getServiceUrl(anyString())).thenReturn("http://test-url/");
        when(template.postForObject(anyString(), any(), eq(DBServiceResponse.class))).thenReturn(null);

        Map<String, String> result = inmsProcessorService.getTrailNamesFromTrailIds(trailIdList);

        assertTrue(result.isEmpty());
    }

    private DBServiceResponse mockDbServiceResponse() {
        DBServiceResponse response = new DBServiceResponse();
        response.setStatus("SUCCESS");
        List<Map<String, Object>> queryResults = new ArrayList<>();
        Map<String, Object> result1 = new HashMap<>();
        result1.put("TRAIL_ID", "T1");
        result1.put("TRAIL_NAME", "TrailName1");
        Map<String, Object> result2 = new HashMap<>();
        result2.put("TRAIL_ID", "T2");
        result2.put("TRAIL_NAME", "TrailName2");
        queryResults.add(result1);
        queryResults.add(result2);
        response.setQueryResults(queryResults);
        return response;
    }
}