To achieve 100% code coverage for the `else if` block, we need to ensure that all logical branches within the condition are tested. The condition appears to have the following branches:

1. `perceivedSeverity == null`
2. `perceivedSeverity != null && perceivedSeverity.toString().isEmpty()`
3. `perceivedSeverity != null && !perceivedSeverity.toString().isEmpty()`

These branches encompass all logical conditions for `perceivedSeverity`. However, the `else if` condition also includes another part after `&&`. Assuming this part involves some other conditions, we'll write test cases to ensure each combination of conditions is covered.

Let's refactor and add test cases to cover all branches:

### Test Case: `perceivedSeverity` is `null` and the subsequent condition is true
```java
@Test
void testCreateAlarm_withNullPerceivedSeverity_subsequentConditionTrue() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    String nullPerceivedSeverityJson = "{ \"externalAlarmId\":\"abcd\", \"State\":\"someState\", \"sequenceId\":\"12345\"}";
    JsonNode json = obj.readTree(nullPerceivedSeverityJson);

    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    percMap.put("Indeterminate", 1);
    stateMap.put("someState", 1);
    typeMap.put("Other", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("new");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    alarmRepositoryImpl.createAlarm(nullPerceivedSeverityJson);
}
```

### Test Case: `perceivedSeverity` is an empty string and the subsequent condition is true
```java
@Test
void testCreateAlarm_withEmptyPerceivedSeverity_subsequentConditionTrue() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    String emptyPerceivedSeverityJson = "{ \"externalAlarmId\":\"abcd\", \"State\":\"someState\", \"sequenceId\":\"12345\", \"perceivedSeverity\":\"\"}";
    JsonNode json = obj.readTree(emptyPerceivedSeverityJson);

    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    percMap.put("Indeterminate", 1);
    percMap.put("", 1);
    stateMap.put("someState", 1);
    typeMap.put("Other", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("new");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    alarmRepositoryImpl.createAlarm(emptyPerceivedSeverityJson);
}
```

### Test Case: `perceivedSeverity` is `null` and the subsequent condition is false
```java
@Test
void testCreateAlarm_withNullPerceivedSeverity_subsequentConditionFalse() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    String nullPerceivedSeverityJson = "{ \"externalAlarmId\":\"abcd\", \"State\":\"someOtherState\", \"sequenceId\":\"12345\"}";
    JsonNode json = obj.readTree(nullPerceivedSeverityJson);

    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    percMap.put("Indeterminate", 1);
    stateMap.put("someState", 1);
    typeMap.put("Other", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("new");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    alarmRepositoryImpl.createAlarm(nullPerceivedSeverityJson);
}
```

### Test Case: `perceivedSeverity` is an empty string and the subsequent condition is false
```java
@Test
void testCreateAlarm_withEmptyPerceivedSeverity_subsequentConditionFalse() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    String emptyPerceivedSeverityJson = "{ \"externalAlarmId\":\"abcd\", \"State\":\"someOtherState\", \"sequenceId\":\"12345\", \"perceivedSeverity\":\"\"}";
    JsonNode json = obj.readTree(emptyPerceivedSeverityJson);

    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    percMap.put("Indeterminate", 1);
    percMap.put("", 1);
    stateMap.put("someState", 1);
    typeMap.put("Other", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("new");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    alarmRepositoryImpl.createAlarm(emptyPerceivedSeverityJson);
}
```

### Summary of Test Cases
- **testCreateAlarm_withNullPerceivedSeverity_subsequentConditionTrue**: Covers the branch where `perceivedSeverity` is `null` and the subsequent condition is true.
- **testCreateAlarm_withEmptyPerceivedSeverity_subsequentConditionTrue**: Covers the branch where `perceivedSeverity` is an empty string and the subsequent condition is true.
- **testCreateAlarm_withNullPerceivedSeverity_subsequentConditionFalse**: Covers the branch where `perceivedSeverity` is `null` and the subsequent condition is false.
- **testCreateAlarm_withEmptyPerceivedSeverity_subsequentConditionFalse**: Covers the branch where `perceivedSeverity` is an empty string and the subsequent condition is false.

By adding these test cases, you should be able to cover all branches of the `else if((perceivedSeverity==null || (perceivedSeverity!= null && perceivedSeverity.toString().isEmpty()))&&` condition for 100% code coverage.