To write JUnit 5 test cases that specifically target the `else` block in the `parse` method and achieve 100% code coverage, you can focus on providing input that causes the `else` block to be executed. Here's an example of how you can write a test case specifically for the `else` block:

```java
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class YourTestClass {
    
    @Test
    void testElseBlockCoverage() {
        // Mock necessary objects and setup
        srcMap.put("attribute1", List.of("value1", "value2"));

        String expression = "%attribute2%";
        int startIndex = expression.indexOf("%");
        int endIndex = expression.indexOf("%", startIndex+1) + 1; // find the closing %

        // Call the parse method
        String result = yourObject.parse(expression, srcMap, "");
        
        // Check the result after the else block
        assertEquals(RulesConstants.EMPTYSTRING, result);
    }
}
```

In this test case, we create an input expression that does not match any keys in the `srcMap`. This mismatch causes the `else` block to be executed, replacing a specific range in the `parsedValue` with an empty string. By providing such input and verifying the expected behavior in the test case, you can ensure that the `else` block is covered for 100% code coverage.