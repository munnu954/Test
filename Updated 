<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-test</artifactId>
    <version>5.3.9</version> <!-- Replace with your Spring version -->
    <scope>test</scope>
</dependency>




import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Service;
import org.springframework.util.concurrent.ListenableFuture;

import java.util.concurrent.ExecutionException;

@Service
public class KafkaProducer {

    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaProducer.class);

    @Value("${spring.kafka.producer.topic-name}")
    private String topicName;

    private final KafkaTemplate<String, SpaceCollector> kafkaTemplate;

    @Autowired
    public KafkaProducer(KafkaTemplate<String, SpaceCollector> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public void sendMessage(SpaceCollector message) throws ExecutionException, InterruptedException {
        ListenableFuture<SendResult<String, SpaceCollector>> listenableFuture = kafkaTemplate.send(topicName, message);

        try {
            SendResult<String, SpaceCollector> sendResult = listenableFuture.get();
            RecordMetadata recordMetadata = sendResult.getRecordMetadata();
            LOGGER.info("Message sent successfully to Kafka topic: {}", recordMetadata.topic());
        } catch (Exception ex) {
            LOGGER.error("Failed to send message to Kafka topic: {}", ex.getMessage());
            throw ex;
        }
    }
}





----_________________________----_-----------

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import java.util.concurrent.ExecutionException;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.common.serialization.StringSerializer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.ListenableFuture;

import org.springframework.kafka.support.MockListenableFuture;

@ExtendWith(MockitoExtension.class)
public class KafkaProducerTest 

private static final Logger LOGGER = LoggerFactory.getLogger(KafkaProducerTest.class);

@Mock
private KafkaTemplate<String, String> kafkaTemplate;

private KafkaProducer kafkaProducer;

@BeforeEach
public void setUp() 
kafkaProducer = new KafkaProducer(kafkaTemplate);


@Test
public void testSendMessage() throws ExecutionException, InterruptedException 
String topic = "test-topic";
String message = "ïd:‌1,n‌ame:‌J‌ohn Doe";

ListenableFuture<SendResult<String, String>> listenableFuture = new MockListenableFuture<>();

RecordMetadata recordMetadata = new RecordMetadata(null, 0, 0, 0, 0L, 0, 0);
SendResult<String, String> sendResult = new SendResult<>(new ProducerRecord<>(topic, message), recordMetadata);

((MockListenableFuture<SendResult<String, String>>) listenableFuture).set(sendResult);

Mockito.when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(listenableFuture);

kafkaProducer.sendMessage(topic, message);

verify(kafkaTemplate, times(1)).send(any(ProducerRecord.class));

LOGGER.info("Message sent successfully to Kafka topic: ", topic);


@Test
public void testSendMessageWithException() throws ExecutionException, InterruptedException 
String topic = "test-topic";
String message = "ïd:‌2,n‌ame:‌J‌ane Doe";

ListenableFuture<SendResult<String, String>> listenableFuture = new MockListenableFuture<>();
((MockListenableFuture<SendResult<String, String>>) listenableFuture).setException(new RuntimeException("Failed to send message"));

Mockito.when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(listenableFuture);

try 
kafkaProducer.sendMessage(topic, message);
 catch (Exception ex) 
assertEquals("Failed to send message", ex.getMessage());


verify(kafkaTemplate, times(1)).send(any(ProducerRecord.class));

LOGGER.info("Message failed to send to Kafka topic: ", topic);