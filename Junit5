```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.cassandra.core.query.Query;

@ExtendWith(MockitoExtension.class)
class MtnInsightsManagerTest {

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Mock
    private MtnInsightsRepository mtnInsightsRepository;
    @Mock
    private AggregateInsightsRepository aggregateInsightsRepository;

    @Mock
    private EcpdByKeyRepository ecpdByKeyRepository;

    @Mock
    private MtnInsightsValidator validator;

    @BeforeEach
    void setUp() {
        mtnInsightsManager.obj = new ObjectMapper();
    }

    @Test
    void convertToMtnInsights_shouldReturnInsightsMtn_whenEmptyList() {
        // Given
        List<MtnInsightsEntity> entities = new ArrayList<>();

        // When
        InsightsMtn insightsMtn = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Then
        assertNull(insightsMtn.getCategoryInsights());
    }

    @Test
    void convertToMtnInsights_shouldReturnInsightsMtn_whenNonEmptyList() {
        // Given
        MtnInsightsEntity mtnInsightsEntity = new MtnInsightsEntity();
        List<MtnInsightsEntity> entities = new ArrayList<>();
        entities.add(mtnInsightsEntity);
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName("TEST");
        mtnInsightsEntity.setPk(pk);

        // When
        InsightsMtn insightsMtn = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Then
        assertNotNull(insightsMtn.getCategoryInsights());
        assertEquals(1, insightsMtn.getCategoryInsights().length);
        assertEquals("TEST", insightsMtn.getCategoryInsights()[0].getInsights()[0].getName());
    }

    @Test
    void convertToMtnInsights_shouldAddInsightsList_whenOutageIdPresent() {
        // Given
        MtnInsightsEntity mtnInsightsEntity = new MtnInsightsEntity();
        List<MtnInsightsEntity> entities = new ArrayList<>();
        entities.add(mtnInsightsEntity);
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName("TEST");
        pk.setInsightCategory(INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsEntity.setPk(pk);
        mtnInsightsEntity.setProdId("1");

        AggregateInsightsEntity aggregateInsightsEntity = new AggregateInsightsEntity();
        when(aggregateInsightsRepository.findByPkAggrCategoryAndPkAggrProdId(INSIGHT_CATEGORY_NETWORK_OUTAGE, "1"))
                .thenReturn(aggregateInsightsEntity);

        // When
        mtnInsightsManager.convertToMtnInsights(entities, true);

        // Then
        assertTrue(aggregateInsightsEntity.getAggrValue().isEmpty());
    }

    @Test
    void convertToMtnInsights_shouldAddInsightsList_whenOutageIdPresentAndAggregateValueAlreadyPresent() {
        // Given
        MtnInsightsEntity mtnInsightsEntity = new MtnInsightsEntity();
        List<MtnInsightsEntity> entities = new ArrayList<>();
        entities.add(mtnInsightsEntity);
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName("TEST");
        pk.setInsightCategory(INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsEntity.setPk(pk);
        mtnInsightsEntity.setProdId("1");

        AggregateInsightsEntity aggregateInsightsEntity = new AggregateInsightsEntity();
        aggregateInsightsEntity.setAggrValue("1,2");
        when(aggregateInsightsRepository.findByPkAggrCategoryAndPkAggrProdId(INSIGHT_CATEGORY_NETWORK_OUTAGE, "1"))
                .thenReturn(aggregateInsightsEntity);

        // When
        mtnInsightsManager.convertToMtnInsights(entities, true);

        // Then
        assertEquals("2", aggregateInsightsEntity.getAggrValue());
    }

    @Test
    void convertToMtnInsights_shouldAddInsightsList_whenEcpdIdPresent() {
        // Given
        MtnInsightsEntity mtnInsightsEntity = new MtnInsightsEntity();
        List<MtnInsightsEntity> entities = new ArrayList<>();
        entities.add(mtnInsightsEntity);
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName("TEST");
        pk.setInsightCategory(INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsEntity.setPk(pk);
        mtnInsightsEntity.setProdId("1");

        MtnInsightsEntity insightsCaseEntities = new MtnInsightsEntity();
        when(mtnInsightsRepository.findBuPkEcpdIdAndPkMtnAndProdIdAndPkInsightCategoryInAndPkInsightNameIn(anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenReturn(insightsCaseEntities);

        // When
        mtnInsightsManager.convertToMtnInsights(entities, true);

        // Then
        assertNotNull(insightsCaseEntities.getPk().getEcpdId());
    }

    @Test
    void addInsightsList_shouldReturnInsightsList_whenElementPresent() {
        // Given
        List<NameValuePair> insightsList = new ArrayList<>();
        NameValuePair element = new NameValuePair();
        element.setName("TEST");
        element.setValue("TEST");
        insightsList.add(element);

        // When
        List<NameValuePair> result = mtnInsightsManager.addInsightsList("TEST", "TEST", insightsList);

        // Then
        assertEquals(1, result.size());
        assertEquals("TEST", result.get(0).getName());
        assertEquals("TEST", result.get(0).getValue());
    }

    @Test
    void convert_shouldReturnMtnInsightsEntity_whenValidAttributes() throws SystemException {
        // Given
        MtnInsightsAttributes attr = new MtnInsightsAttributes();
        attr.setEcpdId("TEST");
        attr.setMtn("TEST");
        attr.setInsightCategory("TEST");
        attr.setInsightName("TEST");
        attr.setOutageId("TEST");
        attr.setUpdateBy("TEST");
        attr.setUpdateTs("TEST");
        attr.setInsightValues("TEST");

        // When
        MtnInsightsEntity result = mtnInsightsManager.convert(attr);

        // Then
        assertNotNull(result);
        assertEquals("TEST", result.getPk().getEcpd_Id());
        assertEquals("TEST", result.getPk().getMtn());
        assertEquals("TEST", result.getPk().getInsightCategory());
        assertEquals("TEST", result.getPk().getInsightName());
        assertEquals("TEST", result.getProdId());
        assertEquals("TEST", result.getUpdateBy());
        assertEquals("TEST", result.getUpdateTs());
        assertEquals("TEST", result.getInsightValues());
    }

    @Test
    void convert_shouldReturnMtnInsightsEntityList_whenValidAttributesList() throws SystemException {
        // Given
        MtnInsightsAttributes attr = new MtnInsightsAttributes();
        attr.setEcpdId("TEST");
        attr.setMtn("TEST");
        attr.setInsightCategory("TEST");
        attr.setInsightName("TEST");
        attr.setOutageId("TEST");
        attr.setUpdateBy("TEST");
        attr.setUpdateTs("TEST");
        attr.setInsightValues("TEST");

        MtnInsightsAttributes[] listKeyAttributes = {attr};

        // When
        List<MtnInsightsEntity> result = mtnInsightsManager.convert(listKeyAttributes);

        // Then
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("TEST", result.get(0).getPk().getEcpd_Id());
        assertEquals("TEST", result.get(0).getPk().getMtn());
        assertEquals("TEST", result.get(0).getPk().getInsightCategory());
        assertEquals("TEST", result.get(0).getPk().getInsightName());
        assertEquals("TEST", result.get(0).getProdId());
        assertEquals("TEST", result.get(0).getUpdateBy());
        assertEquals("TEST", result.get(0).getUpdateTs());
        assertEquals("TEST", result.get(0).getInsightValues());
    }

    