public HashMap<String, Object> mergeUpdateJsonValues(Map<String, Object> incomingMsg, Map<String, Object> cachedMsg, boolean isLateAlarm) {
    try {
        ObjectMapper objectMapper = RulesConstants.getObjectMapper();
        
        for (Map.Entry<String, Object> entry : incomingMsg.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            
            if (!isLateAlarm) {
                if (value != null && !value.toString().isEmpty()) {
                    if (checkIfJsonValue(value)) {
                        if (cachedMsg.containsKey(key) && cachedMsg.get(key) instanceof Map) {
                            HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(objectMapper.readValue(objectMapper.writeValueAsString(value), HashMap.class), (HashMap<String, Object>) cachedMsg.get(key), isLateAlarm);
                            cachedMsg.put(key, updatedMsg);
                        } else {
                            cachedMsg.put(key, removeNullValuesInJsonAttributes(objectMapper.readValue(objectMapper.writeValueAsString(value), HashMap.class)));
                        }
                    } else {
                        cachedMsg.put(key, value);
                    }
                }
            } else {
                if (value != null && !value.toString().isEmpty()) {
                    if (cachedMsg.containsKey(key) && checkIfJsonValue(cachedMsg.get(key))) {
                        HashMap<String, Object> updatedMsg = mergeUpdateJsonValues(objectMapper.readValue(objectMapper.writeValueAsString(value), HashMap.class), (HashMap<String, Object>) cachedMsg.get(key), isLateAlarm);
                        cachedMsg.put(key, updatedMsg);
                    } else if (!cachedMsg.containsKey(key)) {
                        cachedMsg.put(key, value);
                    }
                }
            }
        }
    } catch (Exception e) {
        logger.error("Exception occurred while trying to merge update JsonValues: " + e + " and incoming message : " + incomingMsg);
    }
    
    return (HashMap<String, Object>) cachedMsg;
}
``` 

In the updated code:
- Changed the object mapper instance creation to be inside the method to avoid any potential thread safety issues.
- Used object mapper to serialize and deserialize the JSON objects.
- Check for `key` existence in `cachedMsg` using `containsKey` method.
- Added a check if the value corresponding to a key is an instance of Map while retrieving from `cachedMsg`.
- Refactored variable names for better readability.