@Test
void testCreateAlarmPerceivedSeverityNullAndStateCleared() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    
    percMap.put("Other", 6);
    percMap.put("Indeterminate", 1);
    stateMap.put("cleared", 6);
    
    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    
    JsonNode json = mock(JsonNode.class);
    String j = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
    json = obj.readTree(j);
    
    doAnswer((Answer<Void>) invocation -> {
        Object[] args = invocation.getArguments();
        Alarm alarm = (Alarm) args[0];
        assertEquals(-1, alarm.getPerceivedSeverity());
        return null;
    }).when(alarmRepositoryImpl).createAlarm(Mockito.anyString());
    
    alarmRepositoryImpl.createAlarm(j);
    
    verify(alarmRepositoryImpl, times(1)).createAlarm(Mockito.anyString());
}

@Test
void testCreateAlarmPerceivedSeverityNotNullAndStateNotCleared() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    
    percMap.put("Other", 6);
    percMap.put("Indeterminate", 1);
    stateMap.put("cleared", 6);
    
    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    
    JsonNode json = mock(JsonNode.class);
    String j = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"new\",\"sequenceId\":\"23423\"}";
    json = obj.readTree(j);
    
    doAnswer((Answer<Void>) invocation -> {
        Object[] args = invocation.getArguments();
        Alarm alarm = (Alarm) args[0];
        assertNotEquals(-1, alarm.getPerceivedSeverity());
        return null;
    }).when(alarmRepositoryImpl).createAlarm(Mockito.anyString());
    
    alarmRepositoryImpl.createAlarm(j);
    
    verify(alarmRepositoryImpl, times(1)).createAlarm(Mockito.anyString());
}