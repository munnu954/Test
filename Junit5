To achieve 100% code coverage for the `DataSourceConfig` class using JUnit 5 and Mockito, you can follow these steps to write test cases without invoking the real repository, database, and other connections. The focus will be on mocking dependencies and testing the behavior of the configuration class.

Here's a complete example of how you could write these test cases:

```java
import static org.mockito.Mockito.*;

import javax.sql.DataSource;
import javax.persistence.EntityManagerFactory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;

import com.verizon.vbg.ledger.config.DataSourceConfig;
import com.verizon.vbg.ledger.model.DataSourceModal;

public class DataSourceConfigTest {

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @Mock
    private DataSourceModal dataSourceModal;

    @Mock
    private EntityManagerFactoryBuilder entityManagerFactoryBuilder;

    @Mock
    private EntityManagerFactory entityManagerFactory;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        // Mock the DataSourceModal values
        when(dataSourceModal.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        when(dataSourceModal.getUsername()).thenReturn("sa");
        when(dataSourceModal.getPassword()).thenReturn("");
        when(dataSourceModal.getDriver()).thenReturn("org.h2.Driver");
    }

    @Test
    public void testFalloutDataSource() {
        // Test the falloutDataSource method
        DataSource dataSource = dataSourceConfig.falloutDataSource();

        assert dataSource instanceof DriverManagerDataSource;
        DriverManagerDataSource driverManagerDataSource = (DriverManagerDataSource) dataSource;

        assert driverManagerDataSource.getUrl().equals("jdbc:h2:mem:testdb");
        assert driverManagerDataSource.getUsername().equals("sa");
        assert driverManagerDataSource.getPassword().equals("");
        assert driverManagerDataSource.getDriverClassName().equals("org.h2.Driver");
    }

    @Test
    public void testEntityManagerFactoryBean() {
        // Mock the behavior of the EntityManagerFactoryBuilder
        LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();
        when(entityManagerFactoryBuilder.dataSource(any(DataSource.class)))
            .thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.packages(any(String.class)))
            .thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.persistenceUnit(any(String.class)))
            .thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.build()).thenReturn(factoryBean);

        // Test the entityManagerFactoryBean method
        LocalContainerEntityManagerFactoryBean result = dataSourceConfig.entityManagerFactoryBean(
            entityManagerFactoryBuilder, dataSourceConfig.falloutDataSource());

        assert result == factoryBean;
    }

    @Test
    public void testFalloutTransactionManager() {
        // Test the falloutTransactionManager method
        PlatformTransactionManager transactionManager = dataSourceConfig.falloutTransactionManager(entityManagerFactory);

        assert transactionManager instanceof JpaTransactionManager;
        JpaTransactionManager jpaTransactionManager = (JpaTransactionManager) transactionManager;

        assert jpaTransactionManager.getEntityManagerFactory() == entityManagerFactory;
    }
}
```

### Explanation:
- **Mockito Annotations**: `@InjectMocks` is used to inject mocks into the `DataSourceConfig`. `@Mock` is used to create mock instances.
- **Mocking**: The `DataSourceModal` is mocked to return predefined values for URL, username, password, and driver, simulating the behavior without actual database connections.
- **Testing Methods**: Each method of the `DataSourceConfig` is tested independently, checking the properties and behaviors.

This approach ensures that your test cases cover the entire configuration class without relying on a real database connection, thereby avoiding the `IllegalStateException` related to JDBC drivers.