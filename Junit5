To extend the coverage for the `getAEnd` and `getZEnd` methods, we can add test cases that cover additional scenarios and possible edge cases. Below are additional test cases to achieve 100% code coverage:

### Additional Test Cases

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;

class CircuitDetailsProviderAdditionalTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAEnd_withClrComponentTypeTrail_shouldReturnAEnd() {
        // Preparing a Circuit with ClrComponent of type TRAIL
        PortRef portRef = createPortRef("clli");
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.TRAIL);
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setAEnd(Collections.singletonList(createAEnd(portRef)));
        clrComponent.setCircuitComp(Collections.singletonList(createCircuitComp(circuitInfo)));

        Circuit circuit = new Circuit();
        circuit.setClr(Collections.singletonList(createClr(clrComponent)));
        CircuitDetailResponse response = createCircuitDetailResponse(Collections.emptyList(), circuit);

        AEnd aEnd = circuitDetailsProvider.getAEnd("circuitId", "clli", response);

        assertNotNull(aEnd);
        assertEquals(portRef, aEnd.getPortChannel().get(0).getPortRef().get(0));
    }

    @Test
    void testGetAEnd_withMultipleClrComponents_shouldReturnAEnd() {
        // Preparing a Circuit with multiple ClrComponents
        PortRef portRef = createPortRef("clli");
        ClrComponent clrComponent1 = createClrComponentWithPort(portRef);
        ClrComponent clrComponent2 = createClrComponentWithPort(portRef);

        Circuit circuit = new Circuit();
        circuit.setClr(Collections.singletonList(createClr(clrComponent1, clrComponent2)));
        CircuitDetailResponse response = createCircuitDetailResponse(Collections.emptyList(), circuit);

        AEnd aEnd = circuitDetailsProvider.getAEnd("circuitId", "clli", response);

        assertNotNull(aEnd);
        assertEquals(portRef, aEnd.getPortChannel().get(0).getPortRef().get(0));
    }

    @Test
    void testGetZEnd_withClrComponentTypeCircuit_shouldReturnZEnd() {
        // Preparing a Circuit with ClrComponent of type CIRCUIT
        PortRef portRef = createPortRef("clli");
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CIRCUIT);
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setZEnd(Collections.singletonList(createZEnd(portRef)));
        clrComponent.setCircuitComp(Collections.singletonList(createCircuitComp(circuitInfo)));

        Circuit circuit = new Circuit();
        circuit.setClr(Collections.singletonList(createClr(clrComponent)));
        CircuitDetailResponse response = createCircuitDetailResponse(Collections.emptyList(), circuit);

        ZEnd zEnd = circuitDetailsProvider.getZEnd("circuitId", "clli", response);

        assertNotNull(zEnd);
        assertEquals(portRef, zEnd.getPortChannel().get(0).getPortRef().get(0));
    }

    @Test
    void testGetZEnd_withMultipleClrComponents_shouldReturnZEnd() {
        // Preparing a Circuit with multiple ClrComponents
        PortRef portRef = createPortRef("clli");
        ClrComponent clrComponent1 = createClrComponentWithPort(portRef);
        ClrComponent clrComponent2 = createClrComponentWithPort(portRef);

        Circuit circuit = new Circuit();
        circuit.setClr(Collections.singletonList(createClr(clrComponent1, clrComponent2)));
        CircuitDetailResponse response = createCircuitDetailResponse(Collections.emptyList(), circuit);

        ZEnd zEnd = circuitDetailsProvider.getZEnd("circuitId", "clli", response);

        assertNotNull(zEnd);
        assertEquals(portRef, zEnd.getPortChannel().get(0).getPortRef().get(0));
    }

    // Helper Methods
    private CircuitDetailResponse createCircuitDetailResponse(List<ZEnd> zEnds, Circuit circuit) {
        circuit.setZEnd(zEnds);
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(Collections.singletonList(circuit));
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);
        return response;
    }

    private Clr createClr(ClrComponent... clrComponents) {
        Clr clr = new Clr();
        PathLst pathLst = new PathLst();
        Path path = new Path();
        path.setClrComponent(Arrays.asList(clrComponents));
        pathLst.setPath(Collections.singletonList(path));
        clr.setPathLst(Collections.singletonList(pathLst));
        return clr;
    }

    private ClrComponent createClrComponentWithPort(PortRef portRef) {
        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.PORT);
        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));
        return clrComponent;
    }

    private CircuitComp createCircuitComp(CircuitInfo circuitInfo) {
        CircuitComp circuitComp = new CircuitComp();
        circuitComp.setCircuitInfo(Collections.singletonList(circuitInfo));
        return circuitComp;
    }

    private PortRef createPortRef(String clliCode) {
        PortRef portRef = new PortRef();
        portRef.setClliCode(clliCode);
        return portRef;
    }

    private AEnd createAEnd(PortRef portRef) {
        AEnd aEnd = new AEnd();
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(Collections.singletonList(portRef));
        aEnd.setPortChannel(Collections.singletonList(portChannel));
        return aEnd;
    }

    private ZEnd createZEnd(PortRef portRef) {
        ZEnd zEnd = new ZEnd();
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(Collections.singletonList(portRef));
        zEnd.setPortChannel(Collections.singletonList(portChannel));
        return zEnd;
    }
}
```

### Explanation

1. **ClrComponent Type Trail**: Tests scenarios where `ClrComponent` is of type `TRAIL`.
2. **Multiple ClrComponents**: Tests the handling of multiple `ClrComponent` objects in a circuit.
3. **ClrComponent Type Circuit**: Tests scenarios where `ClrComponent` is of type `CIRCUIT`.

By adding these tests, you further extend the coverage to ensure that all paths and logic in the `getAEnd` and `getZEnd` methods are thoroughly tested. This helps in covering more edge cases and ensuring robustness in the code.