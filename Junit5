Sure, here is a JUnit 5 test class that covers the 4 branches of the specified if statement in the `applyPostingRule` method of the `PostingRuleProcessingService` class. We'll use reflection to set the private fields of `PostingRuleProcessingService`.

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;

import java.lang.reflect.Field;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Value("${topologytraversal.alarmedObjectExpression: %TopoObject:OSS_Names[0]%}")
    private String alarmedObjectExpression;

    @Value("${topologytraversal.topologyDetailsAlarmedObjectExpression:{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}}")
    private String topologyDetailsAlarmedObjectExpression;

    @Value("${topologytraversal.topologyObjectEligibilityCheckValue:%TopoObject:OSS_Names[0]%}")
    private String topologyObjectEligibilityCheckValue;

    @Value("${topologytraversal.topologyObjectEligibilityCheckExpression:^(?!\\s*$).+}")
    private String topologyObjectEligibilityCheckExpression;

    @Value("${topologytraversal.componentIDAttributeName:reportingObject}")
    private String componentIDAttributeName;

    private Alarm alarm;
    private PostingRule postingRule;
    private HashMap<String, Object> alarmMap;

    @BeforeEach
    public void setUp() throws Exception {
        alarm = new Alarm();
        alarm.setAlarmIdentity("Alarm1");

        postingRule = new PostingRule(1L, "TestRule", 1, 1, "criteria");

        alarmMap = new HashMap<>();
        alarmMap.put("alarmIdentity", "Alarm1");

        setPrivateField(postingRuleProcessingService, "alarmedObjectExpression", alarmedObjectExpression);
        setPrivateField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", topologyDetailsAlarmedObjectExpression);
        setPrivateField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", topologyObjectEligibilityCheckValue);
        setPrivateField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", topologyObjectEligibilityCheckExpression);
        setPrivateField(postingRuleProcessingService, "componentIDAttributeName", componentIDAttributeName);
    }

    private void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }

    @Test
    public void testApplyPostingRule_TopologyDetailsNotNull_NotEmpty() throws Exception {
        // Mocking
        String componentIdReq = "Component123";
        String topologyDetails = "{\"details\":\"some details\"}";
        String alarmedObject = "AlarmedObject1";

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(componentIdReq);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(topologyDetails));
        when(utils.evaluateExpression(alarmedObjectExpression, alarmMap)).thenReturn(alarmedObject);

        // Actual call
        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        // Asserts
        assertNotNull(resultAlarm.getTopologyDetails());
        assertEquals(topologyDetails, resultAlarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_TopologyDetailsNull() throws Exception {
        // Mocking
        String componentIdReq = "Component123";
        String alarmedObject = "AlarmedObject1";

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(componentIdReq);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(null));
        when(utils.evaluateExpression(alarmedObjectExpression, alarmMap)).thenReturn(alarmedObject);

        // Actual call
        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        // Asserts
        assertNull(resultAlarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_TopologyDetailsEmpty() throws Exception {
        // Mocking
        String componentIdReq = "Component123";
        String topologyDetails = "";
        String alarmedObject = "AlarmedObject1";

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(componentIdReq);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(topologyDetails));
        when(utils.evaluateExpression(alarmedObjectExpression, alarmMap)).thenReturn(alarmedObject);

        // Actual call
        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        // Asserts
        assertNull(resultAlarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_TopologyDetailsNotEmptyButNullAlarmedObject() throws Exception {
        // Mocking
        String componentIdReq = "Component123";
        String topologyDetails = "{\"details\":\"some details\"}";

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(componentIdReq);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(topologyDetails));
        when(utils.evaluateExpression(alarmedObjectExpression, alarmMap)).thenReturn(null);

        // Actual call
        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        // Asserts
        assertNull(resultAlarm.getTopologyDetails());
    }
}
```

In this test class:

1. We use Mockito to mock dependencies.
2. We use reflection to inject values into private fields.
3. We cover all the branches of the `if (topologyDetails != null && !(topologyDetails.isEmpty()))` statement by:
   - Providing a non-null and non-empty `topologyDetails`.
   - Providing a null `topologyDetails`.
   - Providing an empty `topologyDetails`.
   - Providing a non-null and non-empty `topologyDetails` but null `alarmedObject`.

These tests will ensure that the specified if statement is fully covered.