catch (HttpClientErrorException | HttpServerErrorException ex) {
    ex.printStackTrace();
    LOGGER.error("Error triggering job: " + ex.getMessage());

    if (ex.getStatusCode() == HttpStatus.NOT_FOUND) {
        // Handle Non-existent jar ID passed to Flink cluster
        LOGGER.error("Non-existent jar ID passed to Flink cluster");
        // Additional handling if needed
    } else if (ex.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR && ex.getResponseBodyAsString().contains("org.apache.flink.runtime.rest.handler.RestHandlerException: Jar file")) {
        // Handle specific internal server error related to Flink
        LOGGER.error("Internal server error related to Flink: " + ex.getResponseHeaders());
        // Additional handling if needed
    } else {
        // General error handling
        FileMetadata metadata = kafkaConsumer.logMetadata(collector, fileType, ex);
        kafkaInputProducer.sendFailureMessage(collector, fileType, ex);
        kafkaConsumer.writeLogToFile(metadata, destinationFolderPath);
    }
}