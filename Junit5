import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.BadSqlGrammarException;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private Environment env;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Test
    public void testPerformUpdateForACK_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);
        int result = alarmRepository.performUpdateforACK("", "", "", 123);
        assertEquals(0, result);
    }

    @Test
    public void testPerformUpdateForOpNote_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);
        int result = alarmRepository.performUpdateforOpNote("", "", "", 123);
        assertEquals(0, result);
    }

    @Test
    public void testPerformClearByFeed_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);
        int result = alarmRepository.performClearbyfeed(0, "", "", "", "", 123);
        assertEquals(0, result);
    }

    @Test
    public void testPerformUpdateForHandleEvent_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);
        int result = alarmRepository.performUpdateforHandleEvent("", "", "", 123);
        assertEquals(0, result);
    }

    @Test
    public void testPerformUpdateForHandleTicket_BadSqlGrammarException() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);
        int result = alarmRepository.performUpdateforHandleTicket("", "", "", "", 123);
        assertEquals(0, result);
    }
}