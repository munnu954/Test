To write JUnit 5 test cases covering all branches of the `getAEnd` and `getZEnd` methods in the `CircuitDetailsProvider` class, we need to thoroughly mock and set up the objects involved in the logic. Here's a step-by-step approach with sample test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.util.StringUtils;

import java.util.ArrayList;
import java.util.List;

public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAEnd_WithValidCircuitIdAndClli() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse(clli);

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    @Test
    public void testGetAEnd_WithNullResponse() {
        String circuitId = "validCircuitId";
        String clli = "validClli";
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(mockResponseJson(clli));

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, null);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    @Test
    public void testGetAEnd_WithInvalidClli() {
        String circuitId = "validCircuitId";
        String clli = "invalidClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse("differentClli");

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetZEnd_WithValidCircuitIdAndClli() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse(clli);

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    @Test
    public void testGetZEnd_WithNullResponse() {
        String circuitId = "validCircuitId";
        String clli = "validClli";
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(mockResponseJson(clli));

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, null);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    @Test
    public void testGetZEnd_WithInvalidClli() {
        String circuitId = "validCircuitId";
        String clli = "invalidClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse("differentClli");

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNull(result);
    }

    private CircuitDetailResponse createMockCircuitDetailResponse(String clli) {
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        AEnd aEnd = new AEnd();
        ZEnd zEnd = new ZEnd();
        PortChannel portChannel = new PortChannel();
        PortRef portRef = new PortRef();
        
        // Setup mock data
        portRef.setSiteCode(clli);
        portChannel.getPortRef().add(portRef);
        aEnd.getPortChannel().add(portChannel);
        zEnd.getPortChannel().add(portChannel);
        
        circuit.getAEnd().add(aEnd);
        circuit.getZEnd().add(zEnd);
        circuitLst.getCircuit().add(circuit);
        circuitData.setCircuitLst(List.of(circuitLst));
        response.setCircuitData(circuitData);
        
        return response;
    }

    private String mockResponseJson(String clli) {
        // Provide a mock JSON response string that can be converted to a CircuitDetailResponse
        return "{ \"circuitData\": { \"circuitLst\": [{ \"circuit\": [{ \"aEnd\": [{ \"portChannel\": [{ \"portRef\": [{ \"siteCode\": \"" + clli + "\" }] }] }], \"zEnd\": [{ \"portChannel\": [{ \"portRef\": [{ \"siteCode\": \"" + clli + "\" }] }] }] }] }] } }";
    }
}
```

### Key Points:

1. **Mocking**: We use Mockito to mock dependencies and responses to simulate different scenarios.
2. **Comprehensive Coverage**: The test cases cover scenarios such as valid/invalid `clli`, `null` responses, and responses with matching or non-matching CLLI codes.
3. **Assertions**: We assert that results are not null when expected and null otherwise, checking specific attributes to confirm expected behavior.
4. **Setup**: We create mock data using helper methods to ensure the `CircuitDetailResponse` object is populated correctly for each test scenario.

These test cases aim to cover all branches of the `getAEnd` and `getZEnd` methods, ensuring each possible path is executed and verified.