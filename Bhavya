Certainly! Here's the reframed code for the TexttoJsonTransformer class based on the conversion logic you provided:

```java
import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.util.Collector;
import org.json.JSONObject;

public class TexttoJsonTransformer implements FlatMapFunction<String, String> {

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] arr = s.split(",");
        JSONObject obj = new JSONObject();

        for (String input : arr) {
            int index = input.indexOf(":");
            if (index != -1) {
                String key = input.substring(0, index).trim().replaceAll("\"", "");
                String value = input.substring(index + 1).trim();
                obj.put(key, value);
            }
        }

        collector.collect(obj.toString());
    }
}
```

In the reframed code, the input string is split by commas (`s.split(",")`) to separate the key-value pairs. Each pair is then processed to extract the key and value. The key is obtained by finding the index of `:` in each pair and extracting the substring. The value is obtained by extracting the substring after `:`. Trimming is applied to remove any leading or trailing whitespaces, and the quotation marks around the key are removed using `replaceAll("\"", "")`. Finally, the key-value pair is added to the JSONObject (`obj.put(key, value)`).

This reframed code should convert the input text to JSON in the desired format.