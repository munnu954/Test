import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.*;
import org.springframework.boot.test.context.SpringBootTest;
import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.ListTopicsOptions;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.apache.kafka.common.errors.ResourceNotFoundException;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutionException;

@SpringBootTest
public class KafkaTopicUtilTest {

    @InjectMocks
    private KafkaTopicUtil kafkaTopicUtil;

    @Mock
    private AdminClient adminClient;

    @Mock
    private ListTopicsResult listTopicsResult;

    @Test
    public void testIsKafkaTopicPresent() throws ExecutionException, InterruptedException, ResourceNotFoundException {
        String topicName = "testTopic";

        Properties properties = new Properties();
        properties.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");

        Set<String> topicNames = new HashSet<>();
        topicNames.add("testTopic");

        Mockito.when(listTopicsResult.names()).thenReturn(topicNames);
        Mockito.when(adminClient.listTopics(Mockito.any(ListTopicsOptions.class))).thenReturn(listTopicsResult);

        boolean isTopicPresent = kafkaTopicUtil.isKafkaTopicPresent(topicName);

        assertTrue(isTopicPresent);
    }

    @Test
    public void testIsKafkaTopicAbsent() throws ExecutionException, InterruptedException, ResourceNotFoundException {
        String topicName = "nonExistentTopic";

        Properties properties = new Properties();
        properties.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");

        Set<String> topicNames = new HashSet<>();
        topicNames.add("testTopic");

        Mockito.when(listTopicsResult.names()).thenReturn(topicNames);
        Mockito.when(adminClient.listTopics(Mockito.any(ListTopicsOptions.class))).thenReturn(listTopicsResult);

        boolean isTopicPresent = kafkaTopicUtil.isKafkaTopicPresent(topicName);

        assertFalse(isTopicPresent);
    }

    @Test
    public void testIsKafkaTopicExceptionHandling() throws ExecutionException, InterruptedException, ResourceNotFoundException {
        String topicName = "testTopic";

        Properties properties = new Properties();
        properties.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");

        Mockito.when(AdminClient.create(Mockito.any(Properties.class))).thenThrow(new RuntimeException("Kafka AdminClient creation failed"));

        assertThrows(Exception.class, () -> {
            kafkaTopicUtil.isKafkaTopicPresent(topicName);
        });
    }

    // Add more test cases to cover various scenarios in isKafkaTopicPresent method

}