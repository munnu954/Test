To achieve 100% code coverage for the `DataSourceConfig` class using JUnit 5 test cases, we can write tests to cover each method in the class. Mocking will be used when necessary to isolate dependencies. Below is an example of JUnit 5 test cases for the `DataSourceConfig` class:

```java
import javax.sql.DataSource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
@SpringBootTest
public class DataSourceConfigTest {

    @Mock
    private DataSourceModal dataSourceModal;

    @MockBean
    private DataSource dataSource;

    @Test
    public void testFalloutDataSource() {
        // Prepare test data for dataSourceModal
        when(dataSourceModal.getUsername()).thenReturn("testUsername");
        when(dataSourceModal.getPassword()).thenReturn("testPassword");
        when(dataSourceModal.getUrl()).thenReturn("testUrl");
        when(dataSourceModal.getDriver()).thenReturn("testDriver");

        // Test falloutDataSource() method
        DataSourceConfig dataSourceConfig = new DataSourceConfig();
        dataSourceConfig.setDataSourceModal(dataSourceModal); // Setter injection for testing

        DataSource dataSource = dataSourceConfig.falloutDataSource();

        // Assertions or verifications
        // Make assertions to validate dataSource
    }

    @Test
    public void testEntityManagerFactoryBean() {
        // Prepare test data
        
        // Test entityManagerFactoryBean() method
        DataSourceConfig dataSourceConfig = new DataSourceConfig();
        // Mocking the DataSource and EntityManagerFactoryBuilder
        EntityManagerFactoryBuilder builder = mock(EntityManagerFactoryBuilder.class);
        
        when(builder.dataSource(any(DataSource.class))).thenReturn(builder);
        when(builder.packages("com.verizon.vbg.ledger.entity")).thenReturn(builder);
        when(builder.persistenceUnit("fallout-db")).thenReturn(builder);
        
        // Call the entityManagerFactoryBean method
        LocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBean = dataSourceConfig.entityManagerFactoryBean(builder, dataSource);
        
        // Assertions or verifications
        // Make assertions to validate localContainerEntityManagerFactoryBean
    }

    @Test
    public void testFalloutTransactionManager() {
        // Prepare test data
        
        // Test falloutTransactionManager() method
        DataSourceConfig dataSourceConfig = new DataSourceConfig();
        
        // Mocking EntityManagerFactory
        EntityManagerFactory entityManagerFactory = mock(EntityManagerFactory.class);
        
        // Call the falloutTransactionManager method
        PlatformTransactionManager platformTransactionManager = dataSourceConfig.falloutTransactionManager(entityManagerFactory);
        
        // Assertions or verifications
        // Make assertions to validate platformTransactionManager
    }
}
```

In the provided test cases, we are testing each method of the `DataSourceConfig` class by mocking the required dependencies such as `DataSourceModal`, `DataSource`, `EntityManagerFactoryBuilder`, and `EntityManagerFactory`. This approach will help achieve 100% code coverage for the class.