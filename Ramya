import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.util.Collector;
import com.google.gson.JsonObject;

public class CsvtoJsonConversion implements FlatMapFunction<String, String> {

    @Override
    public void flatMap(String input, Collector<String> collector) throws Exception {
        String[] lines = input.split(System.lineSeparator());

        for (int i = 1; i < lines.length; i++) {
            String[] arr = lines[i].split(",");

            if (arr.length > 2 && !arr[2].isEmpty()) {
                // This is the line containing ObjectName
                String objectName = arr[2].trim();
                JsonObject result = new JsonObject();
                JsonObject objectDetails = new JsonObject();

                // Extract details from the lines below ObjectName
                if (i + 3 < lines.length) {
                    objectDetails.addProperty("Begin Date", getProperty(lines, i + 1, 1));
                    objectDetails.addProperty("End Date", getProperty(lines, i + 2, 1));
                    objectDetails.addProperty("Ticket Number", getProperty(lines, i + 3, 1));
                }

                // Continue processing the sections inside the loop
                for (int j = i + 4; j < lines.length; j++) {
                    String[] sectionArr = lines[j].split(",");
                    if (sectionArr.length > 0 && !sectionArr[0].isEmpty() && !sectionArr[0].equals("TICKET NUMBER")) {
                        // This is a line containing SectionName, skip rows with "TICKET NUMBER"
                        String sectionName = sectionArr[0].trim();
                        JsonObject sectionObject = new JsonObject();

                        // Extract details for the section
                        for (int k = 3; k < sectionArr.length; k++) {
                            sectionObject.addProperty(getPropertyName(sectionArr, k), getProperty(sectionArr, k));
                        }

                        // Add section to result
                        result.add(sectionName, sectionObject);
                    }
                }

                // Add the remaining JSON structure to result
                result.addProperty("ObjectName", objectName);
                result.add("ObjectDetails", objectDetails);

                collector.collect(result.toString());
            }
        }
    }

    private String getProperty(String[] arr, int index) {
        return (index < arr.length) ? arr[index].trim() : "";
    }

    private String getProperty(String[] lines, int lineIndex, int colIndex) {
        String[] lineArr = lines[lineIndex].split(",");
        return (colIndex < lineArr.length) ? lineArr[colIndex].trim() : "";
    }

    private String getPropertyName(String[] arr, int index) {
        return (index < arr.length) ? arr[index].trim().replace(" ", "_") : "";
    }
}
