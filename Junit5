The error you are experiencing suggests that the instance being passed to `when()` is not being recognized as a Mockito mock. This can occur if the instance isn't correctly injected or if there are multiple instances of `ObjectMapper` being used. Let's ensure that the `ObjectMapper` is correctly mocked and injected. 

Here's a corrected version of the test setup, ensuring the mock is properly utilized:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertThrows;

@ExtendWith(MockitoExtension.class)
public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @Mock
    private EcpdByKeyRepository ecpdByKeyRepository;

    @Mock
    private MtnInsightsValidator validator;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @BeforeEach
    public void setup() {
        // Assign the mock ObjectMapper to the manager
        mtnInsightsManager.obj = objectMapper;
    }

    @Test
    public void testConvertAttributesArray_JsonProcessingException() throws JsonProcessingException {
        // Arrange
        MtnInsightsAttributes attr = new MtnInsightsAttributes(); // Assuming this is a valid object
        MtnInsightsAttributes[] attrsArray = {attr};

        // Mock the ObjectMapper to throw JsonProcessingException
        doThrow(new JsonProcessingException("Mocked Exception") {}).when(objectMapper).writeValueAsString(Mockito.any());

        // Act & Assert
        assertThrows(SystemException.class, () -> {
            mtnInsightsManager.convert(attrsArray);
        });
    }

    @Test
    public void testConvertEcpd_JsonProcessingException() throws JsonProcessingException {
        // Arrange
        MtnInsightsAttributes attr = new MtnInsightsAttributes(); // Assuming this is a valid object

        // Mock the ObjectMapper to throw JsonProcessingException
        doThrow(new JsonProcessingException("Mocked Exception") {}).when(objectMapper).writeValueAsString(Mockito.any());

        // Act & Assert
        assertThrows(SystemException.class, () -> {
            mtnInsightsManager.convertEcpd(attr);
        });
    }
}
```

### Explanation of Changes:

1. **Ensure `@InjectMocks` is Correctly Used:** 
   - `@InjectMocks` automatically injects mocks into the object under test. Ensure that no manual instantiation of `mtnInsightsManager` is done after `@InjectMocks` is used.

2. **Assign Mock to the Correct Field:**
   - Assign `objectMapper` mock to `mtnInsightsManager.obj` directly in the `setup()` method to ensure that the manager uses the mocked `ObjectMapper`.

3. **Use `doThrow()` Instead of `when()` for Exceptions:**
   - Utilize `doThrow()` for methods that throw exceptions, ensuring the mock setup is valid.

By following these steps, the mock should be correctly recognized, and the tests should pass without encountering the `NotAMockException`. If the error persists, ensure that there are no other instances of `ObjectMapper` being created in the `MtnInsightsManager` class itself that might override the mock.