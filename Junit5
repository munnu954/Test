import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Collections;
import java.util.List;

public class CircuitDetailsProviderTest {

    @Test
    public void testGetAEnd_NullResponse_FetchesDetails() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        Mockito.when(provider.getCircuitDetails("testCircuitId")).thenReturn(createResponseWithCircuit());
        AEnd aEnd = provider.getAEnd("testCircuitId", "clli", null);
        Assertions.assertNotNull(aEnd);
        Mockito.verify(provider).getCircuitDetails("testCircuitId");
    }

    @Test
    public void testGetAEnd_EmptyCircuit_ReturnsNull() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        Mockito.when(provider.getCircuitDetails("testCircuitId")).thenReturn(createResponseWithEmptyCircuit());
        AEnd aEnd = provider.getAEnd("testCircuitId", "clli", null);
        Assertions.assertNull(aEnd);
        Mockito.verify(provider).getCircuitDetails("testCircuitId");
    }

    @Test
    public void testGetAEnd_EmptyAEnd_ReturnsNull() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        CircuitDetailResponse response = createResponseWithCircuit();
        response.getCircuitData().getCircuitLst().get(0).setCircuit(Collections.emptyList());
        Mockito.when(provider.getCircuitDetails(Mockito.anyString())).thenReturn(response);
        AEnd aEnd = provider.getAEnd("testCircuitId", "clli", response);
        Assertions.assertNull(aEnd);
    }

    @Test
    public void testGetAEnd_EmptyPortChannel_ReturnsNull() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        CircuitDetailResponse response = createResponseWithCircuit();
        response.getCircuitData().getCircuitLst().get(0).getCircuit().get(0).setAEnd(Collections.emptyList());
        Mockito.when(provider.getCircuitDetails(Mockito.anyString())).thenReturn(response);
        AEnd aEnd = provider.getAEnd("testCircuitId", "clli", response);
        Assertions.assertNull(aEnd);
    }

    @Test
    public void testGetAEnd_EmptyPortRef_ReturnsNull() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        CircuitDetailResponse response = createResponseWithCircuit();
        List<PortChannel> portChannels = response.getCircuitData().getCircuitLst().get(0).getCircuit().get(0).getAEnd().get(0).getPortChannel();
        portChannels.get(0).setPortRef(Collections.emptyList());
        Mockito.when(provider.getCircuitDetails(Mockito.anyString())).thenReturn(response);
        AEnd aEnd = provider.getAEnd("testCircuitId", "clli", response);
        Assertions.assertNull(aEnd);
    }

    @Test
    public void testGetAEnd_NoCLliMatch_ReturnsNull() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        CircuitDetailResponse response = createResponseWithCircuit();
        Mockito.when(provider.getCircuitDetails(Mockito.anyString())).thenReturn(response);
        AEnd aEnd = provider.getAEnd("testCircuitId", "noMatchCLli", response);
        Assertions.assertNull(aEnd);
    }

    @Test
    public void testGetAEnd_PortMatch_ReturnsAEnd() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        CircuitDetailResponse response = createResponseWithCircuit();
        Mockito.when(provider.getCircuitDetails(Mockito.anyString())).thenReturn(response);
        AEnd aEnd = provider.getAEnd("testCircuitId", "clli", response);
        Assertions.assertNotNull(aEnd);
    }

    @Test
    public void testGetAEnd_ClrPortMatch_ReturnsAEnd() {
        CircuitDetailsProvider provider = Mockito.mock(CircuitDetailsProvider.class);
        CircuitDetailResponse response = createResponseWithClrPort();
        Mockito.when(provider.getCircuitDetails(Mockito.anyString())).
