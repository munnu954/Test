```java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestTemplate;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class GraniteReflowMsServiceTest {

    @Mock
    private RestTemplate restTemplate;
    @Mock
    private Gson gson; // Mocking Gson since it's not a Spring bean

    @InjectMocks
    private GraniteReflowMsService graniteReflowMsService;

    private String cndCircHeaderMSServiceUrl = "http://localhost:8080/circuits";


    @BeforeEach
    void setUp() {
        // Set the URL for testing
        ReflectionTestUtils.setField(graniteReflowMsService, "cndCircHeaderMSServiceUrl", cndCircHeaderMSServiceUrl);
    }

    @Test
    void validateCircuits_success() throws NoDataFoundException, InternalServerErrorException {
        // Prepare mock data
        List<String> circuitNameList = Arrays.asList("circuit1", "circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(circuitNameList);

        Circuit circuit1 = new Circuit();
        circuit1.setCircuitName("circuit1");
        Circuit circuit2 = new Circuit();
        circuit2.setCircuitName("circuit2");

        List<Circuit> circuits = Arrays.asList(circuit1, circuit2);
        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(circuits);
        List<CircuitLst> circuitLsts = Arrays.asList(circuitLst);
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(circuitLsts);
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);


        // Mock RestTemplate response
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> responseEntity = new HttpEntity<>(new ObjectMapper().valueToTree(response).toString(), headers);
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class))).thenReturn(new ResponseEntity<>(response, HttpStatus.OK));


        //Call the method
        List<String> result = graniteReflowMsService.validateCircuits(circuitNameList, toValidateCircuitNameList);

        // Assertions
        assertEquals(2, result.size());
        assertTrue(result.contains("circuit1"));
        assertTrue(result.contains("circuit2"));
        assertTrue(toValidateCircuitNameList.isEmpty());
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class));
    }

    @Test
    void validateCircuits_emptyResponse() {
        List<String> circuitNameList = Arrays.asList("circuit1", "circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(circuitNameList);

        // Mock RestTemplate response with empty body
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class))).thenReturn(new ResponseEntity<>(HttpStatus.OK));

        //Expect exception
        assertThrows(NoDataFoundException.class, () -> graniteReflowMsService.validateCircuits(circuitNameList, toValidateCircuitNameList));

    }


    @Test
    void validateCircuits_noDataFoundException() {
        List<String> circuitNameList = Arrays.asList("circuit1", "circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(circuitNameList);

        // Mock RestTemplate response with non-200 status code
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDet