@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class MessageReaderServiceTest {

    @Mock
    private VMBParams params;

    @Mock
    private ApolloServiceHealth healthChecker;

    @Mock
    private RuleLoadingService rulesLoadingService;

    @Mock
    private VMBConfig ruleUpdateNotifierVmbConfig;

    @Mock
    private Reader<byte[]> reader;

    @Mock
    private Message<byte[]> msg;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private MessageReaderService messageReaderService;

    private static final Logger logger = LogManager.getLogger(MessageReaderService.class);

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        messageReaderService = new MessageReaderService();
        messageReaderService.setParams(params);
        messageReaderService.setHealthChecker(healthChecker);
        messageReaderService.setRuleLoadingService(rulesLoadingService);
        messageReaderService.setRuleUpdateNotifierVmbConfig(ruleUpdateNotifierVmbConfig);
        messageReaderService.setReader(reader);
    }

    @Test
    void testRetryReaderConnection() throws IOException {
        when(params.getVMBConnectionFailureThresholdCount()).thenReturn(2);
        messageReaderService.setFailureRuleUpdateVMBConnectionCount(2);
        messageReaderService.retryReaderConnection();
        verify(reader, times(1)).close();
    }

    @Test
    void testRetryReaderConnectionWithThresholdCountReached() {
        when(params.getVMBConnectionFailureThresholdCount()).thenReturn(2);
        messageReaderService.setFailureRuleUpdateVMBConnectionCount(3);

        assertThrows(SystemExitException.class, () -> messageReaderService.retryReaderConnection());
    }

    @Test
    void testCloseReader() throws IOException {
        when(reader.isConnected()).thenReturn(true);
        messageReaderService.closeReader();
        verify(reader, times(1)).close();
    }

    @Test
    void testCloseReaderWithNullReader() throws IOException {
        messageReaderService.setReader(null);
        messageReaderService.closeReader();
        verify(reader, never()).close();
    }

    @Test
    void testShutdown() throws IOException {
        messageReaderService.shutdown();
        assertFalse(messageReaderService.getRun());
        verify(reader, times(1)).close();
    }
} 

In the above updated test case, I have used setter methods in the setup method to set the values for private fields in the MessageReaderService class without needing to change their access level. This way, the test cases should be able to run successfully using the Mockito framework.