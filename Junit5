import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import com.labs.clr.circuit.discovery.common.CommonWrapperConstants;
import com.labs.clr.circuit.discovery.component.ClrComponent;
import com.labs.clr.circuit.discovery.component.CircuitInfo;
import com.labs.clr.circuit.discovery.component.TrunkGroupComp;
import com.labs.clr.circuit.discovery.discovery.AbstractClrComponentProcessor;
import com.labs.clr.circuit.discovery.discovery.TrunkProcessor;
import com.labs.clr.circuit.discovery.model.Attribute;
import com.labs.clr.circuit.discovery.model.Link;
import com.labs.clr.circuit.discovery.model.Node;
import com.labs.clr.circuit.discovery.model.PortRef;

class TrunkProcessorSegmentTest {

    private TrunkProcessor trunkProcessor;
    private AbstractClrComponentProcessor abstractClrComponentProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;

    @BeforeEach
    void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        abstractClrComponentProcessor = mock(AbstractClrComponentProcessor.class);
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger();
    }

    static Stream<Arguments> provideSegments() {
        return Stream.of(
                Arguments.of(true, CommonWrapperConstants.CABLE),
                Arguments.of(true, CommonWrapperConstants.CABLE_PAIR),
                Arguments.of(true, CommonWrapperConstants.CABLE_PAIR_GROUP),
                Arguments.of(true, CommonWrapperConstants.PATH)
        );
    }

    @ParameterizedTest
    @MethodSource("provideSegments")
    void testProcess_segment(boolean addAttribute, String segmentType) {
        // GIVEN
        ClrComponent clrComponent = mock(ClrComponent.class);
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.SEGEMENT);
        TrunkGroupComp trunkGroupComp = mock(TrunkGroupComp.class);
        List<TrunkGroupComp> trunkGroupCompList = new ArrayList<>();
        trunkGroupCompList.add(trunkGroupComp);
        when(clrComponent.getTrunkGroupComp()).thenReturn(trunkGroupCompList);
        CircuitInfo circuitInfo = mock(CircuitInfo.class);
        when(clrComponent.getTrunkGroupComp().get(0).getCktLst().get(0).getCircuitInfo().get(0)).thenReturn(circuitInfo);

        Optional<PortRef> portOpt = Optional.of(new PortRef());
        portOpt.get().setNeName("PortNeName");
        Node node = new Node();
        node.setShelfId("ShelfId");
        when(abstractClrComponentProcessor.doesNodeAlreadyExist("ShelfId", nodes)).thenReturn(false);
        when(abstractClrComponentProcessor.addOrUpdateNode(portOpt.get(), nodes, clliNodeMap)).thenReturn(node);

        PortRef eqtObject = new PortRef();
        eqtObject.setShelfID("ShelfId");
        eqtObject.setPortID("ShelfId");

        Link link = new Link();
        when(link.getSource()).thenReturn("Source");
        link.setTarget("Target");
        links.add(link);

        // WHEN
        trunkProcessor.process(nodes, links, clrComponent, new ArrayList<>(), clliNodeMap, 0, ukCount, "sourceSys");

        // THEN
        assertEquals(1, links.size());
        assertEquals(2, nodes.size());
        assertEquals("Source", links.get(0).getSource());
        assertEquals("ShelfId", links.get(0).getTarget());

        if (addAttribute) {
            assertEquals(2, links.get(0).getAttributes().size());
            assertEquals("tid", links.get(0).getAttributes().get(0).getName());
            assertEquals("/tidPage?id=PortNeName", links.get(0).getAttributes().get(0).getLink());
            assertEquals("tid", links.get(0).getAttributes().get(1).getName());
            assertEquals("/tidPage?id=ShelfId", links.get(0).getAttributes().get(1).getLink());
        } else {
            assertTrue(links.get(0).getAttributes().isEmpty());
        }

        if (segmentType.equalsIgnoreCase(CommonWrapperConstants.PATH)) {
            assertEquals("PortNeName", nodes.get(0).getNeName());
            assertEquals("ShelfId", nodes.get(1).getShelfId());
        } else {
            assertEquals("ShelfId", nodes.get(0).getShelfId());
            assertEquals("PortNeName", nodes.get(1).getNeName());
        }
    }
}