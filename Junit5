To achieve 100% code coverage for the `sendMessageAsync` method, especially focusing on the `else` conditional statements, you need to test both branches of the `else` block: one where `producerTopic` equals `ctiProducerTopic` and another where it doesn't.

Here's how you can write additional JUnit 5 test cases to cover these branches:

```java
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.clients.producer.SendResult;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.concurrent.CompletableFuture;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class EventsMessageListenerTest {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @Value("${topics.outbound.cti-event:none}")
    private String ctiProducerTopic = "cti-topic";

    @Value("${topics.outbound.callinfo-event:none}")
    private String producerTopic = "callinfo-topic";

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testSendMessageAsync_whenProducerTopicEqualsCtiProducerTopic() throws Exception {
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>(ctiProducerTopic, "key", "{\"ACTION\":\"someAction\",\"CALLCONTROLID\":123,\"CALLESTABLISHEDID\":456}");
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        RecordMetadata recordMetadata = new RecordMetadata(null, 0, 0, 0, 0L, 0, 0);
        SendResult<String, String> sendResult = new SendResult<>(producerRecord, recordMetadata);
        future.complete(sendResult);

        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Using reflection to access private method
        ReflectionTestUtils.invokeMethod(eventsMessageListener, "sendMessageAsync", producerRecord, "transactionId", producerRecord.value(), ctiProducerTopic, "insightName", 'Y');

        // Verify that the log statement is executed
        // Note: In actual testing, you may use a logging framework to verify log output
        verify(failedMessageService, never()).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar());
    }

    @Test
    public void testSendMessageAsync_whenProducerTopicNotEqualsCtiProducerTopic() throws Exception {
        ProducerRecord<String, String> producerRecord = new ProducerRecord<>(producerTopic, "key", "value");
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        RecordMetadata recordMetadata = new RecordMetadata(null, 0, 0, 0, 0L, 0, 0);
        SendResult<String, String> sendResult = new SendResult<>(producerRecord, recordMetadata);
        future.complete(sendResult);

        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Using reflection to access private method
        ReflectionTestUtils.invokeMethod(eventsMessageListener, "sendMessageAsync", producerRecord, "transactionId", producerRecord.value(), producerTopic, "insightName", 'Y');

        // Verify that the log statement is executed
        // Note: In actual testing, you may use a logging framework to verify log output
        verify(failedMessageService, never()).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar());
    }
}
```

### Explanation:

1. **testSendMessageAsync_whenProducerTopicEqualsCtiProducerTopic**: This test case covers the branch where `producerTopic` equals `ctiProducerTopic`. It simulates sending a message with a payload that includes JSON data and verifies that the log statement is executed without any failed message saving.

2. **testSendMessageAsync_whenProducerTopicNotEqualsCtiProducerTopic**: This test case covers the branch where `producerTopic` does not equal `ctiProducerTopic`. It verifies that the log statement is executed for this condition without saving any failed messages.

In these tests, we're primarily focusing on ensuring the log statements are reached and that no exceptions or failed message saves occur, which would indicate successful execution of the logic. For actual logging verification, you might consider using a logging framework that supports test assertions on log outputs.