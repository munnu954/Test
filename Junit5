The issue is occurring because there is no `HttpMessageConverter` registered in the `RestTemplate` to convert the JSON response to a `LinkAggregationResponse` object. To resolve this, you can add a `MappingJackson2HttpMessageConverter` to the `RestTemplate`.

Here is the updated code for the `AppConfig` class:

```java
@Configuration
public class AppConfig {
    Map<String, String> configData = new HashMap<>();

    @Value("${com.tcoms.linkaggregation.service.name}")
    String tcomsLinkAggregationServiceName;

    @Value("${com.tcoms.linkaggregation.service.url}")
    String tcomsLinkAggregationServiceNameUrl;

    @Bean("configMap")
    public Map<String, String> getConfigData() {
        configData.put("tcomsLinkAggregationServiceName", tcomsLinkAggregationServiceName);
        configData.put("tcomsLinkAggregationServiceNameUrl", tcomsLinkAggregationServiceNameUrl);
        return configData;
    }

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
        converter.setSupportedMediaTypes(Arrays.asList(MediaType.APPLICATION_JSON, MediaType.APPLICATION_OCTET_STREAM));
        return builder.setConnectTimeout(Duration.ofMillis(20000)).setReadTimeout(Duration.ofMillis(100000)).messageConverters(converter).build();
    }
}
```

In this updated `AppConfig` class, we have added a `MappingJackson2HttpMessageConverter` to the `RestTemplate`'s list of message converters. This converter will be used to convert the JSON response from the external service to a `LinkAggregationResponse` object.

With this change, the application should be able to successfully parse the JSON response and return the data as expected.