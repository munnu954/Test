Certainly! Here are the JUnit 5 test cases for the `applyPostingRules(Alarm alarm)` method of the `PostingRuleProcessingService` class, covering all branches for 100% code coverage:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Value;

public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private Alarm alarm;

    @Mock
    private PostingRule postingRule;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testApplyPostingRules_NoRules() {
        when(ruleLoadingService.getRuleMap()).thenReturn(new HashMap<>());

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertEquals(alarm, result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_NoMatch() {
        Map<String, PostingRule> ruleMap = new HashMap<>();
        ruleMap.put("rule1", postingRule);
        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(postingRule.matchFilter(anyMap())).thenReturn(false);

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertEquals(alarm, result);
        verify(ruleLoadingService, times(1)).getRuleMap();
        verify(postingRule, times(1)).matchFilter(anyMap());
    }

    @Test
    public void testApplyPostingRules_MatchFound() {
        Map<String, PostingRule> ruleMap = new HashMap<>();
        ruleMap.put("rule1", postingRule);
        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(postingRule.matchFilter(anyMap())).thenReturn(true);
        when(postingRule.getRulePriority()).thenReturn(1);
        when(postingRuleProcessingService.applyPostingRule(any(), any(), anyMap())).thenReturn(alarm);

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertEquals(alarm, result);
        verify(ruleLoadingService, times(1)).getRuleMap();
        verify(postingRule, times(1)).matchFilter(anyMap());
        verify(postingRuleProcessingService, times(1)).applyPostingRule(any(), any(), anyMap());
    }

    @Test
    public void testApplyPostingRules_HigherPriorityMatchFound() {
        PostingRule lowerPriorityRule = mock(PostingRule.class);
        PostingRule higherPriorityRule = mock(PostingRule.class);

        Map<String, PostingRule> ruleMap = new HashMap<>();
        ruleMap.put("rule1", lowerPriorityRule);
        ruleMap.put("rule2", higherPriorityRule);

        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(lowerPriorityRule.matchFilter(anyMap())).thenReturn(true);
        when(lowerPriorityRule.getRulePriority()).thenReturn(1);
        when(higherPriorityRule.matchFilter(anyMap())).thenReturn(true);
        when(higherPriorityRule.getRulePriority()).thenReturn(2);
        when(postingRuleProcessingService.applyPostingRule(any(), any(), anyMap())).thenReturn(alarm);

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertEquals(alarm, result);
        verify(ruleLoadingService, times(1)).getRuleMap();
        verify(lowerPriorityRule, times(1)).matchFilter(anyMap());
        verify(higherPriorityRule, times(1)).matchFilter(anyMap());
        verify(postingRuleProcessingService, times(1)).applyPostingRule(any(), eq(higherPriorityRule), anyMap());
    }
}
```

### Explanation:
1. **Setup**:
   - The `@BeforeEach` annotated `setUp` method initializes the mocks using `MockitoAnnotations.openMocks(this);`.

2. **Test Cases**:
   - **`testApplyPostingRules_NoRules`**: Tests the scenario when there are no rules in the `ruleLoadingService`. It verifies that the original alarm is returned.
   - **`testApplyPostingRules_NoMatch`**: Tests the scenario when no posting rule matches the alarm. It verifies that the original alarm is returned.
   - **`testApplyPostingRules_MatchFound`**: Tests the scenario when a matching rule is found. It verifies that the `applyPostingRule` method is called and the modified alarm is returned.
   - **`testApplyPostingRules_HigherPriorityMatchFound`**: Tests the scenario when multiple rules match and the highest priority rule is selected. It verifies that the rule with the highest priority is used to apply the posting rule.

These test cases cover all the branches of the `applyPostingRules(Alarm alarm)` method and ensure 100% code coverage.