Certainly! To achieve 100% code coverage for the `getAEnd` and `getZEnd` methods, we need to explore additional scenarios that haven't been covered by the existing test cases. Here are some new test cases:

1. **Test with Empty Lists**: Ensure the code handles scenarios where lists such as `circuitLst` or `clrComponent` are empty.

2. **Test with Null ClrComponents**: Verify behavior when `clrComponent` contains null entries.

3. **Test with Missing PortRef**: Check behavior when `PortChannel` exists but `PortRef` is missing.

4. **Complex Nested Structures**: Ensure the logic navigates through complex nested structures correctly.

Here's the additional JUnit 5 test code:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

public class CircuitDetailsProviderEdgeTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAEnd_WithEmptyCircuitLst() {
        String circuitId = "emptyCircuitLstId";
        String clli = "emptyClli";

        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData());

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetZEnd_WithEmptyClrComponentList() {
        String circuitId = "emptyClrComponentListId";
        String clli = "emptyClli";

        CircuitDetailResponse response = createMockCircuitDetailResponseWithEmptyClrComponent(clli);

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetAEnd_WithNullClrComponentEntry() {
        String circuitId = "nullClrComponentEntryId";
        String clli = "nullClli";

        CircuitDetailResponse response = createMockCircuitDetailResponseWithNullClrComponent(clli);

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetZEnd_WithMissingPortRef() {
        String circuitId = "missingPortRefId";
        String clli = "missingClli";

        CircuitDetailResponse response = createMockCircuitDetailResponseWithMissingPortRef(clli);

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetAEnd_WithComplexNestedStructure() {
        String circuitId = "complexNestedStructureId";
        String clli = "complexClli";

        CircuitDetailResponse response = createMockCircuitDetailResponseWithComplexStructure(clli);

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNotNull(result);
        assertFalse(result.getPortChannel().isEmpty());
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    private CircuitDetailResponse createMockCircuitDetailResponseWithEmptyClrComponent(String clli) {
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();

        Clr clr = new Clr();
        Path path = new Path();
        path.setClrComponent(new ArrayList<>()); // Empty ClrComponent
        PathLst pathLst = new PathLst();
        pathLst.setPath(List.of(path));
        clr.setPathLst(List.of(pathLst));

        circuit.setClr(List.of(clr));
        circuitLst.getCircuit().add(circuit);
        circuitData.setCircuitLst(List.of(circuitLst));
        response.setCircuitData(circuitData);

        return response;
    }

    private CircuitDetailResponse createMockCircuitDetailResponseWithNullClrComponent(String clli) {
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();

        Clr clr = new Clr();
        Path path = new Path();
        path.setClrComponent(List.of((ClrComponent) null)); // Contains null ClrComponent
        PathLst pathLst = new PathLst();
        pathLst.setPath(List.of(path));
        clr.setPathLst(List.of(pathLst));

        circuit.setClr(List.of(clr));
        circuitLst.getCircuit().add(circuit);
        circuitData.setCircuitLst(List.of(circuitLst));
        response.setCircuitData(circuitData);

        return response;
    }

    private CircuitDetailResponse createMockCircuitDetailResponseWithMissingPortRef(String clli) {
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("CHANNEL");
        EquipmentComp equipmentComp = new EquipmentComp();
        // No PortRef added to EquipmentComp
        clrComponent.setEquipmentComp(List.of(equipmentComp));

        List<ClrComponent> clrComponents = new ArrayList<>();
        clrComponents.add(clrComponent);
        Path path = new Path();
        path.setClrComponent(clrComponents);
        PathLst pathLst = new PathLst();
        pathLst.setPath(List.of(path));
        Clr clr = new Clr();
        clr.setPathLst(List.of(pathLst));

        circuit.setClr(List.of(clr));
        circuitLst.getCircuit().add(circuit);
        circuitData.setCircuitLst(List.of(circuitLst));
        response.setCircuitData(circuitData);

        return response;
    }

    private CircuitDetailResponse createMockCircuitDetailResponseWithComplexStructure(String clli) {
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("PORT");
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setSiteCode(clli);
        equipmentComp.setPortRef(List.of(portRef));
        clrComponent.setEquipmentComp(List.of(equipmentComp));

        List<ClrComponent> clrComponents = new ArrayList<>();
        clrComponents.add(clrComponent);
        Path path = new Path();
        path.setClrComponent(clrComponents);
        PathLst pathLst = new PathLst();
        pathLst.setPath(List.of(path));
        Clr clr = new Clr();
        clr.setPathLst(List.of(pathLst));

        circuit.setClr(List.of(clr));
        circuitLst.getCircuit().add(circuit);
        circuitData.setCircuitLst(List.of(circuitLst));
        response.setCircuitData(circuitData);

        return response;
    }
}
```

### Key Additions:

1. **Empty Lists**: Tests scenarios where lists like `circuitLst` or `clrComponent` are empty, ensuring your code handles these gracefully.

2. **Null Entries in Lists**: Tests cases where `clrComponent` contains `null` entries, verifying the method's robustness against unexpected data.

3. **Missing `PortRef`**: Tests behavior when `PortChannel` exists but `PortRef` is absent, ensuring the method returns `null` appropriately.

4. **Complex Nested Structures**: Tests that the method correctly navigates through complex nested structures to find valid `PortRef` data.

These cases further ensure that the `getAEnd` and `getZEnd` methods handle a wide variety of inputs and edge cases, contributing to comprehensive test coverage. Adjust the mock setup as necessary to fit your actual application's logic and structure.