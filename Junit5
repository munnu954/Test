import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

import com.vz.s360.vbg.eventledger.exception.InvalidRequestException;
import com.vz.s360.vbg.eventledger.model.InsightsAttributes;
import com.vz.s360.vbg.eventledger.model.InsightsRequestType;
import com.vz.s360.vbg.eventledger.model.MtnInsightsAttributes;
import com.vz.s360.vbg.eventledger.model.MtnInsightsRequest;
import com.vz.s360.vbg.eventledger.model.MtnInsightsSearchParam;
import com.vz.s360.vbg.eventledger.model.MtnInsightsSearchRequest;
import com.vz.s360.vbg.eventledger.model.ServiceHeader;

public class MtnInsightsValidatorTest {

    private static final String ERROR_MESSAGE = "LogVal MTN, Insight Category and Insight Name are required.";

    private MtnInsightsValidator validator;

    @Mock
    private ServiceHeader serviceHeader;

    @BeforeEach
    public void setUp() {
        validator = new MtnInsightsValidator();
    }

    @AfterEach
    public void tearDown() {
        validator = null;
    }

    @Test
    public void testValidate_WithEmptyKeyAttributesAndListKeyAttributes() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        request.setServiceHeader(serviceHeader);

        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidate_WithEmptyKeyAttributesAndNotEmptyListKeyAttributes() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        String[] listKeyAttributes = { "key1", "key2" };
        MtnInsightsAttributes[] attributes = new MtnInsightsAttributes[2];
        attributes[0] = createMtnInsightsAttributes();
        attributes[1] = createMtnInsightsAttributes();
        request.setListKeyAttributes(attributes);
        request.setServiceHeader(serviceHeader);

        Assertions.assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidate_WithNotEmptyKeyAttributesAndEmptyListKeyAttributes() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        request.setKeyAttributes(createMtnInsightsAttributes());
        request.setServiceHeader(serviceHeader);

        Assertions.assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidate_WithEmptyRequestType() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setKeyAttributes(createMtnInsightsAttributes());
        request.setServiceHeader(serviceHeader);

        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidateIterator_WithEmptyStringErrorMessage() {
        MtnInsightsAttributes attributes = createMtnInsightsAttributes();

        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, attributes, ERROR_MESSAGE));
    }

    @Test
    public void testValidateIterator_WithNullErrorMessage() {
        MtnInsightsAttributes attributes = createMtnInsightsAttributes();

        Assertions.assertThrows(NullPointerException.class, () -> validator.validateIterator(null, attributes, null));
    }

    @Test
    public void testValidateIterator_WithEmptyMtnAndEmptyInsightCategory() {
        MtnInsightsAttributes attributes = createMtnInsightsAttributes();
        attributes.setMtn("");
        attributes.setInsightCategory("");

        String errorMessage = "KeyAttributes MTN and Insight Category cannot be empty.";
        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validateIterator(errorMessage, attributes, ERROR_MESSAGE));
    }

    @Test
    public void testValidateIterator_WithEmptyMtnAndNotEmptyInsightCategory() {
        MtnInsightsAttributes attributes = createMtnInsightsAttributes();
        attributes.setMtn("");

        String errorMessage = "KeyAttributes MTN could not be empty.";
        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validateIterator(errorMessage, attributes, ERROR_MESSAGE));
    }

    @Test
    public void testValidateIterator_WithEmptyInsightCategoryAndNotEmptyMtn() {
        MtnInsightsAttributes attributes = createMtnInsightsAttributes();
        attributes.setInsightCategory("");

        String errorMessage = "KeyAttributes Insight Category could not be empty.";
        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validateIterator(errorMessage, attributes, ERROR_MESSAGE));
    }

    @Test
    public void testValidateIterator_WithEmptyInsightName() {
        MtnInsightsAttributes attributes = createMtnInsightsAttributes();
        attributes.setInsightName("");

        String errorMessage = "KeyAttributes Insight Name could not be empty.";
        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validateIterator(errorMessage, attributes, ERROR_MESSAGE));
    }

    @Test
    public void testValidateIterator_WithInvalidInsightName() {
        MtnInsightsAttributes attributes = createMtnInsightsAttributes();
        attributes.setInsightName("invalid");

        String errorMessage = "Invalid Insight Name";
        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validateIterator(errorMessage, attributes, ERROR_MESSAGE));
    }

    @Test
    public void testValidateIterator_WithValidInsightName() {
        MtnInsightsAttributes attributes = createMtnInsightsAttributes();

        Assertions.assertDoesNotThrow(() -> validator.validateIterator(ERROR_MESSAGE, attributes, ERROR_MESSAGE));
    }

    @Test
    public void testValidate_WithEmptyServiceRequest() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        request.setServiceHeader(serviceHeader);

        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidate_WithEmptyMtn() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        MtnInsightsSearchParam serviceRequest = new MtnInsightsSearchParam();
        serviceRequest.setEcpdId("ecpdId");
        serviceRequest.setInsightCategory(new String[] { "insightCategory" });
        serviceRequest.setInsightName(new String[] { "insightName" });
        request.setServiceRequest(serviceRequest);
        request.setServiceHeader(serviceHeader);

        String errorMessage = "ServiceRequest MTN cannot be empty.";
        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidate_WithEmptyInsightCategory() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        MtnInsightsSearchParam serviceRequest = new MtnInsightsSearchParam();
        serviceRequest.setMtn("mtn");
        serviceRequest.setEcpdId("ecpdId");
        serviceRequest.setInsightName(new String[] { "insightName" });
        request.setServiceRequest(serviceRequest);
        request.setServiceHeader(serviceHeader);

        String errorMessage = "ServiceRequest Insight Category cannot be empty.";
        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidate_WithEmptyInsightName() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        MtnInsightsSearchParam serviceRequest = new MtnInsightsSearchParam();
        serviceRequest.setMtn("mtn");
        serviceRequest.setEcpdId("ecpdId");
        serviceRequest.setInsightCategory(new String[] { "insightCategory" });
        request.setServiceRequest(serviceRequest);
        request.setServiceHeader(serviceHeader);

        String errorMessage = "ServiceRequest Insight Name cannot be empty.";
        Assertions.assertThrows(InvalidRequestException.class, () -> validator.validate(request));
    }

    @Test
    public void testValidate_WithEmptyEcpdId() {
        MtnInsightsSearchRequest request = new MtnInsightsSearchRequest();
        MtnInsightsSearchParam serviceRequest = new MtnInsightsSearchParam();
        serviceRequest.setMtn("mtn");
        serviceRequest.setInsightCategory(new String[] { "insightCategory" });
        serviceRequest.setInsightName(new String[] { "insightName" });
        request.setServiceRequest(serviceRequest);
        request.setService