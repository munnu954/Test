import com.jcraft.jsch.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class SSHServiceTest {

    @Mock
    private CollectorUtil collectorUtil;
    
    @Mock
    private DateUtil dateUtil;
    
    @Mock
    private LuceneCollectionAuditRepository luceneCollectionAuditRepo;
    
    @Mock
    private JSchFactory jschFactory;
    
    @Mock
    private OutputStreamCreator outputStreamCreator;
    
    @Mock
    private KafkaProducerService kafkaProducerService;
    
    @Mock
    private S3Service s3Service;
    
    @Mock
    private SpaceCollector sp;
    
    @Mock
    private ChannelSftp channelSftp;
    
    @Mock
    private Session session;

    @InjectMocks
    private SSHService sshService;

    private static final Logger LOGGER = LoggerFactory.getLogger(SSHService.class);

    @BeforeEach
    public void setup() throws JSchException {
        when(sp.getUserName()).thenReturn("username");
        when(sp.getUrl()).thenReturn("host");
        when(sp.getPassword()).thenReturn("password");
        when(sp.getPort()).thenReturn(22);

        when(jschFactory.createJSch()).thenReturn(new JSch());
        when(jschFactory.createJSch()).thenReturn(mock(JSch.class));
        when(session.openChannel("sftp")).thenReturn(channelSftp);
    }

    @Test
    public void testRetrieveData() throws Exception {
        when(FileUtil.getDirectory(sp.getInputFilePath())).thenReturn("remoteDir");
        when(FileUtil.getDirectory(sp.getOutputFilePath())).thenReturn("localDir");

        when(channelSftp.ls("remoteDir")).thenReturn(new Vector<>());

        boolean result = sshService.retrieveData(sp, "2023-01-01", "auditTopic");

        assertTrue(result);
        verify(session, times(1)).connect();
        verify(session, times(1)).disconnect();
        verify(channelSftp, times(1)).disconnect();
    }

    @Test
    public void testRetrieveAndProcessDirectory() throws Exception {
        Vector<ChannelSftp.LsEntry> files = new Vector<>();
        ChannelSftp.LsEntry fileEntry = mock(ChannelSftp.LsEntry.class);
        SftpATTRS attrs = mock(SftpATTRS.class);
        when(attrs.isDir()).thenReturn(false);
        when(fileEntry.getAttrs()).thenReturn(attrs);
        when(fileEntry.getFilename()).thenReturn("file.txt");
        files.add(fileEntry);

        when(channelSftp.ls("remoteDir")).thenReturn(files);
        Map<String, String> auditStatusMap = new HashMap<>();
        auditStatusMap.put("remoteDir/file.txt", "COLLECTION_FAILED");

        doReturn(auditStatusMap).when(sshService).getAuditStatusMap(files, "remoteDir");

        sshService.retrieveAndProcessDirectory(sp, "2023-01-01", "auditTopic", "remoteDir", "localDir", channelSftp);

        verify(channelSftp, times(1)).ls("remoteDir");
    }

    @Test
    public void testProcessDownloadedFile() throws Exception {
        List<String> filesList = new ArrayList<>();
        filesList.add("localDir/file.txt");

        when(ZipUtil.isZipFile("localDir/file.txt")).thenReturn(false);

        sshService.processDownloadedFile(sp, "2023-01-01", "auditTopic", "localDir/file.txt", "localDir");

        verify(s3Service, times(1)).pushToS3("localDir/file.txt", anyString());
        verify(kafkaProducerService, times(1)).writeMessage(anyString(), anyString(), anyString());
    }

    @Test
    public void testGetAuditStatusMap() {
        // Implement test for getAuditStatusMap
    }

    @Test
    public void testCreateAuditObject() {
        // Implement test for createAuditObject
    }

    @Test
    public void testRetrieveAttributesOfRemoteFile() throws SftpException {
        ChannelSftp.LsEntry file = mock(ChannelSftp.LsEntry.class);
        when(file.getFilename()).thenReturn("file.txt");

        sshService.retrieveAttributesOfRemoteFile(channelSftp, file, "remoteDir", "inputFilePath");

        verify(channelSftp, times(1)).stat("file.txt");
    }

    @Test
    public void testPartitionList() {
        List<String> list = Arrays.asList("one", "two", "three", "four", "five");
        List<List<String>> partitions = sshService.partitionList(list, 2);

        assertEquals(3, partitions.size());
        assertEquals(2, partitions.get(0).size());
        assertEquals(2, partitions.get(1).size());
        assertEquals(1, partitions.get(2).size());
    }

    @Test
    public void testGetJsch() throws JSchException {
        JSch jsch = sshService.getJsch("localhost", "password");

        assertNotNull(jsch);
        verify(jschFactory, times(1)).createJSch();
    }

    @Test
    public void testGetChannelSftp() throws JSchException, SftpException {
        when(session.openChannel("sftp")).thenReturn(channelSftp);

        ChannelSftp result = sshService.getChannelSftp(session, "remoteDir");

        assertEquals(channelSftp, result);
        verify(channelSftp, times(1)).cd("remoteDir");
    }

    @Test
    public void testCreateAuditObject() {
        SpaceCollector sp = mock(SpaceCollector.class);
        when(sp.getFileType()).thenReturn("fileType");
        when(sp.getDelimiter()).thenReturn(",");
        when(sp.getUrl()).thenReturn("url");
        when(sp.getPort()).thenReturn(22);
        when(sp.getId()).thenReturn("id");

        CollectionAudit audit = sshService.createAuditObject(sp, "auditInputFilePath", "auditJobStatus", "auditExceptions");

        assertNotNull(audit);
        assertEquals("auditInputFilePath", audit.getInputFilePath());
        assertEquals("auditJobStatus", audit.getJobStatus());
        assertEquals("auditExceptions", audit.getExceptions());
    }
}
