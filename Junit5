To write JUnit 5 test cases for the `entityManagerFactoryBean` method in the `DataSourceConfig` class, you need to mock the dependencies and verify that the method behaves as expected. Here's a sample test case using Mockito and Spring's test framework:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import javax.sql.DataSource;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@ExtendWith(SpringExtension.class)
public class DataSourceConfigTest {

    @Mock
    private DataSource falloutDataSource;

    @Mock
    private EntityManagerFactoryBuilder entityManagerFactoryBuilder;

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @BeforeEach
    void setUp() {
        dataSourceConfig = new DataSourceConfig();
    }

    @Test
    void testEntityManagerFactoryBean() {
        // Arrange
        when(entityManagerFactoryBuilder.dataSource(falloutDataSource)).thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.packages("com.verizon.vbg.ledger.entity")).thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.persistenceUnit("fallout-db")).thenReturn(entityManagerFactoryBuilder);
        LocalContainerEntityManagerFactoryBean factoryBean = mock(LocalContainerEntityManagerFactoryBean.class);
        when(entityManagerFactoryBuilder.build()).thenReturn(factoryBean);

        // Act
        LocalContainerEntityManagerFactoryBean result = dataSourceConfig.entityManagerFactoryBean(entityManagerFactoryBuilder, falloutDataSource);

        // Assert
        assertNotNull(result);
        verify(entityManagerFactoryBuilder, times(1)).dataSource(falloutDataSource);
        verify(entityManagerFactoryBuilder, times(1)).packages("com.verizon.vbg.ledger.entity");
        verify(entityManagerFactoryBuilder, times(1)).persistenceUnit("fallout-db");
        verify(entityManagerFactoryBuilder, times(1)).build();
    }
}
```

### Explanation:

1. **Annotations:**
   - `@ExtendWith(MockitoExtension.class)` and `@ExtendWith(SpringExtension.class)` are used to enable Mockito and Spring support in the test.
   - `@Mock` is used to create mock instances of `DataSource` and `EntityManagerFactoryBuilder`.
   - `@InjectMocks` is used to create an instance of `DataSourceConfig` and inject the mocked dependencies into it.

2. **Setup:**
   - The `setUp()` method initializes the `DataSourceConfig` instance.

3. **Test Method:**
   - The `testEntityManagerFactoryBean()` method tests the `entityManagerFactoryBean` method.
   - Mocks are set up to return the expected behavior when methods are called.
   - The `assertNotNull(result)` assertion checks that the returned `LocalContainerEntityManagerFactoryBean` is not null.
   - `verify()` is used to ensure the methods on the builder are called exactly once with the expected parameters.

This test case covers the `entityManagerFactoryBean` method and verifies that it behaves as expected given the mocked inputs.