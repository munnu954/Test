import org.apache.flink.api.common.functions.RichFlatMapFunction;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.metrics.IntCounter;
import org.apache.flink.util.Collector;
import org.json.JSONArray;
import org.json.JSONObject;

public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) {
        String[] lines = s.split(System.lineSeparator());
        String[] headerRow = lines[2].split(","); // Here, we are picking the 3rd line as the headers

        JSONObject obj = new JSONObject();

        for (int i = 0; i < 2; i++) { // Process line 1 and line 2 dynamically
            String line = lines[i].trim();
            if (line.startsWith("#")) {
                String[] parts = line.split("#");
                if (parts.length >= 2) {
                    String jsonkey = parts[0].replace("#", "").trim();
                    String jsonvalue = parts[1].trim();
                    obj.put(jsonkey, jsonvalue);
                }
            }
        }

        JSONArray dataArray = new JSONArray();
        for (int i = 3; i < lines.length; i++) { // Start from the 4th line (index 3) as data lines
            String[] data = lines[i].split(",");
            if (headerRow.length == data.length) {
                JSONObject dataObj = new JSONObject();
                for (int j = 0; j < data.length; j++) {
                    String jsonkey = headerRow[j].trim().replace("\"", "");
                    String jsonvalue = data[j].trim().replace("\"", "");
                    dataObj.put(jsonkey, jsonvalue);
                }
                dataArray.put(dataObj);
                this.successIntCounter.add(1);
            } else {
                this.failureIntCounter.add(1);
            }
        }
        obj.put("data", dataArray);
        collector.collect(obj.toString());
    }
}