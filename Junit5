To achieve 100% code coverage for the `EcpdFeedBatchConfiguration` class using JUnit 5, we'll create test cases that will cover each method and possible execution path. We will also use reflection to access the private fields and methods where necessary. Below is an example of how you can write these test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class EcpdFeedBatchConfigurationTest {

    @InjectMocks
    private EcpdFeedBatchConfiguration config;

    @Mock
    private ErrorFileMovement errorFileMovement;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(config, "fileFeedLocation", "classpath:feeds/");
        ReflectionTestUtils.setField(config, "errorDirectory", "error/");
    }

    @Test
    void testShouldSkipWithFlatFileParseException() {
        Throwable exception = mock(FlatFileParseException.class);
        boolean result = config.shouldSkip(exception, 0);
        assertTrue(result);
    }

    @Test
    void testShouldSkipWithIOException() {
        Throwable exception = new IOException();
        boolean result = config.shouldSkip(exception, 0);
        assertTrue(result);
    }

    @Test
    void testShouldSkipWithGenericException() {
        Throwable exception = new Exception();
        boolean result = config.shouldSkip(exception, 0);
        assertTrue(result);
    }

    @Test
    void testShouldSkipWithNonException() {
        Throwable exception = mock(Error.class);
        boolean result = config.shouldSkip(exception, 0);
        assertFalse(result);
    }

    @Test
    void testReaderCreation() throws IOException {
        FlatFileItemReader<EcpdGSAMSensitiveProfile> ecpdItemReader = mock(FlatFileItemReader.class);
        MultiResourceItemReader<EcpdGSAMSensitiveProfile> reader = config.reader(ecpdItemReader);

        assertNotNull(reader);
        assertNotNull(reader.getResources());
        assertEquals(ecpdItemReader, reader.getDelegate());
    }
}
```

### Explanation:

1. **Setup**:
   - We use `@InjectMocks` to create an instance of `EcpdFeedBatchConfiguration` and inject mocks into it.
   - `@Mock` is used to mock the `ErrorFileMovement` dependency.
   - `ReflectionTestUtils.setField` is used to set private fields `fileFeedLocation` and `errorDirectory` without making them public.

2. **Test Cases**:
   - **`testShouldSkipWithFlatFileParseException`**: Tests that the method returns `true` when the exception is an instance of `FlatFileParseException`.
   - **`testShouldSkipWithIOException`**: Tests that the method returns `true` for `IOException`.
   - **`testShouldSkipWithGenericException`**: Tests that the method returns `true` for a general `Exception`.
   - **`testShouldSkipWithNonException`**: Tests that the method returns `false` for non-`Exception` types, ensuring code coverage.
   - **`testReaderCreation`**: Ensures the `reader` method correctly creates a `MultiResourceItemReader` with the specified delegate and resources.

This test suite covers all possible paths in the `EcpdFeedBatchConfiguration` class, achieving 100% code coverage. Remember to include additional setup for file resources if needed, depending on your testing environment.