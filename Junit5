To achieve 100% code coverage for the `UserInsightsValidator` class, we need to write JUnit 5 test cases that cover all possible branches and conditions in the methods. Let's break down the test cases for each method, taking into account the different scenarios that need to be tested. This will include testing valid and invalid request types, handling of null values, and the validation of key attributes.

Here is a sample JUnit 5 test class for `UserInsightsValidator`:

```java
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

import static org.junit.jupiter.api.Assertions.*;

public class UserInsightsValidatorTest {

    private UserInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        validator = new UserInsightsValidator();
    }

    @Test
    public void testValidateUserInsightsRequest_ValidRequest() {
        // Arrange
        UserInsightsRequest request = new UserInsightsRequest();
        request.setServiceHeader(createValidServiceHeader());
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setKeyAttributes(createValidUserInsightsAttributes());

        // Act & Assert
        assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidateUserInsightsRequest_InvalidRequestType() {
        // Arrange
        UserInsightsRequest request = new UserInsightsRequest();
        request.setServiceHeader(createValidServiceHeader());
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);  // Invalid type

        // Act
        Executable executable = () -> validator.validate(request);

        // Assert
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, executable);
        assertEquals("Invalid request type ", exception.getMessage());
    }

    @Test
    public void testValidateUserInsightsRequest_NullKeyAttributes() {
        // Arrange
        UserInsightsRequest request = new UserInsightsRequest();
        request.setServiceHeader(createValidServiceHeader());

        // Act
        Executable executable = () -> validator.validate(request);

        // Assert
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, executable);
        assertEquals("Either KeyAttributes (Single) or ListKeyAttributes (Multiple) are required.", exception.getMessage());
    }

    @Test
    public void testValidateIterator_InvalidAttributes() {
        // Arrange
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId(null);  // Missing userId
        String errorMessage = null;

        // Act
        Executable executable = () -> validator.validateIterator(errorMessage, attributes, "KeyAttributes");

        // Assert
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, executable);
        assertEquals("KeyAttributes" + LOGGER_MESSAGE_USER_INSIGHTS, exception.getMessage());
    }

    @Test
    public void testValidateUserInsightsSearchRequest_ValidRequest() {
        // Arrange
        UserInsightsSearchRequest searchRequest = new UserInsightsSearchRequest();
        searchRequest.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId("validUserId");
        searchParam.setEcpdId("validEcpdId");
        searchParam.setInsightCategory(new String[]{"category"});
        searchParam.setInsightName(new String[]{"name"});
        searchRequest.setServiceRequest(searchParam);

        // Act & Assert
        assertDoesNotThrow(() -> validator.validate(searchRequest));
    }

    @Test
    public void testValidateUserInsightsSearchRequest_InvalidServiceRequest() {
        // Arrange
        UserInsightsSearchRequest searchRequest = new UserInsightsSearchRequest();
        searchRequest.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchRequest.setServiceRequest(searchParam);  // Missing fields

        // Act
        Executable executable = () -> validator.validate(searchRequest);

        // Assert
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, executable);
        assertEquals("ServiceRequest Ecpd Id, User Id, Insight Category and Insight Name are required.", exception.getMessage());
    }

    private ServiceHeader createValidServiceHeader() {
        ServiceHeader header = new ServiceHeader();
        header.setClientId("validClientId");
        header.setClientTransactionId("validTransactionId");
        header.setServiceName("validServiceName");
        return header;
    }

    private UserInsightsAttributes createValidUserInsightsAttributes() {
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("validUserId");
        attributes.setEcpId("validEcpdId");
        attributes.setInsightCategory("Category");
        attributes.setInsightName("Name");
        return attributes;
    }
}
```

### Key Points:

1. **Setup and Teardown**: The `setUp` method initializes the validator before each test case.
2. **Test Valid Scenarios**: Test cases that expect no exceptions to be thrown for valid requests.
3. **Test Invalid Scenarios**: Test cases that check for specific exceptions and messages when invalid data is provided.
4. **Helper Methods**: Methods like `createValidServiceHeader` and `createValidUserInsightsAttributes` are used to create valid objects needed for the tests.
5. **Assertions**: Using `assertThrows` to check for exceptions and `assertEquals` to confirm the exception messages.

This test suite covers all branches and conditions for the `UserInsightsValidator` class, ensuring comprehensive testing and validation.