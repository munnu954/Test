Here are the JUnit 5 test cases for the `saveEvents` method of the `EventManager` class, specifically targeting the `SystemException` catch block:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ExtendWith(MockitoExtension.class)
public class EventManagerTest {

    @InjectMocks
    private EventManager eventManager;

    @Mock
    private EventsRepository eventsRepository;

    @Mock
    private EventsValidator validator;

    private static final Logger LOGGER = LoggerFactory.getLogger(EventManagerTest.class);

    private EventSaveRequest request;

    @BeforeEach
    public void setUp() {
        request = new EventSaveRequest();
        // Initialize request object with necessary data
    }

    @Test
    public void testSaveEventsSystemException() throws Exception {
        // Mock the validator to do nothing
        doNothing().when(validator).validateInsert(request);

        // Mock the convertAndSaveToEvents to throw SystemException
        doThrow(new SystemException("System error occurred")).when(eventsRepository).save(any(EventsEntity.class));

        EventResponse response = eventManager.saveEvents(request);

        // Verify the status code and message in the response
        assertEquals("FAILURE_CODE", response.getStatus().getCode());
        assertEquals("System error occurred", response.getStatus().getMessage());

        // Verify that the appropriate methods were called
        verify(validator).validateInsert(request);
        verify(eventsRepository).save(any(EventsEntity.class));
    }
}
```

### Explanation:

1. **Mocks and InjectMocks**: We use Mockito to create a mock of `EventsRepository` and `EventsValidator`, and we inject these mocks into the `EventManager` class.

2. **setUp Method**: We initialize the required test data or objects before each test.

3. **Test Method**: 
   - We mock the `validateInsert` method to do nothing so that it doesn't throw any exceptions.
   - We simulate a `SystemException` being thrown by the `eventsRepository.save()` call.
   - After calling `saveEvents`, we assert that the response contains the expected failure status code and message.

4. **Verify**: We ensure that the mocked methods are called as expected, helping to confirm that the test is exercising the intended code paths.