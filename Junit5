import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

class SegmentProcessorTest {

    @Test
    void testProcess_NAUTILUS_SEGMENT() {
        // Create test data
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setType("NAUTILUS SEGMENT");
        circuitInfo.setCircuitName("Test Circuit");

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.getCircuitComp().add(new CircuitComponent(circuitInfo));

        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);

        // Call the process method
        SegmentProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);

        // Assert the result
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals(clrComponent.getType(), link.getLinkType());
        assertEquals(2, link.getAttributes().size());
        assertEquals("ntlsSegment", link.getAttributes().get(0).getName());
        assertEquals("Test Circuit", link.getAttributes().get(0).getValue());
        assertEquals("/site?id=123", link.getAttributes().get(0).getLink());
    }

    @Test
    void testProcess_NotNAUTILUS_SEGMENT() {
        // Create test data
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setType("Different Type");

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.getCircuitComp().add(new CircuitComponent(circuitInfo));

        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        AtomicInteger ukCount = new AtomicInteger(0);

        // Call the process method
        SegmentProcessor.getInstance().process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount);

        // Assert the result
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals(clrComponent.getType(), link.getLinkType());
        assertEquals(5, link.getAttributes().size());
        assertNotNull(link.getAttributes().stream().filter(a -> a.getName().equals("segmentName")).findFirst().orElse(null));
        assertNotNull(link.getAttributes().stream().filter(a -> a.getName().equals("type")).findFirst().orElse(null);
        assertNotNull(link.getAttributes().stream().filter(a -> a.getName().equals("serviceType")).findFirst().orElse(null);
        assertNotNull(link.getAttributes().stream().filter(a -> a.getName().equals("bandwidth")).findFirst().orElse(null);
        assertNotNull(link.getAttributes().stream().filter(a -> a.getName().equals("status")).findFirst().orElse(null);
    }
}