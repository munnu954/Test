import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;

class CableProcessorTest {

    private CableProcessor cableProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private int i;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setup() {
        cableProcessor = CableProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = mock(ClrComponent.class);
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        i = 1;
        ukCount = new AtomicInteger();
        sourceSys = "testSourceSys";
    }

    @Test
    void process_whenCommonWrapperConstantsCable_and_prevTypeChannel() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        CableComp cableComp = mock(CableComp.class);
        when(clrComponent.getCableComp()).thenReturn(Collections.singletonList(cableComp));

        Link prevLink = mock(Link.class);
        links.add(prevLink);

        PortRef portRef = mock(PortRef.class);
        portRef.setPortID("portID");
        portRef.setSiteCode("siteCode");
        portRef.setShelfID("shelfID");

        EquipmentComp equipmentComp = mock(EquipmentComp.class);
        equipmentComp.setPortRef(Collections.singletonList(portRef));

        ClrComponent prevClrComponent = mock(ClrComponent.class);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.CHANNEL);
        when(prevClrComponent.getEquipmentComp()).thenReturn(Collections.singletonList(equipmentComp));

        clrComponentList.add(prevClrComponent);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        assertEquals("portID", links.get(0).getSource());
        assertEquals("shelfID:0", links.get(0).getTarget());
        assertNotNull(getNode("shelfID:0", nodes));
    }

    @Test
    void process_whenCommonWrapperConstantsCable_and_prevTypeCircuit() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        CableComp cableComp = mock(CableComp.class);
        when(clrComponent.getCableComp()).thenReturn(Collections.singletonList(cableComp));

        Link prevLink = mock(Link.class);
        when(prevLink.getTarget()).thenReturn("target");
        links.add(prevLink);

        ClrComponent prevClrComponent = mock(ClrComponent.class);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.CIRCUIT);

        clrComponentList.add(prevClrComponent);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        assertEquals("target", nodes.get(0).getPortId());
        assertEquals(nodes.get(0).getPortId(), links.get(0).getTarget());
    }

    @Test
    void process_whenCommonWrapperConstantsCable_and_prevTypeCable() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        CableComp cableComp = mock(CableComp.class);
        when(clrComponent.getCableComp()).thenReturn(Collections.singletonList(cableComp));

        Link prevLink = mock(Link.class);
        when(prevLink.getTarget()).thenReturn("target");
        links.add(prevLink);

        PortRef portRef = mock(PortRef.class);
        portRef.setPortID("portID");
        portRef.setSiteCode("siteCode");
        portRef.setShelfID("shelfID");

        EquipmentComp equipmentComp = mock(EquipmentComp.class);
        equipmentComp.setPortRef(Collections.singletonList(portRef));

        ClrComponent prevClrComponent = mock(ClrComponent.class);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        when(prevClrComponent.getEquipmentComp()).thenReturn(Collections.singletonList(equipmentComp));

        clrComponentList.add(prevClrComponent);

        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        assertEquals("target", nodes.get(0).getPortId());
        assertEquals(nodes.get(0).getPortId(), links.get(0).getTarget());
    }

    private Node getNode(String shelfId, List<Node> nodes) {
        return nodes.stream()
                .filter(n -> n.getShelfId().equals(shelfId))
                .findFirst()
                .orElse(null);
    }
}