To achieve 100% code coverage for the conditional statement `if (null != prevCable.getTarget() && !prevCable.getTarget().equalsIgnoreCase(CommonWrapperConstants.DOUBLE_DASH))`, we need to cover all possible combinations of this condition:

1. **`prevCable.getTarget()` is not null and not equal to `CommonWrapperConstants.DOUBLE_DASH`.** (Already covered)
2. **`prevCable.getTarget()` is not null and equal to `CommonWrapperConstants.DOUBLE_DASH`.** (Already covered)
3. **`prevCable.getTarget()` is null.** 
4. **`prevCable.getTarget()` is non-null but equals `CommonWrapperConstants.DOUBLE_DASH` explicitly.**

Here are additional test cases to ensure we cover all branches:

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class PathProcessorCableTargetTest {

    private PathProcessor pathProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;
    private List<ClrComponent> clrComponentList;

    @BeforeEach
    public void setUp() {
        pathProcessor = PathProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = mock(Map.class);
        ukCount = new AtomicInteger(0);
        sourceSys = "testSource";
        clrComponentList = new ArrayList<>();
    }

    @Test
    public void testProcess_CableTargetIsNull() {
        // Setup ClrComponents
        ClrComponent prevClrComponent = createCableClrComponent(true);
        ClrComponent currentClrComponent = createClrComponent(CommonWrapperConstants.CIRCUIT);

        clrComponentList.add(prevClrComponent);
        clrComponentList.add(currentClrComponent);

        Link link = new Link(); // Target is null
        links.add(link);

        // Call the method
        pathProcessor.process(nodes, links, currentClrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify the result
        assertEquals(2, links.size());
        assertNotEquals(CommonWrapperConstants.DOUBLE_DASH, links.get(1).getSource());
    }

    @Test
    public void testProcess_CableTargetIsDoubleDash() {
        // Setup ClrComponents
        ClrComponent prevClrComponent = createCableClrComponent(true);
        ClrComponent currentClrComponent = createClrComponent(CommonWrapperConstants.CIRCUIT);

        clrComponentList.add(prevClrComponent);
        clrComponentList.add(currentClrComponent);

        Link link = new Link();
        link.setTarget(CommonWrapperConstants.DOUBLE_DASH); // Target is explicitly DOUBLE_DASH
        links.add(link);

        // Call the method
        pathProcessor.process(nodes, links, currentClrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify the result
        assertEquals(2, links.size());
        assertNotEquals(CommonWrapperConstants.DOUBLE_DASH, links.get(1).getSource());
    }

    private ClrComponent createClrComponent(String type) {
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(type);

        CircuitComp circuitComp = new CircuitComp();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("testCircuit");
        circuitComp.getCircuitInfo().add(circuitInfo);
        clrComponent.getCircuitComp().add(circuitComp);

        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("testPortId");
        equipmentComp.getPortRef().add(portRef);
        clrComponent.getEquipmentComp().add(equipmentComp);

        return clrComponent;
    }

    private ClrComponent createCableClrComponent(boolean isNotNull) {
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.CABLE);

        if (isNotNull) {
            CableComp cableComp = new CableComp();
            cableComp.setCableName("testCable");
            clrComponent.getCableComp().add(cableComp);
        }

        return clrComponent;
    }
}
```

### Explanation:
- **Test Cases:**
  - `testProcess_CableTargetIsNull`: Tests the scenario where the `prevCable.getTarget()` is `null`.
  - `testProcess_CableTargetIsDoubleDash`: Tests the scenario where the `prevCable.getTarget()` is explicitly set to `CommonWrapperConstants.DOUBLE_DASH`.

These tests should complete the coverage for the conditional statement, ensuring all branches are exercised. Adjustments might be needed based on your specific project setup and test environment.