To achieve 100% code coverage for the `if` conditional statement `if (i == clrComponentList.size()-1)` in the `TrunkProcessor` class, we need to create test cases that:

1. Ensure the current index `i` is the last index of `clrComponentList`.
2. Verify the behavior when this condition is true, including the creation and updating of the `prevLink` and `zEqtObject`.

Here's how you might write these test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class TrunkProcessorLastIndexTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private AtomicInteger ukCount;
    private Map<String, List<Node>> clliNodeMap;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;

    @BeforeEach
    public void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        ukCount = new AtomicInteger(0);
        clliNodeMap = new HashMap<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
    }

    @Test
    public void testProcessAtLastIndex() {
        // Set up components to reach the last index
        for (int j = 0; j < 3; j++) {
            ClrComponent component = new ClrComponent();
            component.setType("SEGEMENT");
            clrComponentList.add(component);
        }

        // Add a starting link
        Link initialLink = new Link();
        initialLink.setTarget("INITIAL_TARGET");
        links.add(initialLink);

        // Add corresponding Nodes
        Node initialNode = new Node();
        initialNode.setShelfId("INITIAL_TARGET");
        initialNode.setPortId("INITIAL_TARGET");
        nodes.add(initialNode);

        // Process the last component
        trunkProcessor.process(nodes, links, clrComponentList.get(clrComponentList.size() - 1), clrComponentList, clliNodeMap, 2, ukCount, "sourceSys");

        // Assertions
        assertEquals(1, links.size(), "The existing link should be updated.");
        assertNotNull(links.get(0).getTarget(), "The target of the link should be updated to the new PortRef ID.");
        assertTrue(links.get(0).getTarget().startsWith(CommonWrapperConstants.UNKNOWN), "The target should start with UNKNOWN.");
    }

    @Test
    public void testProcessNotAtLastIndex() {
        // Set up components to ensure i is not the last index
        for (int j = 0; j < 3; j++) {
            ClrComponent component = new ClrComponent();
            component.setType("SEGEMENT");
            clrComponentList.add(component);
        }

        // Add a starting link
        Link initialLink = new Link();
        initialLink.setTarget("INITIAL_TARGET");
        links.add(initialLink);

        // Add corresponding Nodes
        Node initialNode = new Node();
        initialNode.setShelfId("INITIAL_TARGET");
        initialNode.setPortId("INITIAL_TARGET");
        nodes.add(initialNode);

        // Process a component that is not the last
        trunkProcessor.process(nodes, links, clrComponentList.get(1), clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        // Assertions
        assertEquals(1, links.size(), "No additional link should be added if not processing the last element.");
        assertEquals("INITIAL_TARGET", links.get(0).getTarget(), "The target of the link should remain unchanged.");
    }

    private TrunkGroupComp createTrunkGroupCompWithCircuitInfo() {
        TrunkGroupComp trunkGroupComp = new TrunkGroupComp();
        CktLst cktLst = new CktLst();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("TestCircuit");
        circuitInfo.setType("TestType");
        circuitInfo.setStatus("Active");
        cktLst.setCircuitInfo(Collections.singletonList(circuitInfo));
        trunkGroupComp.setCktLst(Collections.singletonList(cktLst));
        return trunkGroupComp;
    }
}
```

### Explanation:

1. **`testProcessAtLastIndex`**:
   - Sets up `clrComponentList` with multiple components and processes the last component.
   - Ensures the `if` condition `i == clrComponentList.size()-1` is `true`.
   - Verifies that the `prevLink` is updated with a new `PortRef` and that the target is set to this new `PortRef` ID.

2. **`testProcessNotAtLastIndex`**:
   - Processes a component that is not at the last index of `clrComponentList`.
   - Ensures the `if` condition is `false`.
   - Verifies that the target of the existing link is not updated.

These test cases are designed to ensure that the logic within the specified `if` condition is executed and validated for both scenarios where the condition can evaluate to `true` or `false`. Adjust any object properties or logic according to your actual implementation details.