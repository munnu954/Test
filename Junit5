Sure, here's an example of a JUnit 5 test case that covers the specific block of code you mentioned in the `createAlarm(String msg)` method of the `AlarmRepositoryImpl` class:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryImplTest {

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNull_AlarmStateCleared() throws Exception {
        // Arrange
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String json = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        JsonNode jsonNode = objectMapper.readTree(json);

        // Act
        Alarm alarm = alarmRepositoryImpl.createAlarm(json);

        // Assert
        assertEquals(-1, alarm.getPerceivedSeverity());
    }
}
```

In this test case, we're covering the following scenario:

1. The `perceivedSeverity` is `null` or an empty string, and the `alarmState` is "cleared".
2. We mock the necessary dependencies (`PostGreDataBaseConfig`) to ensure that the test case runs independently.
3. We set up the mock behavior for the `getPerceivedSeverityMap()` and `getAlarmStateMap()` methods of the `PostGreDataBaseConfig` class.
4. We create a JSON string representing the input data for the `createAlarm()` method, where the `perceivedSeverity` is `null` and the `State` is "cleared".
5. We call the `createAlarm()` method with the JSON string and assert that the `perceivedSeverity` of the returned `Alarm` object is set to `-1`.

This test case ensures that the specific block of code you mentioned is covered and that the `perceivedSeverity` is set correctly when the conditions are met.