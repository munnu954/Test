import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.*;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.junit.jupiter.api.Test;

public class KafkaProducerServiceTest {

    @Test
    void testReadObject() throws IOException, ClassNotFoundException {
        // Mock KafkaProducer
        KafkaProducer<String, String> mockProducer = mock(KafkaProducer.class);

        // Create test data
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(new KafkaProducerService(mockProducer));
        byte[] serializedObject = byteArrayOutputStream.toByteArray();

        // Mock ObjectInputStream
        ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(serializedObject));

        // Invoke readObject using reflection
        KafkaProducerService kafkaProducerService = new KafkaProducerService();
        try {
            kafkaProducerService.getClass().getDeclaredMethod("readObject", ObjectInputStream.class).invoke(kafkaProducerService, objectInputStream);
        } catch (Exception e) {
            fail("Exception occurred while invoking readObject method");
        }

        // Verify mockProducer close method called
        verify(mockProducer).close();
    }

    @Test
    void testCreateProducerException() {
        KafkaProducerService kafkaProducerService = new KafkaProducerService();

        // Mock AppProperties exception
        AppProperties appProperties = mock(AppProperties.class);
        when(appProperties.setAndGetKafkaProducerSSLproperties()).thenThrow(new RuntimeException("Mocked exception"));

        // Set mock AppProperties instance
        kafkaProducerService.appProp = appProperties;

        // Verify RuntimeException thrown
        assertThrows(RuntimeException.class, kafkaProducerService::createProducer);
    }

}