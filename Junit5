To achieve 100% code coverage for the for loop inside the applyPostingRule method of the PostingRuleProcessingService class using JUnit5 and reflection, you can follow the below approach. 

1. Create a test class for the PostingRuleProcessingServiceTest.
2. Use reflection to access the private fields in the PostingRuleProcessingService class.
3. Mock the necessary dependencies such as ruleLoadingService, topoApiClient, and AlarmPostingUtils.
4. Write test cases to cover both branches of the for loop inside the applyPostingRule method.

Here is the sample code for the PostingRuleProcessingServiceTest class:

```java
import com.fasterxml.jackson.databind.JsonNode;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.InjectMocks;
import org.mockito.Spy;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.springframework.util.ReflectionUtils;

import java.lang.reflect.Field;
import java.util.HashMap;

import static org.mockito.Mockito.when;

@PrepareForTest({PostingRuleProcessingService.class})
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    PostingRuleProcessingService postingRuleProcessingService;

    @Spy
    RuleLoadingService ruleLoadingService;

    @Mock
    TopologyApiClient topoApiClient;

    @Mock
    AlarmPostingUtils utils;

    @Test
    public void testApplyPostingRule() {
        // Set up mock data
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mock the behavior of dependencies
        when(ruleLoadingService.getRuleMap()).thenReturn(new HashMap<>());
        
        // Set private fields using reflection
        Field ruleLoadingServiceField = ReflectionUtils.findField(PostingRuleProcessingService.class, "ruleLoadingService");
        ReflectionUtils.makeAccessible(ruleLoadingServiceField);
        ReflectionUtils.setField(ruleLoadingServiceField, postingRuleProcessingService, ruleLoadingService);

        // Similarly, set other private fields using reflection for topoApiClient, alarmedObjectExpression, etc.

        // Mock the response from the topoApiClient
        when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, "componentId")).thenReturn(null);

        // Mock the behavior of AlarmPostingUtils
        when(utils.evaluateExpression("expression", new HashMap<>())).thenReturn("result");

        // Call the method to test
        postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verify the behavior as needed
    }
}
```

You can follow a similar approach to set private fields using reflection and mock dependencies to cover different branches of the for loop in the applyPostingRule method. Remember to mock the necessary behavior to test all scenarios in the loop.