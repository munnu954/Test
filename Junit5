To achieve 100% code coverage, you need to add a test case that covers the branch where the `response` from `restClientUtil.callEndpoint` is not `null`. This will ensure both branches of the conditional statement `if (null != response)` are tested. Here's how you can add this additional test case:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Field;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpMethod;

public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    private static final String VALID_RESPONSE = "{\"field\":\"value\"}";
    private static final String BASE_URL = "http://mockServiceName";
    private static final String CKT_DETAIL_URI = "/details?circuitId=#circuitId#&sourceSys=#sourceSys#";

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        setPrivateField(circuitDetailsProvider, "cktDetailUri", CKT_DETAIL_URI);
        setPrivateField(circuitDetailsProvider, "cktDetServiceName", "mockServiceName");
    }

    private void setPrivateField(Object targetObject, String fieldName, Object value) throws Exception {
        Field field = targetObject.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(targetObject, value);
    }

    @Test
    public void testGetCircuitDetails_AllFieldsProvided() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_NoPhyModel() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = null;

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_NullResponse() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(null);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_EmptyCircuitIdAndSourceSys() {
        // Arrange
        String circuitId = null;
        String sourceSys = null;
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", CommonWrapperConstants.EMTPY)
                .replace("#sourceSys#", CommonWrapperConstants.EMTPY) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_NonNullResponse() {
        // Arrange
        String circuitId = "456";
        String sourceSys = "sys2";
        String cnd = "anotherCnd";
        String phyModel = "anotherPhyModel";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        assertEquals("value", response.getField()); // Assuming the response JSON maps to a field in CircuitDetailResponse
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }
}
```

### Explanation of the Additional Test Case:

- **`testGetCircuitDetails_NonNullResponse`**: This test case ensures the branch where the `response` is not `null` is covered. It assumes that the `CircuitDetailResponse` class has a method `getField()` to retrieve the value from the `VALID_RESPONSE` JSON string.

- **Assertions**: It checks that the `CircuitDetailResponse` object is not `null` and verifies that the field's value matches the expected value from the JSON response.

This setup ensures that both the `null` and non-`null` branches of the `if` statement are tested, achieving full branch coverage.