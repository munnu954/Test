import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.apache.pulsar.client.api.PulsarClientBuilder;
import org.apache.pulsar.client.api.PulsarClientBuilderCustomizer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.File;

@ExtendWith(MockitoExtension.class)
public class PulsarSslConfigurationTest {

    @InjectMocks
    private PulsarSslConfiguration pulsarSslConfiguration;

    @Mock
    private PulsarClientBuilder pulsarClientBuilder;

    private String certificatesLoc = "/path/to/certificates";

    @BeforeEach
    public void setUp() {
        // Using ReflectionTestUtils to set the private field
        ReflectionTestUtils.setField(pulsarSslConfiguration, "certificatesLoc", certificatesLoc);
    }

    @Test
    public void testPulsarClientPemSslCustomizer() {
        PulsarClientBuilderCustomizer customizer = pulsarSslConfiguration.pulsarClientPemSslCustomizer();
        assertNotNull(customizer);

        customizer.customize(pulsarClientBuilder);

        verify(pulsarClientBuilder).allowTlsInsecureConnection(false);
        verify(pulsarClientBuilder).enableTlsHostnameVerification(false);
        verify(pulsarClientBuilder).authentication(any());
        verify(pulsarClientBuilder).tlsTrustCertsFilePath(certificatesLoc + File.separator + "ca.cert.pem");
        verify(pulsarClientBuilder).tlsKeyFilePath(certificatesLoc + File.separator + "jpsv.key-pk8.pem");
        verify(pulsarClientBuilder).tlsCertificateFilePath(certificatesLoc + File.separator + "jpsv.cert.pem");
    }
}
