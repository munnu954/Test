To create complete JUnit 5 test cases for a class annotated with `@Embeddable` and `@EqualsAndHashCode`, we aim to cover the aspects that the `@EqualsAndHashCode` impacts - that is, equality and hash code generation. For an `@Embeddable` class, we can write tests that ensure the class can be instantiated and used as intended, but typically, specific behavior for persistence or embedding is tied to the ORM framework and database which goes beyond the scope that can be directly tested using JUnit.

Below you will find an example of how to write JUnit 5 test cases for the `FlinkJobCompositePK` class to achieve maximum coverage:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class FlinkJobCompositePKTest {

    @Test
    void testNoArgsConstructor() {
        FlinkJobCompositePK flinkJobCompositePK = new FlinkJobCompositePK();
        assertNotNull(flinkJobCompositePK);
    }

    @Test
    void testAllArgsConstructor() {
        FlinkJobCompositePK flinkJobCompositePK = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        assertEquals("flinkJarFilePath", flinkJobCompositePK.getFlinkJarFilePath());
        assertEquals("sharedLocationJarFilePath", flinkJobCompositePK.getSharedLocationJarFilePath());
        assertEquals(FlinkFileTypes.CSV, flinkJobCompositePK.getType());
        assertTrue(flinkJobCompositePK.getEnabled());
    }

    @Test
    void testEqualsSameObject() {
        FlinkJobCompositePK flinkJobCompositePK1 = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        assertTrue(flinkJobCompositePK1.equals(flinkJobCompositePK1));
    }

    @Test
    void testEqualsDifferentObjectsEqualFields() {
        FlinkJobCompositePK flinkJobCompositePK1 = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        FlinkJobCompositePK flinkJobCompositePK2 = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        assertTrue(flinkJobCompositePK1.equals(flinkJobCompositePK2));
    }

    @Test
    void testEqualsDifferentObjectsNotEqualFields() {
        FlinkJobCompositePK flinkJobCompositePK1 = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        FlinkJobCompositePK flinkJobCompositePK2 = new FlinkJobCompositePK(
                "differentFlinkJarFilePath", "differentSharedLocationJarFilePath", FlinkFileTypes.XML, false);
        assertFalse(flinkJobCompositePK1.equals(flinkJobCompositePK2));
    }

    @Test
    void testEqualsAgainstNull() {
        FlinkJobCompositePK flinkJobCompositePK = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        assertFalse(flinkJobCompositePK.equals(null));
    }

    @Test
    void testEqualsAgainstDifferentClass() {
        FlinkJobCompositePK flinkJobCompositePK = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        Object otherClass = new Object();
        assertFalse(flinkJobCompositePK.equals(otherClass));
    }

    @Test
    void testHashCodeConsistency() {
        FlinkJobCompositePK flinkJobCompositePK = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        int expectedHashCode = flinkJobCompositePK.hashCode();
        assertEquals(expectedHashCode, flinkJobCompositePK.hashCode());
    }

    @Test
    void testHashCodeEquality() {
        FlinkJobCompositePK flinkJobCompositePK1 = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        FlinkJobCompositePK flinkJobCompositePK2 = new FlinkJobCompositePK(
                "flinkJarFilePath", "sharedLocationJarFilePath", FlinkFileTypes.CSV, true);
        assertEquals(flinkJobCompositePK1.hashCode(), flinkJobCompositePK2.hashCode());
    }

    // Additional tests can be added for getters and setters if they contain additional logic
}
```

In these tests:

- We're checking that the object can be constructed properly with the all-args and no-args constructors.
- We're ensuring that the `equals` method behaves correctly when comparing the same object, different objects with the same and different fields, null, and objects of different classes.
- We're validating that the `hashCode` method returns consistent values for the same object and identical values for two objects that are 'equal'.

To truly achieve 100% coverage, you need to think about all potential edge cases and paths through your code. The above code may need to scale up if you add more logic to your getters, setters, or more constructors with different parameters. Remember that in some cases, 100% code coverage does not guarantee bug-free code but shows that every line of code is tested, which might not cover all the conceivable scenarios.