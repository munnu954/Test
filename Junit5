The `InvocationTargetException` typically occurs when the method being invoked through reflection throws an exception. To handle this, we need to catch the exception and inspect the cause. Additionally, ensure that your mocks are correctly configured for the methods being tested.

Here is the updated and refactored JUnit 5 test case code:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class MessageReaderServiceTest {

    @Mock
    VMBParams params;

    @Mock
    ApolloServiceHealth healthChecker;

    @Mock
    RuleLoadingService rulesLoadingService;

    MessageReaderService messageReaderService;

    @BeforeEach
    public void setup() {
        messageReaderService = new MessageReaderService();
        messageReaderService.params = params;
        messageReaderService.healthChecker = healthChecker;
        messageReaderService.rulesLoadingService = rulesLoadingService;
    }

    @Test
    public void testProcessMessageFromRuleNotifierVMB() {
        // Mock behavior for successful processMessageFromRuleNotifierVMB()
        when(params.getVMBConnectionFailureThresholdCount()).thenReturn(3);

        assertDoesNotThrow(() -> messageReaderService.processMessageFromRuleNotifierVMB());
    }

    @Test
    public void testRetryReaderConnection() throws NoSuchMethodException {
        Method method = MessageReaderService.class.getDeclaredMethod("retryReaderConnection");
        method.setAccessible(true);

        // Mock behavior for retryReaderConnection()
        when(params.getVMBConnectionFailureThresholdCount()).thenReturn(3);

        assertDoesNotThrow(() -> {
            try {
                method.invoke(messageReaderService);
            } catch (InvocationTargetException e) {
                throw e.getCause();
            }
        });
    }
}
```

### Explanation:
1. **Setup Mocks and Service:**
   - The `@Mock` annotations create mock objects.
   - The `@BeforeEach` method sets up the `MessageReaderService` instance and injects the mocks into it.

2. **Test `processMessageFromRuleNotifierVMB`:**
   - Mocks the method `getVMBConnectionFailureThresholdCount` to return `3`.
   - Uses `assertDoesNotThrow` to ensure no exceptions are thrown during the method call.

3. **Test `retryReaderConnection`:**
   - Obtains the `retryReaderConnection` method using reflection and makes it accessible.
   - Mocks the method `getVMBConnectionFailureThresholdCount` to return `3`.
   - Uses `assertDoesNotThrow` to invoke the method and handle any potential `InvocationTargetException` by rethrowing the cause of the exception.

This approach ensures that the tests will correctly handle any exceptions thrown by the methods being tested.