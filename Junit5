@Test
void parseWithValidJsonFieldContainingSubfield() throws Exception {
    // Arrange
    String expression = "%attribute1:details.fullName%";
    srcMap.put("details", Map.of("fullName", "John Doe"));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("John Doe", result);
}

@Test
void parseWithValidArrayIndexAndSubfield() throws Exception {
    // Arrange
    String expression = "%attribute1: details.names[1].firstName%";
    srcMap.put("details", Map.of("names", List.of(Map.of("firstName", "John"), Map.of("firstName", "Jane"))));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("Jane", result);
}

@Test
void parseWithInvalidJsonFieldAndValidFallbackValue() throws Exception {
    // Arrange
    String expression = "%attribute1:details.unknown%";
    srcMap.put("details", Map.of("name", "John"));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "fallback");
    
    // Assert
    assertEquals("fallback", result);
}

@Test
void parseWithInvalidJsonFieldAndEmptyFallbackValue() throws Exception {
    // Arrange
    String expression = "%attribute1:details.unknown%";
    srcMap.put("details", Map.of("name", "John"));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void parseWithInvalidArrayIndexAndValidFallbackValue() throws Exception {
    // Arrange
    String expression = "%attribute1:names[2]%";
    srcMap.put("names", List.of("John", "Jane"));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "fallback");
    
    // Assert
    assertEquals("fallback", result);
}

@Test
void parseWithInvalidArrayIndexAndEmptyFallbackValue() throws Exception {
    // Arrange
    String expression = "%attribute1:names[2]%";
    srcMap.put("names", List.of("John", "Jane"));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void parseWithInvalidJsonFormatAndValidFallbackValue() throws Exception {
    // Arrange
    String expression = "%attribute1:details%";
    srcMap.put("details", "invalid format");
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "fallback");
    
    // Assert
    assertEquals("fallback", result);
}

@Test
void parseWithInvalidJsonFormatAndEmptyFallbackValue() throws Exception {
    // Arrange
    String expression = "%attribute1:details%";
    srcMap.put("details", "invalid format");
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}

@Test
void parseWithNoMatchesAndValidFallbackValue() throws Exception {
    // Arrange
    String expression = "%nonExistent%";
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "fallback");
    
    // Assert
    assertEquals("fallback", result);
}

@Test
void parseWithNoMatchesAndEmptyFallbackValue() throws Exception {
    // Arrange
    String expression = "%nonExistent%";
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");
    
    // Assert
    assertEquals("", result);
}