To write JUnit 5 test cases specifically targeting the lines you mentioned in the `parse` method, we need to create scenarios that will execute those lines of code. Below are the test cases that cover the specified lines:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AlarmPostingUtilsTest {

    @BeforeAll
    public static void setup() {
        // Mocking the ObjectMapper to avoid actual JSON processing
        RulesConstants.objectMapper = Mockito.mock(com.fasterxml.jackson.databind.ObjectMapper.class);
    }

    @Test
    public void testParseWithValidArrayIndex() throws JsonProcessingException {
        String value = "Hello %names[1]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("Jane", "John"));

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello John", result);
    }

    @Test
    public void testParseWithArrayIndexOutOfBounds() throws JsonProcessingException {
        String value = "Hello %names[10]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("Jane", "John"));

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello ", result);
    }

    @Test
    public void testParseWithInvalidArrayIndex() throws JsonProcessingException {
        String value = "Hello %names[-1]%";
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("names", List.of("Jane", "John"));

        String result = AlarmPostingUtils.parse(value, srcMap, "rule1");
        assertEquals("Hello ", result);
    }
}
```

### Explanation

1. **testParseWithValidArrayIndex**: This test case creates a scenario where a valid array index is used within the placeholder. The `value` string contains `%names[1]%`, which should be replaced with "John" from the `srcMap`. This will cover the lines where `arrayIndexInt` is a valid index.

2. **testParseWithArrayIndexOutOfBounds**: This test case creates a scenario where the array index is out of bounds. The `value` string contains `%names[10]%`, but the `srcMap` only has two elements in the `names` list. This will cover the lines where the index is invalid and out of the list's bounds, resulting in the replacement with an empty string.

3. **testParseWithInvalidArrayIndex**: This test case creates a scenario where the array index is negative. The `value` string contains `%names[-1]%`, which is an invalid index. This will also cover the lines where the index is invalid and negative, resulting in the replacement with an empty string.

These test cases ensure that the specified lines in the `parse` method are executed and validated for both valid and invalid scenarios.