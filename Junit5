```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.mockito.AdditionalMatchers.aryEq;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class CircuitDetailsProviderTest {

    private static final String CIRCUIT_ID = "cktId";
    private static final String SOURCE_SYS = "srcSys";
    private static final String CND = "cnd";
    private static final String PHY_MODEL = "phyMod";

    @InjectMocks
    CircuitDetailsProvider circuitDetailsProvider;

    @Spy
    Gson gson = new GsonBuilder().disableHtmlEscaping().create();

    @Mock
    RestClientUtil restClientUtil;

    @Mock
    Map<String, String> circuitDetailResponseMapMock;

    @Test
    public void testNullResponse() {
        when(restClientUtil.callEndpoint(any(String.class), any(HttpMethod.class), any(Map.class)))
                .thenReturn(null);

        circuitDetailsProvider.getCircuitDetails(CIRCUIT_ID, SOURCE_SYS, CND, PHY_MODEL);

        verify(gson, times(0)).fromJson(any(String.class), any(Class.class));
    }

    @Test
    public void testNonNullResponse() {
        when(restClientUtil.callEndpoint(any(String.class), any(HttpMethod.class), any(Map.class)))
                .thenReturn("response");

        circuitDetailsProvider.getCircuitDetails(CIRCUIT_ID, SOURCE_SYS, CND, PHY_MODEL);

        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        verify(gson, times(1)).fromJson(argumentCaptor.capture(), eq(CircuitDetailResponse.class));

        assertThat(argumentCaptor.getValue(), is("response"));
    }

    @Test
    public void testCallEndpoint() {
        String BASE_URL = "http://cktDetServiceName";
        String CKTDET_URI = "/cktDetUri";

        Map<String, String> headerMap = new HashMap<>();
        CircuitDetailsProvider spyCircuitDetailsProvider = new CircuitDetailsProvider();
        spyCircuitDetailsProvider.cktDetServiceName = "cktDetServiceName";
        spyCircuitDetailsProvider.cktDetailUri = CKTDET_URI;
        spyCircuitDetailsProvider.restClientUtil = restClientUtil;
        spyCircuitDetailsProvider.gson = gson;

        when(restClientUtil.callEndpoint(any(String.class), any(HttpMethod.class), aryEq(headerMap)))
                .thenReturn("response");

        spyCircuitDetailsProvider.getCircuitDetails(CIRCUIT_ID, SOURCE_SYS, CND, PHY_MODEL);
        ArgumentCaptor<String> finalUrlCaptor = ArgumentCaptor.forClass(String.class);

        final String expectedUrl = "http://"
                + spyCircuitDetailsProvider.cktDetServiceName
                + spyCircuitDetailsProvider.cktDetailUri
                .replace("#circuitId#", CIRCUIT_ID)
                .replace("#sourceSys#", SOURCE_SYS)
                + "&cnd=" + CND + "&phyModel=" + PHY_MODEL;

        verify(restClientUtil, times(1)).callEndpoint(finalUrlCaptor.capture(), eq(HttpMethod.GET), aryEq(headerMap));

        assertEquals(finalUrlCaptor.getValue(), expectedUrl);
    }

    private void assertEquals(String actual, String expected) {
        assertThat(actual, is(expected));
    }
}
```