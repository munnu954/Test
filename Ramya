private Map<String, String> getAuditStatusMap(Vector<ChannelSftp.LsEntry> files, String remoteDirectory) {
    List<String> filePaths = files.stream()
        .filter(file -> !file.getAttrs().isDir())
        .map(file -> remoteDirectory + file.getFilename()) // Use absolute file path
        .collect(Collectors.toList());

    // Function to partition the list into sublists of specified size
    List<List<String>> partitionedFilePaths = partitionList(filePaths, 1000);

    Map<String, String> auditStatusMap = new HashMap<>();

    for (List<String> chunk : partitionedFilePaths) {
        List<CollectionAudit> audits = lucenceColletionAuditRepo.findLatestByFilePaths(chunk);
        Map<String, String> chunkAuditStatusMap = audits.stream()
            .filter(audit -> audit != null)
            .collect(Collectors.toMap(audit -> audit.getInputFilePath(), audit -> audit.getJobStatus()));
        auditStatusMap.putAll(chunkAuditStatusMap);
    }

    return auditStatusMap;
}

private <T> List<List<T>> partitionList(List<T> list, int size) {
    List<List<T>> partitions = new ArrayList<>();
    for (int i = 0; i < list.size(); i += size) {
        partitions.add(list.subList(i, Math.min(i + size, list.size())));
    }
    return partitions;
}
