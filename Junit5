In order to cover the mentioned block of code for 100% code coverage, you can create a test case that sets up the necessary conditions to enter that specific block. Here is an example of a JUnit 5 test case that covers that block:

```java
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryTest {
    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
        env = mock(Environment.class);
        alarmPostingUtils = mock(AlarmPostingUtils.class);
        alarmPostingConstants = mock(AlarmPostingConstants.class);
        when(env.getProperty(Mockito.anyString())).thenReturn("testValue");
        ReflectionTestUtils.setField(alarmPostingUtils, "env", env);
    }

    @Test
    void testCreateAlarm() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeМар = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);
        when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        JsonNode json = mock(JsonNode.class);
        String j = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        json = obj.readTree(j);
        alarmRepositoryImpl.createAlarm(j);

        // Test the block that sets perceivedSeverity to -1
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        Alarm result = alarmRepositoryImpl.createAlarm(j);
        assertEquals(-1, result.getPerceivedSeverity());

        // Additional assertions can be added as needed
    }

}
```

In this test case, we are setting up the necessary conditions to enter the block where the `perceivedSeverity` is set to -1 by mocking the `postgresConf` to return "cleared" for `getAlarmStateCleared()`. By doing this, we can cover that specific block of code and achieve 100% code coverage for the `createAlarm()` method in `AlarmRepositoryImpl` class. 

Make sure to add additional assertions and test cases to cover other parts of the `createAlarm()` method as needed for thorough testing.