import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;

import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class CorsAlarmLifecycleProcessingServiceTest {

    private static final int expiryDurationMinutes = 30;

    @Test
    void testProcessAlarm_expiredAlarmActive() {
        // Given
        Long lastID = 0L;
        OffsetDateTime currentTime = OffsetDateTime.now();
        OffsetDateTime expiryTime = currentTime.minusMinutes(expiryDurationMinutes + 1);

        CbrsSuppressionAlarm alarm = new CbrsSuppressionAlarm();
        alarm.setID(1L);
        alarm.setSuppressionKey("key");
        alarm.setExpiryTime(expiryTime);
        alarm.setSuppressionActive(true);

        ArgumentCaptor<OffsetDateTime> currentTimeCaptor = ArgumentCaptor.forClass(OffsetDateTime.class);
        ArgumentCaptor<Long> lastIDCaptor = ArgumentCaptor.forClass(Long.class);

        when(cbrsSuppressionRepo.findExpiredAlarmsWithLimit(currentTimeCaptor.capture(), lastIDCaptor.capture())).thenReturn(List.of(alarm));
        when(generateCbrsFloodAlarmService.clearCbrsFloodAlarm(anyString())).thenReturn("cleared");

        // When
        Long result = corsAlarmLifecycleProcessingService.processAlarm(lastID);

        // Then
        assertEquals(alarm.getID(), result);
        assertEquals(currentTimeCaptor.getValue().toEpochSecond(), currentTime.toEpochSecond());

        assertEquals(lastID, lastIDCaptor.getValue());

        verify(generateCbrsFloodAlarmService, times(1)).clearCbrsFloodAlarm(anyString());
        verify(cbrsSuppressionRepo, times(1)).resetAlarmDetails(alarm.getSuppressionKey());

        verifyNoMoreInteractions(corsSuppressionRepo, generateCbrsFloodAlarmService);
    }
}