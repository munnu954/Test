package com.example.service;

import com.example.dto.SpaceCollectorDto;
import com.example.model.SpaceCollector;
import com.example.repository.SpaceCollectorLuceneRepository;
import com.example.transformer.Transformer;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class SpaceCollectorService {

    @Autowired
    private SpaceCollectorLuceneRepository spaceCollectorLuceneRepository;

    @Autowired
    private Transformer transformer;

    /**
     * Converts a SpaceCollector object to a SpaceCollectorDto object.
     *
     * @param spaceCollector The SpaceCollector object to be converted.
     * @return The converted SpaceCollectorDto object.
     */
    public SpaceCollectorDto convertToDto(SpaceCollector spaceCollector) {
        SpaceCollectorDto dto = new SpaceCollectorDto();
        
        // Map fields from SpaceCollector to SpaceCollectorDto
        dto.setId(spaceCollector.getId());
        dto.setUrl(spaceCollector.getUrl());
        dto.setSshPublicKey(spaceCollector.getSshPublicKey());
        dto.setSshPrivateKey(spaceCollector.getSshPrivateKey());
        dto.setInputFilePath(spaceCollector.getInputFilePath());
        dto.setOutputFilePath(spaceCollector.getOutputFilePath());
        dto.setConnectionType(spaceCollector.getConnectionType());
        dto.setEnabled(spaceCollector.isEnabled());
        dto.setPassword(spaceCollector.getPassword());
        dto.setPort(spaceCollector.getPort());
        dto.setUserName(spaceCollector.getUserName());
        dto.setPollingDuration(spaceCollector.getPollingDuration());
        dto.setClusterState(spaceCollector.getClusterState());
        dto.setFileType(spaceCollector.getFileType());
        dto.setLastSuccessfulCollection(spaceCollector.getLastSuccessfulCollection());
        dto.setLastSuccessfulTransformation(spaceCollector.getLastSuccessfulTransformation());
        
        // Map any new fields (if any)
        // e.g., dto.setNewField1(spaceCollector.getNewField1());

        return dto;
    }

    /**
     * Searches for SpaceCollectors based on the provided SpaceCollector criteria.
     *
     * @param spaceCollector The criteria to search for SpaceCollectors.
     * @return A list of matching SpaceCollectors.
     * @throws JSONException If there is an error in JSON transformation.
     */
    public List<SpaceCollectorDto> search(SpaceCollector spaceCollector) throws JSONException {
        JSONObject searchSpaceCollector = transformer.transformToJSONObject(spaceCollector);
        JSONObject transformedToLucene = transformer.transformToLucene(searchSpaceCollector);
        
        List<SpaceCollector> spaceCollectorList = spaceCollectorLuceneRepository.findByQuery(transformedToLucene.toString());
        
        // Convert List<SpaceCollector> to List<SpaceCollectorDto>
        return spaceCollectorList.stream()
            .map(this::convertToDto)
            .collect(Collectors.toList());
    }

    /**
     * Checks the status based on the provided URL.
     *
     * @param url The URL to check status.
     * @return A list of SpaceCollectorDtos.
     * @throws JSONException If there is an error in JSON transformation.
     */
    public List<SpaceCollectorDto> checkStatus(String url) throws JSONException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("url", url);
        
        JSONObject transformedToLucene = transformer.transformToLucene(jsonObject);
        
        List<SpaceCollector> spaceCollectorList = spaceCollectorLuceneRepository.findByQuery(transformedToLucene.toString());
        
        // Convert List<SpaceCollector> to List<SpaceCollectorDto>
        return spaceCollectorList.stream()
            .map(this::convertToDto)
            .collect(Collectors.toList());
    }
}
