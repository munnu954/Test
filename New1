To achieve 100% code coverage for the main class `SshServerApplication`, we can write a JUnit test case using the `Mockito` framework to mock the `SpringApplication` class. Here's an example of unit test code for the `SshServerApplication` class:

```java
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.SpringApplication;

import static org.mockito.ArgumentMatchers.any;

public class SshServerApplicationTest {

    @Test
    public void testMainMethod() {
        SpringApplication springApplicationMock = Mockito.mock(SpringApplication.class);

        SshServerApplication mainClass = Mockito.mock(SshServerApplication.class);
        Mockito.doCallRealMethod().when(mainClass).main(any(String[].class));

        mainClass.main(new String[]{});

        Mockito.verify(springApplicationMock, Mockito.times(1)).run(SshServerApplication.class, new String[]{});
    }
}
```

In this test case, we utilize the `Mockito` framework to mock the `SpringApplication` class and verify that the `run` method is called with the correct parameters when the `main` method of `SshServerApplication` is invoked.

Remember to include the necessary dependencies (e.g., JUnit, Mockito, etc.) in your project to run this test successfully. This test case should provide 100% code coverage for the main class `SshServerApplication`.