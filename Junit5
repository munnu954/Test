To achieve 100% code coverage for the `MtnInsightsValidator` class using JUnit 5, you'll need to write test cases for all possible scenarios within the `validate` methods. This includes both positive cases (where no exceptions are thrown) and negative cases (where exceptions are expected).

Here's a sample JUnit 5 test class for `MtnInsightsValidator`:

```java
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        validator = new MtnInsightsValidator();
    }

    @Test
    public void testValidateMtnInsightsRequest_ValidRequest() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        request.setServiceHeader(new ServiceHeader());

        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("1234567890");
        request.setKeyAttributes(attributes);

        assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidateMtnInsightsRequest_InvalidRequestType() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.OTHER_TYPE);
        request.setServiceHeader(new ServiceHeader());

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> validator.validate(request));
        assert(exception.getMessage().contains("Invalid request type"));
    }

    @Test
    public void testValidateMtnInsightsRequest_MissingKeyAttributes() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        request.setServiceHeader(new ServiceHeader());

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> validator.validate(request));
        assert(exception.getMessage().contains("Either KeyAttributes (Single) or ListKeyAttributes (Multiple) are required."));
    }

    @Test
    public void testValidateMtnInsightsSearchRequest_ValidRequest() {
        MtnInsightsSearchRequest searchRequest = new MtnInsightsSearchRequest();
        searchRequest.setServiceHeader(new ServiceHeader());

        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setMtn("1234567890");
        searchParam.setInsightCategory(new String[]{"category"});
        searchParam.setInsightName(new String[]{"name"});
        searchRequest.setServiceRequest(searchParam);

        assertDoesNotThrow(() -> validator.validate(searchRequest));
    }

    @Test
    public void testValidateMtnInsightsSearchRequest_MissingFields() {
        MtnInsightsSearchRequest searchRequest = new MtnInsightsSearchRequest();
        searchRequest.setServiceHeader(new ServiceHeader());
        searchRequest.setServiceRequest(new MtnInsightsSearchParam());

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> validator.validate(searchRequest));
        assert(exception.getMessage().contains("ServiceRequest with Insight Category and Insight Name, MTN, ECPD id are required."));
    }

    // Additional tests for all other branches and conditions
}
```

### Explanation:

1. **Setup**: Before each test, we instantiate the `MtnInsightsValidator`.

2. **Positive Test Cases**:
   - `testValidateMtnInsightsRequest_ValidRequest`: Checks that a valid `MtnInsightsRequest` does not throw an exception.
   - `testValidateMtnInsightsSearchRequest_ValidRequest`: Checks that a valid `MtnInsightsSearchRequest` does not throw an exception.

3. **Negative Test Cases**:
   - `testValidateMtnInsightsRequest_InvalidRequestType`: Tests the scenario where the request type is not `INSERTMTNINSIGHTS`.
   - `testValidateMtnInsightsRequest_MissingKeyAttributes`: Tests the scenario where neither `keyAttributes` nor `listKeyAttributes` are provided.
   - `testValidateMtnInsightsSearchRequest_MissingFields`: Tests the scenario where mandatory fields are missing in the search request.

4. **Additional Tests**: You would need additional tests to cover all branches and conditions within the logic, especially handling different combinations of `MtnInsightsAttributes`. Each logical path in the validator should be tested to ensure complete coverage.

Remember to customize the exception messages and other assertions as per the actual behavior and requirements of your application.