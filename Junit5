To achieve 100% code coverage for the `getAEnd` and `getZEnd` methods, we need to ensure that every conditional branch and scenario is tested. This includes testing various combinations of null checks, list sizes, and type matches. Here's an expanded set of JUnit 5 test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.util.StringUtils;

import java.util.ArrayList;
import java.util.List;

public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAEnd_WithValidCircuitIdAndClli() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse(clli, true, true, "PORT");

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    @Test
    public void testGetAEnd_WithNullResponse() {
        String circuitId = "validCircuitId";
        String clli = "validClli";
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(mockResponseJson(clli));

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, null);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    @Test
    public void testGetAEnd_WithInvalidClli() {
        String circuitId = "validCircuitId";
        String clli = "invalidClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse("differentClli", true, true, "PORT");

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetAEnd_WithEmptyCircuitData() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = new CircuitDetailResponse(); // No circuit data

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetAEnd_WithCircuitDataAndNoAEnd() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse(clli, false, true, "PORT");

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetAEnd_WithClrComponentPath() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse(clli, false, false, "CHANNEL");

        AEnd result = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    @Test
    public void testGetZEnd_WithValidCircuitIdAndClli() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse(clli, true, true, "PORT");

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    @Test
    public void testGetZEnd_WithNullResponse() {
        String circuitId = "validCircuitId";
        String clli = "validClli";
        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(mockResponseJson(clli));

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, null);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    @Test
    public void testGetZEnd_WithInvalidClli() {
        String circuitId = "validCircuitId";
        String clli = "invalidClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse("differentClli", true, true, "PORT");

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetZEnd_WithEmptyCircuitData() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = new CircuitDetailResponse(); // No circuit data

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetZEnd_WithCircuitDataAndNoZEnd() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse(clli, true, false, "PORT");

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNull(result);
    }

    @Test
    public void testGetZEnd_WithClrComponentPath() {
        String circuitId = "validCircuitId";
        String clli = "validClli";

        CircuitDetailResponse response = createMockCircuitDetailResponse(clli, false, false, "CHANNEL");

        ZEnd result = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNotNull(result);
        assertEquals(clli, result.getPortChannel().get(0).getPortRef().get(0).getSiteCode());
    }

    private CircuitDetailResponse createMockCircuitDetailResponse(String clli, boolean addAEnd, boolean addZEnd, String componentType) {
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();

        if (addAEnd) {
            AEnd aEnd = new AEnd();
            PortChannel portChannel = new PortChannel();
            PortRef portRef = new PortRef();
            portRef.setSiteCode(clli);
            portChannel.getPortRef().add(portRef);
            aEnd.getPortChannel().add(portChannel);
            circuit.getAEnd().add(aEnd);
        }

        if (addZEnd) {
            ZEnd zEnd = new ZEnd();
            PortChannel portChannel = new PortChannel();
            PortRef portRef = new PortRef();
            portRef.setSiteCode(clli);
            portChannel.getPortRef().add(portRef);
            zEnd.getPortChannel().add(portChannel);
            circuit.getZEnd().add(zEnd);
        }

        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(componentType);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef equipmentPortRef = new PortRef();
        equipmentPortRef.setSiteCode(clli);
        List<PortRef> portRefs = new ArrayList<>();
        portRefs.add(equipmentPortRef);
        equipmentComp.setPortRef(portRefs);
        List<EquipmentComp> equipmentComps = new ArrayList<>();
        equipmentComps.add(equipmentComp);
        clrComponent.setEquipmentComp(equipmentComps);

        List<ClrComponent> clrComponents = new ArrayList<>();
        clrComponents.add(clrComponent);
        Path path = new Path();
        path.setClrComponent(clrComponents);
        PathLst pathLst = new PathLst();
        pathLst.setPath(List.of(path));
        Clr clr = new Clr();
        clr.setPathLst(List.of(pathLst));

        circuit.setClr(List.of(clr));
        circuitLst.getCircuit().add(circuit);
        circuitData.setCircuitLst(List.of(circuitLst));
        response.setCircuitData(circuitData);

        return response;
    }

    private String mockResponseJson(String clli) {
        // Provide a mock JSON response string that can be converted to a CircuitDetailResponse
        return "{ \"circuitData\": { \"circuitLst\": [{ \"circuit\": [{ \"aEnd\": [{ \"portChannel\": [{ \"portRef\": [{ \"siteCode\": \"" + clli + "\" }] }] }], \"zEnd\": [{ \"portChannel\": [{ \"portRef\": [{ \"siteCode\": \"" + clli + "\" }] }] }] }] }] } }";
    }
}
```

### Additional Test Scenarios:

1. **Empty Circuit Data**: Tests cases where the `CircuitDetailResponse` has no circuit data.
2. **No AEnd or ZEnd Data**: Tests where the `Circuit` has no `AEnd` or `ZEnd` data even when `circuitData` is present.
3. **Clr Component Path with Different Types**: Tests involving different `ClrComponent` types (e.g., `"CHANNEL"`) to ensure the logic handles these correctly.
4. **Edge Conditions**: Tests with conditions like missing or extra list items.

### Notes:

- **Mocking**: We use Mockito to simulate responses and mock the `RestClientUtil`.
- **Assertions**: Verify the properties of the `AEnd` and `ZEnd` objects to confirm correct behavior.
- **Setup Helpers**: `createMockCircuitDetailResponse` is a utility method to create various `CircuitDetailResponse` configurations for testing. Adjust the setup to match the structure and logic of your actual classes.