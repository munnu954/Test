import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

class UWAUpdatesHandlerApplicationTest {

    @Mock
    private ConfigurableApplicationContext mockAppContext;

    @Test
    void testMain() {
        // Arrange
        SpringApplication mockApp = mock(SpringApplication.class);
        UWAUpdatesHandlerApplication application = new UWAUpdatesHandlerApplication();

        // Act
        application.main(new String[]{"test"});

        // Assert
        verify(mockApp, times(1)).run(any(String[].class));
        verify(mockAppContext, times(1)).start();
    }

    @Test
    void testMainException() {
        // Arrange
        SpringApplication mockApp = mock(SpringApplication.class);
        UWAUpdatesHandlerApplication application = new UWAUpdatesHandlerApplication() {
            @Override
            public SpringApplication createSpringApplication() {
                return mockApp;
            }
        };

        // Act
        application.main(new String[]{"test"});

        // Assert
        verify(mockApp, times(1)).run(any(String[].class));
        verify(mockAppContext, times(1)).start();
    }

    @Test
    void testRunWithShutdown() {
        // Arrange
        UWAUpdatesHandlerApplication application = new UWAUpdatesHandlerApplication() {
            @Override
            public ConfigurableApplicationContext createSpringApplication() {
                return mockAppContext;
            }
        };

        // Act
        application.main(new String[]{"test"});

        application.run(new String[]{"test"});

        // Assert
        verify(mockAppContext, times(1)).start();
        verify(mockAppContext, times(1)).stop();
    }
}