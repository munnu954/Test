To cover the missing code paths in the `RedisConfigCTI` class, specifically the conditional logic associated with `cacheProps.scaleThreadsViaRuntime`, we will create additional test cases. These test cases will ensure that when `scaleThreadsViaRuntime` is set to `true`, the appropriate thread pool sizes are configured based on the available processors.

### Updated JUnit 5 Test Class

Hereâ€™s how your updated test class would look with additional test cases to cover the missing logic:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;

import io.lettuce.core.resource.ClientResources;
import io.lettuce.core.resource.DefaultClientResources;

@ExtendWith(MockitoExtension.class)
class RedisConfigCTITest {

    @InjectMocks
    private RedisConfigCTI redisConfigCTI;

    @Mock
    private RedisConfigProperties cacheProps;

    @BeforeEach
    void setUp() {
        // Set default values for cacheProps to avoid null pointer exceptions
        when(cacheProps.standalone).thenReturn(true);
        when(cacheProps.standaloneHost).thenReturn("localhost");
        when(cacheProps.standalonePort).thenReturn(6379);
        when(cacheProps.commandTimeout).thenReturn(60000L);
        when(cacheProps.shutdownTimeout).thenReturn(10000L);
        when(cacheProps.ioThreads).thenReturn(1);
        when(cacheProps.compThreads).thenReturn(20);
        when(cacheProps.node).thenReturn(List.of("localhost:26379"));
    }

    @Test
    void testGetConnectionFactoryWithScaleThreadsViaRuntimeTrue() {
        // Set the scaleThreadsViaRuntime property to true
        when(cacheProps.scaleThreadsViaRuntime).thenReturn(true);

        // Execute the method to get the connection factory
        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();

        // Verify the type of connection factory returned
        assertTrue(connectionFactory instanceof LettuceConnectionFactory);

        // Verify that the appropriate ClientResources were created
        ClientResources clientResources = ((LettuceConnectionFactory) connectionFactory).getClientResources();
        assertNotNull(clientResources);

        // Verify that the ioThreadPoolSize is set to available processors
        assertEquals(Runtime.getRuntime().availableProcessors(), clientResources.getIoThreadPoolSize());
        assertEquals(Runtime.getRuntime().availableProcessors(), clientResources.getComputationThreadPoolSize());
    }

    @Test
    void testGetConnectionFactoryWithScaleThreadsViaRuntimeFalse() {
        // Set the scaleThreadsViaRuntime property to false
        when(cacheProps.scaleThreadsViaRuntime).thenReturn(false);

        // Execute the method to get the connection factory
        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();

        // Verify the type of connection factory returned
        assertTrue(connectionFactory instanceof LettuceConnectionFactory);

        // Verify that the appropriate ClientResources were created
        ClientResources clientResources = ((LettuceConnectionFactory) connectionFactory).getClientResources();
        assertNotNull(clientResources);

        // Verify that the ioThreadPoolSize is set to the configured value
        assertEquals(1, clientResources.getIoThreadPoolSize());
        assertEquals(20, clientResources.getComputationThreadPoolSize());
    }

    @Test
    void testGetConnectionFactoryForStandalone() {
        // Ensure that we are testing the standalone configuration
        when(cacheProps.standalone).thenReturn(true);
        when(cacheProps.standaloneHost).thenReturn("localhost");
        when(cacheProps.standalonePort).thenReturn(6379);

        // Execute the method to get the connection factory
        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();

        // Verify the type of connection factory returned
        assertTrue(connectionFactory instanceof LettuceConnectionFactory);
    }

    // Add more tests for other configurations as needed
}
```

### Key Changes and New Tests:

1. **Test for `scaleThreadsViaRuntime` True**:
   - The `testGetConnectionFactoryWithScaleThreadsViaRuntimeTrue` method tests the scenario where `scaleThreadsViaRuntime` is set to `true`.
   - It verifies that the `ioThreadPoolSize` and `computationThreadPoolSize` are set to the number of available processors.

2. **Test for `scaleThreadsViaRuntime` False**:
   - The `testGetConnectionFactoryWithScaleThreadsViaRuntimeFalse` method tests the scenario where `scaleThreadsViaRuntime` is set to `false`.
   - It verifies that the `ioThreadPoolSize` and `computationThreadPoolSize` are set to their configured values as specified in the `RedisConfigProperties`.

3. **Test for Standalone Configuration**:
   - The `testGetConnectionFactoryForStandalone` method ensures that the connection factory is created correctly for standalone Redis when the relevant properties are set.

### Summary
These additional test cases ensure that you cover the conditional logic related to `scaleThreadsViaRuntime` in the `RedisConfigCTI` class. Adjust the configuration values in the mocks as needed to fit your testing scenarios. You can also expand upon this by adding more tests for other configurations and edge cases.