@Test
    public void testEquals_SameInstance() {
        SpaceCollector sc1 = new SpaceCollector();
        sc1.setInputFilePath("file.txt");
        
        assertTrue(sc1.equals(sc1));
    }

    @Test
    public void testEquals_NullObject() {
        SpaceCollector sc1 = new SpaceCollector();
        sc1.setInputFilePath("file.txt");
        
        assertFalse(sc1.equals(null));
    }

    @Test
    public void testEquals_ObjectOfDifferentClass() {
        SpaceCollector sc = new SpaceCollector();
        assertFalse(sc.equals(new Object()));
    }

    @Test
    public void testEquals_EqualObjects() {
        SpaceCollector sc1 = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt")
                .build();

        SpaceCollector sc2 = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt")
                .build();

        assertTrue(sc1.equals(sc2));
    }

    @Test
    public void testEquals_NullFields() {
        SpaceCollector sc1 = new SpaceCollector();
        SpaceCollector sc2 = new SpaceCollector();

        assertTrue(sc1.equals(sc2));
    }

    @Test
    public void testEquals_DifferentObjects() {
        SpaceCollector sc1 = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt")
                .build();

        SpaceCollector sc2 = SpaceCollector.builder()
                .inputFilePath("another_file.txt")
                .id(2)
                .url("http://different.com")
                .port(9090)
                .outputFilePath("another_output.txt")
                .build();

        assertFalse(sc1.equals(sc2));
    }

    @Test
    public void testEquals_SelfComparison() {
        SpaceCollector sc1 = new SpaceCollector();
        sc1.setInputFilePath("file.txt");

        assertTrue(sc1.equals(sc1));
    }

    @Test
    public void testEquals_EqualHashCode() {
        SpaceCollector sc1 = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt")
                .build();

        SpaceCollector sc2 = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt")
                .build();

        assertEquals(sc1.hashCode(), sc2.hashCode());
    }

    @Test
    public void testEquals_NotEqualHashCode() {
        SpaceCollector sc1 = SpaceCollector.builder()
                .inputFilePath("file.txt")
                .id(1)
                .url("http://example.com")
                .port(8080)
                .outputFilePath("output.txt")
                .build();

        SpaceCollector sc2 = SpaceCollector.builder()
                .inputFilePath("anotherFile.txt")
                .id(2)
                .url("http://different.com")
                .port(9090)
                .outputFilePath("anotherOutput.txt")
                .build();

        assertNotEquals(sc1.hashCode(), sc2.hashCode());
    }

    @Test
    public void testEquals_NotEqualObjects() {
        SpaceCollector sc1 = new SpaceCollector();
        sc1.setInputFilePath("file1.txt");
        sc1.setId(1);

        SpaceCollector sc2 = new SpaceCollector();
        sc2.setInputFilePath("file2.txt");
        sc2.setId(2);

        assertFalse(sc1.equals(sc2));
    }