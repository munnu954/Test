@Test
void testApplyPostingRule_AlarmedObjectTopoDetNotNull() throws Exception {
    // Create mock objects
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1L, "Rule1", 1, 1, "MatchingCriteria");
    Map<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("key", "value");

    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode jsonNode = objectMapper.createObjectNode();
    ((ObjectNode) jsonNode).put("key", "value");

    when(ruleLoadingService.getRuleMap()).thenReturn(new HashMap<>());
    when(AlarmPostingConstants.getObjectMapper().readTree(anyString())).thenReturn(jsonNode);
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("result");

    // Call the method
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    // Verify the interactions
    assertNotNull(result);
    assertEquals("result", result.getTopologyDetails());
    verify(LOG, times(1)).debug(anyString());
}
  
@Test
void testApplyPostingRule_AlarmedObjectTopoDetNull() throws Exception {
    // Create mock objects
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule(1L, "Rule1", 1, 1, "MatchingCriteria");
    Map<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("key", "value");

    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode jsonNode = objectMapper.createObjectNode();
    ((ObjectNode) jsonNode).put("key", "value");

    when(ruleLoadingService.getRuleMap()).thenReturn(new HashMap<>());
    when(AlarmPostingConstants.getObjectMapper().readTree(anyString())).thenReturn(jsonNode);
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("");

    // Call the method
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    // Verify the interactions
    assertNotNull(result);
    assertNull(result.getTopologyDetails());
    verify(LOG, never()).debug(anyString());
}