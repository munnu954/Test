import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

class TrunkProcessorTest {
    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private int i;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        i = 0;
        ukCount = new AtomicInteger();
        sourceSys = "test";
    }

    @Test
    void testProcessWithSEGMENTAndTRAILCondition() {
        // Prepare test data
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.SEGEMENT);
        clrComponentList.add(clrComponent);

        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRAIL);
        clrComponentList.add(prevClrComponent);

        Link prevTrail = new Link();
        prevTrail.setTarget("some-target");
        links.add(prevTrail);

        // Call the process method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Verify the results
        Assertions.assertEquals(2, links.size());
        Assertions.assertNotNull(links.get(1).getSource());
        Assertions.assertNotNull(links.get(1).getTarget());
    }

    @Test
    void testProcessWithSEGMENTAndNullTRAIL() {
        // Prepare test data
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.SEGEMENT);
        clrComponentList.add(clrComponent);

        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRAIL);
        clrComponentList.add(prevClrComponent);

        Link prevTrail = new Link();
        prevTrail.setTarget(CommonWrapperConstants.DOUBLE_DASH);
        links.add(prevTrail);

        // Call the process method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Verify the results
        Assertions.assertEquals(2, links.size());
        Assertions.assertNotNull(links.get(1).getSource());
        Assertions.assertNotNull(links.get(1).getTarget());
    }

    @Test
    void testProcessWithSEGMENTAndNullPrevClrComponent() {
        // Prepare test data
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.SEGEMENT);
        clrComponentList.add(clrComponent);

        ClrComponent prevClrComponent = null;
        clrComponentList.add(prevClrComponent);

        // Call the process method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Verify the results
        Assertions.assertEquals(0, links.size());
    }
}