import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class TrunkProcessorTest {

    @Test
    void process_WithNotNullPrevClrComponent() {

        // Arrange
        TrunkProcessor trunkProcessor = TrunkProcessor.getInstance();
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = mock(ClrComponent.class);
        when(clrComponent.getTrunkGroupComp()).thenReturn(Collections.singletonList(mock(TrunkGroupComp.class)));
        List<ClrComponent> clrComponentList = Arrays.asList(mock(ClrComponent.class), clrComponent);
        Map<String, List<Node>> clliNodeMap = mock(Map.class);
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "";

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals("circuit", link.getLinkType());
        assertEquals("", link.getId());
        assertEquals(2, link.getAttributes().size());
        assertEquals("", link.getSource());
        assertEquals("", link.getTarget());
        assertEquals("--", link.getShelf0());
        assertEquals("--", link.getShelf1());
        assertEquals("--", link.getSlot0());
        assertEquals("--", link.getSlot1());
        assertEquals("--", link.getSubSlot0());
        assertEquals("--", link.getSubSlot1());
        assertEquals("--", link.getPort0());
        assertEquals("--", link.getPort1());
        assertEquals("--", link.getPortBw0());
        assertEquals("--", link.getPortBw1());
    }

    @Test
    void process_WithNullPrevClrComponent() {

        // Arrange
        TrunkProcessor trunkProcessor = TrunkProcessor.getInstance();
        List<Node> nodes = new ArrayList<>();
        List<Link> links = new ArrayList<>();
        ClrComponent clrComponent = mock(ClrComponent.class);
        when(clrComponent.getTrunkGroupComp()).thenReturn(Collections.singletonList(mock(TrunkGroupComp.class)));
        List<ClrComponent> clrComponentList = Arrays.asList(clrComponent, mock(ClrComponent.class));
        Map<String, List<Node>> clliNodeMap = mock(Map.class);
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger(0);
        String sourceSys = "";

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);

        // Assert
        assertEquals(1, links.size());
        Link link = links.get(0);
        assertEquals("circuit", link.getLinkType());
        assertEquals("", link.getId());
        assertEquals(2, link.getAttributes().size());
        assertEquals("", link.getSource());
        assertEquals("", link.getTarget());
        assertEquals("--", link.getShelf0());
        assertEquals("--", link.getShelf1());
        assertEquals("--", link.getSlot0());
        assertEquals("--", link.getSlot1());
        assertEquals("--", link.getSubSlot0());
        assertEquals("--", link.getSubSlot1());
        assertEquals("--", link.getPort0());
        assertEquals("--", link.getPort1());
        assertEquals("--", link.getPortBw0());
        assertEquals("--", link.getPortBw1());
    }
}