Here is an example of how you can write JUnit 5 test cases for the `MessageReaderService` class using reflection APIs to access private methods:

```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class MessageReaderServiceTest {

    @Mock
    private MessageReaderService messageReaderService;

    @Test
    public void testRemoveOrloadRule() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Method method = MessageReaderService.class.getDeclaredMethod("removeOrloadRule", HashMap.class);
        method.setAccessible(true);

        HashMap<String, Object> ruleUpdateMap = new HashMap<>();
        ruleUpdateMap.put(AlarmPostingConstants.RULEID, 123);
        ruleUpdateMap.put(AlarmPostingConstants.OPERATION, AlarmPostingConstants.DELETE);

        when(messageReaderService.getRulesLoadingService().getRuleMap().containsKey(123)).thenReturn(true);

        method.invoke(messageReaderService, ruleUpdateMap);

        // Add assertions here
    }

    @Test
    public void testRetryReaderConnection() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Method method = MessageReaderService.class.getDeclaredMethod("retryReaderConnection");
        method.setAccessible(true);

        when(messageReaderService.getParams().getVMBConnectionFailureThresholdCount()).thenReturn(3);

        method.invoke(messageReaderService);

        // Add assertions here
    }

    @Test
    public void testCloseReader() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Method method = MessageReaderService.class.getDeclaredMethod("closeReader");
        method.setAccessible(true);

        method.invoke(messageReaderService);

        // Add assertions here
    }
}
```

In these test methods, we use reflection to access and invoke the private methods of `MessageReaderService` class. Make sure to add necessary assertions to verify the behavior of these methods. You can also add more test cases to cover the remaining branches of the `MessageReaderService` class.