import org.apache.pulsar.client.api.Consumer;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.PulsarClientException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.Status;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

class AlarmReceiverTest {

    @Mock
    private VMBParams params;

    @Mock
    private AlarmPostGreService alarmPostGreService;

    @Mock
    private PostingService alarmPointLookupService;

    @BeforeEach
    void setup() {
        params = new VMBParams();
        alarmPostGreService = new AlarmPostGreService();
        alarmPointLookupService = new PostingService();
    }

    @Test
    void testConstructor() {
        AlarmReceiver alarmReceiver = new AlarmReceiver(params, alarmPostGreService, alarmPointLookupService);
        assertNotNull(alarmReceiver);
    }

    @Test
    void testGetConnection() throws Exception {
        AlarmReceiver alarmReceiver = new AlarmReceiver(params, alarmPostGreService, alarmPointLookupService);
        alarmReceiver.getClass().getDeclaredMethod("getConnection").setAccessible(true);
        alarmReceiver.getConnection();
        assertEquals(Health.up().build(), alarmReceiver.health());
    }

    @Test
    void testReceiveMessages() throws PulsarClientException {
        AlarmReceiver alarmReceiver = Mockito.spy(new AlarmReceiver(params, alarmPostGreService, alarmPointLookupService));
        alarmReceiver.getClass().getDeclaredMethod("receiveMessages").setAccessible(true);
        alarmReceiver.receiveMessages();
    }

    @Test
    void testAcknowledgeMessage() {
        AlarmReceiver alarmReceiver = new AlarmReceiver(params, alarmPostGreService, alarmPointLookupService);
        Message<byte[]> message = Mockito.mock(Message.class);
        alarmReceiver.acknowledgeMessage(message);
    }

    @Test
    void testSyncReconnect() {
        AlarmReceiver alarmReceiver = new AlarmReceiver(params, alarmPostGreService, alarmPointLookupService);
        alarmReceiver.syncReconnect();
    }

    @Test
    void testRun() {
        AlarmReceiver alarmReceiver = new AlarmReceiver(params, alarmPostGreService, alarmPointLookupService);
        alarmReceiver.run();
    }

    @Test
    void testHealth() {
        AlarmReceiver alarmReceiver = new AlarmReceiver(params, alarmPostGreService, alarmPointLookupService);
        assertEquals(Health.up().build(), alarmReceiver.health());
    }
}