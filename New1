To achieve this, you can use the following code in your Spring Boot application and configure the local shared location in the application.yaml file:

shared:
  location: C:/Temp


Then, you can modify the CSVController to use the configured shared location:

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.util.ResourceUtils;
import org.apache.commons.io.FileUtils;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

@RestController
public class CSVController {

    @Value("${shared.location}")
    private String sharedLocation;

    @GetMapping("/writeCSV")
    public String writeCSV() {
        try {
            File file = new File(sharedLocation + "/example.csv");
            FileWriter writer = new FileWriter(file);
            writer.append("Name, Age, Email\n");
            writer.append("John, 25, john@example.com\n");
            writer.append("Alice, 30, alice@example.com\n");
            writer.flush();
            writer.close();
            return "CSV file written to " + sharedLocation;
        } catch (IOException e) {
            return "Error writing CSV file";
        }
    }

    @GetMapping("/retrieveCSV")
    public String retrieveCSV() {
        try {
            File file = ResourceUtils.getFile("file:" + sharedLocation + "/example.csv");
            return FileUtils.readFileToString(file, "UTF-8");
        } catch (IOException e) {
            return "Error retrieving CSV file";
        }
    }

    @GetMapping("/deleteCSV")
    public String deleteCSV() {
        try {
            File file = new File(sharedLocation + "/example.csv");
            if (file.delete()) {
                return "CSV file deleted from " + sharedLocation;
            } else {
                return "Failed to delete CSV file";
            }
        } catch (Exception e) {
            return "Error deleting CSV file";
        }
    }
}


In this modified code, we have used the @Value annotation to inject the shared location from the application.yaml file into the CSVController. Now, the shared location is configured in the application.yaml file and not hard-coded into the code.