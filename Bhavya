@Test
public void givenCollectionSuccessful_whenConsume_thenPublishUnifiedAuditMessageWithCollectionSuccessfulJobStatus() throws Exception {
    // Given
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId(123);
    spaceCollector.setUrl("192.168.1.243");
    spaceCollector.setPort(8080);
    spaceCollector.setUserName("custom");
    spaceCollector.setPassword("sshcolletor");
    spaceCollector.setInputFilePath("C:/Temp/sampleMeasInfoData.xml");
    spaceCollector.setOutputFilePath("C:/Temp/output");

    given(sshExceptionHandler.outputFilepathNotAccessible(spaceCollector)).willReturn(false);

    // When
    boolean result = consumerService.consume(spaceCollector);

    // Then
    assertTrue(result);
    verify(kafkaProducerService).writeMessage(any(JsonNode.class), eq(""), eq("3459-DEV-COLLECTION-AUDIT-QUEUE"));
}

@Test
public void givenCollectionNotSuccessful_whenConsume_thenPublishUnifiedAuditMessageWithCollectionFailedJobStatus() throws Exception {
    // Given
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId(123);
    spaceCollector.setUrl("192.168.1.243");
    spaceCollector.setPort(8080);
    spaceCollector.setUserName("custom");
    spaceCollector.setPassword("sshcolletor");
    spaceCollector.setInputFilePath("C:/Temp/sampleMeasInfoData.xml");
    spaceCollector.setOutputFilePath("");

    given(sshExceptionHandler.outputFilepathNotAccessible(spaceCollector)).willReturn(true);

    // When
    boolean result = consumerService.consume(spaceCollector);

    // Then
    assertFalse(result);
    verify(kafkaProducerService).writeMessage(any(JsonNode.class), eq(""), eq("3459-DEV-COLLECTION-AUDIT-QUEUE"));
}
