import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.apache.pulsar.functions.api.utils.GenericRecord;
import org.apache.pulsar.io.core.Message;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.kafka.core.KafkaTemplate;

public class SHAEventMessageListenerTest {

    private SHAEventMessageListener shaEventMessageListener;

    @Mock
    private SensitiveProfileManager profileManager;

    @Mock
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService kafkaFalloutService;

    @BeforeEach
    void setup() {
        shaEventMessageListener = new SHAEventMessageListener();
        shaEventMessageListener.profileManager = profileManager;
        shaEventMessageListener.utils = batchLoaderUtils;
        shaEventMessageListener.kafkaTemplate = kafkaTemplate;
        shaEventMessageListener.failedMessageService = kafkaFalloutService;
    }

    @Test
    void testOnMessageEmptyPayload() throws SystemException {
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn(null);

        assertThrows(SystemException.class, () -> shaEventMessageListener.onMessage(message));
    }

    @Test
    void testOnMessageEventEcpdIdEmpty() throws SystemException {
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn("somePayload");
        when(batchLoaderUtils.convert(anyString(), eq(SHAVbsmEvent.class))).thenReturn(new SHAVbsmEvent());

        shaEventMessageListener.onMessage(message);

        // Add assertions here for event with empty EcpdId
    }

    @Test
    void testOnMessageSensitiveProfile() throws SystemException {
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn("somePayload");
        when(batchLoaderUtils.convert(anyString(), eq(SHAVbsmEvent.class))).thenReturn(new SHAVbsmEvent("ecpdId", "mdn"));

        when(profileManager.getSensitiveAccount(anyString())).thenReturn(new SensitiveResponse("ecpdId", "sensitiveToken", true));

        shaEventMessageListener.onMessage(message);

        // Add assertions here for sensitive profile
    }

    @Test
    void testOnMessageNonSensitiveProfile() throws SystemException {
        Message<GenericRecord> message = mock(Message.class);
        when(message.getData()).thenReturn("somePayload");
        when(batchLoaderUtils.convert(anyString(), eq(SHAVbsmEvent.class))).thenReturn(new SHAVbsmEvent("ecpdId", "mdn"));

        when(profileManager.getSensitiveAccount(anyString())).thenReturn(new SensitiveResponse("ecpdId", "sensitiveToken", false));

        shaEventMessageListener.onMessage(message);

        // Add assertions here for non-sensitive profile
    }
} 

This is a basic structure of the JUnit test class for the SHAEventMessageListener class. You would need to add more test cases to cover all branches of the `onMessage` method based on the logic and flow of your application. In each test case, you can verify the expected behavior by mocking dependencies and making assertions.