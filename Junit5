To write JUnit 5 test cases for the `moveFilesMatchingPattern` method in the `ArchivalFileMovement` class, you need to test various scenarios, including:

1. Files matching the pattern are moved correctly.
2. The correct number of files matching the pattern is logged.
3. Handling exceptions during the file move operation.

Here is a sample JUnit 5 test class to cover these scenarios:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.ArgumentCaptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.*;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class ArchivalFileMovementTest {

    private ArchivalFileMovement archivalFileMovement;
    private Logger mockLogger = mock(Logger.class);

    @TempDir
    Path tempDir;

    @BeforeEach
    public void setUp() {
        archivalFileMovement = new ArchivalFileMovement();
        // Injecting mock logger
        setLogger(ArchivalFileMovement.class, mockLogger);
    }

    @Test
    public void testMoveFilesMatchingPattern() throws Exception {
        // Arrange
        Path sourceDir = Files.createDirectory(tempDir.resolve("source"));
        Path destinationDir = Files.createDirectory(tempDir.resolve("destination"));

        Path file1 = Files.createFile(sourceDir.resolve("test1.txt"));
        Path file2 = Files.createFile(sourceDir.resolve("test2.txt"));
        Path file3 = Files.createFile(sourceDir.resolve("sample.doc"));

        String sourcePattern = "file:" + sourceDir.toString() + "/*.txt";
        String destinationPath = destinationDir.toString();

        // Act
        archivalFileMovement.moveFilesMatchingPattern(sourcePattern, destinationPath);

        // Assert
        assertTrue(Files.exists(destinationDir.resolve("test1.txt")));
        assertTrue(Files.exists(destinationDir.resolve("test2.txt")));
        assertFalse(Files.exists(destinationDir.resolve("sample.doc")));

        ArgumentCaptor<String> logCaptor = ArgumentCaptor.forClass(String.class);
        verify(mockLogger, times(1)).info(eq("Number of files found with Matching pattern: {}"), eq(2L));
    }

    @Test
    public void testMoveFilesMatchingPattern_withException() throws Exception {
        // Arrange
        Path sourceDir = Files.createDirectory(tempDir.resolve("source"));
        Path destinationDir = Files.createDirectory(tempDir.resolve("destination"));

        Path file1 = Files.createFile(sourceDir.resolve("test1.txt"));

        String sourcePattern = "file:" + sourceDir.toString() + "/*.txt";
        String destinationPath = destinationDir.toString();

        // Simulating a problem by making the destination non-writable
        Files.setPosixFilePermissions(destinationDir, PosixFilePermissions.fromString("r--r--r--"));

        // Act & Assert
        Exception exception = assertThrows(Exception.class, () -> {
            archivalFileMovement.moveFilesMatchingPattern(sourcePattern, destinationPath);
        });

        assertTrue(exception.getMessage().contains("Error moving file"));

        verify(mockLogger).error(startsWith("Error moving file::"), eq(file1.getFileName().toString()), anyString());
    }

    // Utility method to inject mock logger
    private void setLogger(Class<?> clazz, Logger logger) {
        try {
            var field = clazz.getDeclaredField("LOGGER");
            field.setAccessible(true);
            field.set(null, logger);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
```

**Explanation:**

- **testMoveFilesMatchingPattern:** Tests the normal scenario where files matching the pattern are moved from the source to the destination directory. It asserts that only the files that match the pattern are moved and verifies the logging of the number of files found.

- **testMoveFilesMatchingPattern_withException:** Tests the scenario where an exception occurs during the move operation. It simulates a failure by setting read-only permissions on the destination directory. The test asserts that the exception is logged correctly.

These tests cover both normal and exceptional scenarios, ensuring 100% code coverage of the `ArchivalFileMovement` class.