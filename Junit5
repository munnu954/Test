Here is the updated CoconutServiceVersion3 class with the mentioned conditions applied to the finalQuery formation:

```java
@Service
public class CoconutServiceVersion3 {

    @Autowired
    CoconutDeviceDao coconutDeviceDao;

    @Autowired
    EuipmentListCoconutDeviceDao euipmentListCoconutDeviceDao;

    @Autowired
    EquipmentListCoconutDeviceV3Dao equipmentListCoconutDeviceV3Dao;

    @Autowired
    private CoconutDeviceMSConstants coconutDeviceMSConstants;

    private static Logger logger = LoggerFactory.getLogger(CoconutServiceVersion3.class);

    //newly created for v3api
    public UTSEquipmentList getCOCONUTEquipListV3(EquipmentInputRequest request, UTSEquipmentList utsEquipmentList) throws InternalServerErrorException, NoDataFoundException, InterruptedException, ExecutionException, DaoException {
        try {
            String qry;
            String fullQuery;
            Map<String, Object> criteria = request.getRequestParameters();
            qry = queryBasedOnParameter(criteria);
            fullQuery = "select COUNT(*) from (" + qry + ")";
            Integer skip = 0;
            Integer limit = 10;
            
            if (criteria.containsKey("pageNo")) {
                if (criteria.get("pageNo").equals("1")) {
                    skip = 0;
                } else {
                    skip = (Integer.parseInt(criteria.get("pageNo").toString()) * Integer.parseInt(criteria.get("size").toString()));
                    skip = skip - Integer.parseInt(criteria.get("size").toString());
                }
            } else {
                skip = 0;
            }
            
            if (criteria.containsKey("size")) {
                limit = skip + Integer.parseInt(criteria.get("size").toString());
            } else {
                limit = 10;
            }
            
            qry = "select * from (select t.*, rownum as rn from (" + qry;
            qry = qry.concat(" ) t ) WHERE rn BETWEEN " + skip + " and " + limit + " ");
            
            if (criteria.containsKey("sortByField")) {
                qry.concat(" order by " + criteria.get("sortByField") + " ");
            } 
            
            if (criteria.containsKey("sortDirection")) {
                qry = qry.concat(" " + criteria.get("sortDirection") + " ");
            }
            
            UTSEquipmentList response = new UTSEquipmentList();
            response = equipmentListCoconutDeviceV3Dao.getEquipListDaoV3(criteria, qry, fullQuery, utsEquipmentList, request);
            return response;
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            throw new InternalServerErrorException(ex.getMessage());
        }
    }

    private String queryBasedOnParameter(Map<String, Object> queryParams) {
        String baseQuery = coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;
        StringJoiner finalQueryJoiner = new StringJoiner(" AND ");
        
        if (queryParams.containsKey("locationCLLI")) {
            finalQueryJoiner.add("site.clli_code = :locationCLLI");
        }
        
        if (queryParams.containsKey("siteName")) {
            finalQueryJoiner.add("site.site_name = :siteName");
        }

        return baseQuery + " WHERE " + finalQueryJoiner.toString();
    }
}
```

In this updated code, the `queryBasedOnParameter` method is modified to check for the presence of `locationCLLI` or `siteName` in the `queryParams` map and conditionally append them to the `finalQuery`. The `finalQuery` is then constructed with the base query and the appended conditions. This implementation ensures that the conditions for `locationCLLI` and `siteName` are included in the `finalQuery` only if they are present in the `queryParams` map.