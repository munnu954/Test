import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.ListTopicsOptions;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.apache.kafka.common.KafkaException;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import java.util.Collections;
import java.util.concurrent.ExecutionException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(SpringExtension.class)
@SpringBootTest
public class KafkaTopicUtilTest {

    @Mock
    private AdminClient adminClient;

    @InjectMocks
    private KafkaTopicUtil kafkaTopicUtil;

    @Test
    public void testIsKafkaTopicPresent() throws ExecutionException, InterruptedException {
        // Arrange
        ListTopicsResult listTopicsResult = Mockito.mock(ListTopicsResult.class);
        Mockito.when(adminClient.listTopics(Mockito.any(ListTopicsOptions.class))).thenReturn(listTopicsResult);
        Mockito.when(listTopicsResult.names()).thenReturn(Collections.singleton("test-topic"));
        String topicName = "test-topic";

        // Act
        boolean result = kafkaTopicUtil.isKafkaTopicPresent(topicName);

        // Assert
        assertTrue(result);
    }

    @Test
    public void testIsKafkaTopicPresent_WhenExceptionThrown() throws ExecutionException, InterruptedException {
        // Arrange
        Mockito.when(adminClient.listTopics(Mockito.any(ListTopicsOptions.class))).thenThrow(new KafkaException("Test Exception"));
        String topicName = "test-topic";

        // Act
        boolean result = kafkaTopicUtil.isKafkaTopicPresent(topicName);

        // Assert
        assertEquals(false, result);
    }
}