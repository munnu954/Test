@Test
void testApplyPostingRule_case1() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
    ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(Mockito.any(Alarm.class), Mockito.any(PostingRule.class), Mockito.anyString())).thenReturn(null);

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertEquals(alarm, result);
}

@Test
void testApplyPostingRule_case2() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
    ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

    ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"key\": \"value\"}");
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(Mockito.any(Alarm.class), Mockito.any(PostingRule.class), Mockito.anyString())).thenReturn(responseEntity);

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
    assertEquals(alarm, result);
}

@Test
void testApplyPostingRule_case3() throws Exception {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();

    ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
    ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

    ResponseEntity<String> responseEntity = ResponseEntity.ok("{\"key\": \"value\"}");
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(Mockito.any(Alarm.class), Mockito.any(PostingRule.class), Mockito.anyString())).thenReturn(responseEntity);

    Mockito.when(utils.evaluateExpression(Mockito.anyString(), Mockito.anyMap())).thenReturn("TestValue");

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    assertNotNull(result);
    assertEquals(alarm, result);
}

// Add more test cases to cover other branches of applyPostingRule method.