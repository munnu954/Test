To achieve 100% code coverage for the `SensitivityTokenService` class, we need to write JUnit 5 test cases that cover all the branches of the `if` statement as well as the getter method. Let's proceed with the test cases:

1. Test when `lstOfGSAMRef` is `null`.
2. Test when `lstOfGSAMRef` is empty.
3. Test when `lstOfGSAMRef` contains one element.
4. Test when `lstOfGSAMRef` contains multiple elements.
5. Validate the `getSensitiveTokenList` method.

Here is how you can write the JUnit 5 test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class SensitivityTokenServiceTest {

    @Mock
    private GsamSensivityRefRepository refRepository;

    @InjectMocks
    private SensitivityTokenService sensitivityTokenService;

    @BeforeEach
    public void setUp() {
        // Initialize your test setup here if needed
    }

    @Test
    public void testSetSensitiveTokenList_NullList() {
        when(refRepository.findAll()).thenReturn(null);
        sensitivityTokenService.setSensitiveTokenList();
        assertNull(sensitivityTokenService.getSensitiveTokenList());
    }

    @Test
    public void testSetSensitiveTokenList_EmptyList() {
        when(refRepository.findAll()).thenReturn(Collections.emptyList());
        sensitivityTokenService.setSensitiveTokenList();
        assertNull(sensitivityTokenService.getSensitiveTokenList());
    }

    @Test
    public void testSetSensitiveTokenList_SingleElement() {
        GSAMSensivityRef ref = new GSAMSensivityRef();
        ref.setSensitivityToken("token1");
        when(refRepository.findAll()).thenReturn(Collections.singletonList(ref));
        
        sensitivityTokenService.setSensitiveTokenList();
        List<String> tokens = sensitivityTokenService.getSensitiveTokenList();
        
        assertNotNull(tokens);
        assertEquals(1, tokens.size());
        assertEquals("token1", tokens.get(0));
    }

    @Test
    public void testSetSensitiveTokenList_MultipleElements() {
        GSAMSensivityRef ref1 = new GSAMSensivityRef();
        ref1.setSensitivityToken("token1");
        GSAMSensivityRef ref2 = new GSAMSensivityRef();
        ref2.setSensitivityToken("token2");
        
        when(refRepository.findAll()).thenReturn(Arrays.asList(ref1, ref2));
        
        sensitivityTokenService.setSensitiveTokenList();
        List<String> tokens = sensitivityTokenService.getSensitiveTokenList();
        
        assertNotNull(tokens);
        assertEquals(2, tokens.size());
        assertTrue(tokens.contains("token1"));
        assertTrue(tokens.contains("token2"));
    }
}
```

### Explanation:

- **Test Null List**: Simulates a scenario where the repository returns `null`. The list of sensitive tokens should remain `null`.
- **Test Empty List**: Simulates a scenario where the repository returns an empty list. The list of sensitive tokens should remain `null`.
- **Test Single Element**: Tests the case where one sensitivity token is returned. The list should contain one token.
- **Test Multiple Elements**: Confirms that multiple tokens are collected correctly into the list.
- **`@ExtendWith(MockitoExtension.class)`**: Enables Mockito support for the test class.
- **`@InjectMocks` and `@Mock`**: Used to inject mocks into the `SensitivityTokenService` and mock its dependencies. 

By running these tests, you should cover all the branches of the `if` statement and ensure the method works as intended.