@Test
void testCase1() {
        CircuitDetailResponse circuitDetailResponse = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        CircuitInfo circuitInfo = new CircuitInfo();
        CableComp cableComp = new CableComp();
        Link link = new Link();
        List<Node> nodes = new ArrayList<>();
        nodes.add(new Node());
        nodes.add(new Node());
        Node nodeA = new Node();
        Node nodeZ = new Node();
        List<Link> links = new ArrayList<>();
        links.add(link);
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger();
        String sourceSys = "sourceSys";
        CircuitProcessorMock circuitProcessorMock = new CircuitProcessorMock();
        circuitProcessorMock.trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);
        assertTrue(true);
    }

    @Test
    void testCase2() {
        CircuitDetailResponse circuitDetailResponse = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        CircuitInfo circuitInfo = new CircuitInfo();
        CableComp cableComp = new CableComp();
        clrComponent.setType(CommonWrapperConstants.TRAIL);
        Link link = new Link();
        List<Node> nodes = new ArrayList<>();
        nodes.add(new Node());
        nodes.add(new Node());
        Node nodeA = new Node();
        Node nodeZ = new Node();
        List<Link> links = new ArrayList<>();
        links.add(link);
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger();
        String sourceSys = "sourceSys";
        CircuitProcessorMock circuitProcessorMock = new CircuitProcessorMock();
        circuitProcessorMock.trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);
        assertTrue(true);
    }

    @Test
    void testCase3() {
        CircuitDetailResponse circuitDetailResponse = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        CircuitInfo circuitInfo = new CircuitInfo();
        CableComp cableComp = new CableComp();
        clrComponent.setType(CommonWrapperConstants.TRAIL);
        circuitInfo.setLocationA(new ArrayList<>() {
            {
                add(new LocationA());
            }
        });
        Link link = new Link();
        List<Node> nodes = new ArrayList<>();
        nodes.add(new Node());
        nodes.add(new Node());
        Node nodeA = new Node();
        Node nodeZ = new Node();
        List<Link> links = new ArrayList<>();
        links.add(link);
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger();
        String sourceSys = "sourceSys";
        CircuitProcessorMock circuitProcessorMock = new CircuitProcessorMock();
        circuitProcessorMock.trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);
        assertTrue(true);
    }

    @Test
    void testCase4() {
        CircuitDetailResponse circuitDetailResponse = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        CircuitInfo circuitInfo = new CircuitInfo();
        cableComp.setLocationA(null);
        CableComp cableComp = new CableComp();
        clrComponent.setType(CommonWrapperConstants.TRAIL);
        circuitInfo.setLocationA(new ArrayList<>() {
            {
                add(new LocationA());
            }
        });
        Link link = new Link();
        List<Node> nodes = new ArrayList<>();
        nodes.add(new Node());
        nodes.add(new Node());
        Node nodeA = new Node();
        Node nodeZ = new Node();
        List<Link> links = new ArrayList<>();
        links.add(link);
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger();
        String sourceSys = "sourceSys";
        CircuitProcessorMock circuitProcessorMock = new CircuitProcessorMock();
        circuitProcessorMock.trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);
        assertTrue(true);
    }

    @Test
    void testCase5() {
        CircuitDetailResponse circuitDetailResponse = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setLocationA(new ArrayList<>());
        CableComp cableComp = new CableComp();
        clrComponent.setType(CommonWrapperConstants.TRAIL);
        circuitInfo.setLocationA(new ArrayList<>() {
            {
                add(new LocationA());
            }
        });
        Link link = new Link();
        List<Node> nodes = new ArrayList<>();
        nodes.add(new Node());
        nodes.add(new Node());
        Node nodeA = new Node();
        Node nodeZ = new Node();
        List<Link> links = new ArrayList<>();
        links.add(link);
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 0;
        AtomicInteger ukCount = new AtomicInteger();
        String sourceSys = "sourceSys";
        CircuitProcessorMock circuitProcessorMock = new CircuitProcessorMock();
        circuitProcessorMock.trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);
        assertTrue(true);
    }

    @Test
    void testCase6() {
        CircuitDetailResponse circuitDetailResponse = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();
        CircuitInfo circuitInfo = new CircuitInfo();
        CableComp cableComp = new CableComp();
        clrComponent.setType(CommonWrapperConstants.TRAIL);
        circuitInfo.setLocationA(new ArrayList<>() {
            {
                add(new LocationA());
            }
        });
        Link link = new Link();
        List<Node> nodes = new ArrayList<>();
        nodes.add(new Node());
        nodes.add(new Node());
        Node nodeA = new Node();
        Node nodeZ = new Node();
        List<Link> links = new ArrayList<>();
        links.add(link);
        links.add(new Link());
        links.get(1).setSource("source");
        links.get(1).setTarget("target");
        ClrComponent clrComponent = new ClrComponent();
        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(clrComponent);
        Map<String, List<Node>> clliNodeMap = new HashMap<>();
        int i = 1;
        AtomicInteger ukCount = new AtomicInteger();
        String sourceSys = "sourceSys";
        CircuitProcessorMock circuitProcessorMock = new CircuitProcessorMock();
        circuitProcessorMock.trailProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, i, ukCount, sourceSys);
        assertTrue(true);
    }
