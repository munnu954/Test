To ensure that the JUnit 5 test cases cover the `if (!ObjectUtils.isEmpty(aggregateInsightsEntity)) { }` statement, we need to focus on the specific conditions that affect the presence and content of `aggregateInsightsEntity`. Hereâ€™s an approach to ensure all branches within this if statement are covered:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.apache.commons.lang.ObjectUtils;

public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mtnInsightsManager = new MtnInsightsManager();
    }

    @Test
    public void testConvertToMtnInsights_AggregateInsightsEntityNotEmpty_AggregateValueContainsOutageId() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        // Create non-empty AggregateInsightsEntity
        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue(EventLedgerConstants.OUTAGE_ID + "outage123" + EventLedgerConstants.COMMA_SEPARATOR);

        // Mock repository call
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(eq(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE), eq("outage123"))).thenReturn(aggregateEntity);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
        assertEquals(1, result.getCategoryInsights()[0].getInsights().length);
    }

    @Test
    public void testConvertToMtnInsights_AggregateInsightsEntityNotEmpty_AggregateValueDoesNotContainOutageId() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        // Create non-empty AggregateInsightsEntity with different value
        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue("someOtherValue");

        // Mock repository call
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(eq(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE), eq("outage123"))).thenReturn(aggregateEntity);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
        assertEquals(1, result.getCategoryInsights()[0].getInsights().length);
    }

    @Test
    public void testConvertToMtnInsights_AggregateInsightsEntityEmpty() {
        // Setup test data
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(EventLedgerConstants.MTNOUTAGE);
        pk.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        entity.setPk(pk);
        entity.setInsightValues("{\"event_customer_status\":\"3\"}");
        entity.setProdId("outage123");

        // Mock repository call to return null (empty entity)
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(eq(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE), eq("outage123"))).thenReturn(null);

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        // Execute method under test
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assertions for expected behavior
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE, result.getCategoryInsights()[0].getCategory());
        assertEquals(1, result.getCategoryInsights()[0].getInsights().length);
    }
}
```

### Explanation:

1. **Non-Empty Aggregate Entity with Matching Outage ID**: Tests the case where `aggregateInsightsEntity` is not empty, and its `aggrValue` contains the `OUTAGE_ID`. This ensures that the code correctly processes and modifies the `aggregateValue`.

2. **Non-Empty Aggregate Entity without Matching Outage ID**: Tests the case where `aggregateInsightsEntity` is not empty, but its `aggrValue` does not contain the `OUTAGE_ID`. This checks that the method handles the absence of the `OUTAGE_ID` correctly.

3. **Empty Aggregate Entity**: This test case ensures that the method correctly handles the scenario where `aggregateInsightsEntity` is null, triggering the else branch of the `if` statement.

Each test sets up the necessary conditions to trigger different branches of the `if (!ObjectUtils.isEmpty(aggregateInsightsEntity)) { }` statement within your method, ensuring comprehensive coverage.