import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class MtnInsightsValidatorTest {

    @InjectMocks
    private MtnInsightsValidator mtnInsightsValidator;

    @Spy
    private MtnInsightsAttributes mtnInsightsAttributes;

    @Test
    public void testValidate_InsertMtnInsights() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightSRequestType.INSERTMTNINSIGHTS);
        ServiceHeader serviceHeader = new ServiceHeader();
        request.setServiceHeader(serviceHeader);

        assertDoesNotThrow(() -> mtnInsightsValidator.validate(request));
    }

    @Test
    public void testValidate_InsertMtnInsights_InvalidRequestType() {
        MtnInsightsRequest request = new MtnInsightsRequest();
        request.setRequestType(InsightSRequestType.UPDATEMTNINSIGHTS);
        ServiceHeader serviceHeader = new ServiceHeader();
        request.setServiceHeader(serviceHeader);

        assertThrows(InvalidRequestException.class, () -> mtnInsightsValidator.validate(request));
    }

    // Add more test cases for other scenarios 

    @Test
    public void testValidateIterator_Valid() {
        // Mock MtnInsightsAttributes
        mtnInsightsAttributes.setMtn("123456");
        mtnInsightsAttributes.setInsightCategory("TestCategory");
        mtnInsightsAttributes.setInsightName("TestName");

        assertDoesNotThrow(() -> mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, "KeyAttributes"));
    }

    @Test
    public void testValidateIterator_Invalid() {
        // Mock MtnInsightsAttributes with missing fields
        mtnInsightsAttributes.setMtn("");
        mtnInsightsAttributes.setInsightCategory("");
        mtnInsightsAttributes.setInsightName("");

        assertThrows(InvalidRequestException.class, () -> mtnInsightsValidator.validateIterator(null, mtnInsightsAttributes, "KeyAttributes"));
    }

    @Test
    public void testValidateSearchRequest_Valid() {
        MtnInsightsSearchRequest searchRequest = new MtnInsightsSearchRequest();
        ServiceHeader serviceHeader = new ServiceHeader();
        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setMtn("123456");
        searchParam.setEcpdId("7890");
        searchParam.setInsightCategory(new String[]{"Category"});
        searchParam.setInsightName(new String[]{"Name"});
        searchRequest.setServiceHeader(serviceHeader);
        searchRequest.setServiceRequest(searchParam);

        assertDoesNotThrow(() -> mtnInsightsValidator.validate(searchRequest));
    }

    @Test
    public void testValidateSearchRequest_Invalid() {
        MtnInsightsSearchRequest searchRequest = new MtnInsightsSearchRequest();
        ServiceHeader serviceHeader = new ServiceHeader();
        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchRequest.setServiceHeader(serviceHeader);
        searchRequest.setServiceRequest(searchParam);

        assertThrows(InvalidRequestException.class, () -> mtnInsightsValidator.validate(searchRequest));
    }
}