To achieve 100% code coverage for the mentioned conditional statement, we need to write additional JUnit5 test cases to cover the missed branches. Here are some test case examples to cover all branches of the conditional statement:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class YourTestClass {

    @Test
    void testAllConditionsTrue() {
        // Setup
        PrevClrComponent prevClrComponent = mock(PrevClrComponent.class);
        EquipmentComponent equipmentComponent = mock(EquipmentComponent.class);
        List<EquipmentComponent> equipmentComponents = new ArrayList<>();
        equipmentComponents.add(equipmentComponent);

        when(prevClrComponent.getEquipmentComp()).thenReturn(equipmentComponents);
        when(equipmentComponent.getPortRef()).thenReturn("port");

        // Test
        yourMethodUnderTest(prevClrComponent);

        // Assertions
        // Add assertions for the scenario where all conditions in the if statement are true
    }

    @Test
    void testEquipCompNull() {
        // Setup
        PrevClrComponent prevClrComponent = mock(PrevClrComponent.class);
        
        // Test
        yourMethodUnderTest(prevClrComponent);

        // Assertions
        // Add assertions for the scenario where prevClrComponent.getEquipmentComp() is null
    }

    @Test
    void testEquipCompEmpty() {
        // Setup
        PrevClrComponent prevClrComponent = mock(PrevClrComponent.class);
        when(prevClrComponent.getEquipmentComp()).thenReturn(new ArrayList<>());
        
        // Test
        yourMethodUnderTest(prevClrComponent);

        // Assertions
        // Add assertions for the scenario where prevClrComponent.getEquipmentComp() is empty
    }

    @Test
    void testPortRefNull() {
        // Setup
        PrevClrComponent prevClrComponent = mock(PrevClrComponent.class);
        EquipmentComponent equipmentComponent = mock(EquipmentComponent.class);
        List<EquipmentComponent> equipmentComponents = new ArrayList<>();
        equipmentComponents.add(equipmentComponent);

        when(prevClrComponent.getEquipmentComp()).thenReturn(equipmentComponents);

        // Test
        yourMethodUnderTest(prevClrComponent);

        // Assertions
        // Add assertions for the scenario where prevClrComponent.getEquipmentComp().get(0).getPortRef() is null
    }

    @Test
    void testPortRefEmpty() {
        // Setup
        PrevClrComponent prevClrComponent = mock(PrevClrComponent.class);
        EquipmentComponent equipmentComponent = mock(EquipmentComponent.class);
        List<EquipmentComponent> equipmentComponents = new ArrayList<>();
        equipmentComponents.add(equipmentComponent);

        when(prevClrComponent.getEquipmentComp()).thenReturn(equipmentComponents);
        when(equipmentComponent.getPortRef()).thenReturn("");

        // Test
        yourMethodUnderTest(prevClrComponent);

        // Assertions
        // Add assertions for the scenario where prevClrComponent.getEquipmentComp().get(0).getPortRef() is empty
    }
    
    private void yourMethodUnderTest(PrevClrComponent prevClrComponent) {
        // Add the code to test the conditional statement here
        // if (null != prevClrComponent.getEquipmentComp() && !prevClrComponent.getEquipmentComp().isEmpty() &&
        //     null != prevClrComponent.getEquipmentComp().get(0).getPortRef() && !prevClrComponent.getEquipmentComp().get(0).getPortRef().isEmpty()) { }
    }

}
```

You can customize these test cases according to your actual implementation and requirements to ensure that all branches of the conditional statement are covered.