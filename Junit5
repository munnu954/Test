To achieve 100% code coverage for the mentioned if statement in the `applyPostingRule` method of `PostingRuleProcessingService` class without making the specified fields public, we can use reflection to access those private fields in the unit test. Here is an example of how you can write JUnit 5 test cases covering all 4 branches of the if statement:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.web.client.RestTemplate;
import java.lang.reflect.Field;
import java.util.HashMap;

@SpringBootTest
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @BeforeEach
    void setUp() {
        // Injecting mocks
        TestUtils.injectMocks(postingRuleProcessingService, ruleLoadingService, topoApiClient, utils);
    }

    @Test
    void testApplyPostingRuleWithNonNullTopologyDetails() throws Exception {
        PostingRule postingRule = new PostingRule(1L, "Rule", 1, 1, "MatchingCriteria");
        Alarm alarm = new Alarm();
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("key", "value");

        // Mock necessary methods for the method to be executed
        Mockito.when(ruleLoadingService.getRuleMap()).thenReturn(new HashMap<>());
        Mockito.when(utils.evaluateExpression(Mockito.anyString(), Mockito.any())).thenReturn("ExpressionResult");

        // Use reflection to set private field values
        Field ruleField = PostingRuleProcessingService.class.getDeclaredField("alarmedObjectExpression");
        ruleField.setAccessible(true);
        ruleField.set(postingRuleProcessingService, "%TopoObject:OSS_Names[0]%");

        // Call the method to test
        postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        // Add assertions here
    }

    // Repeat the test method for the other branches of the if statement

}
```

Make sure to replace the assertions comment in the test method with appropriate assertions based on the logic within the if statement. The `TestUtils.injectMocks` is a custom utility method that can be implemented to inject mocked dependencies into the class under test using reflection. 

It's important to thoroughly validate the logic and behavior within each branch of the if statement to ensure complete test coverage.