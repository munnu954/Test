Certainly! Let's create more comprehensive JUnit 5 test cases to cover the specified blocks of code in the `postAlarmForEachIteration` method.

The following test cases will ensure that both `null` and empty string conditions for the `externalAlarmId`, `sourceSystemId`, and `probableCause` fields are properly tested.

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Calendar;
import java.util.HashMap;

import com.fasterxml.jackson.databind.JsonNode;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;
    
    @Mock
    private AlarmPostingUtils utils;
    
    @Mock
    private PostGreDataBaseConfig postgresConf;
    
    @Mock
    private PostingRuleProcessingService postingRuleProcessingService;
    
    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;
    
    private Alarm alarm;
    private SqlRowSet rs;

    @BeforeEach
    public void setUp() {
        alarm = new Alarm();
        rs = mock(SqlRowSet.class);
    }

    @Test
    public void testPostAlarmForEachIteration_SetExternalAlarmId_WhenNull() throws Exception {
        // Simulate alarm with null externalAlarmId
        alarm.setExternalAlarmId(null);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));
        when(rs.getString("externalalarmid")).thenReturn("extAlarmId123");

        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        assertEquals("extAlarmId123", alarm.getExternalAlarmId());
    }

    @Test
    public void testPostAlarmForEachIteration_SetExternalAlarmId_WhenEmpty() throws Exception {
        // Simulate alarm with empty externalAlarmId
        alarm.setExternalAlarmId("");
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));
        when(rs.getString("externalalarmid")).thenReturn("extAlarmId123");

        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        assertEquals("extAlarmId123", alarm.getExternalAlarmId());
    }

    @Test
    public void testPostAlarmForEachIteration_SetSourceSystemId_WhenNull() throws Exception {
        // Simulate alarm with null sourceSystemId
        alarm.setSourceSystemId(null);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));
        when(rs.getString("sourcesystemid")).thenReturn("sourceSystem123");

        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        assertEquals("sourceSystem123", alarm.getSourceSystemId());
    }

    @Test
    public void testPostAlarmForEachIteration_SetSourceSystemId_WhenEmpty() throws Exception {
        // Simulate alarm with empty sourceSystemId
        alarm.setSourceSystemId("");
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));
        when(rs.getString("sourcesystemid")).thenReturn("sourceSystem123");

        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        assertEquals("sourceSystem123", alarm.getSourceSystemId());
    }

    @Test
    public void testPostAlarmForEachIteration_SetProbableCause_WhenNull() throws Exception {
        // Simulate alarm with null probableCause
        alarm.setProbableCause(null);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));
        when(rs.getString("probablecause")).thenReturn("probableCause123");

        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        assertEquals("probableCause123", alarm.getProbableCause());
    }

    @Test
    public void testPostAlarmForEachIteration_SetProbableCause_WhenEmpty() throws Exception {
        // Simulate alarm with empty probableCause
        alarm.setProbableCause("");
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));
        when(rs.getString("probablecause")).thenReturn("probableCause123");

        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        assertEquals("probableCause123", alarm.getProbableCause());
    }

    @Test
    public void testPostAlarmForEachIteration_DoNotSetExternalAlarmId_WhenNonNullAndNotEmpty() throws Exception {
        // Simulate alarm with non-null and non-empty externalAlarmId
        alarm.setExternalAlarmId("existingExternalAlarmId");
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));

        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        assertEquals("existingExternalAlarmId", alarm.getExternalAlarmId());
    }

    @Test
    public void testPostAlarmForEachIteration_DoNotSetSourceSystemId_WhenNonNullAndNotEmpty() throws Exception {
        // Simulate alarm with non-null and non-empty sourceSystemId
        alarm.setSourceSystemId("existingSourceSystemId");
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));

        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        assertEquals("existingSourceSystemId", alarm.getSourceSystemId());
    }

    @Test
    public void testPostAlarmForEachIteration_DoNotSetProbableCause_WhenNonNullAndNotEmpty() throws Exception {
        // Simulate alarm with non-null and non-empty probableCause
        alarm.setProbableCause("existingProbableCause");
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.now()));

        alarmRepository.postAlarmForEachIteration(alarm, "compId");

        assertEquals("existingProbableCause", alarm.getProbableCause());
    }
}
```

### Explanation of Additional Tests:
1. **Set Fields When Null**: Tests for setting `externalAlarmId`, `sourceSystemId`, and `probableCause` when they are initially `null`.
2. **Set Fields When Empty**: Tests for setting `externalAlarmId`, `sourceSystemId`, and `probableCause` when they are initially empty strings.
3. **Do Not Set Fields When Non-Null and Not Empty**: Tests that ensure the fields are not overwritten when they already have non-null and non-empty values.

These tests cover the conditions where `externalAlarmId`, `sourceSystemId`, and `probableCause` are either `null` or empty, ensuring that the method behaves as expected for these scenarios.