import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class AlarmRepositoryImplTest {

    @Test
    void testCreateAlarm_PerceivedSeverityNullAndStateIsCleared() throws Exception {
        // Mocking necessary dependencies
        PostGreDataBaseConfig postGreDataBaseConfig = mock(PostGreDataBaseConfig.class);

        AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
        alarmRepository.setPostgresConf(postGreDataBaseConfig);

        // Mocking the values needed for the condition to be satisfied
        when(postGreDataBaseConfig.getAlarmStateMap()).thenReturn(Map.of("cleared", 1));
        when(postGreDataBaseConfig.getAlarmStateCleared()).thenReturn("cleared");

        // Creating the input message with null perceived severity and cleared state
        String message = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";

        // Calling the method under test
        Alarm alarm = alarmRepository.createAlarm(message);

        // Verifying the result
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotEmptyAndStateIsCleared() throws Exception {
        // Mocking necessary dependencies
        PostGreDataBaseConfig postGreDataBaseConfig = mock(PostGreDataBaseConfig.class);

        AlarmRepositoryImpl alarmRepository = new AlarmRepositoryImpl();
        alarmRepository.setPostgresConf(postGreDataBaseConfig);

        // Mocking the values needed for the condition to be satisfied
        when(postGreDataBaseConfig.getAlarmStateMap()).thenReturn(Map.of("cleared", 1));
        when(postGreDataBaseConfig.getAlarmStateCleared()).thenReturn("cleared");

        // Creating the input message with non-null perceived severity and cleared state
        String message = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"perceivedSeverity\": \"MAJOR\", \"sequenceId\":\"23423\"}";

        // Calling the method under test
        Alarm alarm = alarmRepository.createAlarm(message);

        // Verifying the result
        assertEquals("MAJOR", alarm.getPerceivedSeverity());
    }

}
```