import cucumber.api.java.en.Given;
import cucumber.api.java.en.When;
import cucumber.api.java.en.Then;

import java.util.Map;
import java.util.Vector;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AuditStatusStepDefinitions {

    private Vector<ChannelSftp.LsEntry> files;
    private SSHService auditStatusService;
    private String remoteDirectory;
    private Map<String, String> auditStatusMap;

    @Given("^the list of files is empty$")
    public void theListOfFilesIsEmpty() {
        files = new Vector<>();
    }

    @Given("^the list of files contains less than (\\d+) files$")
    public void theListOfFilesContainsLessThanFiles(int count) {
        files = generateFiles(count, false);
    }

    @Given("^the list of files contains exactly (\\d+) files$")
    public void theListOfFilesContainsExactlyFiles(int count) {
        files = generateFiles(count, false);
    }

    @Given("^the list of files contains more than (\\d+) files$")
    public void theListOfFilesContainsMoreThanFiles(int count) {
        files = generateFiles(count, false);
    }

    @When("^the audit status is retrieved$")
    public void theAuditStatusIsRetrieved() {
        auditStatusMap = auditStatusService.getAuditStatusMap(files, remoteDirectory);
    }

    @Then("^the audit status map should be empty$")
    public void theAuditStatusMapShouldBeEmpty() {
        assertEquals(0, auditStatusMap.size());
    }

    @Then("^the audit status map should contain status for each file$")
    public void theAuditStatusMapShouldContainStatusForEachFile() {
        for (ChannelSftp.LsEntry file : files) {
            if (!file.getAttrs().isDir()) {
                String filePath = remoteDirectory + file.getFilename();
                assertEquals("STATUS", auditStatusMap.get(filePath));
            }
        }
    }

    @Then("^each chunk should contain the specified number of files$")
    public void eachChunkShouldContainTheSpecifiedNumberOfFiles() {
        // Assuming partitionList is tested separately
        int expectedChunkSize = 1000;
        for (Vector<ChannelSftp.LsEntry> chunk : auditStatusService.partitionList(files, expectedChunkSize)) {
            assertEquals(expectedChunkSize, chunk.size());
        }
    }

    // Utility method to generate files
    private Vector<ChannelSftp.LsEntry> generateFiles(int count, boolean includeDirs) {
        Vector<ChannelSftp.LsEntry> files = new Vector<>();
        for (int i = 0; i < count; i++) {
            ChannelSftp.LsEntry file = mock(ChannelSftp.LsEntry.class);
            ChannelSftp.Attributes attrs = mock(ChannelSftp.Attributes.class);
            when(attrs.isDir()).thenReturn(includeDirs && i % 2 == 0);
            when(file.getAttrs()).thenReturn(attrs);
            when(file.getFilename()).thenReturn("file" + i);
            files.add(file);
        }
        return files;
    }
}
