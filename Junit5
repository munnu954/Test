import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import java.io.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;


public class KafkaProducerServiceTest {

    private KafkaProducerService kafkaProducerService;
    private ObjectInputStream objectInputStream;

    @BeforeEach
    public void setup() {
        kafkaProducerService = new KafkaProducerService();
        objectInputStream = mock(ObjectInputStream.class);
    }

    @Test
    public void testReadObjectWithProducerNotNull() throws IOException, ClassNotFoundException {
        MockedStatic<LoggerFactory> mockedStatic = Mockito.mockStatic(LoggerFactory.class);
        mockedStatic.when(LoggerFactory::getLogger).thenReturn(LoggerFactory.getLogger(KafkaProducerService.class));

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(kafkaProducerService);

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
        objectInputStream = new ObjectInputStream(byteArrayInputStream);

        assertDoesNotThrow(() -> kafkaProducerService.readObject(objectInputStream));
        mockedStatic.close();
    }

    @Test
    public void testReadObjectWithProducerNull() throws IOException, ClassNotFoundException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(kafkaProducerService);

        when(objectInputStream.defaultReadObject()).thenThrow(new ClassNotFoundException());

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
        objectInputStream = new ObjectInputStream(byteArrayInputStream);

        assertDoesNotThrow(() -> kafkaProducerService.readObject(objectInputStream));
    }

    @Test
    public void testCreateProducerWithException() {
        AppProperties appProperties = mock(AppProperties.class);
        KafkaProducer<String, String> kafkaProducer = mock(KafkaProducer.class);
        when(appProperties.setAndGetKafkaProducerSSLproperties()).thenThrow(new RuntimeException("Error"));

        try (MockedStatic<AppProperties> mockedStatic = Mockito.mockStatic(AppProperties.class)) {
            mockedStatic.when(AppProperties::getInstance).thenReturn(appProperties);
            assertThrows(RuntimeException.class, kafkaProducerService::createProducer);
        }
    }
}