Here is an example of JUnit5 test cases for the KafkaMessageConsumer class:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.util.Collections;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class KafkaMessageConsumerTest {

    @Mock
    private KafkaConsumer<String, String> kafkaConsumer;

    private KafkaMessageConsumer kafkaMessageConsumer;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        kafkaMessageConsumer = new KafkaMessageConsumer();
        kafkaMessageConsumer.consumer = kafkaConsumer;
    }

    @Test
    public void testCreateConsumerConnection() {
        Properties props = new Properties();
        props.setProperty("consumer.topic", "testTopic");

        when(kafkaConsumer.listTopics()).thenReturn(Collections.singletonMap("testTopic", null));

        kafkaMessageConsumer.createConsumerConnection(props);

        verify(kafkaConsumer).subscribe(Collections.singletonList("testTopic"));
    }

    @Test
    public void testPollForMessages() throws ConsumerException {
        ConsumerRecords<String, String> mockedConsumerRecords = mock(ConsumerRecords.class);
        when(kafkaConsumer.poll(any())).thenReturn(mockedConsumerRecords);

        kafkaMessageConsumer.pollForMessages();

        // Add assertions here
    }

    @Test
    public void testAcknowledgeMessage() throws ConsumerException {
        Message message = new Message("value", "topic", 0, 0L, 0);
        
        kafkaMessageConsumer.acknowledgeMessage(message);

        // Add assertions here
    }

    @Test
    public void testCloseConsumerConnection() {
        kafkaMessageConsumer.closeConsumerConnection();

        verify(kafkaConsumer).close();
    }
}
```

You can expand on these test cases and add more specific test scenarios to achieve 100% code coverage for the KafkaMessageConsumer class.