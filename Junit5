To achieve 100% code coverage of the `CHANNEL` and `PORT` conditional statements in the `CableProcessor` class, we need to create test cases that specifically target those branches in the `process` method. Here are additional test cases focusing on these conditions:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.*;

class CableProcessorTest {

    private CableProcessor cableProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;
    private List<ClrComponent> clrComponentList;
    private ClrComponent clrComponent;
    private ClrComponent prevClrComponent;
    private EquipmentComp equipmentComp;
    private PortRef portRef;

    @BeforeEach
    void setUp() {
        cableProcessor = CableProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "sourceSystem";
        clrComponentList = new ArrayList<>();
        clrComponent = new ClrComponent();
        prevClrComponent = new ClrComponent();
        equipmentComp = new EquipmentComp();
        portRef = new PortRef();
    }

    @Test
    void testProcess_withChannelType() {
        // Set prevClrComponent as CHANNEL type
        prevClrComponent.setType(CommonWrapperConstants.CHANNEL);
        
        // Set up EquipmentComp with valid PortRef
        portRef.setPortID("Port1");
        portRef.setSiteCode("LocationA");
        equipmentComp.getPortRef().add(portRef);
        prevClrComponent.getEquipmentComp().add(equipmentComp);

        // Populate the clrComponentList
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        // Set ClrComponent with valid CableComp
        CableComp cableComp = new CableComp();
        cableComp.setLocationA("LocationA");
        cableComp.setElementId("Element1");
        CablePairDetail cablePairDetail = new CablePairDetail();
        cablePairDetail.setStrandNumber("1");
        cableComp.getCablePairDetails().add(cablePairDetail);
        clrComponent.getCableComp().add(cableComp);

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assertions
        assertFalse(links.isEmpty(), "Links should not be empty");
        assertEquals("Port1", links.get(0).getSource(), "Source should match the Port ID");
    }

    @Test
    void testProcess_withPortType() {
        // Set prevClrComponent as PORT type
        prevClrComponent.setType(CommonWrapperConstants.PORT);

        // Set up EquipmentComp with valid PortRef
        portRef.setPortID("Port2");
        portRef.setSiteCode("LocationB");
        equipmentComp.getPortRef().add(portRef);
        prevClrComponent.getEquipmentComp().add(equipmentComp);

        // Populate the clrComponentList
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        // Set ClrComponent with valid CableComp
        CableComp cableComp = new CableComp();
        cableComp.setLocationA("LocationB");
        cableComp.setElementId("Element2");
        CablePairDetail cablePairDetail = new CablePairDetail();
        cablePairDetail.setStrandNumber("2");
        cableComp.getCablePairDetails().add(cablePairDetail);
        clrComponent.getCableComp().add(cableComp);

        // Call the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assertions
        assertFalse(links.isEmpty(), "Links should not be empty");
        assertEquals("Port2", links.get(0).getSource(), "Source should match the Port ID");
    }
}
```

### Explanation:
- **`testProcess_withChannelType`**: This test case simulates the scenario where the `prevClrComponent` is of type `CHANNEL`. It sets up a valid `EquipmentComp` and `PortRef` with a matching `LocationA` to ensure the branch logic is executed.
  
- **`testProcess_withPortType`**: This test case targets the scenario where the `prevClrComponent` is of type `PORT`. It also sets up a valid `EquipmentComp` and `PortRef` with a matching `LocationA`.

### Key Points:
- **Setup**: Each test sets up the required objects, ensuring that the conditions within the `if` statements are met to trigger all branches.
- **Assertions**: The assertions check that the `links` list is updated correctly, specifically validating the `source` field of the `Link` object.
- **Branch Coverage**: By having separate test cases for `CHANNEL` and `PORT`, we ensure that these specific branches are covered in the tests.

These additional test cases should help in achieving 100% coverage for the conditions related to `CHANNEL` and `PORT` types within the `process` method. Adjust the assertions and setup as needed based on the actual logic and data you expect in your application.