import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class FlinkApiControllerTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private KafkaConsumer kafkaConsumer;

    @Mock
    private KafkaAuditProducer kafkaAuditProducer;

    @InjectMocks
    private FlinkApiController flinkApiController;

    @Test
    void triggerJob_WithValidFileType_ShouldReturnJobTriggered() {
        // Arrange
        String validFileLocation = "C:/Temp/input.xml";
        String validFileType = ".xml";

        ResponseEntity<String> mockResponseEntity = new ResponseEntity<>("Success", HttpStatus.OK);
        when(restTemplate.postForEntity(anyString(), any(), eq(String.class))).thenReturn(mockResponseEntity);

        // Act
        String result = flinkApiController.triggerJob(new SpaceCollector(validFileLocation), validFileType);

        // Assert
        assertEquals("Job is not triggered", result); // As of the current implementation in the source code
        verify(kafkaConsumer, never()).logMetadata(any(), any(), any()); // No error logging expected
    }

    @Test
    void triggerJob_WithInvalidFileType_ShouldReturnJobNotTriggered() {
        // Arrange
        String validFileLocation = "C:/Temp/input.csv"; // Assuming a valid file
        String invalidFileType = ".xyz"; // Assuming this is an invalid file type

        // Act
        String result = flinkApiController.triggerJob(new SpaceCollector(validFileLocation), invalidFileType);

        // Assert
        assertEquals("Job is not triggered", result); // As of the current implementation in the source code
        verify(kafkaConsumer).logMetadata(any(), eq(invalidFileType), any()); // Error logging expected
    }

    @Test
    void triggerJob_WithInvalidJobSubmitUrl_ShouldReturnJobNotTriggered() {
        // Arrange
        when(restTemplate.postForEntity(anyString(), any(), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));

        // Act
        String result = flinkApiController.triggerJob(new SpaceCollector("C:/Temp/input.csv"), ".csv");

        // Assert
        assertEquals("Job is not triggered", result); // As of the current implementation in the source code
        verify(kafkaConsumer).logMetadata(any(), eq(".csv"), any()); // Error logging expected
    }

    @Test
    void triggerJob_WithNonExistentFlinkJobJarid_ShouldReturnJobNotTriggered() {
        // Arrange
        when(restTemplate.postForEntity(anyString(), any(), eq(String.class)))
                .thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR));

        // Act
        String result = flinkApiController.triggerJob(new SpaceCollector("C:/Temp/input.csv"), ".csv");

        // Assert
        assertEquals("Job is not triggered", result); // As of the current implementation in the source code
        verify(kafkaConsumer).logMetadata(any(), eq(".csv"), any()); // Error logging expected
    }
}