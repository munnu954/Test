import org.json.JSONException;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.junit.jupiter.api.extension.ExtendWith;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
class UserInsightsValidatorTest {

    @Mock
    private UserInsightsValidator userInsightsValidator;

    @Test
    void testValidate_InsertCustomerInsights() {
        UserInsightsRequest request = new UserInsightsRequest();
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("12345");
        attributes.setEcpdId("67890");
        attributes.setInsightCategory("Category");
        attributes.setInsightName("Name");
        request.setKeyAttributes(attributes);
        request.setServiceHeader(new ServiceHeader());

        assertDoesNotThrow(() -> userInsightsValidator.validate(request));
    }

    @Test
    void testValidate_InsertMTNInsights() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);
        UserInsightsAttributes[] attributesArray = new UserInsightsAttributes[2];
        UserInsightsAttributes attributes1 = new UserInsightsAttributes();
        attributes1.setUserId("12345");
        attributes1.setEcpdId("67890");
        attributes1.setInsightCategory("Category1");
        attributes1.setInsightName("Name1");
        UserInsightsAttributes attributes2 = new UserInsightsAttributes();
        attributes2.setUserId("54321");
        attributes2.setEcpdId("09876");
        attributes2.setInsightCategory("Category2");
        attributes2.setInsightName("Name2");
        attributesArray[0] = attributes1;
        attributesArray[1] = attributes2;
        request.setListKeyAttributes(attributesArray);
        request.setServiceHeader(new ServiceHeader());

        assertDoesNotThrow(() -> userInsightsValidator.validate(request));
    }

    @Test
    void testValidate_SearchRequest() {
        UserInsightsSearchRequest request = new UserInsightsSearchRequest();
        UserInsightsSearchParam param = new UserInsightsSearchParam();
        param.setUserId("12345");
        param.setEcpdId("67890");
        param.setInsightCategory(new String[]{"Category"});
        param.setInsightName(new String[]{"Name"});
        request.setServiceRequest(param);
        request.setServiceHeader(new ServiceHeader());

        assertDoesNotThrow(() -> userInsightsValidator.validate(request));
    }
}