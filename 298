Certainly! Below is a JUnit 5 test class to achieve 100% code coverage for the `evaluateExpression` method in the `AlarmPostingUtils` class. This includes tests for scenarios where the expression contains a `%` symbol and where it does not, as well as handling exceptions.

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

public class AlarmPostingUtilsTest {

    private AlarmPostingUtils alarmPostingUtils;
    private Map<String, Object> topoMap;

    @BeforeEach
    public void setUp() {
        alarmPostingUtils = Mockito.spy(new AlarmPostingUtils());
        topoMap = new HashMap<>();
    }

    @Test
    public void testEvaluateExpressionWithPercentage() throws Exception {
        String expression = "%example%";
        String expectedResult = "parsedResult";
        // Mock the parse method
        doReturn(expectedResult).when(alarmPostingUtils).parse(anyString(), anyMap(), anyString());

        String result = alarmPostingUtils.evaluateExpression(expression, topoMap);

        assertEquals(expectedResult, result);
        verify(alarmPostingUtils, times(1)).parse(expression, topoMap, "");
    }

    @Test
    public void testEvaluateExpressionWithoutPercentage() {
        String expression = "example";
        String result = alarmPostingUtils.evaluateExpression(expression, topoMap);

        assertEquals("", result);
        verify(alarmPostingUtils, never()).parse(anyString(), anyMap(), anyString());
    }

    @Test
    public void testEvaluateExpressionWithException() throws Exception {
        String expression = "%example%";
        // Mock the parse method to throw an exception
        doThrow(new RuntimeException("Parsing Error")).when(alarmPostingUtils).parse(anyString(), anyMap(), anyString());

        String result = alarmPostingUtils.evaluateExpression(expression, topoMap);

        assertEquals("", result);
        verify(alarmPostingUtils, times(1)).parse(expression, topoMap, "");
        verify(alarmPostingUtils.LOG, times(1)).error(anyString(), anyString());
    }
}
```

In this test class:
1. `testEvaluateExpressionWithPercentage` covers the scenario where the expression contains a `%` symbol and `parse` method is called.
2. `testEvaluateExpressionWithoutPercentage` covers the scenario where the expression does not contain a `%` symbol and `parse` method is not called.
3. `testEvaluateExpressionWithException` covers the scenario where an exception occurs during the parsing process, ensuring that the exception is handled and logged.

Note: This code assumes that `parse` is a method within the `AlarmPostingUtils` class and that the `LOG` object is correctly initialized. If `parse` is not a method in this class, you would need to adjust the test cases accordingly.