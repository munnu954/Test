To achieve 100% code coverage for the `convertToObject` method, especially to cover the catch block where a `JAXBException` might be thrown, you can write a JUnit 5 test case that deliberately provides inputs that cause an exception. Since the method is using JAXB for XML conversion, you can provide an invalid XML or perhaps an incompatible class type that cannot be unmarshaled by JAXB.

Here's how you can write such a test case:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.bind.JAXBException;

public class BatchLoaderUtilsTest {

    private BatchLoaderUtils batchLoaderUtils;
    private static final Logger LOGGER = LoggerFactory.getLogger(BatchLoaderUtils.class);

    @BeforeEach
    public void setUp() {
        batchLoaderUtils = new BatchLoaderUtils();
    }

    @Test
    public void testConvertToObject_JAXBException() {
        // Invalid XML input that will cause JAXBException
        String invalidXml = "<invalid></xml>";

        // Mocking the Logger to verify error logging
        try (MockedStatic<LoggerFactory> mockedLoggerFactory = Mockito.mockStatic(LoggerFactory.class)) {
            mockedLoggerFactory.when(() -> LoggerFactory.getLogger(BatchLoaderUtils.class)).thenReturn(LOGGER);
            doNothing().when(LOGGER).error(anyString(), any(JAXBException.class));

            // Call the method with invalid XML to trigger JAXBException
            assertThrows(JAXBException.class, () -> {
                batchLoaderUtils.convertToObject(invalidXml, TYSConstants.class);
            });

            // Verify that the error was logged
            verify(LOGGER, times(1)).error(eq("Unable to convert - "), any(JAXBException.class));
        }
    }
}
```

### Explanation:
- **Invalid XML Input:** The `invalidXml` string is deliberately malformed to cause a `JAXBException` when JAXB tries to unmarshal it.
- **Mocking the Logger:** The `Logger` is mocked to verify that the error logging happens when `JAXBException` is caught.
- **JUnit Assertions:** The `assertThrows` method is used to verify that the exception is indeed thrown when the method is executed with invalid input.
- **Mockito Verification:** The `verify` method checks that the error was logged exactly once.

This test case is designed to force the `convertToObject` method to throw a `JAXBException`, hence executing the catch block for 100% code coverage.