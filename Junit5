Certainly! Below is an example of a JUnit 5 test case that covers the specific `else if` block in the `createAlarm` method of the `AlarmRepositoryImpl` class. This test case ensures 100% code coverage for that particular block:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    private ObjectMapper objectMapper;

    @BeforeEach
    public void setUp() {
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testCreateAlarm_PerceivedSeverityNullAndStateCleared() throws Exception {
        // Mock configurations
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 2);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");

        // Mock JSON message
        String jsonMessage = "{ \"sourceSystemId\": \"testSource\", \"State\": \"Cleared\" }";

        // Create Alarm
        Alarm alarm = alarmRepository.createAlarm(jsonMessage);

        // Assertions
        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
        assertEquals("Cleared", alarm.getState().toString());
    }

    @Test
    public void testCreateAlarm_PerceivedSeverityEmptyAndStateCleared() throws Exception {
        // Mock configurations
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 2);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");

        // Mock JSON message
        String jsonMessage = "{ \"sourceSystemId\": \"testSource\", \"State\": \"Cleared\", \"perceivedSeverity\": \"\" }";

        // Create Alarm
        Alarm alarm = alarmRepository.createAlarm(jsonMessage);

        // Assertions
        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
        assertEquals("Cleared", alarm.getState().toString());
    }
}
```

### Explanation:
1. **Mocks and Setup**:
   - `PostGreDataBaseConfig` is mocked to provide the configurations required.
   - An instance of `AlarmRepositoryImpl` is created with the mocked configuration.

2. **Mock Data**:
   - `perceivedSeverityMap` and `alarmStateMap` are set up to return specific values when called.
   - `alarmStateCleared` is mocked to return "Cleared".

3. **Test Cases**:
   - **`testCreateAlarm_PerceivedSeverityNullAndStateCleared`**: Tests the scenario where `perceivedSeverity` is `null` and `State` is "Cleared".
   - **`testCreateAlarm_PerceivedSeverityEmptyAndStateCleared`**: Tests the scenario where `perceivedSeverity` is an empty string and `State` is "Cleared".

4. **Assertions**:
   - `assertNotNull(alarm)`: Ensures an `Alarm` object is created.
   - `assertEquals(-1, alarm.getPerceivedSeverity())`: Checks that `perceivedSeverity` is set to `-1`.
   - `assertEquals("Cleared", alarm.getState().toString())`: Confirms the state is "Cleared".

These test cases cover the specific `else if` block by ensuring both `null` and empty string conditions for `perceivedSeverity` are tested, and the state is "Cleared".