@Test
void testApplyPostingRule() throws Exception {
    // Arrange
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    JsonNode jsonNodeTmp = null;
    
    // Mocking ObjectMapper for converting JSON to Map
    PowerMockito.mockStatic(AlarmPostingConstants.class);
    ObjectMapper objectMapper = new ObjectMapper();
    PowerMockito.when(AlarmPostingConstants.getObjectMapper()).thenReturn(objectMapper);
    
    // Mocking Topology API response
    ResponseEntity<String> responseEntity = new ResponseEntity<>("{}", HttpStatus.OK);
    TopologyApiClient topoApiClient = Mockito.mock(TopologyApiClient.class);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(Mockito.any(), Mockito.any(), Mockito.anyString())).thenReturn(responseEntity);
    
    // Mocking AlarmPostingUtils.evaluateExpression method
    AlarmPostingUtils utils = Mockito.mock(AlarmPostingUtils.class);
    Mockito.when(utils.evaluateExpression(Mockito.anyString(), Mockito.anyMap())).thenReturn("Test");
    
    // Mocking Logger
    Logger logger = Mockito.mock(Logger.class);
    Mockito.when(logger.isDebugEnabled()).thenReturn(true);
    Mockito.when(logger.isInfoEnabled()).thenReturn(true);
    PowerMockito.when(LogManager.getLogger(Mockito.any())).thenReturn(logger);
    
    // Mocking RuleLoadingService
    RuleLoadingService ruleLoadingService = Mockito.mock(RuleLoadingService.class);
    Map<String, PostingRule> ruleMap = new HashMap<>();
    ruleMap.put("1", rule);
    Mockito.when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
    
    PostingRuleProcessingService service = new PostingRuleProcessingService();
    service.utils = utils;
    service.topoApiClient = topoApiClient;
    service.ruleLoadingService = ruleLoadingService;

    // Act
    Alarm result = service.applyPostingRule(alarm, rule, alarmMap);
    
    // Assert
    assertNotNull(result);
}

@Test
void testApplyPostingRule_Exception() throws Exception {
    // Arrange
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    
    // Mocking ObjectMapper for converting JSON to Map
    ObjectMapper objectMapper = new ObjectMapper();
    PowerMockito.mockStatic(AlarmPostingConstants.class);
    PowerMockito.when(AlarmPostingConstants.getObjectMapper()).thenReturn(objectMapper);
    
    // Mocking Topology API response
    TopologyApiClient topoApiClient = Mockito.mock(TopologyApiClient.class);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(Mockito.any(), Mockito.any(), Mockito.anyString())).thenThrow(new RuntimeException());
    
    // Mocking AlarmPostingUtils.evaluateExpression method
    AlarmPostingUtils utils = Mockito.mock(AlarmPostingUtils.class);
    Mockito.when(utils.evaluateExpression(Mockito.anyString(), Mockito.anyMap())).thenReturn("Test");
    
    // Mocking Logger
    Logger logger = Mockito.mock(Logger.class);
    Mockito.when(logger.isDebugEnabled()).thenReturn(true);
    Mockito.when(logger.isInfoEnabled()).thenReturn(true);
    Mockito.when(logger.isErrorEnabled()).thenReturn(true);
    PowerMockito.when(LogManager.getLogger(Mockito.any())).thenReturn(logger);
    
    // Mocking RuleLoadingService
    RuleLoadingService ruleLoadingService = Mockito.mock(RuleLoadingService.class);
    Map<String, PostingRule> ruleMap = new HashMap<>();
    ruleMap.put("1", rule);
    Mockito.when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
    
    PostingRuleProcessingService service = new PostingRuleProcessingService();
    service.utils = utils;
    service.topoApiClient = topoApiClient;
    service.ruleLoadingService = ruleLoadingService;

    // Act & Assert
    assertThrows(Exception.class, () -> service.applyPostingRule(alarm, rule, alarmMap));
}