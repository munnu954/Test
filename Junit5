To create comprehensive JUnit 5 test cases for the `getAEnd` and `getZEnd` methods of the `CircuitDetailsProvider` class, we need to ensure that we cover all the logical branches, particularly the condition involving the `clrComponent.getCircuitComp()` check. Below is an example of how you can write such test cases. The goal is to cover all scenarios where the condition can evaluate to true or false.

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;

class CircuitDetailsProviderTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAEndWithCircuitComp() {
        // Arrange
        String circuitId = "123";
        String clli = "CLLI1";

        CircuitDetailResponse response = createCircuitDetailResponseWithCircuitComp("AEnd");

        // Act
        AEnd aEnd = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        // Assert
        assertNotNull(aEnd);
        assertEquals(clli, aEnd.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    void testGetZEndWithCircuitComp() {
        // Arrange
        String circuitId = "123";
        String clli = "CLLI1";

        CircuitDetailResponse response = createCircuitDetailResponseWithCircuitComp("ZEnd");

        // Act
        ZEnd zEnd = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        // Assert
        assertNotNull(zEnd);
        assertEquals(clli, zEnd.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    void testGetAEndWithoutCircuitComp() {
        // Arrange
        String circuitId = "123";
        String clli = "CLLI1";

        CircuitDetailResponse response = createCircuitDetailResponseWithoutCircuitComp();

        // Act
        AEnd aEnd = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        // Assert
        assertNull(aEnd);
    }

    @Test
    void testGetZEndWithoutCircuitComp() {
        // Arrange
        String circuitId = "123";
        String clli = "CLLI1";

        CircuitDetailResponse response = createCircuitDetailResponseWithoutCircuitComp();

        // Act
        ZEnd zEnd = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        // Assert
        assertNull(zEnd);
    }

    private CircuitDetailResponse createCircuitDetailResponseWithCircuitComp(String endType) {
        ClrComponent clrComponent = new ClrComponent();
        CircuitComp circuitComp = new CircuitComp();
        CircuitInfo circuitInfo = new CircuitInfo();
        PortRef portRef = new PortRef();
        portRef.setClliCode("CLLI1");

        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(Collections.singletonList(portRef));

        if ("AEnd".equals(endType)) {
            circuitInfo.setAEnd(Collections.singletonList(new AEnd(portChannel)));
        } else {
            circuitInfo.setZEnd(Collections.singletonList(new ZEnd(portChannel)));
        }

        circuitComp.setCircuitInfo(Collections.singletonList(circuitInfo));
        clrComponent.setCircuitComp(Collections.singletonList(circuitComp));

        Circuit circuit = new Circuit();
        circuit.setClr(Collections.singletonList(clrComponent));

        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(Collections.singletonList(circuit));

        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));

        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        return response;
    }

    private CircuitDetailResponse createCircuitDetailResponseWithoutCircuitComp() {
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setCircuitComp(Collections.emptyList());

        Circuit circuit = new Circuit();
        circuit.setClr(Collections.singletonList(clrComponent));

        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(Collections.singletonList(circuit));

        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));

        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        return response;
    }
}
```

### Explanation:
- **Mocks and Setup:** We use Mockito to mock the `RestClientUtil` and initialize our test class with `MockitoAnnotations.openMocks(this)`.
- **Test Cases:**
  - **testGetAEndWithCircuitComp:** Verifies behavior when `circuitComp` is present and contains a valid `AEnd`.
  - **testGetZEndWithCircuitComp:** Verifies behavior when `circuitComp` is present and contains a valid `ZEnd`.
  - **testGetAEndWithoutCircuitComp:** Verifies behavior when `circuitComp` is absent, expecting `null`.
  - **testGetZEndWithoutCircuitComp:** Similar to the above, but for the `ZEnd`.

This setup ensures that each path and conditional branch is tested, providing 100% coverage for the specified statements.