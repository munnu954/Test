To address the private access issues for `cktDetailUri` and `cktDetServiceName` in the `CircuitDetailsProvider` class, you can use Java's Reflection API to modify these fields for testing purposes. Here's how you can update your JUnit 5 test cases to use reflection:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Field;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpMethod;

public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    private static final String VALID_RESPONSE = "{\"field\":\"value\"}";
    private static final String BASE_URL = "http://mockServiceName";
    private static final String CKT_DETAIL_URI = "/details?circuitId=#circuitId#&sourceSys=#sourceSys#";

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        setPrivateField(circuitDetailsProvider, "cktDetailUri", CKT_DETAIL_URI);
        setPrivateField(circuitDetailsProvider, "cktDetServiceName", "mockServiceName");
    }

    private void setPrivateField(Object targetObject, String fieldName, Object value) throws Exception {
        Field field = targetObject.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(targetObject, value);
    }

    @Test
    public void testGetCircuitDetails_AllFieldsProvided() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_NoPhyModel() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = null;

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_NullResponse() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(null);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_EmptyCircuitIdAndSourceSys() {
        // Arrange
        String circuitId = null;
        String sourceSys = null;
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", CommonWrapperConstants.EMTPY)
                .replace("#sourceSys#", CommonWrapperConstants.EMTPY) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }
}
```

### Explanation:

1. **Reflection Setup**: The `setPrivateField` method uses Java Reflection to access and modify private fields. It sets the `cktDetailUri` and `cktDetServiceName` fields of the `CircuitDetailsProvider` class to ensure they have the expected values during testing.

2. **Test Methods**: The test methods remain largely unchanged, but now the `setUp` method uses reflection to set private fields.

3. **Mockito**: As before, Mockito is used to mock dependencies and verify interactions.

This approach ensures you have full control over the private fields during testing without modifying the original class's access levels.