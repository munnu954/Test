Here is the JUnit5 test case code that covers the `consumeKafkaFeedCollectionAuditEntity` method of the `KafkaConsumerService` class:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.Test;

public class KafkaConsumerServiceTest {

    @Test
    public void testConsumeKafkaFeedCollectionAuditEntity() {
        KafkaConsumerService kafkaConsumerService = new KafkaConsumerService();
        kafkaConsumerService.luceneRepo = mock(CollectionAuditLuceneRepository.class);

        KafkaConsumer<String, String> kafkaConsumer = mock(KafkaConsumer.class);
        ConsumerRecords<String, String> consumerRecords = mock(ConsumerRecords.class);

        List<String> consumedMessages = new ArrayList<>();
        consumedMessages.add("message1");
        consumedMessages.add("message2");

        ConsumerRecord<String, String> record1 = new ConsumerRecord<>("topic1", 0, 0, "key", "message1");
        ConsumerRecord<String, String> record2 = new ConsumerRecord<>("topic1", 0, 0, "key", "message2");

        when(kafkaConsumer.poll(Duration.ofSeconds(3))).thenReturn(consumerRecords);
        when(consumerRecords.iterator()).thenReturn(List.of(record1, record2).iterator());
        
        when(kafkaConsumerService.getConsumer(any())).thenReturn(kafkaConsumer);

        List<String> result = kafkaConsumerService.consumeKafkaFeedCollectionAuditEntity("topic1");
        
        assertEquals(2, result.size());
        assertEquals("success", result.get(0));
        assertEquals("success", result.get(1));
        
    }
}
```

In this test case, we are using Mockito to mock the `CollectionAuditLuceneRepository` and `KafkaConsumer` instances. We are also mocking the behavior of the `KafkaConsumer` to return the list of consumed messages.

You can write similar test cases to cover other scenarios and branches of the `consumeKafkaFeedCollectionAuditEntity` method for achieving 100% code coverage.