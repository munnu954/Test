@Test
void testApplyPostingRule() throws Exception {
    // Mocking objects
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    String topoObjectEligibilityValue = "eligible";
    String alarmedObject = "object";
    String alarmedObjectTopoDet = "details";
    
    // Mocking behavior of utils
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("");
    when(utils.evaluateExpression(eq(topologyObjectEligibilityCheckValue), anyMap())).thenReturn(topoObjectEligibilityValue);
    when(utils.evaluateExpression(eq(alarmedObjectExpression), anyMap())).thenReturn(alarmedObject);
    when(utils.evaluateExpression(eq(topologyDetailsAlarmedObjectExpression), anyMap())).thenReturn(alarmedObjectTopoDet);
    
    // Mocking behavior of AlarmPostingConstants
    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode jsonNode = objectMapper.createObjectNode();
    when(AlarmPostingConstants.getObjectMapper()).thenReturn(objectMapper);
    when(jsonNode.toString()).thenReturn("topologyDetails");
    
    // Mocking behavior of topoApiClient
    String responseString = "{\"topology\":\"data\"}";
    ResponseEntity<String> responseEntity = new ResponseEntity<>(responseString, HttpStatus.OK);
    when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
    
    // Mocking behavior of rule
    rule.setRuleTraversalExpression("expression");
    
    // Mocking behavior of topologyObjectsNode
    JsonNode topologyObjectsNode = objectMapper.createArrayNode();
    when(topologyObjectsNode.isArray()).thenReturn(true);
    when(topologyObjectsNode.elements()).thenReturn(Collections.emptyList());
    
    // Mocking behavior of jsonNode
    when(jsonNode.at(anyString())).thenReturn(topologyObjectsNode);
    
    // Mocking behavior of alarm
    alarm.setTopologyDetails("topologyDetails");
    
    // Call method
    PostingRuleProcessingService postingRuleProcessingService = new PostingRuleProcessingService();
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    
    // Assertions
    assertNotNull(result);
    assertEquals("object", result.getAlarmedObject());
    assertEquals("topologyDetails", result.getTopologyDetails());
}

@Test
void testApplyPostingRule_NoTopoObjectsNode() {
    // Mocking objects
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    
    // Mocking behavior of utils
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("");
    when(utils.evaluateExpression(eq(topologyObjectEligibilityCheckValue), anyMap())).thenReturn("");
    when(utils.evaluateExpression(eq(alarmedObjectExpression), anyMap())).thenReturn("");
    when(utils.evaluateExpression(eq(topologyDetailsAlarmedObjectExpression), anyMap())).thenReturn("");
    
    // Mocking behavior of AlarmPostingConstants
    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode jsonNode = objectMapper.createObjectNode();
    when(AlarmPostingConstants.getObjectMapper()).thenReturn(objectMapper);
    
    // Mocking behavior of topoApiClient
    ResponseEntity<String> responseEntity = null;
    when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
    
    // Mocking behavior of alarm
    alarm.setTopologyDetails("topologyDetails");
    
    // Call method
    PostingRuleProcessingService postingRuleProcessingService = new PostingRuleProcessingService();
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    
    // Assertions
    assertNotNull(result);
    assertNull(result.getAlarmedObject());
    assertEquals("topologyDetails", result.getTopologyDetails());
}

@Test
void testApplyPostingRule_Exception() {
    // Mocking objects
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    
    // Mocking behavior of utils
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("");
    when(utils.evaluateExpression(eq(topologyObjectEligibilityCheckValue), anyMap())).thenReturn("");
    when(utils.evaluateExpression(eq(alarmedObjectExpression), anyMap())).thenThrow(new RuntimeException("Error"));
    when(utils.evaluateExpression(eq(topologyDetailsAlarmedObjectExpression), anyMap())).thenReturn("");
    
    // Call method
    PostingRuleProcessingService postingRuleProcessingService = new PostingRuleProcessingService();
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    
    // Assertions
    assertNotNull(result);
}

@Test
void testApplyPostingRule_EmptyTopologyDetails() {
    // Mocking objects
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    
    // Mocking behavior of utils
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("");
    when(utils.evaluateExpression(eq(topologyObjectEligibilityCheckValue), anyMap())).thenReturn("");
    when(utils.evaluateExpression(eq(alarmedObjectExpression), anyMap())).thenReturn("");
    when(utils.evaluateExpression(eq(topologyDetailsAlarmedObjectExpression), anyMap())).thenReturn("");
    
    // Mocking behavior of AlarmPostingConstants
    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode jsonNode = objectMapper.createObjectNode();
    when(AlarmPostingConstants.getObjectMapper()).thenReturn(objectMapper);
    
    // Mocking behavior of topoApiClient
    ResponseEntity<String> responseEntity = new ResponseEntity<>("", HttpStatus.OK);
    when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
    
    // Call method
    PostingRuleProcessingService postingRuleProcessingService = new PostingRuleProcessingService();
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    
    // Assertions
    assertNotNull(result);
}
```