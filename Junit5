Certainly! We can use reflection to set the private fields in the `PostingRuleProcessingService` class. Below is the modified JUnit 5 test class that uses reflection to set these private fields.

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @InjectMocks
    private PostingRuleProcessingService service;

    private Alarm alarm;
    private PostingRule rule;
    private HashMap<String, Object> alarmMap;
    private ObjectMapper objectMapper;

    @BeforeEach
    public void setup() throws Exception {
        alarm = new Alarm();
        alarm.setAlarmIdentity("testAlarm");
        rule = new PostingRule();
        rule.setRuleId(1);
        rule.setRulePriority(1);
        alarmMap = new HashMap<>();
        objectMapper = new ObjectMapper();

        service = new PostingRuleProcessingService();

        setPrivateField(service, "ruleLoadingService", ruleLoadingService);
        setPrivateField(service, "topoApiClient", topoApiClient);
        setPrivateField(service, "utils", utils);
        setPrivateField(service, "alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");
        setPrivateField(service, "topologyDetailsAlarmedObjectExpression", "{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}");
        setPrivateField(service, "topologyObjectEligibilityCheckValue", "%TopoObject:OSS_Names[0]%");
        setPrivateField(service, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        setPrivateField(service, "componentIDAttributeName", "reportingObject");
    }

    private void setPrivateField(Object targetObject, String fieldName, Object value) throws Exception {
        Field field = targetObject.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(targetObject, value);
    }

    @Test
    public void testApplyPostingRule_NoTopologyData() throws Exception {
        // Mocking
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(ResponseEntity.ok("{}"));

        // Test
        Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

        // Verify
        assertEquals(alarm, result);
        verify(utils, times(1)).evaluateExpression(anyString(), anyMap());
        verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(any(), any(), anyString());
    }

    @Test
    public void testApplyPostingRule_TopologyObjectEligibilityCheckFailed() throws Exception {
        // Mocking
        String responseJson = "{\"topologyObjects\": [{\"OSS_Names\": [\"name1\"]}]}";
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId", "name1");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(ResponseEntity.ok(responseJson));

        // Test
        Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

        // Verify
        assertEquals(alarm, result);
        verify(utils, times(2)).evaluateExpression(anyString(), anyMap());
        verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(any(), any(), anyString());
    }

    @Test
    public void testApplyPostingRule_AlarmedObjectResolved() throws Exception {
        // Mocking
        String responseJson = "{\"topologyObjects\": " +
                "[{\"OSS_Names\": [\"name1\"], \"MO_Type\": \"Type1\", \"INMS_Attributes\": {\"TagSequence\": \"123\"}, \"Name\": \"ObjectName1\"}]}";
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId", "name1", "alarmedObject");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(ResponseEntity.ok(responseJson));

        // Test
        Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

        // Verify
        assertNotNull(result);
        assertEquals("alarmedObject", result.getAlarmedObject());
        verify(utils, times(3)).evaluateExpression(anyString(), anyMap());
        verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(any(), any(), anyString());
    }

    @Test
    public void testApplyPostingRule_TopologyDetailsResolved() throws Exception {
        // Mocking
        String responseJson = "{\"topologyObjects\": " +
                "[{\"OSS_Names\": [\"name1\"], \"MO_Type\": \"Type1\", \"INMS_Attributes\": {\"TagSequence\": \"123\"}, \"Name\": \"ObjectName1\"}]}";
        String topologyDetails = "{\"MO_Type\":\"Type1\",\"TagSequence\":\"123\",\"Name\":\"ObjectName1\"}";
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("componentId", "name1", "alarmedObject", topologyDetails);
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(ResponseEntity.ok(responseJson));

        // Test
        Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

        // Verify
        assertNotNull(result);
        assertEquals("alarmedObject", result.getAlarmedObject());
        assertEquals(topologyDetails, result.getTopologyDetails());
        verify(utils, times(4)).evaluateExpression(anyString(), anyMap());
        verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(any(), any(), anyString());
    }
}
```

### Explanation:
1. **Reflection Setup**: The `setup` method now includes a helper function `setPrivateField` that uses reflection to set private fields in the `PostingRuleProcessingService` class.
2. **Private Field Setting**: The `setPrivateField` method is called for each private field that needs to be set.
3. **Tests**: The test methods remain the same, ensuring that all branches within the loop are covered.

This approach ensures that private fields are set without altering their visibility in the original class.