To achieve 100% code coverage for the branches involving the `if(CommonWrapperConstants.PORT.equalsIgnoreCase(clrComponent.getType()) || CommonWrapperConstants.CHANNEL.equalsIgnoreCase(clrComponent.getType()))` statements in the `getAEnd` and `getZEnd` methods, you need to test additional scenarios. These include cases where the `clrComponent.getType()` is neither `PORT` nor `CHANNEL`, and also scenarios where the `clli` does not match.

Here are some additional JUnit 5 test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class CircuitDetailsProviderAdditionalTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAEnd_WithNonMatchingClli() {
        // Prepare test data
        CircuitDetailResponse response = createCircuitDetailResponseWithTypeAndClli(CommonWrapperConstants.PORT, "nonMatchingClli");

        // Call method
        AEnd aEnd = circuitDetailsProvider.getAEnd("circuitId", "clliCode", response);

        // Verify that the AEnd is null due to non-matching CLLI
        assertNull(aEnd);
    }

    @Test
    public void testGetAEnd_WithNonPortOrChannelType() {
        // Prepare test data
        CircuitDetailResponse response = createCircuitDetailResponseWithTypeAndClli("NON_PORT_OR_CHANNEL", "clliCode");

        // Call method
        AEnd aEnd = circuitDetailsProvider.getAEnd("circuitId", "clliCode", response);

        // Verify that the AEnd is null because the type is neither PORT nor CHANNEL
        assertNull(aEnd);
    }

    @Test
    public void testGetZEnd_WithNonMatchingClli() {
        // Prepare test data
        CircuitDetailResponse response = createCircuitDetailResponseWithTypeAndClli(CommonWrapperConstants.CHANNEL, "nonMatchingClli");

        // Call method
        ZEnd zEnd = circuitDetailsProvider.getZEnd("circuitId", "clliCode", response);

        // Verify that the ZEnd is null due to non-matching CLLI
        assertNull(zEnd);
    }

    @Test
    public void testGetZEnd_WithNonPortOrChannelType() {
        // Prepare test data
        CircuitDetailResponse response = createCircuitDetailResponseWithTypeAndClli("NON_PORT_OR_CHANNEL", "clliCode");

        // Call method
        ZEnd zEnd = circuitDetailsProvider.getZEnd("circuitId", "clliCode", response);

        // Verify that the ZEnd is null because the type is neither PORT nor CHANNEL
        assertNull(zEnd);
    }

    private CircuitDetailResponse createCircuitDetailResponseWithTypeAndClli(String type, String clliCode) {
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(type);

        PortRef portRef = new PortRef();
        portRef.setClliCode(clliCode);

        EquipmentComp equipmentComp = new EquipmentComp();
        List<PortRef> portRefs = new ArrayList<>();
        portRefs.add(portRef);
        equipmentComp.setPortRef(portRefs);

        List<EquipmentComp> equipmentComps = new ArrayList<>();
        equipmentComps.add(equipmentComp);
        clrComponent.setEquipmentComp(equipmentComps);

        List<ClrComponent> clrComponents = new ArrayList<>();
        clrComponents.add(clrComponent);

        Path path = new Path();
        path.setClrComponent(clrComponents);

        List<Path> paths = new ArrayList<>();
        paths.add(path);

        PathLst pathLst = new PathLst();
        pathLst.setPath(paths);

        List<PathLst> pathLsts = new ArrayList<>();
        pathLsts.add(pathLst);

        Clr clr = new Clr();
        clr.setPathLst(pathLsts);

        Circuit circuit = new Circuit();
        List<Clr> clrList = new ArrayList<>();
        clrList.add(clr);
        circuit.setClr(clrList);

        CircuitLst circuitLst = new CircuitLst();
        List<Circuit> circuits = new ArrayList<>();
        circuits.add(circuit);
        circuitLst.setCircuit(circuits);

        CircuitData circuitData = new CircuitData();
        List<CircuitLst> circuitLsts = new ArrayList<>();
        circuitLsts.add(circuitLst);
        circuitData.setCircuitLst(circuitLsts);

        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        return response;
    }
}
```

### Explanation:
- **Non-Matching CLLI**: Tests where the `clli` parameter does not match the CLLI code in the `PortRef`. This should return `null` as the `AEnd` or `ZEnd` is not found.
- **Non-Port/Channel Type**: Tests where the `clrComponent.getType()` is neither `PORT` nor `CHANNEL`. This ensures that the method correctly handles these cases and returns `null`.
- **Helper Method**: `createCircuitDetailResponseWithTypeAndClli` is modified to allow flexible setting of the type and CLLI code to test different scenarios.

These additional test cases help in covering the negative paths and edge cases necessary for achieving 100% code coverage for the specified `if` conditions.