@Test
void testCreateAlarmWithPerceivedSeverityNullAndStateValueCleared() throws Exception {
    // Setup
    String msg = "{\"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
    when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(new HashMap<>());
    when(postgresConf.getAlarmStateMap()).thenReturn(new HashMap<>());
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    // Test
    Alarm result = alarmRepositoryImpl.createAlarm(msg);

    // Verify
    assertEquals(-1, result.getPerceivedSeverity());
}

@Test
void testCreateAlarmWithPerceivedSeverityNotNullAndStateValueNotCleared() throws Exception {
    // Setup
    String msg = "{\"externalAlarmId\":\"pqwer\", \"State\":\"new\",\"sequenceId\":\"23423\", \"perceivedSeverity\":\"High\"}";
    when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(new HashMap<>());
    when(postgresConf.getAlarmStateMap()).thenReturn(new HashMap<>());
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    // Test
    Alarm result = alarmRepositoryImpl.createAlarm(msg);

    // Verify
    assertEquals(1, result.getPerceivedSeverity());
}