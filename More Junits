
if (new File("test.csv").exists()) {
  // The file exists
} else {
  // The file does not exist
}


Sure, here is a JUnit test case to ReadCSVFile(CSV file of 10000 entries) and print the csv file data:


import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class ReadCSVFileTest {

    @Test
    public void testReadCSVFile() throws IOException {
        // Create a new File object for the CSV file
        File csvFile = new File("src/test/resources/test.csv");

        // Create a new PrintWriter object to print the CSV file data
        PrintWriter writer = new PrintWriter(System.out);

        // Read the CSV file data
        List<String[]> data = ReadCSVFile(csvFile);

        // Print the CSV file data
        for (String[] row : data) {
            for (String cell : row) {
                writer.print(cell + " ");
            }
            writer.println();
        }

        // Close the PrintWriter object
        writer.close();
    }

    public static List<String[]> ReadCSVFile(File csvFile) throws IOException {
        // Create a new List object to store the CSV file data
        List<String[]> data = new ArrayList<>();

        // Create a new Scanner object to read the CSV file
        Scanner scanner = new Scanner(csvFile);

        // Read the CSV file data line by line
        while (scanner.hasNextLine()) {
            // Create a new String array to store the current line of data
            String[] row = scanner.nextLine().split(",");

            // Add the current line of data to the List object
            data.add(row);
        }

        // Close the Scanner object
        scanner.close();

        // Return the List object containing the CSV file data
        return data;
    }
}


This test case creates a new File object for the CSV file, creates a new PrintWriter object to print the CSV file data, reads the CSV file data, prints the CSV file data, and closes the PrintWriter object. The test case then asserts that the CSV file data is printed correctly