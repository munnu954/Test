Here are some JUnit5 test cases for the CollectorInitializer class:


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.kafka.test.context.EmbeddedKafkaExtension;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@EmbeddedKafka(topics = "3459-DEV-COLLECTION-REQUEST-QUEUE")
public class CollectorInitializerTest {

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Test
    public void testSuccessfulInitialization() {
        // Arrange
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("123456789");
        spaceCollector.setUrl("http://localhost:8080");
        spaceCollector.setPort(8080);
        spaceCollector.setConnectionType("API");
        spaceCollector.setUsername("username");
        spaceCollector.setPassword("password");

        Map<String, Object> data = new HashMap<>();
        data.put("id", spaceCollector.getId());
        data.put("url", spaceCollector.getUrl());
        data.put("port", spaceCollector.getPort());
        data.put("connection_type", spaceCollector.getConnectionType());
        data.put("username", spaceCollector.getUsername());
        data.put("password", spaceCollector.getPassword());

        // Act
        CollectorInitializer collectorInitializer = new CollectorInitializer(kafkaTemplate);
        collectorInitializer.initialize(data);

        // Assert
        assertEquals(spaceCollector, collectorInitializer.getCollector());
    }

    @Test
    public void testFailureToInitializeWhenNoDataInQueue() {
        // Arrange
        when(kafkaTemplate.send("3459-DEV-COLLECTION-REQUEST-QUEUE", "{}")).thenReturn(null);

        // Act
        CollectorInitializer collectorInitializer = new CollectorInitializer(kafkaTemplate);
        collectorInitializer.initialize("{}");

        // Assert
        assertThrows(IllegalStateException.class, collectorInitializer::getCollector);
    }

    @Test
    public void testFailureToInitializeWhenJsonDataIsInvalid() {
        // Arrange
        when(kafkaTemplate.send("3459-DEV-COLLECTION-REQUEST-QUEUE", "{}")).thenReturn(null);

        // Act
        CollectorInitializer collectorInitializer = new CollectorInitializer(kafkaTemplate);
        collectorInitializer.initialize("{\"id\": \"123456789\", \"url\": \"http://localhost:8080\", \"port\": 8080, \"connection_type\": \"API\", \"username\": \"username\", \"password\": \"password\"}");

        // Assert
        assertThrows(IllegalStateException.class, collectorInitializer::getCollector);
    }
}