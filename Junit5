import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import org.mockito.Mockito;
import org.apache.logging.log4j.Logger;
import java.lang.reflect.Field;
import java.util.ArrayList;

import static org.mockito.Mockito.*;

public class PostingServiceTest {

    private PostingService postingService;
    private Logger mockLogger;

    @BeforeEach
    public void setUp() {
        postingService = new PostingService();
        mockLogger = mock(Logger.class);
        setLogger(postingService, mockLogger);
    }

    @AfterEach
    public void tearDown() {
        postingService = null;
    }

    @Test
    public void testShutdownWithInterruptedException() throws Exception {
        // Mock a Thread that will throw InterruptedException when join() is called
        Thread mockThread = mock(Thread.class);
        doThrow(InterruptedException.class).when(mockThread).join();

        // Add the mockThread to the threadList of the postingService
        Field threadListField = postingService.getClass().getDeclaredField("threadList");
        threadListField.setAccessible(true);
        ArrayList<Thread> threadList = (ArrayList<Thread>) threadListField.get(postingService);
        threadList.add(mockThread);

        // Call the shutdown method
        postingService.shutdown();

        // Verify that the logger was called with the expected message
        Mockito.verify(mockLogger).error("Interruped Exception occured: ", any(InterruptedException.class));
    }

    private void setLogger(PostingService instance, Logger logger) {
        try {
            Field field = instance.getClass().getDeclaredField("LOG");
            field.setAccessible(true);
            field.set(null, logger);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
    }
}