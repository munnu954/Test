To achieve 100% code coverage for the `getDeviceDetailsv3` method within the `IVAPPDeviceService` class, we'll write JUnit test cases that cover all possible branches and exceptions. This includes handling successful responses, HTTP server errors, and generic exceptions. We'll use Mockito to mock dependencies like `RestTemplate` and `IVAPPDeviceUtil`.

Here's a comprehensive JUnit test class for this method:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.uts.cdo.eqp.list.UTSEquipmentList;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @InjectMocks
    private IVAPPDeviceService iVAPPDeviceService;

    private DeviceListInputRequest mockRequest;
    private UTSEquipmentList mockUTSEquipmentList;
    private ObjectMapper objectMapper;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mockRequest = new DeviceListInputRequest();
        mockUTSEquipmentList = new UTSEquipmentList();
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testGetDeviceDetailsv3_SuccessfulResponse() throws Exception {
        // Arrange
        String mockServiceUrl = "http://mockservice/mockpath";
        JsonNode mockResponse = objectMapper.readTree("{\"equipmentLst\": {\"equipmentContainer\": []}}");
        ResponseEntity<JsonNode> responseEntity = ResponseEntity.ok(mockResponse);

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://mockservice");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(JsonNode.class)))
            .thenReturn(responseEntity);
        when(iVAPPDeviceUtil.covertv3format(any(JsonNode.class))).thenReturn(mockUTSEquipmentList);

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(mockRequest, mockUTSEquipmentList);

        // Assert
        assertNotNull(result);
        verify(iVAPPDeviceUtil, times(1)).covertv3format(mockResponse);
    }

    @Test
    public void testGetDeviceDetailsv3_HttpServerError() throws Exception {
        // Arrange
        String mockServiceUrl = "http://mockservice/mockpath";
        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://mockservice");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(JsonNode.class)))
            .thenThrow(new HttpServerErrorException(org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR));

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(mockRequest, mockUTSEquipmentList);

        // Assert
        assertNotNull(result);
        verify(iVAPPDeviceUtil, never()).covertv3format(any(JsonNode.class));
    }

    @Test
    public void testGetDeviceDetailsv3_GenericException() throws Exception {
        // Arrange
        String mockServiceUrl = "http://mockservice/mockpath";
        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://mockservice");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(JsonNode.class)))
            .thenThrow(new RuntimeException("Generic Exception"));

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(mockRequest, mockUTSEquipmentList);

        // Assert
        assertNotNull(result);
        verify(iVAPPDeviceUtil, never()).covertv3format(any(JsonNode.class));
    }
}
```

### Explanation:

1. **Initialization:** We use `@Before` to set up mock instances and initialize objects before each test.

2. **Mockito Annotations:**
   - `@Mock` is used for dependencies we want to mock.
   - `@InjectMocks` lets us inject the mocks into the class we are testing.

3. **Test Scenarios:**
   - **Successful Response:** Mocks a successful REST call and verifies the conversion using `covertv3format`.
   - **HTTP Server Error:** Simulates an HTTP server error and checks that no conversion is attempted.
   - **Generic Exception:** Handles unexpected exceptions gracefully, ensuring stability.

4. **Mocking Behavior:** Using Mockito's `when` and `thenReturn` to define behavior for mocked objects.

5. **Assertions:** Verifies the expected outcomes for each test scenario, ensuring correct method execution and logic flow.