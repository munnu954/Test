Sure, here's an example of JUnit 5 test cases to achieve 100% code coverage for the `HttpClientErrorException.NotFound` catch block in the `getAlarmDetailsById()` method of the `ApiOperation` class:

```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

@ExtendWith(MockitoExtension.class)
class ApiOperationTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlarmGroupingParams configParams;

    @InjectMocks
    private ApiOperation apiOperation;

    @BeforeEach
    void setUp() {
        Mockito.when(configParams.getAlarmFetchURL()).thenReturn("http://example.com/alarms");
        Mockito.when(configParams.getAlarmFilterKey()).thenReturn("some-auth-key");
    }

    @Test
    void getAlarmDetailsById_shouldReturnNullWhenAlarmIdentityNotFound() {
        String alarmIdentity = "non-existent-alarm";
        Mockito.when(restTemplate.exchange(Mockito.anyString(), Mockito.eq(HttpMethod.POST), Mockito.any(), Mockito.eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));

        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        Assertions.assertNull(result);
    }

    @Test
    void getAlarmDetailsById_shouldHandleOtherRestClientExceptions() {
        String alarmIdentity = "some-alarm";
        Mockito.when(restTemplate.exchange(Mockito.anyString(), Mockito.eq(HttpMethod.POST), Mockito.any(), Mockito.eq(String.class)))
                .thenThrow(new RestClientException("Some error occurred"));

        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        Assertions.assertNull(result);
    }

    @Test
    void getAlarmDetailsById_shouldReturnResponseBodyWhenSuccessful() {
        String alarmIdentity = "some-alarm";
        ResponseEntity<String> responseEntity = new ResponseEntity<>("Alarm details", HttpStatus.OK);
        Mockito.when(restTemplate.exchange(Mockito.anyString(), Mockito.eq(HttpMethod.POST), Mockito.any(), Mockito.eq(String.class)))
                .thenReturn(responseEntity);

        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        Assertions.assertEquals("Alarm details", result);
    }
}
```

