@Test
void testApplyPostingRule() throws Exception {
    // Prepare test data
    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("TEST_ALARM_1");

    PostingRule rule = new PostingRule();
    rule.setRuleId("1");
    rule.setRuleTraversalExpression("test_expression");

    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("key1", "value1");

    ObjectMapper objectMapper = new ObjectMapper();
    String jsonTopologyData = "{\"topologyObjects\":[{\"key\":\"value\"}]}";
    JsonNode jsonNode = objectMapper.readTree(jsonTopologyData);

    // Mock objects and method calls
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("result");
    when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok(jsonTopologyData));
    when(AlarmPostingConstants.getObjectMapper()).thenReturn(objectMapper);
    when(objectMapper.convertValue(any(JsonNode.class), eq(HashMap.class))).thenReturn(new HashMap<>());

    // Call the method
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    // Verify the method calls and assertions
    verify(utils, times(4)).evaluateExpression(anyString(), anyMap());
    verify(topoApiClient).fetchTopologyTraversalDetails(eq(alarm), eq(rule), eq("result"));
    assertNotNull(result);
    assertEquals("value", result.getTopologyDetails());
    assertEquals("result", result.getAlarmedObject());
}

@Test
void testApplyPostingRule_NoTopologyObjectsNode() throws Exception {
    // Prepare test data
    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("TEST_ALARM_1");

    PostingRule rule = new PostingRule();
    rule.setRuleId("1");
    rule.setRuleTraversalExpression("test_expression");

    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("key1", "value1");

    ObjectMapper objectMapper = new ObjectMapper();
    String jsonTopologyData = "{\"key\":\"value\"}";
    JsonNode jsonNode = objectMapper.readTree(jsonTopologyData);

    // Mock objects and method calls
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("result");
    when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(ResponseEntity.ok(jsonTopologyData));
    when(AlarmPostingConstants.getObjectMapper()).thenReturn(objectMapper);
    when(objectMapper.convertValue(any(JsonNode.class), eq(HashMap.class))).thenReturn(new HashMap<>());

    // Call the method
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    // Verify the method calls and assertions
    verify(utils, times(1)).evaluateExpression(eq("%TopoObject:MO_Type%"), anyMap());
    verify(utils, times(1)).evaluateExpression(eq("%TopoObject:INMS_Attributes.TagSequence%"), anyMap());
    verify(utils, times(1)).evaluateExpression(eq(" %TopoObject: Name%\"}}"), anyMap());
    verify(utils, times(0)).evaluateExpression(eq("%TopoObject:OSS_Names[0]%"), anyMap());
    verify(topoApiClient).fetchTopologyTraversalDetails(eq(alarm), eq(rule), eq("result"));
    assertNotNull(result);
    assertNull(result.getTopologyDetails());
    assertNull(result.getAlarmedObject());
}

@Test
void testApplyPostingRule_Exception() throws Exception {
    // Prepare test data
    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("TEST_ALARM_1");

    PostingRule rule = new PostingRule();
    rule.setRuleId("1");
    rule.setRuleTraversalExpression("test_expression");

    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("key1", "value1");

    // Mock objects and method calls
    when(utils.evaluateExpression(anyString(), anyMap())).thenThrow(new RuntimeException("Error"));
    when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(null);

    // Call the method
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    // Verify the method calls and assertions
    verify(utils, times(1)).evaluateExpression(eq("%TopoObject:MO_Type%"), anyMap());
    verify(utils, times(0)).evaluateExpression(eq("%TopoObject:INMS_Attributes.TagSequence%"), anyMap());
    verify(utils, times(0)).evaluateExpression(eq(" %TopoObject: Name%\"}}"), anyMap());
    verify(topoApiClient).fetchTopologyTraversalDetails(eq(alarm), eq(rule), eq("result"));
    assertNotNull(result);
    assertEquals("TEST_ALARM_1", result.getAlarmIdentity());
    assertNull(result.getTopologyDetails());
    assertNull(result.getAlarmedObject());
}