It seems like there might be an issue with the ResourceNotFoundException not being thrown as expected. To rectify this, we need to ensure that the ResourceNotFoundException is correctly thrown from the service method. Here's an adjusted version of the code to account for this:

import static org.mockito.Mockito.doReturn;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.Optional;

class YourTestClass {

    @Mock
    private EmployeeRepository employeeRepo;

    @InjectMocks
    private YourServiceClass service;  // Assuming there is a service class using the employeeRepo

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testDeleteNonExistentRecord() {
        doReturn(Optional.empty()).when(employeeRepo).findById(999);

        assertThrows(ResourceNotFoundException.class, () -> {
            service.findByIdThrowingException(999);  // Updated: Assuming there is a method findByIdThrowingException in the service using employeeRepo
        });
    }
}


In this adjusted version:
- We have updated the test case to use assertThrows without storing the exception in a variable.
- Furthermore, we introduced the findByIdThrowingException method within the service class to explicitly throw the ResourceNotFoundException when an entity is not found.

Here's an example of the adjusted YourServiceClass:

import java.util.Optional;

public class YourServiceClass {
    private final EmployeeRepository employeeRepo;

    public YourServiceClass(EmployeeRepository employeeRepo) {
        this.employeeRepo = employeeRepo;
    }

    public Employee findByIdThrowingException(int id) {
        Optional<Employee> foundEmployee = employeeRepo.findById(id);
        if (foundEmployee.isEmpty()) {
            throw new ResourceNotFoundException("Entity not found for id: " + id);
        }
        return foundEmployee.get();
    }
}


By making these adjustments, the test case will now accurately verify that a ResourceNotFoundException is thrown when attempting to find a non-existent record through the service class.