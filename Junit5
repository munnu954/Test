Sure, here is the JUnit5 test code to cover the mentioned lines of the `applyPostingRule` method:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.junit.jupiter.api.extension.ExtendWith;
import java.util.HashMap;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @MockBean
    private Alarm alarm;

    @Test
    void testApplyPostingRule() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.createObjectNode();
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("key", "value");

        when(AlarmPostingConstants.getObjectMapper().convertValue(any(), any()))
                .thenReturn(alarmMap);
        when(utils.evaluateExpression(any(), any())).thenReturn("result");
        when(utils.evaluateExpression(any(), any())).thenReturn("result");

        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), any())).thenReturn(null);

        postingRuleProcessingService.applyPostingRule(alarm, new PostingRule(), alarmMap);
    }
}
```

In this test case, we are mocking the necessary dependencies and setting up mock behavior for the methods called within the `applyPostingRule` method. This should help in achieving 100% code coverage for the mentioned lines of the method. You can add more test cases to cover different scenarios and branches within the method.