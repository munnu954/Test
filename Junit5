Certainly! To ensure that all branches of the `if` statement `if(mapSet.getValue() == null || (mapSet.getValue() != null && mapSet.getValue() == ""))` are covered, we need to add test cases that specifically target these conditions. Here is the updated test code:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
public class PostingServiceTest {

    @InjectMocks
    private PostingService postingService;

    @Mock
    private Logger logger;

    @BeforeEach
    public void setUp() {
        postingService = new PostingService();
    }

    @Test
    public void testJsonAttributeFilter_AllBranches() {
        String alarmMsg = "{\"alarmDetails\":\"{\\\"key\\\":\\\"value\\\"}\",\"extTopologyDetails\":\"{}\",\"topologyDetails\":null,\"otherKey\":\"value\"}";
        String expected = "{\"alarmDetails\":\"{\\\"key\\\":\\\"value\\\"}\",\"otherKey\":\"value\"}";

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertEquals(expected, result);
    }

    @Test
    public void testJsonAttributeFilter_NullValue() {
        String alarmMsg = "{\"alarmDetails\":null}";
        String expected = "{}";

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertEquals(expected, result);
    }

    @Test
    public void testJsonAttributeFilter_EmptyStringValue() {
        String alarmMsg = "{\"alarmDetails\":\"\"}";
        String expected = "{}";

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertEquals(expected, result);
    }

    // New test case to cover the branch where mapSet.getValue() != null and mapSet.getValue() == ""
    @Test
    public void testJsonAttributeFilter_EmptyStringInDetails() {
        String alarmMsg = "{\"alarmDetails\":\"\",\"extTopologyDetails\":\"\",\"topologyDetails\":\"\"}";
        String expected = "{}";

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertEquals(expected, result);
    }

    // New test case to cover the branch where mapSet.getValue() != null and mapSet.getValue() is non-empty string
    @Test
    public void testJsonAttributeFilter_NonEmptyStringInDetails() {
        String alarmMsg = "{\"alarmDetails\":\"{\\\"key\\\":\\\"value\\\"}\", \"extTopologyDetails\":\"{\\\"key\\\":\\\"value\\\"}\", \"topologyDetails\":\"{\\\"key\\\":\\\"value\\\"}\"}";
        String expected = "{\"alarmDetails\":\"{\\\"key\\\":\\\"value\\\"}\",\"extTopologyDetails\":\"{\\\"key\\\":\\\"value\\\"}\",\"topologyDetails\":\"{\\\"key\\\":\\\"value\\\"}\"}";

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertEquals(expected, result);
    }

    @Test
    public void testJsonAttributeFilter_ExceptionHandling() {
        String alarmMsg = "";

        // Simulate exception by mocking ObjectMapper
        ObjectMapper mapper = mock(ObjectMapper.class);
        when(mapper.readValue(anyString(), eq(Map.class))).thenThrow(new RuntimeException("JSON parsing error"));

        // Temporarily replace the mapper in AlarmPostingConstants with the mock
        AlarmPostingConstants.setObjectMapper(mapper);

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertNull(result);
        verify(logger, times(1)).error(anyString(), any(Exception.class));

        // Restore the original mapper
        AlarmPostingConstants.setObjectMapper(null);
    }
}
```

### Explanation:

1. **`testJsonAttributeFilter_EmptyStringInDetails`**:
   - This test case ensures that when `alarmDetails`, `extTopologyDetails`, and `topologyDetails` are empty strings, they are removed from the result.

2. **`testJsonAttributeFilter_NonEmptyStringInDetails`**:
   - This test case checks that when these fields have non-empty string values, they are retained in the result.

These additional test cases should ensure that all branches of the `if` statement are covered, providing 100% code coverage.