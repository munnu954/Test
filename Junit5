import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class YourTestClass {

    private EmployeeRepository employeeRepo; // Assuming you have a valid instance of EmployeeRepository injected or created

    // Provided that the employeeRepo is properly initialized before each test
    @BeforeEach
    void setUp() {
        // Initialize employeeRepo here before each test
        // For example: employeeRepo = new EmployeeRepository(); or any other initialization method
    }

    @Test
    void testDeleteNonExistentRecord() {
        Exception exception = assertThrows(ResourceNotFoundException.class, () -> {
            employeeRepo.deleteById(999);
        });

        String expectedMessage = "Entity not found for id: 999";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testUpdateNonExistentRecord() {
        // Initialize input data with non-existent record ID
        Employee record = new Employee();
        record.setId(12);

        Exception exception = assertThrows(ResourceNotFoundException.class, () -> {
            employeeRepo.save(record);
        });

        String expectedMessage = "Entity not found for id: 12";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    @Test
    void testReadNonExistentRecord() {
        Exception exception = assertThrows(ResourceNotFoundException.class, () -> {
            employeeRepo.findById(999);
        });

        String expectedMessage = "Entity not found for id: 999";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}