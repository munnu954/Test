Certainly! To cover the `@Embeddable` annotation, you can add a test case to verify that the `SpaceCollectorCompositePK` class is correctly marked as embeddable. Here's an updated version of the test class:

```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import javax.persistence.Embeddable;
import java.time.LocalDateTime;

public class SpaceCollectorCompositePKTest {

    @Test
    public void testIsEmbeddable() {
        // Assert
        Assertions.assertTrue(SpaceCollectorCompositePK.class.isAnnotationPresent(Embeddable.class));
    }

    @Test
    public void testGettersAndSetters() {
        // Arrange
        String port = "8080";
        String url = "http://example.com";
        String connectionType = "TCP";
        Boolean enabled = true;
        LocalDateTime pollingDuration = LocalDateTime.now();
        
        // Act
        SpaceCollectorCompositePK compositePK = new SpaceCollectorCompositePK();
        compositePK.setPort(port);
        compositePK.setUrl(url);
        compositePK.setConnectionType(connectionType);
        compositePK.setEnabled(enabled);
        compositePK.setPollingDuration(pollingDuration);
        
        // Assert
        Assertions.assertEquals(port, compositePK.getPort());
        Assertions.assertEquals(url, compositePK.getUrl());
        Assertions.assertEquals(connectionType, compositePK.getConnectionType());
        Assertions.assertEquals(enabled, compositePK.getEnabled());
        Assertions.assertEquals(pollingDuration, compositePK.getPollingDuration());
    }

    @Test
    public void testEqualsAndHashCode() {
        // Arrange
        SpaceCollectorCompositePK compositePK1 = new SpaceCollectorCompositePK();
        compositePK1.setPort("8080");
        compositePK1.setUrl("http://example.com");
        compositePK1.setConnectionType("TCP");
        compositePK1.setEnabled(true);
        compositePK1.setPollingDuration(LocalDateTime.now());

        SpaceCollectorCompositePK compositePK2 = new SpaceCollectorCompositePK();
        compositePK2.setPort("8080");
        compositePK2.setUrl("http://example.com");
        compositePK2.setConnectionType("TCP");
        compositePK2.setEnabled(true);
        compositePK2.setPollingDuration(LocalDateTime.now());

        // Assert
        Assertions.assertEquals(compositePK1, compositePK2);
        Assertions.assertEquals(compositePK1.hashCode(), compositePK2.hashCode());
    }
}
```

This added test case `testIsEmbeddable()` checks if the `SpaceCollectorCompositePK` class is annotated with `@Embeddable`.


Sure! Here's an example of a JUnit test class for the `SpaceCollectorCompositePK` class that provides complete code coverage:

```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;

public class SpaceCollectorCompositePKTest {

    @Test
    public void testGettersAndSetters() {
        // Arrange
        String port = "8080";
        String url = "http://example.com";
        String connectionType = "TCP";
        Boolean enabled = true;
        LocalDateTime pollingDuration = LocalDateTime.now();
        
        // Act
        SpaceCollectorCompositePK compositePK = new SpaceCollectorCompositePK();
        compositePK.setPort(port);
        compositePK.setUrl(url);
        compositePK.setConnectionType(connectionType);
        compositePK.setEnabled(enabled);
        compositePK.setPollingDuration(pollingDuration);
        
        // Assert
        Assertions.assertEquals(port, compositePK.getPort());
        Assertions.assertEquals(url, compositePK.getUrl());
        Assertions.assertEquals(connectionType, compositePK.getConnectionType());
        Assertions.assertEquals(enabled, compositePK.getEnabled());
        Assertions.assertEquals(pollingDuration, compositePK.getPollingDuration());
    }

    @Test
    public void testEqualsAndHashCode() {
        // Arrange
        SpaceCollectorCompositePK compositePK1 = new SpaceCollectorCompositePK();
        compositePK1.setPort("8080");
        compositePK1.setUrl("http://example.com");
        compositePK1.setConnectionType("TCP");
        compositePK1.setEnabled(true);
        compositePK1.setPollingDuration(LocalDateTime.now());

        SpaceCollectorCompositePK compositePK2 = new SpaceCollectorCompositePK();
        compositePK2.setPort("8080");
        compositePK2.setUrl("http://example.com");
        compositePK2.setConnectionType("TCP");
        compositePK2.setEnabled(true);
        compositePK2.setPollingDuration(LocalDateTime.now());

        // Assert
        Assertions.assertEquals(compositePK1, compositePK2);
        Assertions.assertEquals(compositePK1.hashCode(), compositePK2.hashCode());
    }
}
```

This test class covers the getters and setters as well as the `equals()` and `hashCode()` methods of the `SpaceCollectorCompositePK` class, ensuring 100% code coverage.