To avoid the NullPointerException error of Alarm class being null, you need to ensure that you initialize the `Alarm` object before invoking any methods on it. In your test cases, make sure to create an instance of the `Alarm` class before calling the `createAlarm` method.

Here's an example of how you can modify your test case to create an instance of the `Alarm` class before invoking the `createAlarm` method:

```java
@Test
void testCreateAlarm() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();

    percMap.put("Other", 6);
    percMap.put("Indeterminate", 1);
    stateMap.put("cleared", 6);

    when(postgresConf.getAlarmTypeMap()).thenReturn(percMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("New");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    JsonNode json = obj.readTree("{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}");

    // Create an instance of Alarm before calling createAlarm method
    Alarm alarm = new Alarm(); 

    // Call the createAlarm method with the created Alarm object
    alarmRepositoryImpl.createAlarm(json.toString());

    // Add assertions as needed
}
```

By creating an instance of the `Alarm` class before calling the `createAlarm` method, you can avoid the NullPointerException error. Make sure to add assertions based on the expected behavior of the method to ensure that the test cases cover all branches of the code.