import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

@Configuration
public class CBRSSuppressionApplicationTest {
    
    @Mock
    private Environment env;
    
    @Mock
    private ConfigurableApplicationContext appContext;
    
    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }
    
    @Test
    public void testMainWithoutException() {
        CBRSSuppressionApplication app = new CBRSSuppressionApplication(env);
        
        app.main(new String[] {});
        
        // Verify that the AlarmConsumer and MessageReaderService beans are started
        Mockito.verify(appContext.getBean(AlarmConsumer.class)).start();
        Mockito.verify(appContext.getBean(MessageReaderService.class)).start();
    }
    
    @Test
    public void testMainWithUnsatisfiedDependencyException() {
        Mockito.when(env.getProperty("RDB_BAD_QUERY")).thenReturn("BadQuery");
        
        CBRSSuppressionApplication app = new CBRSSuppressionApplication(env);
        
        Mockito.when(appContext.getBean(AlarmConsumer.class)).thenThrow(new UnsatisfiedDependencyException(""));
        
        app.main(new String[] {});
        
        // Verify that the error message is logged
        Mockito.verify(CBRSSuppressionApplication.logger)
               .error(Mockito.eq("BadQuery:"));
    }
    
    @Bean
    public CBRSSuppressionApplication cbrsSuppressionApplication() {
        return new CBRSSuppressionApplication(env);
    }
}