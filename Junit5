@Test
void testApplyPostingRule() throws Exception {
    // Mocking dependencies
    PostingRule rule = new PostingRule();
    rule.setRuleId("1");
    rule.setRuleTraversalExpression("expression");
    rule.setRulePriority(1);

    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("123");

    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("alarmId", "123");
    
    ResponseEntity<String> responseEntity = new ResponseEntity<>("Topology data", HttpStatus.OK);
    when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(responseEntity);

    JsonNode jsonNode = AlarmPostingConstants.getObjectMapper().readTree("{\"topology\":\"data\"}");
    when(AlarmPostingConstants.getObjectMapper().readTree("Topology data")).thenReturn(jsonNode);

    JsonNode topologyObjectsNode = mock(JsonNode.class);
    when(jsonNode.at(AlarmPostingConstants.TRAVERSAL_TOPOLOGYOBJECTS_PATH)).thenReturn(topologyObjectsNode);
    when(topologyObjectsNode.isMissingNode()).thenReturn(false);
    when(topologyObjectsNode.isArray()).thenReturn(true);

    JsonNode topoObjectNode = mock(JsonNode.class);
    when(topologyObjectsNode.iterator()).thenReturn(Arrays.asList(topoObjectNode).iterator());
    when(topoObjectNode.get(anyString())).thenReturn(mock(JsonNode.class));

    when(utils.evaluateExpression(anyString(), any())).thenReturn("test");

    // Testing applyPostingRule
    alarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    // Verify that alarm details are updated
    assertEquals("test", alarm.getAlarmedObject());
    assertNotNull(alarm.getTopologyDetails());

    // Verify that the topology data is processed correctly
    verify(AlarmPostingConstants.getObjectMapper(), times(3)).readTree(anyString());
}
