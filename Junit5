To achieve 100% code coverage for the `KafkaConfiguration` class using JUnit 5 and Reflection API, you'll want to create test cases that cover the instantiation of the `producerFactory` and `kafkaTemplate` methods. Below is an example of how you might write these test cases:

```java
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties;

import java.lang.reflect.Field;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class KafkaConfigurationTest {

    @InjectMocks
    private KafkaConfiguration kafkaConfiguration;

    @Mock
    private KafkaProperties kafkaProperties;

    @BeforeEach
    public void setUp() throws Exception {
        // Using reflection to set the private field kafkaProperties
        Field kafkaPropertiesField = KafkaConfiguration.class.getDeclaredField("kafkaProperties");
        kafkaPropertiesField.setAccessible(true);
        kafkaPropertiesField.set(kafkaConfiguration, kafkaProperties);

        // Mock Kafka properties
        Map<String, Object> producerConfigs = Map.of(
                ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092",
                ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class,
                ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class
        );
        when(kafkaProperties.buildProducerProperties()).thenReturn(producerConfigs);
    }

    @Test
    public void testProducerFactory() {
        ProducerFactory<String, String> producerFactory = kafkaConfiguration.producerFactory();
        assertNotNull(producerFactory);
        assertNotNull(((DefaultKafkaProducerFactory<String, String>) producerFactory).getConfigurationProperties());
    }

    @Test
    public void testKafkaTemplate() {
        KafkaTemplate<String, String> kafkaTemplate = kafkaConfiguration.kafkaTemplate();
        assertNotNull(kafkaTemplate);
        assertNotNull(kafkaTemplate.getProducerFactory());
    }
}
```

### Explanation:

1. **Reflection Usage**: The `setUp` method uses Java Reflection to set the private `kafkaProperties` field in the `KafkaConfiguration` class. This allows us to inject the mock `KafkaProperties` without changing the visibility of the field.

2. **Mocking**: We use Mockito to mock the `KafkaProperties` and define what should be returned when `buildProducerProperties()` is called. This allows us to control the environment in which the `producerFactory` and `kafkaTemplate` methods are tested.

3. **Assertions**: In each test method, we assert that the objects returned (`ProducerFactory` and `KafkaTemplate`) are not null and contain the necessary configurations.

This setup should give you full coverage of the `KafkaConfiguration` class by testing both the `producerFactory()` and `kafkaTemplate()` methods.