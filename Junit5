CableProcessor class:-

public class CableProcessor extends AbstractClrComponentProcessor {
private static final CableProcessor INSTANCE= new CableProcessor();
private CableProcessor() {
}

public static CableProcessor getInstance() {
return INSTANCE;
}

String[] neTypesArray= CommonWrapperConstants.NE_TYPES.split(",");

@Override
public void process(List<Node> nodes, List<Link> links, ClrComponent clrComponent,
List<ClrComponent> clrComponentList, Map<String, List<Node>> clliNodeMap, int i, AtomicInteger ukCount, String sourceSys) {

if(isNotNull(clrComponent,  CommonWrapperConstants.CABLE)) {
CableComp cabobject= clrComponent.getCableComp().get(0);

Link cable= new Link();
cable.setLinkType(clrComponent.getType());
cable.addAttribute(new Attribute("cableName", getString(cabObject.getCableName()), "/site?id=123"));
cable.addAttribute(new Attribute("type", getString(cabObject.getType()), CommonWrapperConstants.DOUBLE_DASH));
cable.addAttribute(new Attribute("length", null != cabobject.getLength() ? cabobject.getLength().toString() : CommonWrapperConstants.DOUBLE_DASH, CommonWrapperConstants.DOUBLE_DASH));

cable.addAttribute(new Attribute("status", getString(cabObject.getStatus()), CommonWrapperConstants.DOUBLE_DASH));

String aloc= CommonWrapperConstants.EMTPY;

if (null != cabobject.getLocationA() && !cabObject.getLocationA().isEmpty()) {
aloc cabobject.getLocationA();

}

if (i > 0) {
ClrComponent prevClrComponent =clrComponentList.get(i-1);

String prevType = prevClrComponent.getType();

if(CommonWrapperConstants.PORT.equalsIgnoreCase(prevType) || CommonWrapperConstants.CHANNEL.equalsIgnoreCase(prevType)) {
if (isNotNull(prevClrComponent, CommonWrapperConstants.PORT)) {
PortRef prevEqtObject = null;
if (null != prevClrComponent.getEquipmentComp() && !prevClrComponent.getEquipmentComp().isEmpty() && null != prevClrComponent.getEquipmentComp().get(0).getPortRef() && !prevClrComponent.getEquipmentComp().get(0).getPortRef().isEmpty()) {
prevEqtObject = prevClrComponent.getEquipmentComp().get(0).getPortRef().get(0);
}
if (null !=aloc && aLoc.equalsIgnoreCase(prevEqtObject.getSiteCode())) {
cable.setSource(prevEqtObject.getPortID()); String cableShelfId=cabObject.getElementId()+":"+cabObject.getCablePairDetails().get(0).getStrandNumber();

Node prevNode = getNode(prevEqtObject.getShelfID(), nodes);
addPortToLink(cable, prevNode, nodes, 0);
links.add(cable);

PortRef eqtObject =new PortRef(); eqtObject.setShelfID(cableShelfId);
eqtObject.setPortID(cableShelfId);
cable.setTarget(eqtObject.getPortID());
addOrUpdateNode(eqtObject, nodes, clliNodeMap);
}
else {
if(Optional.ofNullable(prevEqtObject.getNeType()).isPresent())
prevEqtObject.setShelfID(Arrays.stream(neTypesArray).anyMatch(prevEqtObject.getNeType() ::equals)?prevEqtObject.getPortID(): prevEqtObject.getShelfID());

cable.setSource(prevEqtObject.getPortID()); String cableShelfId=cabObject.getElementId()+":"+cabObject.getCablePairDetails().get(0).getStrandNumber();
Node prevNode = getNode(prevEqtObject.getShelfID(), nodes);
addPortToLink(cable, prevNode, nodes, 0);
links.add(cable);

PortRef eqtObject= new PortRef();
eqtObject.setShelfID(cableShelfId);
eqtObject.setPortID(cableShelfId); cable.setTarget(eqtObject.getPortID());
addOrUpdateNode(eqtObject, nodes, clliNodeMap);
}
}}
else if(CommonWrapperConstants.TRAIL.equalsIgnoreCase(prevType) ||CommonWrapperConstants.CIRCUIT_PATH_LINK.equalsIgnoreCase(prevType) || CommonWrapperConstants.CIRCUIT.equalsIgnoreCase (prevType)) {
Link prevTrail =links.get(links.size() - 1);
Node node= getNode(prevTrail.getTarget( ), nodes);
cable.setSource(node.getPortId());
String cableShelfId=cabObject.getElementId()+":"+cabObject.getCablePairDetails().get(0).getStrandNumber();
addPortTolink(cable, node, nodes, 0);
links.add(cable);
PortRef eqtObject= new PortRef();
eqtObject.setShelfID(cableShelfId);
eqtObject.setPortID (cableShelfId); cable.setTarget(eqtObject.getPortID());
addOrUpdateNode(eqtObject, nodes, clliNodeMap);
}
else if(CommonWrapperConstants.CABLE.equalsIgnoreCase(prevType)) {
Link prevCable =links.get(links.size() -1);
Node prevNode =getNode(prevCable.getTarget(), nodes);
cable.setSource(prevNode.getPortId());
String cableShelfId=cabObject.getElementId()+":"+cabObject.getCablePairDetails().get(0).getStrandNumber();
addPortToLink(cable, prevNode, nodes, 0);
links.add(cable);

PortRef eqtObject =new PortRef(); eqtObject.setShelfID(cableShelfId);
eqtObject.setPortID(cableShelfId); cable.setTarget(eqtObject.getPortID()); addOrUpdateNode(eqtObject, nodes, clliNodeMap);
}
else if((CommonWrapperConstants.SEGEMENT.equalsIgnoreCase(prevType))) {
if (isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL)) {
Link prevSegment = links.get(links.size() - 1);
PortRef eqtObject = getEmptyEquipment(CommonWrapperConstants. UNKNOWN + ukCount.getAndIncrement(), "");
addOrUpdateNode(eqtObject, nodes, clliNodeMap);

prevSegment.setTarget(eqtObject.getPortID()); addPortToLink (prevSegment, eqtObject, 1);

cable.setSource(eqtObject.getPortID()); addPortToLink(cable, eqtObject, 0);
}
}

else if(CommonWrapperConstants.PATH.equalsIgnoreCase(prevType)) {
Link prevPath = links.get(links.size()-1);
PortRef eqtObject = getEmptyEquipment(CommonWrapperConstants.UNKNOWN + ukCount.getAndIncrement(), "");
addOrUpdateNode(eqtObject, nodes, clliNodeMap);
prevPath.setTarget(eqtObject.getPortID()); addPortToLink(prevPath, eqtObject, 1);
cable.setSource(eqtObject.getPortID()); addPortToLink(cable, eqtObject, 0);
}}}}}
 

Write Junit5 testcases code covering all the branches of this CABLE, TRAIL, SEGEMENT,  CIRCUIT_PATH_LINK and CIRCUIT conditional statements of "if(i>0){ } " statement of this "process(List<Node> nodes, List<Link> links, ClrComponent clrComponent,
List<ClrComponent> clrComponentList, Map<String, List<Node>> clliNodeMap, int i, AtomicInteger ukCount, String sourceSys)" element/method of CableProcessor class for 100% code coverage.
where,

AbstractClrComponentProcessor class:-
public abstract class AbstractClrComponentProcessor {
public abstract void process(List<Node> nodes, List<Link> links, ClrComponent clrComponent, List<ClrComponent> clrComponentList, Map<String, List<Node>> clliNodeMap, int i, AtomicInteger ukCount, String sourceSys);
protected Node addOrUpdateNode(PortRef eqtObject, List<Node> nodes, Map<String, List<Node>> clliNodeMap) {
int index = -1;
Node node =new Node();
if(eqtObject != null) {
node.setShelfId(eqtObject.getShelfID());
}
if ((index = nodes.indexOf(node)) > -1) {
node= nodes.get(index);
node.setShelf1(getString(eqtObject.getShelfName()));
node.setSlot1(getString(eqtObject.getSlotName()));
node.setSubSlot1(getString(eqtObject.getSubSlotName()));
node.setPort1(getString(eqtObject.getPortName())); node.setPortBw1(getString(eqtObject.getPortBW()));
node.setPortId(getString(eqtObject.getPortID()));
} else {
if(eqtObject != null) {
node.addAttribute(new Attribute("neName", getString(eqtObject.getNeName()), getAttributeLink("neName", eqtObject.getNeName())));
if (eqtObject.getShelfTID() == null) {
node.addAttribute(new Attribute("tid", getString(eqtObject.getNeName()), getAttributeLink("tid", eqtObject.getNeName())));
} else {
node.addAttribute(new Attribute("tid", getString(eqtObject.getShelfTID()), getAttributeLink("tid", eqtObject.getShelfTID())));
}
node.addAttribute(new Attribute("clli", getString(eqtObject.getClliCode()), getAttributeLink("clli", eqtObject.getClliCode())));
node.setNeType(getString(eqtObject.getNeType()));
node.setVendor(getString(eqtObject.getShelfVendor()));
node.setModel(getString(eqtObject.getShelfModel()));
node.setAid(getString(eqtObject.getPortAID()));
node.setPortNumber(getString(eqtObject.getPortNumber())); node.setSiteCode(getString(eqtObject.getSiteCode())); node.setShelf0(getString(eqtObject.getShelfName())); node.setSlot0(getString(eqtObject.getSlotName()));
node.setSubSlot0(getString(eqtObject.getSubSlotName())); node.setPort0(getString(eqtObject.getPortName())); node.setPortBw0(getString(eqtObject.getPortBW())); node.setPortId(getString(eqtObject.getPortID())); node.setPortStatus(getString(eqtObject.getPortStatus()));
node.setShelfStatus(getString(eqtObject.getNeStatus()));
node.setPortName(getString(eqtObject.getPortName()));
node.setPortBandwidth(getString(eqtObject.getPortBW()));
nodes.add(node);
}
}
if(eqtObject != null) {
String clli= eqtObject.getClliCode();
if (clliNodeMap.containsKey(clli)) { clliNodeMap.get(clli).add(node);
} else {
List<Node> nodeList = new ArrayList<Node>();
nodeList.add(node);
clliNodeMap.put(clli, nodeList);
}
}
return node;
}
protected void addPortToLink(Link link, PortRef eqtObject, int port) {
String tid = CommonWrapperConstants.DOUBLE_DASH;
if (null != eqtObject && Optional.ofNullable(eqtObject.getPortID()).isPresent()) { 
if (null != eqtObject.getShelfTID(){
tid =getString(eqtObject.getShelfTID());
}
else if (null != eqtObject.getNeName()) {
tid =getString(eqtObject.getNeName());
}}
else{
tid = CommonWrapperConstants.PORT_UNDEFINED;
}
if (0 == port) {
link.addAttribute(new Attribute("tid0", tid, getAttributeLink("tid", tid)));
link.setShelf0(getString(eqtObject.getShelfName()));
link.setSlot0(getString(eqtObject.getSlotName()));
link.setSubSlot0(getString(eqtObject.getSubSlotName()));
link.setPort0(getString(eqtObject.getPortName()));
link.setPortBw0(getString(eqtObject.getPortBW()));
} else {
link.addAttribute(new Attribute("tid1", tid, getAttributeLink("tid", tid)));
link.setShelf1(getString(eqtObject.getShelfName()));
link.setSlot1(getString(eqtObject.getSlotName()));
link.setSubSlot1(getString(eqtObject.getSubSlotName()));
link.setPort1(getString(eqtObject.getPortName()));
link.setPortBw1(getString(eqtObject.getPortBW()));
}
}

protected void addPortToLink(Link link, Node node, List<Node> nodes, int port) {
String tid = null;
if (null != node) {
tid = getAttributeValue(node.getAttributes(), "tid");
}
if (null != nodes && nodes.indexOf(node) == 0) {
link.addAttribute(new Attribute("tid0", tid, getAttributeLink("tid", tid)));
link.setShelf0(getString(node.getShelf0()));
link.setSlot0(getString(node.getSlot0()));
link.setSubSlot0(getString(node.getSubSlot0()));
link.setPort0(getString(node.getPort0()));
link.setPortBw0(getString(node.getPortBw0()));
}
else if (0== port) {
link.addAttribute(new Attribute("tid0", tid, getAttributeLink("tid", tid)));
link.setShelf0(getString(node.getPortId()));
link.setSlot0(getString(node.getSlot1()));
link.setSubSlot0(getString(node.getSubSlot1()));
link.setPort0(getString(node.getPortId())); link.setPortBw0(getString(node.getPortBw1()));
}
else if (1== port) {
link.addAttribute(new Attribute("tid1", tid, getAttributeLink("tid", tid)));
link.setShelf1(getString(node.getShelf0()));
link.setSlot1(getString(node.getSlot0()));
link.setSubSlot1(getString(node.getSubSlot0()));
link.setPort1(getString(node.getPort0())); link.setPortBw1(getString(node.getPortBw0()));
}
}

protected void addTargetInfoToLink(Link link, List<Node> nodeList) {
Node node= nodeList.get(nodeList.size() - 1);
addPortToLink(link, node, null, 1);
link.setTarget(node.getPortId());
}

protected boolean doesNodeAlreadyExist(String shelfId, List<Node> nodes) {
Node node =new Node();
node.setShelfId(shelfId);
if (nodes.contains (node)) {
return true;
}
return false;
}
protected void addSourceInfoToLink(Link link, List<Node> nodeList) {
Node node =nodeList.get(nodeList.size() -1);
addPortToLink(link, node, null, 0);
link.setSource(node.getPortId());
}
protected Node getNode(String shelfId, List<Node> nodes) {
int index = -1;
Node node= new Node();
node.setShelfId(shelfId);
if ((index= nodes.indexOf(node)) > -1) {
return nodes.get(index);
} else {
return null;
}
}
protected String getString(String field) {
return (null != field && !CommonWrapperConstants.EMTPY.equalsIgnoreCase(field)) ? field : CommonWrapperConstants.DOUBLE_DASH;
}

protected String getAttributeValue(List<Attribute> attrList, String name) {
int index = -1;
Attribute attr = new Attribute(name, null);
if ((index attrList.indexOf(attr)) > -1) {
return attrList.get(index).getValue();
} else {
return CommonWrapperConstants.DOUBLE_DASH;
}
}

protected boolean isNotNull(ClrComponent clrComponent, String type) {
if(CommonWrapperConstants.PORT.equalsIgnoreCase(type)) {
if (null != clrComponent && null != clrComponent.getType())
return true;
}
else if(CommonWrapperConstants.TRAIL.equalsIgnoreCase(type)) {
if (null != clrComponent && null != clrComponent.getCircuitComp() && !clrComponent.getCircuitComp().isEmpty()
&& null != clrComponent.getCircuitComp().get(0).getCircuitInfo() && !clrComponent.getCircuitComp().get(0).getCircuitInfo().isEmpty()) {
return true;
}}
else if(CommonWrapperConstants.CABLE.equalsIgnoreCase(type)) {
if (null != clrComponent && null !=clrComponent.getCableComp() && !clrComponent.getCableComp().isEmpty()) {
return true;
}}
return false;
}

protected PortRef getEmptyEquipment(String shelfId, String clli) {
PortRef eqtObject = new PortRef();
eqtObject.setShelfID(shelfId);
eqtObject.setPortID(shelfId);
eqtObject.setClliCode(clli);
eqtObject.setNeName(CommonWrapperConstants.DOUBLE_DASH); eqtObject.setShelfTID(CommonWrapperConstants.PORT_UNDEFINED);
return eqtObject;
}

protected String getAttributeLink(String name, String value) {
if (null != value && !value.isEmpty() && ! CommonWrapperConstants.UNKNOWN.equalsIgnoreCase(value) && !CommonWrapperConstants.DOUBLE_DASH.equalsIgnoreCase(value)) {
if ("neName".equalsIgnoreCase(name)) {
return "/nePage?id=" + value;
}
else if ("tid".equalsIgnoreCase(name)) {
return "/tidPage?id=" + value;
}
else if ("clli".equalsIgnoreCase(name)) {
return "/clliPage?id=" + value;
}
else {
return CommonWrapperConstants.EMTPY;
}}
else{
return CommonWrapperConstants.EMTPY;
}}
}

ClrComponent class:-
@Data
@Getter
@Setter
@JsonInclude(Include.NON_EMPTY)
public class ClrComponent {
@JsonProperty("type")
private String type;
@JsonProperty("cableComp")
private List<CableComp> cableComp = new ArrayList();
@JsonProperty("circuitComp")
private List<CircuitComp> circuitComp = new ArrayList();
@JsonProperty("equipmentComp")
private List<EquipmentComp> equipmentComp = new ArrayList();
@JsonProperty("equipment Comp")
public List<EquipmentComp> getEquipmentComp() {
return this.equipmentComp;
@JsonProperty("circuitComp")
public List<CircuitComp> getCircuitComp() { return this.circuitComp; }
@JsonProperty("cableComp")
public List<CableComp> getCableComp() {
return this.cableComp; }
@JsonProperty("type")
public String getType() { return this.type; }
public ClrComponent() { }}

CableComp class:-
JsonInclude(Include.NON_EMPTY)
@Data
public class CableComp { @JsonProperty("locationA")
private String locationA;
@JsonProperty("locationZ")
private String locationZ;
@JsonProperty("cableName")
private String cableName;
@JsonProperty("length")
private Object length;
@JsonProperty("type")
private String type;
@JsonProperty("status")
private String status;
@JsonProperty("cablePairDetails")
private List<CablePairDetail> cablePairDetails = new ArrayList();
@JsonProperty("elementId")
private String elementId;
}

CablePairDetail class:-
@JsonInclude (Include.NON_EMPTY)
@Data
@Getter
@Setter
public class CablePairDetail { @JsonProperty("strandNumber")
private String strandNumber; 
}

EquipmentComp class:-
@Getter
@Setter
@Data
@JsonInclude (Include.NON_EMPTY)
@JsonPropertyOrder({"portRef"})
public class EquipmentComp {
@JsonProperty("portRef")
private List<PortRef> portRef = new ArrayList();
@JsonProperty("portRef")
public List<PortRef> getPortRef() { 
return this.portRef; }
public EquipmentComp() { }
}


PortRef class:-
@JsonInclude(Include.NON_EMPTY)
@Getter
@Setter
public class PortRef{
@JsonProperty("siteCode")
private String siteCode;
@JsonProperty("portID")
private String portID;
@JsonProperty("shelfID")
private String shelfID;
@JsonProperty("clliCode")
private String clliCode;
@JsonProperty("neName")
private String neName;
@JsonProperty("neStatus")
private String neStatus;
@JsonProperty("neType")
private String neType;
@JsonProperty("shelfTID")
private String shelfTID;
@JsonProperty("slotName")
private String slotName;
@JsonProperty("shelfVendor")
private String shelfVendor;
@JsonProperty("shelfModel")
private String shelfModel;
@JsonProperty("shelfName")
private String shelfName;
@JsonProperty("portBW")
private String portBW;
@JsonProperty("portAID")
private String portAID;
@JsonProperty("portNumber")
private String portNumber;
@JsonProperty("portName")
private String portName;
@JsonProperty("subSlotName")
private String subSlotName;
}

Node class:-
@Getter
@Setter
public class Node {
private String shelfId;
private String shelfStatus;
private String neType;
private String vendor;
private String model;
private String aid;
private String portName;
private String portNumber;
private String portStatus;
private String portBandwidth;
private String siteCode;
private String shelf0 = “--”;
private String shelf1 =“--”;
private String slot0 =“--”;
private String slot1“=--”;
private String subslot0 = “--”;
private String subSlot1 = “--”;
private String port0 = “--”;
private String port1= “--”;
private String portBw0= “--”;
private String portBw1= “--”;
private List<Attribute> attributes = new ArrayList<Attribute>();
private String portId;
}

Link class:-
@Getter
@Setter
public class Link {
private String linkType;
private String source =“--”;
private String target =“--”;
private string shelf0 =“--”;
private String shelf1 =“--”;
private String slot0 =“--”;
private String slot1 = String
private String subSlot0=“--”;
private String subSlot1 =“--”;
private String port0 =“--”;
private String port1 =“--”;
private String portBw0= “--”;
private String portBw1 =“--”;
private List<Attribute> attributes = new ArrayList<Attribute>();
}
Attribute class:-
@Getter
@Setter
public class Attribute {
private String name;
private String value;
private String link;
public Attribute(String name, String value) {
super();
this.name = name;
this.value =value;
}
public Attribute(String name, String value, String link) {
super();
this.name = name;
this.value = value;
this.link =link;
}
}
CircuitDetailResponse class:-
@JsonInclude(Include.NON_EMPTY)
@Getter
@Setter
public class CircuitDetailResponse {
@JsonProperty("circuitData")
private CircuitData circuitData;
@JsonProperty("currentPage")
private String currentPage;
@JsonProperty("message")
private String message;
@JsonProperty("description")
private String description;
@JsonProperty("status")
private String status;
public CircuitDetailResponse() { }}

CircuitData class:-
@JsonInclude(Include.NON_EMPTY)
@Getter
@Setter
public class CircuitData {
@JsonProperty("circuitLst")
private List<CircuitLst> circuitLst = new ArrayList();
}
CircuitLst class:-
@JsonInclude (Include.NON_EMPTY)
@Getter
@Setter
public class CircuitLst {
@JsonProperty("circuit")
private List<Circuit> circuit = new ArrayList();
public CircuitLst() {
}}

Note:- 
Please make sure to avoid these errors while writing the Junit5 testcases code for the above:-
"java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0", java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 0", java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1",

"java.lang.NullPointerException: Cannot invoke "PortRef.getPortID()" because "prevEqtObject" is null, 

and
 java.lang.NullPointerException: Cannot invoke "Node.getPortId()" because  "node" is null"