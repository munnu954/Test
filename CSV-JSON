@Test
public void testTriggerJobSuccessfulAndPublishMessage() throws JSONException {
    // Mocking the required dependencies
    
    // Creating a sample Unified AuditMessage for testing
    String flinkJobJarid = "b9b4c3b9-5cee-43a9-a911-6a23b9d2ad91_custom-csv-data-transformer-0.0.1-SNAPSHOT-jar-with-dependencies.jar";
    String programArgs = "-input input -fileType csv -bootstarpServer localhost:9092 -Topic COLLECTION-OUTPUT";
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    auditMsg.setInputFilePath("C:/Temp/Device.csv");
    
    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_JSON);
    JSONObject requestBody = new JSONObject();
    requestBody.put("programArgs", programArgs.replace("input", auditMsg.getInputFilePath()));
    
    String jobSubmitUrl = "http://localhost:8081/jars/" + flinkJobJarid + "/run";
    HttpEntity<String> request = new HttpEntity<>(requestBody.toString(), headers);
    ResponseEntity<String> responseEntity = new ResponseEntity<>(HttpStatus.FOUND);
    
    // Mocking restTemplate.postForEntity() method to return a successful response
    Mockito.when(restTemplate.postForEntity(Mockito.eq(jobSubmitUrl), Mockito.eq(request), Mockito.eq(String.class))).thenReturn(responseEntity);
    
    // Mocking restTemplate.getForObject() method to return FINISHED job state
    JsonNode jsonNode = new ObjectMapper().createObjectNode();
    ((ObjectNode) jsonNode).put("state", "FINISHED");
    Mockito.when(restTemplate.getForObject(Mockito.contains("/jobs/"), Mockito.eq(JsonNode.class))).thenReturn(jsonNode);
    
    // Triggering the job and asserting the result
    String result = flinkApiController.triggerJob(auditMsg, ".csv");
    assertEquals("Job submitted", result);
    
    // Verifying that kafkaAuditProducer.createMessageAndLog() method is called with the correct parameters and jobStatus is set to FLINK_JOB_SUBMITTED
    Mockito.verify(kafkaAuditProducer).createMessageAndLog(Mockito.eq(auditMsg.getInputFilePath()), Mockito.eq(auditMsg.getUrl()), Mockito.eq(auditMsg.getPort()), Mockito.eq(auditMsg.getOutputFilePath()), Mockito.eq(auditMsg.getDelimiters()), Mockito.eq(".csv"), Mockito.anyString(), Mockito.eq(auditMsg.getNo_of_records_in_the_file()), Mockito.eq(auditMsg.getNo_of_records_processed()), Mockito.eq(auditMsg.getNo_of_records_failed()), Mockito.eq(auditMsg.getJob_id()), Mockito.eq(auditMsg.getJar_id()), Mockito.eq(auditMsg.getCollector_id()), Mockito.eq(auditMsg.getExceptions()), Mockito.eq(JobStatus.FLINK_JOB_SUBMITTED.toString()));
}

@Test
public void testTriggerJobNotSuccessfulAndPublishMessage() throws JSONException {
    // Mocking the required dependencies
    
    // Creating a sample Unified AuditMessage for testing
    String flinkJobJarid = "b9b4c3b9-5cee-43a9-a911-6a23b9d2ad91_custom-csv-data-transformer-0.0.1-SNAPSHOT-jar-with-dependencies.jar";
    String programArgs = "-input input -fileType csv -bootstarpServer localhost:9092 -Topic COLLECTION-OUTPUT";
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
    auditMsg.setInputFilePath("C:/Temp/Device.csv");
    
    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_JSON);
    JSONObject requestBody = new JSONObject();
    requestBody.put("programArgs", programArgs.replace("input", auditMsg.getInputFilePath()));
    
    String jobSubmitUrl = "http://localhost:8081/jars/" + flinkJobJarid + "/run";
    HttpEntity<String> request = new HttpEntity<>(requestBody.toString(), headers);
    
    // Mocking restTemplate.postForEntity() method to return a unsuccessful response
    ResponseEntity<String> responseEntity = new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    Mockito.when(restTemplate.postForEntity(Mockito.eq(jobSubmitUrl), Mockito.eq(request), Mockito.eq(String.class))).thenReturn(responseEntity);
    
    // Triggering the job and asserting the result
    String result = flinkApiController.triggerJob(auditMsg, ".csv");
    assertEquals("Job is not triggered", result);
    
    // Verifying that kafkaAuditProducer.createMessageAndLog() method is called with the correct parameters and jobStatus is set to FLINK_JOB_FAILED
    Mockito.verify(kafkaAuditProducer).createMessageAndLog(Mockito.eq(auditMsg.getInputFilePath()), Mockito.eq(auditMsg.getUrl()), Mockito.eq(auditMsg.getPort()), Mockito.eq(auditMsg.getOutputFilePath()), Mockito.eq(auditMsg.getDelimiters()), Mockito.eq(".csv"), Mockito.anyString(), Mockito.eq(auditMsg.getNo_of_records_in_the_file()), Mockito.eq(auditMsg.getNo_of_records_processed()), Mockito.eq(auditMsg.getNo_of_records_failed()), Mockito.eq(auditMsg.getJob_id()), Mockito.eq(auditMsg.getJar_id()), Mockito.eq(auditMsg.getCollector_id()), Mockito.eq(auditMsg.getExceptions()), Mockito.eq(JobStatus.FLINK_JOB_FAILED.toString()));
}