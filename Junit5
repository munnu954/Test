import com.verizon.uts.coconut.device.service.CoconutServiceVersion3;
import com.verizon.uts.coconut.device.util.CoconutDeviceMSConstants;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(MockitoExtension.class)
class CoconutServiceVersion3Test {

    @InjectMocks
    private CoconutServiceVersion3 coconutServiceVersion3;

    @Test
    void testQueryBasedOnParameter_withLocationCLLIAndSiteName() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "abc");
        queryParams.put("siteName", "xyz");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY + CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'abc'") + CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'xyz'");

        String actualQuery = getQueryBasedOnParameter(queryParams);
        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    void testQueryBasedOnParameter_withLocationCLLI() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "abc");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY + CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'abc'");

        String actualQuery = getQueryBasedOnParameter(queryParams);
        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    void testQueryBasedOnParameter_withSiteName() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "xyz");

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY + CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'xyz'");

        String actualQuery = getQueryBasedOnParameter(queryParams);
        assertEquals(expectedQuery, actualQuery);
    }

    @Test
    void testQueryBasedOnParameter_withoutLocationCLLIAndSiteName() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Map<String, Object> queryParams = new HashMap<>();

        String expectedQuery = CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;

        String actualQuery = getQueryBasedOnParameter(queryParams);
        assertEquals(expectedQuery, actualQuery);
    }

    private String getQueryBasedOnParameter(Map<String, Object> queryParams) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        return (String) method.invoke(coconutServiceVersion3, queryParams);
    }
}