To achieve 100% code coverage for the `while` loop in the `filterAccountNum` method of the `EventsMessageListener` class, we need to write test cases that cover all possible scenarios. This includes:

1. An account number with leading zeros.
2. An account number without leading zeros.
3. An account number that is completely zero.
4. An empty account number.

Here's how you can write these JUnit 5 test cases using `ReflectionTestUtils` to access the private `filterAccountNum` method:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(MockitoExtension.class)
public class EventsMessageListenerTest {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testFilterAccountNum_withLeadingZeros() {
        // Account number with leading zeros
        String accountNum = "0000123456";
        String expected = "123456";

        String result = ReflectionTestUtils.invokeMethod(eventsMessageListener, "filterAccountNum", accountNum);

        assertEquals(expected, result);
    }

    @Test
    public void testFilterAccountNum_withoutLeadingZeros() {
        // Account number without leading zeros
        String accountNum = "123456";
        String expected = "123456";

        String result = ReflectionTestUtils.invokeMethod(eventsMessageListener, "filterAccountNum", accountNum);

        assertEquals(expected, result);
    }

    @Test
    public void testFilterAccountNum_completelyZero() {
        // Account number that is completely zero
        String accountNum = "0000000";
        String expected = "";

        String result = ReflectionTestUtils.invokeMethod(eventsMessageListener, "filterAccountNum", accountNum);

        assertEquals(expected, result);
    }

    @Test
    public void testFilterAccountNum_emptyString() {
        // Empty account number
        String accountNum = "";
        String expected = "";

        String result = ReflectionTestUtils.invokeMethod(eventsMessageListener, "filterAccountNum", accountNum);

        assertEquals(expected, result);
    }
}
```

### Explanation:

1. **Test Setup**: 
   - Use `@InjectMocks` to inject dependencies, and `MockitoAnnotations.openMocks` to initialize them.

2. **`testFilterAccountNum_withLeadingZeros`**: 
   - Verifies that leading zeros are removed from the account number.

3. **`testFilterAccountNum_withoutLeadingZeros`**: 
   - Ensures that an account number without leading zeros remains unchanged.

4. **`testFilterAccountNum_completelyZero`**: 
   - Checks that an account number consisting entirely of zeros results in an empty string.

5. **`testFilterAccountNum_emptyString`**: 
   - Confirms that an empty account number remains unchanged.

These tests ensure that all logical branches of the `while` loop in the `filterAccountNum` method are covered, achieving full code coverage for this specific part of the code.