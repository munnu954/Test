Sure! Here's an example of how you can write JUnit test cases for the code you provided:

```java
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.test.util.AbstractTestBase;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class MainTest extends AbstractTestBase {

    // Test data for file source
    private final List<String> testData = new ArrayList<>();

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @BeforeEach
    public void setUp() {
        // Redirect system.out for testing
        System.setOut(new PrintStream(outContent));

        // Prepare test data for file source
        testData.add("data1,data2,data3");
        testData.add("data4,data5,data6");
    }

    @Test
    public void testMainMethod() throws Exception {
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        env.setParallelism(1);

        String path = "src\\main\\resources\\files";
        final FileSource<String> source = FileSource
                .forRecordStreamFormat(new TestTextLineInputFormat(testData), new Path(path))
                .build();
        final DataStream<String> stream = env.fromSource(source, WatermarkStrategy.noWatermarks(), "file-source");

        // Redirect system.out for testing
        System.setOut(new PrintStream(outContent));

        Main.main(new String[0]);

        env.execute();

        // Verify system.out output
        assertEquals("Hello world!", outContent.toString().trim());
    }

    @Test
    public void testMyFlatMapFunction() throws Exception {
        MyFlatMapFunction function = new MyFlatMapFunction();
        Collector<String> collector = new TestCollector<>();

        function.flatMap("data1,data2,data3", collector);

        // Verify collected data
        List<String> collectedData = ((TestCollector<String>) collector).getCollectedData();
        assertEquals("{\"key1\":\"data1\",\"key2\":\"data2\",\"key3\":\"data3\"}", collectedData.get(0));
    }

    private static class TestTextLineInputFormat extends TextLineInputFormat {
        private final List<String> input;

        public TestTextLineInputFormat(List<String> input) {
            this.input = input;
        }

        @Override
        public boolean reachedEnd() {
            return input.isEmpty();
        }

        @Override
        public Tuple2<Long, String> nextRecord(Tuple2<Long, String> reuse) {
            if (!input.isEmpty()) {
                String value = input.remove(0);
                return Tuple2.of(0L, value);
            }
            return null;
        }
    }

    private static class TestCollector<T> implements Collector<T> {
        private final List<T> collectedData = new ArrayList<>();

        @Override
        public void collect(T record) {
            collectedData.add(record);
        }

        @Override
        public void close() {
            // No-op
        }

        public List<T> getCollectedData() {
            return collectedData;
        }
    }
}
```

In these test cases, I've used Flink's `AbstractTestBase` to set up a test environment for Flink-specific classes and utilities. I've also implemented a `TestTextLineInputFormat` to provide test data for the file source and a `TestCollector` for collecting the output of the `MyFlatMapFunction`.