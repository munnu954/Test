Sure, here is a Junit5 test case for the `jsonAttributeFilter` method covering all the branches and the exception case:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
public class PostingServiceTest {

    @InjectMocks
    private PostingService postingService;

    @Mock
    private Logger logger;

    @BeforeEach
    public void setUp() {
        postingService = new PostingService();
    }

    @Test
    public void testJsonAttributeFilter_AllBranches() {
        String alarmMsg = "{\"alarmDetails\":\"{\\\"key\\\":\\\"value\\\"}\",\"extTopologyDetails\":\"{}\",\"topologyDetails\":null,\"otherKey\":\"value\"}";
        String expected = "{\"alarmDetails\":\"{\\\"key\\\":\\\"value\\\"}\",\"otherKey\":\"value\"}";

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertEquals(expected, result);
    }

    @Test
    public void testJsonAttributeFilter_NullValue() {
        String alarmMsg = "{\"alarmDetails\":null}";
        String expected = "{}";

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertEquals(expected, result);
    }

    @Test
    public void testJsonAttributeFilter_EmptyStringValue() {
        String alarmMsg = "{\"alarmDetails\":\"\"}";
        String expected = "{}";

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertEquals(expected, result);
    }

    @Test
    public void testJsonAttributeFilter_ExceptionHandling() {
        String alarmMsg = "";

        // Simulate exception by mocking ObjectMapper
        ObjectMapper mapper = mock(ObjectMapper.class);
        when(mapper.readValue(anyString(), eq(Map.class))).thenThrow(new RuntimeException("JSON parsing error"));

        // Temporarily replace the mapper in AlarmPostingConstants with the mock
        AlarmPostingConstants.setObjectMapper(mapper);

        String result = postingService.jsonAttributeFilter(alarmMsg);
        assertNull(result);
        verify(logger, times(1)).error(anyString(), any(Exception.class));

        // Restore the original mapper
        AlarmPostingConstants.setObjectMapper(null);
    }
}
```

In this test case:

1. `testJsonAttributeFilter_AllBranches` tests the main flow where different branches of the `if` conditions are covered.
2. `testJsonAttributeFilter_NullValue` tests the branch where the value is `null`.
3. `testJsonAttributeFilter_EmptyStringValue` tests the branch where the value is an empty string.
4. `testJsonAttributeFilter_ExceptionHandling` tests the catch block by simulating an exception thrown by the `ObjectMapper`.

Note that `AlarmPostingConstants.setObjectMapper` is a made-up method for the sake of the test example. You would need to add a way to set the `ObjectMapper` in your `AlarmPostingConstants` class for this to work. This could be done by adding a `setObjectMapper` method in `AlarmPostingConstants`:

```java
public static void setObjectMapper(ObjectMapper customMapper) {
    mapper = customMapper;
}
```