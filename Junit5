Sure! Here's an example of JUnit 5 test cases that cover all 8 branches of the mentioned code block:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class AlarmRepositoryImplTest {

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testCreateAlarmWithNullPerceivedSeverityAndClearedState() throws Exception {
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("Cleared", 1));

        Alarm alarm = alarmRepository.createAlarm("{ \"State\":\"cleared\"}");

        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarmWithEmptyPerceivedSeverityAndClearedState() throws Exception {
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("Cleared", 1));

        Alarm alarm = alarmRepository.createAlarm("{ \"perceivedSeverity\":\"\", \"State\":\"cleared\"}");

        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarmWithNullPerceivedSeverityAndNonClearedState() throws Exception {
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("Cleared", 1, "New", 2));

        Alarm alarm = alarmRepository.createAlarm("{ \"State\":\"new\"}");

        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarmWithEmptyPerceivedSeverityAndNonClearedState() throws Exception {
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("Cleared", 1, "New", 2));

        Alarm alarm = alarmRepository.createAlarm("{ \"perceivedSeverity\":\"\", \"State\":\"new\"}");

        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarmWithNonEmptyPerceivedSeverityAndClearedState() throws Exception {
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("Cleared", 1));

        Alarm alarm = alarmRepository.createAlarm("{ \"perceivedSeverity\":\"high\", \"State\":\"cleared\"}");

        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarmWithNonEmptyPerceivedSeverityAndNonClearedState() throws Exception {
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("Cleared", 1, "New", 2));

        Alarm alarm = alarmRepository.createAlarm("{ \"perceivedSeverity\":\"high\", \"State\":\"new\"}");

        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarmWithNullPerceivedSeverityAndInvalidState() throws Exception {
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("Cleared", 1));

        Alarm alarm = alarmRepository.createAlarm("{ \"State\":\"invalid\"}");

        assertEquals(1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarmWithEmptyPerceivedSeverityAndInvalidState() throws Exception {
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("Cleared", 1));

        Alarm alarm = alarmRepository.createAlarm("{ \"perceivedSeverity\":\"\", \"State\":\"invalid\"}");

        assertEquals(1, alarm.getPerceivedSeverity());
    }
}
```

These test cases cover all the possible combinations of null/empty/non-empty perceived severity and cleared/non-cleared states, ensuring 100% code coverage for the mentioned code block.