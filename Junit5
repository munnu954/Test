It seems that the methods on the `SqlRowSet` object are not being invoked correctly in the test case. Let's update the test case code to fix these errors:

```java
@Test
public void testPostAlarmForEachIteration() throws Exception {
    setupCommonExpectations();
    when(sqlRowSet.getTimestamp("alarmreportingtime")).thenReturn(Timestamp.from(Instant.now()));
    when(sqlRowSet.getObject("tag")).thenReturn(new String[]{"tag1", "tag2"});
    when(sqlRowSet.getLong("sequenceid")).thenReturn(1L);
    when(sqlRowSet.getString("componentid")).thenReturn("testComponentId");
    when(sqlRowSet.getString("tid")).thenReturn("testTid");
    when(sqlRowSet.getString("alarmedobject")).thenReturn("testAlarmedObject");
    when(sqlRowSet.getString("aid")).thenReturn("testAid");
    when(sqlRowSet.getString("equipmentobject")).thenReturn("testEquipmentObject");
    when(sqlRowSet.getString("rawmessage")).thenReturn("testRawMessage");
    when(sqlRowSet.getString("reportingobject")).thenReturn("testReportingObject");
    when(sqlRowSet.getInt("stage")).thenReturn(1);
    when(sqlRowSet.getBoolean("resolved")).thenReturn(true);

    int result = alarmRepository.postAlarmForEachIteration(alarm, "compId");

    verify(sqlRowSet).getTimestamp("alarmreportingtime");
    verify(sqlRowSet).getObject("tag");
    verify(sqlRowSet).getLong("sequenceid");
    verify(sqlRowSet).getString("componentid");
    verify(sqlRowSet).getString("tid");
    verify(sqlRowSet).getString("alarmedobject");
    verify(sqlRowSet).getString("aid");
    verify(sqlRowSet).getString("equipmentobject");
    verify(sqlRowSet).getString("rawmessage");
    verify(sqlRowSet).getString("reportingobject");
    verify(sqlRowSet).getInt("stage");
    verify(sqlRowSet).getBoolean("resolved");

    // Assert the desired behavior of the method
    assertNotNull(alarm.getAlarmReportingTime());
    assertNotNull(alarm.getTag());
    assertEquals(2, alarm.getTag().length);
    // Assert other properties of the alarm object

    // Assert the result if necessary
}
```

Make sure to adjust the verification and assertion statements based on the expected behavior of the `postAlarmForEachIteration` method and the properties of the `Alarm` object.