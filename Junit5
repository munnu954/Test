@Test
void applyGroupingClearingLogic_RuleIsNullAndContributorsCountPositive_DeletesGroupingAlarm() {
    // Given
    String alarmIdentity = "testContributorAlarm";
    HashMap<String, Object> alarmMap = new HashMap<>();

    // Mock GroupingUtils.isGeneratedAlarm to return false (process contributor alarms)
    when(utils.isGeneratedAlarm(alarmMap)).thenReturn(false);

    // Create a GroupingAlarm with:
    // - contributorsCount = 2 (after decrement becomes 1, which is >0)
    // - ruleId not in RulesLoadingService (rule == null)
    GroupingAlarms groupingAlarm = new GroupingAlarms();
    groupingAlarm.setGroupingId(123);
    groupingAlarm.setRuleId(456L); // Rule 456 does NOT exist in RulesLoadingService
    groupingAlarm.setContributorsCount(2); // After decrement: 2 - 1 = 1 (>0)
    groupingAlarm.setGroupingCreated(true);
    groupingAlarm.setAlarmIdentity("groupedAlarm123");

    // Link a GroupingContributor to the GroupingAlarm
    GroupingContributors contributor = new GroupingContributors();
    contributor.setGroupingAlarms(groupingAlarm);
    List<GroupingContributors> contributors = Collections.singletonList(contributor);

    // Mock repository responses
    when(groupingContributorsRepo.getGroupingContributorsByIdentity(alarmIdentity))
        .thenReturn(Optional.of(contributors));
    when(groupingAlarmsRepo.getGroupingAlarmByGroupingId(123))
        .thenReturn(Optional.of(groupingAlarm));

    // Ensure RulesLoadingService has no rule for ID 456
    RulesLoadingService.getRuleMap().clear();

    // When
    groupingService.applyGroupingClearingLogic(alarmMap, alarmIdentity);

    // Then: Verify the grouping alarm is deleted due to rule == null (even though contributorsCount >0)
    verify(groupingAlarmsRepo).deleteById(123);

    // Verify the generated alarm is cleared
    verify(api).clearAlarm("groupedAlarm123");

    // Verify the warning log for null rule
    List<LogEvent> logs = listAppender.getEvents();
    assertTrue(logs.stream().anyMatch(event ->
        event.getLevel() == Level.WARN &&
        event.getMessage().getFormattedMessage().contains("Rule is null for GroupingAlarm with ID: 123")
    ));

    // Verify the log for deleting the grouping alarm due to rule == null
    assertTrue(logs.stream().anyMatch(event ->
        event.getLevel() == Level.INFO &&
        event.getMessage().getFormattedMessage().contains("Removed record") &&
        event.getMessage().getFormattedMessage().contains("groupingObject 123")
    ));
}