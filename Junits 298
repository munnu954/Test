To fix the `JsonParseException` and handle nested JSON structures correctly, we need to adjust how the code checks for and processes nested JSON objects. The main issue was treating `Map` instances as strings by using `toString()`, leading to invalid JSON parsing. Here's the refactored code:

**Changes Made:**

1. **Removed `checkIfJsonValue` Method:**
   - This method was unreliable for checking JSON structures. Instead, we now use `instanceof` checks for `Map` and `List`.

2. **Direct Processing of Nested Maps:**
   - If a value is a `Map`, it's processed recursively without converting to a string.

3. **Handling JSON Strings:**
   - If a value is a `String`, attempt to parse it as JSON. If successful, process recursively; otherwise, treat it as a regular string.

4. **Fixed Initialization of `resultMsg`:**
   - Properly initialize `resultMsg` in `removeNullValuesInJsonAttributes` to avoid `NullPointerException`.

**Refactored Code:**

```java
@Component
public class DeduplicationUtils {
    Logger logger = LogManager.getLogger(this.getClass());

    public HashMap<String, Object> removeNullValuesInJsonAttributes(Map<String, Object> msg) {
        HashMap<String, Object> resultMsg = new HashMap<>();
        try {
            for (Map.Entry<String, Object> entry : msg.entrySet()) {
                String key = entry.getKey();
                Object value = entry.getValue();

                if (value == null || value.toString().isEmpty()) {
                    continue; // Skip null or empty values
                }

                if (value instanceof Map) {
                    // Recursively process nested map
                    Map<String, Object> nestedMap = (Map<String, Object>) value;
                    HashMap<String, Object> processedMap = removeNullValuesInJsonAttributes(nestedMap);
                    if (!processedMap.isEmpty()) {
                        resultMsg.put(key, processedMap);
                    }
                } else if (value instanceof List) {
                    // Process each element in the list
                    List<?> list = (List<?>) value;
                    List<Object> processedList = new ArrayList<>();
                    for (Object item : list) {
                        if (item instanceof Map) {
                            HashMap<String, Object> processedItem = removeNullValuesInJsonAttributes((Map<String, Object>) item);
                            if (!processedItem.isEmpty()) {
                                processedList.add(processedItem);
                            }
                        } else if (item != null && !item.toString().isEmpty()) {
                            processedList.add(item);
                        }
                    }
                    if (!processedList.isEmpty()) {
                        resultMsg.put(key, processedList);
                    }
                } else if (value instanceof String) {
                    // Check if the string is a JSON object
                    try {
                        Map<String, Object> parsedMap = RulesConstants.getObjectMapper().readValue((String) value, HashMap.class);
                        HashMap<String, Object> processedMap = removeNullValuesInJsonAttributes(parsedMap);
                        if (!processedMap.isEmpty()) {
                            resultMsg.put(key, processedMap);
                        }
                    } catch (JsonProcessingException e) {
                        // Not a JSON string, add as regular value
                        resultMsg.put(key, value);
                    }
                } else {
                    // Primitive types
                    resultMsg.put(key, value);
                }
            }
        } catch (Exception e) {
            logger.error("Exception removing null/empty values: ", e);
        }
        return resultMsg;
    }

    public HashMap<String, Object> mergeUpdateJsonValues(Map<String, Object> incomingMsg, Map<String, Object> cachedMsg, boolean isLateAlarm) {
        try {
            for (Map.Entry<String, Object> entry : incomingMsg.entrySet()) {
                String key = entry.getKey();
                Object value = entry.getValue();

                if (value == null || value.toString().isEmpty()) {
                    continue;
                }

                if (!isLateAlarm) {
                    if (value instanceof Map) {
                        Map<String, Object> incomingNested = (Map<String, Object>) value;
                        Object cachedValue = cachedMsg.get(key);
                        if (cachedValue instanceof Map) {
                            Map<String, Object> cachedNested = (Map<String, Object>) cachedValue;
                            HashMap<String, Object> merged = mergeUpdateJsonValues(incomingNested, cachedNested, isLateAlarm);
                            cachedMsg.put(key, merged);
                        } else {
                            HashMap<String, Object> processed = removeNullValuesInJsonAttributes(incomingNested);
                            cachedMsg.put(key, processed);
                        }
                    } else if (value instanceof String) {
                        try {
                            Map<String, Object> parsedIncoming = RulesConstants.getObjectMapper().readValue((String) value, HashMap.class);
                            Object cachedValue = cachedMsg.get(key);
                            if (cachedValue instanceof Map) {
                                Map<String, Object> parsedCached = (Map<String, Object>) cachedValue;
                                HashMap<String, Object> merged = mergeUpdateJsonValues(parsedIncoming, parsedCached, isLateAlarm);
                                cachedMsg.put(key, merged);
                            } else {
                                HashMap<String, Object> processed = removeNullValuesInJsonAttributes(parsedIncoming);
                                cachedMsg.put(key, processed);
                            }
                        } catch (JsonProcessingException e) {
                            cachedMsg.put(key, value);
                        }
                    } else {
                        cachedMsg.put(key, value);
                    }
                } else {
                    // Late alarm handling
                    Object cachedValue = cachedMsg.get(key);
                    if (cachedValue == null) {
                        if (value instanceof Map) {
                            HashMap<String, Object> processed = removeNullValuesInJsonAttributes((Map<String, Object>) value);
                            cachedMsg.put(key, processed);
                        } else if (value instanceof String) {
                            try {
                                Map<String, Object> parsed = RulesConstants.getObjectMapper().readValue((String) value, HashMap.class);
                                HashMap<String, Object> processed = removeNullValuesInJsonAttributes(parsed);
                                cachedMsg.put(key, processed);
                            } catch (JsonProcessingException e) {
                                cachedMsg.put(key, value);
                            }
                        } else {
                            cachedMsg.put(key, value);
                        }
                    } else if (cachedValue instanceof Map && value instanceof Map) {
                        HashMap<String, Object> merged = mergeUpdateJsonValues((Map<String, Object>) value, (Map<String, Object>) cachedValue, isLateAlarm);
                        cachedMsg.put(key, merged);
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Exception merging JSON values: ", e);
        }
        return (HashMap<String, Object>) cachedMsg;
    }
}
```

**Explanation of Changes:**

1. **Type Checks Instead of `checkIfJsonValue`:**
   - Used `instanceof Map` and `instanceof List` to identify nested structures directly.
   - For `String` values, attempt JSON parsing and handle exceptions if they're not valid JSON.

2. **Avoid `toString()` on Maps:**
   - Directly cast and process nested `Map` objects without converting them to strings, preventing invalid JSON formats.

3. **Handling Lists:**
   - Added processing for `List` values to recursively handle nested lists (though simplified; may need expansion based on use case).

4. **Late Alarm Handling:**
   - Correctly merges existing and incoming values when `isLateAlarm` is true, ensuring proper nested updates.

This refactoring ensures that nested JSON structures (whether as Maps or JSON-formatted Strings) are processed correctly, eliminating the `JsonParseException` caused by invalid parsing of Map `toString()` outputs.