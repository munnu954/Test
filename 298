@Test
public void testMergeArrayMethodWithNonNullTagFromDb() {

    Alarm alarm = new Alarm();
    alarm.setTag(new String[]{"tag1", "tag2"});

    try {
        Method mergeArrayMethod = AlarmRepositoryImpl.class.getDeclaredMethod("mergeArrayMethod", Object.class, Alarm.class);
        mergeArrayMethod.setAccessible(true);

        String[] tagFromDbArray = new String[]{"tag3", "tag4"};
        when(alarmRepositoryImpl.convertTagToStringArray(tagFromDbArray)).thenReturn(tagFromDbArray);
        Set<String> result = (Set<String>) mergeArrayMethod.invoke(alarmRepositoryImpl, tagFromDbArray, alarm);

        assertEquals(4, result.size());
        assertTrue(result.contains("tag1"));
        assertTrue(result.contains("tag2"));
        assertTrue(result.contains("tag3"));
        assertTrue(result.contains("tag4"));
    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
        e.printStackTrace();
    }

}

@Test
public void testMergeArrayMethodWithNullTagFromDb() {

    Alarm alarm = new Alarm();
    alarm.setTag(new String[]{"tag1", "tag2"});

    try {
        Method mergeArrayMethod = AlarmRepositoryImpl.class.getDeclaredMethod("mergeArrayMethod", Object.class, Alarm.class);
        mergeArrayMethod.setAccessible(true);

        String[] tagFromDbArray = null;
        when(alarmRepositoryImpl.convertTagToStringArray(tagFromDbArray)).thenReturn(null);
        Set<String> result = (Set<String>) mergeArrayMethod.invoke(alarmRepositoryImpl, tagFromDbArray, alarm);

        assertEquals(2, result.size());
        assertTrue(result.contains("tag1"));
        assertTrue(result.contains("tag2"));
    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
        e.printStackTrace();
    }

}