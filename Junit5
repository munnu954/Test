To achieve 100% code coverage, including the catch block in your `CommonWrapperController` class, you can write JUnit 5 test cases as follows:

1. **Mock the dependencies** using Mockito.
2. **Test the normal flow** where no exception is thrown.
3. **Test the exception flow** to ensure the catch block is covered.

Here's an example of how you can write these test cases:

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.util.NestedServletException;

@ExtendWith(MockitoExtension.class)
public class CommonWrapperControllerTest {

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @InjectMocks
    private CommonWrapperController commonWrapperController;

    private MockMvc mockMvc;

    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.standaloneSetup(commonWrapperController).build();
    }

    @Test
    public void testGetClrGraphics_Success() throws Exception {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String cnd = "Y";
        String phyModel = "testPhyModel";
        String expectedResponse = "expectedResponse";

        when(clrGraphicsService.getClrGraphics(anyString(), anyString(), anyString(), anyString())).thenReturn(expectedResponse);

        String result = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        assertEquals(expectedResponse, result);
        verify(clrGraphicsService, times(1)).getClrGraphics(anyString(), anyString(), anyString(), anyString());
    }

    @Test
    public void testGetClrGraphics_UnsupportedEncodingException() throws Exception {
        String circuitId = "invalidCircuitId%";
        String sourceSys = "testSourceSys";
        String cnd = "Y";
        String phyModel = "testPhyModel";

        doThrow(new UnsupportedEncodingException("Error while parsing circuitId")).when(clrGraphicsService).getClrGraphics(anyString(), anyString(), anyString(), anyString());

        assertThrows(NestedServletException.class, () -> {
            commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);
        });

        verify(clrGraphicsService, never()).getClrGraphics(anyString(), anyString(), anyString(), anyString());
    }
}
```

### Explanation:
- **`testGetClrGraphics_Success`**: This test case covers the normal flow where no exception is thrown. It mocks the `clrGraphicsService` to return a predefined response and verifies that the service method is called once.
- **`testGetClrGraphics_UnsupportedEncodingException`**: This test case covers the scenario where an `UnsupportedEncodingException` is thrown. It verifies that the exception is caught and logged, and the service method is not called.

Feel free to adjust the test cases according to your specific requirements! If you have any questions or need further assistance, let me know.

Source: Conversation with Copilot, 26/10/2024
(1) github.com. https://github.com/pranshuiitk/Direct2HomeSoftware-java-junit/tree/2abb95197b510fd88f6ffcdeb647eebcbecb6f68/src%2Ftest%2Fjava%2Fcom%2Ftechverito%2Fsattv%2Fservice%2FAuthenticationServiceTest.java.
(2) github.com. https://github.com/sgarbour/ovirt-engine/tree/5f8cc97df1378287e75e8cdcc9f5647a70c7545d/backend%2Fmanager%2Fmodules%2Fbll%2Fsrc%2Ftest%2Fjava%2Forg%2Fovirt%2Fengine%2Fcore%2Fbll%2Fstorage%2Fovfstore%2FProcessOvfUpdateForStoragePoolCommandTest.java.
(3) github.com. https://github.com/MarcinAmadeuszOlszewski/pet-clinic/tree/8b6945923a18653fb91bb163e9d083d69e927132/pet-clinic-web%2Fsrc%2Ftest%2Fjava%2Famadeuszx%2Fpetclinic%2Fspringpetclinic%2Fcontrollers%2FPetControllerTest.java.
(4) github.com. https://github.com/chenjun-feng/CustomerQueryTracker/tree/c8d6c6162a7ff861a7e93ef6aa19fef2fc2d1778/cqt-web%2Fsrc%2Ftest%2Fjava%2Fcqt%2Fspringframework%2Fspring5webapp%2Fcontrollers%2FCustomerControllerTest.java.