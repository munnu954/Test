import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.util.Collector;
import org.json.JSONObject;

public class CsvToJsonConversion implements FlatMapFunction<String, String> {

    @Override
    public void flatMap(String input, Collector<String> collector) throws Exception {
        String[] arr = input.split(",");
        JSONObject mainObject = new JSONObject();

        int columns = 7; // Assuming each row has 7 columns, adjust as needed

        for (int i = 0; i < arr.length; i++) {
            if (arr[i].isEmpty()) {
                continue;  // Skip empty columns
            }

            if (i % columns == 2) {  // Main object details (Column C)
                mainObject.put("Object Name", arr[i].trim());
            }

            if (i % columns == 1) {  // Begin date details (Column B)
                mainObject.put("Begin date", arr[i].trim());
            }

            if (i % columns == 3) {  // End date details (Column D)
                mainObject.put("End date", arr[i].trim());
            }

            if (i % columns == 4) {  // Ticket number details (Column E)
                mainObject.put("Ticket number", arr[i].trim());
            }

            // Handle sub-object details (Columns F and G)
            if (i % columns == 5) {  // Sub-object details row
                if (i + 4 < arr.length) { // Check if there are enough elements for sub-object
                    String subObjectName = arr[i].trim();
                    JSONObject subObject = new JSONObject();

                    // Add more conditions for sub-object data
                    subObject.put("Min", arr[i + 1].trim());
                    subObject.put("Average", arr[i + 2].trim());
                    subObject.put("Max", arr[i + 3].trim());
                    subObject.put("Cumulative counter value", arr[i + 4].trim());

                    // Add sub-object under mainObject
                    mainObject.put("CPU output", subObject);
                } else {
                    // Log or handle the case where there are not enough elements for sub-object
                }
            }
        }

        // Collect the mainObject when you finish processing a row
        collector.collect(mainObject.toString());
    }
}
