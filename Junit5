Understanding the Task and Code Structure
Task:
 * Write JUnit5 test cases for the validateIterator method of the MtnInsightsValidator class.
 * Focus only on the conditional statements related to the jsonObject.has("ecpdId") && jsonObject.has("mtn") && jsonObject.has("insightCategory") && jsonObject.has("insightName") && jsonObject.has("outageId") condition.
 * Aim for 100% code coverage of these branches.
Code Structure:
 * The validateIterator method is responsible for validating MtnInsightsAttributes objects based on specific conditions related to mtn, insightCategory, insightName, and outageId.
 * The method uses a JSONObject to represent the attributes and checks for the presence and values of these attributes.
JUnit5 Test Cases
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

class MtnInsightsValidatorTest {

    private final MtnInsightsValidator validator = new MtnInsightsValidator();

    @ParameterizedTest
    @MethodSource("provideMtnInsightsAttributes")
    void validateIterator_shouldThrowInvalidRequestException_whenMtnInsightAttributesAreInvalid(
            MtnInsightsAttributes mtnInsightsAttributes, String expectedErrorMessage) {
        assertThrows(InvalidRequestException.class, () -> validator.validateIterator(null, mtnInsightsAttributes, "logVal"), expectedErrorMessage);
    }

    static Arguments[] provideMtnInsightsAttributes() {
        return new Arguments[] {
                // Case 1: All attributes are empty
                Arguments.of(new MtnInsightsAttributes(), "logVal MTN, Insight Category and Insight Name should not be null or empty."),
                // Case 2: InsightCategory and InsightName are empty
                Arguments.of(new MtnInsightsAttributes("", "", "", "", ""), "logVal MTN, Insight Category and Insight Name should not be null or empty."),
                // Case 3: InsightCategory and InsightName are valid, but MTN is empty for MyBiz
                Arguments.of(new MtnInsightsAttributes("", "VBGMyBiz", "MyBizReg", "", ""), "logVal MTN, Insight Category and Insight Name are required."),
                // Case 4: InsightCategory and InsightName are valid, but ECPDId is empty for MyBiz
                Arguments.of(new MtnInsightsAttributes("", "VBGMyBiz", "MyBizReg", "", "12345"), "logVal MTN, Insight Category and Insight Name are required."),
                // Case 5: InsightCategory and InsightName are valid, but OutageId is empty for NetworkOutage
                Arguments.of(new MtnInsightsAttributes("", "VBGNxOutage", "mtnoutage", "", ""), "logVal Outage id, Insight Category and Insight Name, MTN, ECPD id should not be null or empty."),
                // Case 6: InsightCategory and InsightName are valid, but MTN is empty for NetworkOutage
                Arguments.of(new MtnInsightsAttributes("", "VBGNxOutage", "mtnoutage", "", "12345"), "logVal Outage id, Insight Category and Insight Name, MTN, ECPD id should not be null or empty."),
                // Case 7: InsightCategory and InsightName are valid, but ECPDId is empty for NetworkOutage
                Arguments.of(new MtnInsightsAttributes("", "VBGNxOutage", "mtnoutage", "12345", ""), "logVal Outage id, Insight Category and Insight Name, MTN, ECPD id should not be null or empty."),
                // Case 8: InsightCategory and InsightName are valid, but OutageId is empty for NetworkOutage (InsightName variant)
                Arguments.of(new MtnInsightsAttributes("", "VBGNxOutage", "mtnOutageCase", "12345", ""), "logVal Outage id, Insight Category and Insight Name, MTN, ECPD id should not be null or empty."),
                // Case 9: InsightCategory and InsightName are valid, but OutageId is empty for NetworkOutage (InsightCategory variant)
                Arguments.of(new MtnInsightsAttributes("", "VBGNxOutage", "", "12345", ""), "logVal Outage id, Insight Category and Insight Name, MTN, ECPD id should not be null or empty."),
                // Case 10: InsightCategory and InsightName are valid, but MTN is empty for NetworkOutage (InsightName variant)
                Arguments.of(new MtnInsightsAttributes("", "VBGNxOutage", "mtnOutageCase", "", ""), "logVal Outage id, Insight Category and Insight Name, MTN, ECPD id should not be null or empty."),
        };
    }

    @Test
    void validateIterator_shouldNotThrowInvalidRequestException_whenMtnInsightAttributesAreValid() {
        // Create a valid MtnInsightsAttributes object
        MtnInsightsAttributes mtnInsightsAttributes = new MtnInsightsAttributes("12345", "VBGMyBiz", "MyBizReg", "67890");

        // Assert that no exception is thrown
        assertDoesNotThrow(() -> validator.validateIterator(null, mtnInsightsAttributes, "logVal"));
    }
}

Explanation:
 * Parameterized Test: This test uses @ParameterizedTest and @MethodSource to efficiently test multiple scenarios with different MtnInsightsAttributes objects.
 * Test Cases: The provided test cases cover various combinations of empty and non-empty attributes, ensuring that the correct error messages are thrown for invalid inputs and that no exceptions are thrown for valid inputs.
 * Code Coverage: These tests should achieve 100% code coverage for the specified branches within the validateIterator method.
Remember to replace EventLedgerConstants.LOGGER_MESSAGE_MYBIZ, EventLedgerConstants.LOGGER_MESSAGE_MYBIZ_MAND, EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND, and EventLedgerConstants.LOGGER_MESSAGE_NETWORK_OUTAGE with their actual values from your project.
 * https://guides.micronaut.io/latest/micronaut-security-jwt-gradle-java.html
