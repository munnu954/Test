To access private fields `lookupServicePath` and `lookupServiceName` in the `IVAPPDeviceService` class for testing purposes without changing their access modifiers, you can use Java's Reflection API. Here's how you can modify the test cases to set these fields using reflection:

```java
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService ivappDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    private DeviceListInputRequest request;
    private UTSEquipmentList utsEquipmentList;

    @Before
    public void setUp() throws Exception {
        // Manually setting these properties using reflection
        setPrivateField(ivappDeviceService, "lookupServiceName", "http://testService");
        setPrivateField(ivappDeviceService, "lookupServicePath", "/testPath");

        request = new DeviceListInputRequest();
        Map<String, Object> requestParams = new HashMap<>();
        requestParams.put("key", "value");
        request.setRequestParameters(requestParams);

        utsEquipmentList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(anyString())).thenReturn("http://testService");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
    }

    private void setPrivateField(Object targetObject, String fieldName, Object fieldValue) throws Exception {
        Field field = targetObject.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(targetObject, fieldValue);
    }

    @Test
    public void testGetDeviceDetailsv3_Success() throws Exception {
        String dataServiceUrl = "http://testService/testPath";

        ObjectMapper mapper = new ObjectMapper();
        JsonNode mockResponse = mapper.readTree("{ \"equipmentLst\": { \"equipmentContainer\": [] }}");

        ResponseEntity<JsonNode> responseEntity = ResponseEntity.ok(mockResponse);

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenReturn(responseEntity);

        when(iVAPPDeviceUtil.covertv3format(any(JsonNode.class))).thenReturn(new UTSEquipmentList());

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNotNull(result);
    }

    @Test
    public void testGetDeviceDetailsv3_HttpServerErrorException() {
        String dataServiceUrl = "http://testService/testPath";

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenThrow(new HttpServerErrorException(org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR));

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNotNull(result);  // Ensure result is not null
        assertNull(result.getEquipmentLst());
    }

    @Test
    public void testGetDeviceDetailsv3_OtherException() {
        String dataServiceUrl = "http://testService/testPath";

        when(restTemplate.exchange(
                eq(dataServiceUrl),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(JsonNode.class)
        )).thenThrow(new RuntimeException());

        UTSEquipmentList result = ivappDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertNotNull(result);  // Ensure result is not null
        assertNull(result.getEquipmentLst());
    }
}
```

### Explanation:

1. **Reflection for Private Fields**: The `setPrivateField` method uses reflection to access private fields in the `IVAPPDeviceService` class. It takes the target object, the field name, and the value to set.

2. **Setup Method**: In the `setUp` method, we set the values for `lookupServiceName` and `lookupServicePath` using the `setPrivateField` helper method.

3. **Mocking and Assertions**: The rest of the test cases remain similar, ensuring that the mock responses and exception handling are set up correctly.

This approach ensures that private fields are configured for testing without modifying their access levels in the original class.