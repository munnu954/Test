Certainly! Below is the JUnit5 test code for the `applyPostingRule` method of the `PostingRuleProcessingService` class, covering all four branches of the if statement:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Value("${topologytraversal.alarmedObjectExpression: %TopoObject:OSS_Names[0]%}")
    private String alarmedObjectExpression;

    @Value("${topologytraversal.topologyDetailsAlarmedObjectExpression:{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}}")
    private String topologyDetailsAlarmedObjectExpression;

    @Value("${topologytraversal.topologyObjectEligibilityCheckValue:%TopoObject:OSS_Names[0]%}")
    private String topologyObjectEligibilityCheckValue;

    @Value("${topologytraversal.topologyObjectEligibilityCheckExpression:^(?!\\s*$).+}")
    private String topologyObjectEligibilityCheckExpression;

    @Value("${topologytraversal.componentIDAttributeName:reportingObject}")
    private String componentIDAttributeName;

    private Alarm alarm;
    private PostingRule postingRule;
    private HashMap<String, Object> alarmMap;

    @BeforeEach
    public void setUp() {
        alarm = new Alarm();
        alarm.setAlarmIdentity("testAlarmIdentity");

        postingRule = new PostingRule(1L, "testRule", 1, 1, "testMatchingCriteria");

        alarmMap = new HashMap<>();
    }

    @Test
    public void testApplyPostingRule_withTopologyDetails() throws Exception {
        String topologyData = "{\"TBL_response\":{\"topologyObjects\":[{\"key\":\"value\"}]}}";
        String alarmedObject = "alarmedObject";
        String alarmedObjectTopoDet = "{\"key\":\"value\"}";

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(alarmedObject);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(topologyData));

        alarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        assertNotNull(alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_withNullTopologyDetails() throws Exception {
        String topologyData = "{\"TBL_response\":{\"topologyObjects\":[{\"key\":\"value\"}]}}";
        String alarmedObject = "alarmedObject";

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(alarmedObject);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(topologyData));

        alarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        assertNull(alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_withEmptyTopologyDetails() throws Exception {
        String topologyData = "{\"TBL_response\":{\"topologyObjects\":[{\"key\":\"value\"}]}}";
        String alarmedObject = "alarmedObject";
        String alarmedObjectTopoDet = "";

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(alarmedObject);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(topologyData));

        alarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        assertNull(alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_withNonNullNonEmptyTopologyDetails() throws Exception {
        String topologyData = "{\"TBL_response\":{\"topologyObjects\":[{\"key\":\"value\"}]}}";
        String alarmedObject = "alarmedObject";
        String alarmedObjectTopoDet = "{\"key\":\"value\"}";

        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn(alarmedObject);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(topologyData));

        ObjectMapper mapper = new ObjectMapper();
        JsonNode jsonNode = mapper.createObjectNode();
        when(AlarmPostingConstants.getObjectMapper().readTree(anyString())).thenReturn(jsonNode);

        alarm = postingRuleProcessingService.applyPostingRule(alarm, postingRule, alarmMap);

        assertNotNull(alarm.getTopologyDetails());
    }
}
```

In this code:
- `testApplyPostingRule_withTopologyDetails` covers the branch where `topologyDetails` is neither null nor empty.
- `testApplyPostingRule_withNullTopologyDetails` covers the branch where `topologyDetails` is null.
- `testApplyPostingRule_withEmptyTopologyDetails` covers the branch where `topologyDetails` is empty.
- `testApplyPostingRule_withNonNullNonEmptyTopologyDetails` covers the branch where `topologyDetails` is not null and not empty.