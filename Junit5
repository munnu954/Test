To achieve 100% code coverage for the `DataSourceConfig` class using JUnit 5 and Mockito, you can write a test class like the following. This test class will mock dependencies and verify the behavior of your configuration class without invoking any real database connections.

```java
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import javax.sql.DataSource;
import javax.persistence.EntityManagerFactory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;

import com.verizon.vbg.ledger.repository.DataSourceConfig;
import com.verizon.vbg.ledger.repository.DataSourceModal;

public class DataSourceConfigTest {

    @Mock
    private DataSourceModal dataSourceModal;

    @Mock
    private EntityManagerFactoryBuilder entityManagerFactoryBuilder;

    @Mock
    private EntityManagerFactory entityManagerFactory;

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        // Mock DataSourceModal properties
        when(dataSourceModal.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        when(dataSourceModal.getUsername()).thenReturn("sa");
        when(dataSourceModal.getPassword()).thenReturn("");
        when(dataSourceModal.getDriver()).thenReturn("org.h2.Driver");
    }

    @Test
    public void testFalloutDataSource() {
        DataSource dataSource = dataSourceConfig.falloutDataSource();
        assertNotNull(dataSource, "DataSource should not be null");
    }

    @Test
    public void testEntityManagerFactoryBean() {
        when(entityManagerFactoryBuilder.dataSource(Mockito.any(DataSource.class)))
            .thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.packages("com.verizon.vbg.ledger.entity"))
            .thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.persistenceUnit("fallout-db"))
            .thenReturn(entityManagerFactoryBuilder);
        when(entityManagerFactoryBuilder.build()).thenReturn(entityManagerFactory);

        EntityManagerFactory result = dataSourceConfig.entityManagerFactoryBean(entityManagerFactoryBuilder, dataSourceConfig.falloutDataSource()).getObject();
        assertNotNull(result, "EntityManagerFactory should not be null");
    }

    @Test
    public void testFalloutTransactionManager() {
        PlatformTransactionManager transactionManager = dataSourceConfig.falloutTransactionManager(entityManagerFactory);
        assertNotNull(transactionManager, "TransactionManager should not be null");
        assert(transactionManager instanceof JpaTransactionManager);
    }
}
```

### Key Points:
1. **Mocks:** The test uses Mockito to mock the dependencies of `DataSourceConfig`, such as `DataSourceModal` and `EntityManagerFactoryBuilder`.
2. **Annotations:** 
   - `@Mock` is used to declare mock objects.
   - `@InjectMocks` is used to inject these mock objects into the `DataSourceConfig` instance.
3. **Setup:** In the `setUp` method, `MockitoAnnotations.openMocks(this)` initializes the mock objects. The properties of `DataSourceModal` are mocked to provide fake values for testing.
4. **Tests:**
   - `testFalloutDataSource()` checks if the `falloutDataSource` bean is created correctly.
   - `testEntityManagerFactoryBean()` ensures the `entityManagerFactoryBean` method behaves as expected.
   - `testFalloutTransactionManager()` verifies the creation of the `JpaTransactionManager`.

This setup avoids real database connections and ensures that the configuration class is tested in isolation.