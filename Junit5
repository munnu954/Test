import com.google.gson.Gson;
import java.lang.reflect.Method;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import com.company.enlDemo.service.impl.IVAPPDeviceService;
import com.company.enlDemo.model.DeviceListInputRequest;
import com.company.enlDemo.util.IVAPPDeviceUtil;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService iVAPPDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    @Test
    public void getDeviceDetailsv3_whenFalse_thenThrowException() throws Exception {
        iVAPPDeviceUtil.findServiceByName(anyString());
        DeviceListInputRequest request = new DeviceListInputRequest();
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();
        Method methodUnderTest = IVAPPDeviceService.class.getDeclaredMethod("getDeviceDetailsv3", DeviceListInputRequest.class, UTSEquipmentList.class);
        methodUnderTest.setAccessible(true);
        iVAPPDeviceUtil.findServiceByName(anyString());
        Gson gson = new Gson();
        HttpEntity<String> httpEntity = new HttpEntity<>(gson.toJson(request), IVAPPDeviceUtil.getHttpHeaders());
        Mockito.when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(Class.class))).thenThrow(new HttpServerErrorException(404));
        boolean exceptionCaught = false;
        try {
            methodUnderTest.invoke(iVAPPDeviceService, request, utsEquipmentList);
        } catch (Exception e) {
            exceptionCaught = true;
        }
        assertTrue(exceptionCaught);
    }

    @Test
    public void getDeviceDetailsv3_whenNull_thenThrowException() throws Exception {
        iVAPPDeviceUtil.findServiceByName(anyString());
        DeviceListInputRequest request = new DeviceListInputRequest();
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();
        Method methodUnderTest = IVAPPDeviceService.class.getDeclaredMethod("getDeviceDetailsv3", DeviceListInputRequest.class, UTSEquipmentList.class);
        methodUnderTest.setAccessible(true);
        iVAPPDeviceUtil.findServiceByName(anyString());
        Gson gson = new Gson();
        HttpEntity<String> httpEntity = new HttpEntity<>(gson.toJson(request), IVAPPDeviceUtil.getHttpHeaders());
        Mockito.when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(Class.class))).thenReturn(null);
        boolean exceptionCaught = false;
        try {
            methodUnderTest.invoke(iVAPPDeviceService, request, utsEquipmentList);
        } catch (Exception e) {
            exceptionCaught = true;
        }
        assertTrue(exceptionCaught);
    }

    @Test
    public void getDeviceDetailsv3_whenHttpClientError_thenThrowException() throws Exception {
        iVAPPDeviceUtil.findServiceByName(anyString());
        DeviceListInputRequest request = new DeviceListInputRequest();
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();
        Method methodUnderTest = IVAPPDeviceService.class.getDeclaredMethod("getDeviceDetailsv3", DeviceListInputRequest.class, UTSEquipmentList.class);
        methodUnderTest.setAccessible(true);
        iVAPPDeviceUtil.findServiceByName(anyString());
        Gson gson = new Gson();
        HttpEntity<String> httpEntity = new HttpEntity<>(gson.toJson(request), IVAPPDeviceUtil.getHttpHeaders());
        Mockito.when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(Class.class))).thenReturn(new ResponseEntity<>(null, org.springframework.http.HttpStatus.BAD_REQUEST));
        boolean exceptionCaught = false;
        try {
            methodUnderTest.invoke(iVAPPDeviceService, request, utsEquipmentList);
        } catch (Exception e) {
            exceptionCaught = true;
        }
        assertTrue(exceptionCaught);
    }

    @Test
    public void getDeviceDetailsv3_2_whenFalse_thenThrowException() throws Exception {
        DeviceListInputRequest request = new DeviceListInputRequest();
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();
        iVAPPDeviceUtil.findServiceByName(anyString());
        Gson gson = new Gson();
        HttpEntity<String> httpEntity = new HttpEntity<>(gson.toJson(request), IVAPPDeviceUtil.getHttpHeaders());
        ResponseEntity<UTSEquipmentList> responseBody = new ResponseEntity<>(utsEquipmentList, org.springframework.http.HttpStatus.NOT_FOUND);
        Mockito.when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(ParameterizedTypeReference.class))).thenReturn(responseBody);
        boolean exceptionCaught = false;
        try {
            iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        } catch (Exception e) {
            exceptionCaught = true;
        }
        assertTrue(exceptionCaught);
    }

    @Test
    public void getDeviceDetailsv3_2_whenNull_thenThrowException() throws Exception {
        DeviceListInputRequest request = new DeviceListInputRequest();
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();
        iVAPPDeviceUtil.findServiceByName(anyString());
        Gson gson = new Gson();
        HttpEntity<String> httpEntity = new HttpEntity<>(gson.toJson(request), IVAPPDeviceUtil.getHttpHeaders());
        Mockito.when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(ParameterizedTypeReference.class))).thenReturn(null);
        boolean exceptionCaught = false;
        try {
            iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        } catch (Exception e) {
            exceptionCaught = true;
        }
        assertTrue(exceptionCaught);
    }

    @Test
    public void getDeviceDetailsv3_2_whenTrue_thenReturnValue() throws Exception {
        DeviceListInputRequest request = new DeviceListInputRequest();
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();
        iVAPPDeviceUtil.findServiceByName(anyString());
        Gson gson = new Gson();
        HttpEntity<String> httpEntity = new HttpEntity<>(gson.toJson(request), iVAPPDeviceUtil.getHttpHeaders());
        ResponseEntity<UTSEquipmentList> responseBody = new ResponseEntity<>(utsEquipmentList, org.springframework.http.HttpStatus.OK);
        Mockito.when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(ParameterizedTypeReference.class))).thenReturn(responseBody);
        UTSEquipmentList actual = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
        assertEquals(utsEquipmentList, actual);
    }

    @Test
    public void getDeviceDetailsv3_1_whenFalse_thenThrowException() throws Exception {
        iVAPPDeviceUtil.findServiceByName(anyString());
        DeviceListInputRequest request = new DeviceListInputRequest();
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();
        Method methodUnderTest = IVAPPDeviceService.class.getDeclaredMethod("getDeviceDetailsv3", DeviceListInputRequest.class, UTSEquipmentList.class);
        methodUnderTest.setAccessible(true);
        Gson gson = new Gson();
        HttpEntity<String> httpEntity = new HttpEntity<>(gson.toJson(request), IVAPPDeviceUtil.getHttpHeaders());
        Mockito.when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(Class.class))).thenReturn(new ResponseEntity<>(null, org.springframework.http.HttpStatus.BAD_REQUEST));
        boolean exceptionCaught = false;
        try {
            methodUnderTest.invoke(iVAPPDeviceService, request, utsEquipmentList);
        } catch (Exception e) {
            exceptionCaught = true