Certainly! Here's the updated test case that covers the lines you mentioned in the `initialize()` method to achieve 100% code coverage.

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.env.Environment;
import io.micrometer.core.instrument.DistributionSummary;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.distribution.HistogramSnapshot;
import java.lang.reflect.Field;

@ExtendWith(MockitoExtension.class)
public class PostingServiceTest {

    @InjectMocks
    private PostingService postingService;

    @Mock
    private Environment env;

    @Mock
    private HistogramBuckets histogrambuckets;

    @Mock
    private MeterRegistry meterRegistry;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInitialize() throws Exception {
        // Mock dependencies
        String activeProfile = "testProfile";
        String applicationName = "testApplication";
        when(env.getProperty(AlarmPostingConstants.ACTIVE_PROFILE)).thenReturn(activeProfile);
        when(env.getProperty(AlarmPostingConstants.APPLICATION_NAME)).thenReturn(applicationName);
        when(histogrambuckets.histogramBoundaries()).thenReturn(new HistogramSnapshot());

        // Execute
        postingService.initialize();

        // Verify
        DistributionSummary summary = getPrivateField(postingService, "summary");
        assertNotNull(summary);
        verify(histogrambuckets).histogramBoundaries();
        verify(meterRegistry).summary(eq(AlarmPostingConstants.METRIC_BASENAME), any(), any());
        verify(summary).serviceLevelObjectives(any());
        verify(summary).tags(
                AlarmPostingConstants.ENVIRONMENT, activeProfile,
                AlarmPostingConstants.SERVICE, applicationName,
                AlarmPostingConstants.LEVEL, AlarmPostingConstants.STAGE);
        verify(summary).register(meterRegistry);
    }

    private <T> T getPrivateField(Object object, String fieldName) throws Exception {
        Field field = object.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        return (T) field.get(object);
    }
}
```

### Explanation:
- The `testInitialize` test case has been updated to cover the lines you mentioned in the `initialize()` method.
- Mock dependencies are set up to return the necessary values for those lines.
- After executing the `initialize()` method, the test case verifies that the private `summary` field is not null and that the expected interactions with the `HistogramSnapshot` object, `DistributionSummary`, and `MeterRegistry` occur.