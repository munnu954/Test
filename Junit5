@Test
void testApplyPostingRule() throws Exception {
    // Setup
    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("TestAlarm");
    
    PostingRule rule = new PostingRule();
    rule.setRuleId("TestRule");
    rule.setRuleTraversalExpression("TestExpression");
    
    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("testKey", "testValue");
    
    ResponseEntity<String> responseEntity = new ResponseEntity<>("TestTopologyData", HttpStatus.OK);

    when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
    
    JsonNode jsonNode = AlarmPostingConstants.getObjectMapper().readTree("{\"key\":\"value\"}");
    when(AlarmPostingConstants.getObjectMapper().readTree("TestTopologyData")).thenReturn(jsonNode);
    
    JsonNode topologyObjectsNode = AlarmPostingConstants.getObjectMapper().createArrayNode();
    when(jsonNode.at(AlarmPostingConstants.TRAVERSAL_TOPOLOGYOBJECTS_PATH)).thenReturn(topologyObjectsNode);

    PostingRuleProcessingService service = new PostingRuleProcessingService();

    // Execute
    Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

    // Verify
    assertNotNull(result);
    assertEquals("TestAlarm", result.getAlarmIdentity());
    verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString());
    verify(AlarmPostingConstants.getObjectMapper(), times(1)).readTree("TestTopologyData");
    verify(jsonNode, times(1)).at(AlarmPostingConstants.TRAVERSAL_TOPOLOGYOBJECTS_PATH);
}

@Test
void testApplyPostingRule_Exception() throws Exception {
    // Setup
    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("TestAlarm");
    
    PostingRule rule = new PostingRule();
    rule.setRuleId("TestRule");
    rule.setRuleTraversalExpression("TestExpression");
    
    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("testKey", "testValue");
    
    ResponseEntity<String> responseEntity = null;
    when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
    
    PostingRuleProcessingService service = new PostingRuleProcessingService();

    // Execute
    Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

    // Verify
    assertNotNull(result);
    assertEquals("TestAlarm", result.getAlarmIdentity());
    verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString());
    verify(AlarmPostingConstants.getObjectMapper(), never()).readTree(anyString());
}

@Test
void testApplyPostingRule_ExceptionCaught() throws Exception {
    // Setup
    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("TestAlarm");
    
    PostingRule rule = new PostingRule();
    rule.setRuleId("TestRule");
    rule.setRuleTraversalExpression("TestExpression");
    
    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("testKey", "testValue");
    
    ResponseEntity<String> responseEntity = new ResponseEntity<>("TestTopologyData", HttpStatus.OK);

    when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
    
    when(AlarmPostingConstants.getObjectMapper().readTree("TestTopologyData")).thenThrow(new IOException());
    
    PostingRuleProcessingService service = new PostingRuleProcessingService();

    // Execute
    Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

    // Verify
    assertNotNull(result);
    assertEquals("TestAlarm", result.getAlarmIdentity());
    verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString());
    verify(AlarmPostingConstants.getObjectMapper(), times(1)).readTree("TestTopologyData");
    verify(LOG, times(1)).error(eq("Exception while retrieving and parsing Topology Traversal API results:"), any(Exception.class));
}