Here is the updated and executable Junit5 testCreateAlarmWithInvalidJsonFormat code that should pass without throwing any errors:

```java
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class AlarmTest {

    @Test
    public void testCreateAlarmWithInvalidJsonFormat() {
        String invalidJson = "{name: 'Test Alarm', time: '08:00 AM'}"; // Invalid JSON format without double quotes around keys

        ObjectMapper objectMapper = new ObjectMapper();

        assertThrows(JsonParseException.class, () -> {
            objectMapper.readValue(invalidJson, Alarm.class);
        });
    }
}
```

In this updated code, we are using `assertThrows` method from JUnit5 to assert that a `JsonParseException` should be thrown when trying to deserialize the invalid JSON format. This way, the test case will pass without throwing any errors.