It appears that the `utils` mock is not being properly initialized in your test cases. To fix this, you need to ensure that `utils` is correctly injected into the `PostingRuleProcessingService`. Additionally, you can use `MockitoAnnotations.openMocks(this);` to initialize the mocks before each test.

Here is the updated JUnit 5 test code to address the `NullPointerException` issue:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testApplyPostingRule_AlarmedObjectAndDetailsResolved() throws Exception {
        Alarm alarm = new Alarm();
        alarm.setTopologyDetails("{}");
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        String topologyData = "{\"topologyObjects\": [{\"key\": \"value\"}]}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(topologyData);
        JsonNode jsonNode = new ObjectMapper().readTree(topologyData);

        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), any())).thenReturn("eligibleValue").thenReturn("alarmedObject");
        when(utils.evaluateExpression(anyString(), any())).thenReturn("{\"MO_Type\":\"type\",\"Name\":\"name\"}");

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals("alarmedObject", alarm.getAlarmedObject());
        assertEquals("{\"MO_Type\":\"type\",\"Name\":\"name\"}", alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_AlarmedObjectResolvedButDetailsNull() throws Exception {
        Alarm alarm = new Alarm();
        alarm.setTopologyDetails(null);
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        String topologyData = "{\"topologyObjects\": [{\"key\": \"value\"}]}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(topologyData);
        JsonNode jsonNode = new ObjectMapper().readTree(topologyData);

        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), any())).thenReturn("eligibleValue").thenReturn("alarmedObject");
        when(utils.evaluateExpression(anyString(), any())).thenReturn("{\"MO_Type\":\"type\",\"Name\":\"name\"}");

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals("alarmedObject", alarm.getAlarmedObject());
        assertEquals("{\"MO_Type\":\"type\",\"Name\":\"name\"}", alarm.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_InvalidJsonInTopologyDetails() throws Exception {
        Alarm alarm = new Alarm();
        alarm.setTopologyDetails("{invalid_json}");
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        String topologyData = "{\"topologyObjects\": [{\"key\": \"value\"}]}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(topologyData);
        JsonNode jsonNode = new ObjectMapper().readTree(topologyData);

        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), any())).thenReturn("eligibleValue").thenReturn("alarmedObject");
        when(utils.evaluateExpression(anyString(), any())).thenReturn("{\"MO_Type\":\"type\",\"Name\":\"name\"}");

        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        assertEquals("alarmedObject", alarm.getAlarmedObject());
        assertEquals("{\"MO_Type\":\"type\",\"Name\":\"name\"}", alarm.getTopologyDetails());
    }
}
```

In the updated code:

1. `MockitoAnnotations.openMocks(this);` is added in the `setUp` method to initialize the mocks.
2. The `objectMapper` instantiation is moved inside the individual test cases to avoid any potential issues with shared state.

This should fix the `NullPointerException` and ensure that your mocks are properly initialized.