To ensure 100% code coverage for the `if (null != response)` statement, you need to explicitly test both the scenario where the response is non-null and the scenario where it is null. It seems the current setup already includes a test case where the response is null (`testGetCircuitDetails_NullResponse`), so let's ensure that we have a clear distinction between these two scenarios.

Below is a revised set of test cases, ensuring clarity and explicit coverage of both branches:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Field;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpMethod;

public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    private static final String VALID_RESPONSE = "{\"field\":\"value\"}";
    private static final String BASE_URL = "http://mockServiceName";
    private static final String CKT_DETAIL_URI = "/details?circuitId=#circuitId#&sourceSys=#sourceSys#";

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        setPrivateField(circuitDetailsProvider, "cktDetailUri", CKT_DETAIL_URI);
        setPrivateField(circuitDetailsProvider, "cktDetServiceName", "mockServiceName");
    }

    private void setPrivateField(Object targetObject, String fieldName, Object value) throws Exception {
        Field field = targetObject.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(targetObject, value);
    }

    @Test
    public void testGetCircuitDetails_ResponseIsNotNull() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        assertEquals("value", response.getField()); // Assuming the response JSON maps to a field in CircuitDetailResponse
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_ResponseIsNull() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(null);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }
}
```

### Explanation:

1. **`testGetCircuitDetails_ResponseIsNotNull`**: This test ensures that when the response is valid (non-null), the `CircuitDetailResponse` is correctly populated. This tests the positive branch of the `if (null != response)` statement.

2. **`testGetCircuitDetails_ResponseIsNull`**: This test ensures that when the response is null, the method correctly returns a null `CircuitDetailResponse`. This tests the negative branch of the `if (null != response)` statement.

Each test case explicitly tests one branch of the conditional, ensuring full coverage. Make sure that your `CircuitDetailResponse` class has a method or mechanism to verify its content based on the JSON response.