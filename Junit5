To create JUnit 5 test cases for the `GraniteSegmentService` class, covering all branches of the methods `callCircuitDetailAPI` and `getRestObjData`, you need to mock dependencies and simulate different scenarios. Hereâ€™s a basic structure for the test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

class GraniteSegmentServiceTest {

    @InjectMocks
    private GraniteSegmentService graniteSegmentService;

    @Mock
    private RestClientUtil restClientUtil;

    @Mock
    private ElassandraConfig elassandraConfig;

    @Mock
    private RestTemplate restTemplate;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testCallCircuitDetailAPI_withCndTrue() {
        // Mocking dependencies and responses
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
            .thenReturn(new CircuitDetailResponse());

        // Calling the method with cnd = true
        CircuitDetailResponse response = graniteSegmentService.callCircuitDetailAPI("12345", true);

        // Asserting the response
        assertNotNull(response);
    }

    @Test
    void testCallCircuitDetailAPI_withCndFalse() {
        // Mocking dependencies and responses
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
            .thenReturn(new CircuitDetailResponse());

        // Calling the method with cnd = false
        CircuitDetailResponse response = graniteSegmentService.callCircuitDetailAPI("12345", false);

        // Asserting the response
        assertNotNull(response);
    }

    @Test
    void testGetRestObjData_withNonEmptyBaseUrl() throws Exception {
        // Mocking the service name to return a valid URL
        String serviceName = "validService";
        String appendUrl = "/api/path";
        when(graniteSegmentService.findServiceForName(serviceName)).thenReturn("http://localhost");

        // Mocking RestClientUtil response
        when(restClientUtil.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
            .thenReturn(new Object());

        // Preparing request parameters
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param1", "value1");

        // Calling the method
        Object response = graniteSegmentService.getRestObjData(requestParams, serviceName, appendUrl, new ParameterizedTypeReference<Object>() {});

        // Asserting the response
        assertNotNull(response);
    }

    @Test
    void testGetRestObjData_withEmptyBaseUrl() throws Exception {
        // Mocking the service name to return an empty URL
        String serviceName = "invalidService";
        String appendUrl = "/api/path";
        when(graniteSegmentService.findServiceForName(serviceName)).thenReturn("");

        // Preparing request parameters
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param1", "value1");

        // Calling the method and expecting an exception due to empty base URL
        assertThrows(CommonWrapperException.class, () -> {
            graniteSegmentService.getRestObjData(requestParams, serviceName, appendUrl, new ParameterizedTypeReference<Object>() {});
        });
    }
}
```

### Explanation:

1. **Mocking**: We use Mockito to mock dependencies like `RestClientUtil`, `ElassandraConfig`, and `RestTemplate`.

2. **Test Initialization**: We initialize mocks before each test using `@BeforeEach` and `MockitoAnnotations.openMocks(this)`.

3. **Test Cases**:
   - **callCircuitDetailAPI**: Test cases are created for both `cnd = true` and `cnd = false` scenarios. We mock the response from `RestClientUtil` to simulate different conditions.
   - **getRestObjData**: Test cases cover scenarios where the base URL is non-empty and empty. We mock the `findServiceForName` method to simulate these conditions.

4. **Assertions**: We use assertions to verify the expected outcomes of each test case.

This setup covers all branches of the specified methods to ensure comprehensive test coverage.