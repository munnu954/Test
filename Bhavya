@Given("a csv file with MRFC data")
public void acsvFileWithMRFCData() throws IOException {
    // Load the MRFC CSV file
    this.MRFCFile = MRFCResource.getFile();
}

@When("CsvtoJsonMRFCnTransformer is invoked on the csv file")
public void csvtojsonmrfentransformerIsInvokedOnTheCsvFile() throws Exception {
    // Invoke the CsvtoJsonMRFCnTransformer on the CSV file
    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
    final DataStream<String> stream = env.fromElements(Main.readCSVFile(this.MRFCFile.toPath().toString()));
    this.MRFCJsonStream = stream.flatMap(new CsvtoJsonConversion.CsvtoJsonMRFCnTransformer(fileName));
}

@And("the MRFC csv file content is converted to json")
public void theMRFCCsvFileContentIsConvertedToJson() throws Exception {
    // Collect the converted JSON content
    Iterator<String> iterator = this.MRFCJsonStream.executeAndCollect();
    this.jsonFirstRow = iterator.next();
}

@Then("validate the converted MRFC json content")
public void validateTheConvertedMRFCJsonContent() throws JSONException {
    // Validate the converted JSON content
    JSONObject firstJson = new JSONObject(jsonFirstRow);
    // Add assertions to validate the JSON content
    Assert.assertEquals("10", firstJson.getString("IPCQLEN"));
    Assert.assertEquals("2", firstJson.getString("DESTNODETYPE"));
    Assert.assertEquals("0", firstJson.getString("OUTOFORDERRXERRORS"));
    // Add more assertions for other fields
}
