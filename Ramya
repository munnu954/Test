import java.util.*;
import java.util.stream.Collectors;

public class AuditService {

    private final LucenceCollectionAuditRepo lucenceCollectionAuditRepo;

    public AuditService(LucenceCollectionAuditRepo lucenceCollectionAuditRepo) {
        this.lucenceCollectionAuditRepo = lucenceCollectionAuditRepo;
    }

    public Map<String, String> getAuditStatusMap(Vector<ChannelSftp.LsEntry> files, String remoteDirectory) {
        List<String> filePaths = files.stream()
            .filter(file -> !file.getAttrs().isDir())
            .map(file -> remoteDirectory + file.getFilename())
            .collect(Collectors.toList());

        List<List<String>> partitionedFilePaths = partitionList(filePaths, 1000);

        Map<String, String> auditStatusMap = new HashMap<>();

        for (List<String> chunk : partitionedFilePaths) {
            List<CollectionAudit> audits = lucenceCollectionAuditRepo.findLatestByFilePaths(chunk);
            Map<String, String> chunkAuditStatusMap = audits.stream()
                .filter(Objects::nonNull)
                .collect(Collectors.toMap(CollectionAudit::getInputFilePath, CollectionAudit::getJobStatus));
            auditStatusMap.putAll(chunkAuditStatusMap);
        }

        return
