To write JUnit 5 test cases for the specified branch within the `process` method of the `TrunkProcessor` class, we'll need to simulate different scenarios. Specifically, we need to cover the conditional logic `if (isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL))` inside the `else if(CommonWrapperConstants.SEGEMENT.equalsIgnoreCase(prevType))` block.

Here's the test code that covers both branches of the conditional logic:

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "TestSys";
    }

    @Test
    void testProcessWithSegmentAndTrailNotNull() {
        // Prepare test data
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("SEGEMENT");

        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType("TRAIL");
        CircuitComp circuitComp = new CircuitComp();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitComp.getCircuitInfo().add(circuitInfo);
        prevClrComponent.getCircuitComp().add(circuitComp);

        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        links.add(new Link());

        // Call the method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assertions to check the changes made by the method
        assertEquals(2, links.size(), "Link size should be 2");
        assertNotNull(links.get(1).getSource(), "The source of the new link should not be null");
        assertNotNull(links.get(1).getTarget(), "The target of the new link should not be null");
    }

    @Test
    void testProcessWithSegmentAndTrailNull() {
        // Prepare test data
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType("SEGEMENT");

        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType("TRAIL");

        List<ClrComponent> clrComponentList = new ArrayList<>();
        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        links.add(new Link());

        // Call the method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assertions to check the changes made by the method
        assertEquals(1, links.size(), "Link size should remain 1");
    }
}
```

### Explanation

1. **Test Setup**: Each test case starts by setting up necessary objects. Here, `nodes`, `links`, `clliNodeMap`, and `ukCount` are initialized.

2. **First Test Case**: `testProcessWithSegmentAndTrailNotNull()`
   - It simulates a scenario where the previous component in the list (`prevClrComponent`) has a type of `TRAIL`, and the `isNotNull` check will return true.
   - The test verifies that a new link is added to the `links` list, and both `source` and `target` of the link are set.

3. **Second Test Case**: `testProcessWithSegmentAndTrailNull()`
   - It simulates a scenario where the previous component in the list doesn't have the necessary information for the `TRAIL` type to pass the `isNotNull` check.
   - The test verifies that no new link is added to the `links` list.

These test cases ensure that both branches of the conditional logic are covered, providing 100% code coverage for that specific part of the method.