Certainly! Below, I've completed the `testApplyPostingRule_TopologyDetails_NotNullNotEmpty` test and added more JUnit 5 test cases to ensure 100% code coverage for the specified statements in the `applyPostingRule` method of the `PostingRuleProcessingService` class.

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import java.lang.reflect.Field;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private ObjectMapper objectMapper;

    @BeforeEach
    void setUp() throws Exception {
        // Use reflection to set private fields
        setPrivateField("alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");
        setPrivateField("topologyObjectEligibilityCheckValue", "%TopoObject:OSS_Names[0]%");
        setPrivateField("topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        setPrivateField("componentIDAttributeName", "reportingObject");
        setPrivateField("topologyDetailsAlarmedObjectExpression", "{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}");
    }

    private void setPrivateField(String fieldName, String value) throws Exception {
        Field field = PostingRuleProcessingService.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(postingRuleProcessingService, value);
    }

    @Test
    void testApplyPostingRule_TopologyDetails_NotNullNotEmpty() throws Exception {
        // Setup
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("alarmIdentity");

        PostingRule rule = new PostingRule(1L, "TestRule", 1, 1, "Criteria");

        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> response = mock(ResponseEntity.class);
        when(response.getBody()).thenReturn("{\"TBL_response\":{\"topologyObjects\":[{\"MO_Type\":\"Type1\",\"INMS_Attributes.TagSequence\":\"123\",\"Name\":\"Name1\"}]}}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(response);

        when(utils.evaluateExpression(anyString(), any())).thenReturn("validValue");

        ObjectMapper mapper = new ObjectMapper();
        ObjectNode node = mapper.createObjectNode();
        node.put("alarmedObject", "alarmedObject");

        when(objectMapper.createObjectNode()).thenReturn(node);
        when(objectMapper.readTree(anyString())).thenReturn(node);

        // Execute
        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verify
        assertNotNull(resultAlarm);
        assertEquals("alarmedObject", resultAlarm.getAlarmedObject());
        verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(any(), any(), anyString());
        verify(utils, times(1)).evaluateExpression(anyString(), any());
    }

    @Test
    void testApplyPostingRule_TopologyDetailsEmptyNode() throws Exception {
        // Setup
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("alarmIdentity");

        PostingRule rule = new PostingRule(1L, "TestRule", 1, 1, "Criteria");

        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> response = mock(ResponseEntity.class);
        when(response.getBody()).thenReturn("{\"TBL_response\":{\"topologyObjects\":[{\"MO_Type\":\"Type1\",\"INMS_Attributes.TagSequence\":\"123\",\"Name\":\"Name1\"}]}}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(response);

        when(utils.evaluateExpression(anyString(), any())).thenReturn("validValue");

        ObjectMapper mapper = new ObjectMapper();
        ObjectNode node = mapper.createObjectNode();
        node.put("alarmedObject", "alarmedObject");

        when(objectMapper.createObjectNode()).thenReturn(node);
        when(objectMapper.readTree(anyString())).thenReturn(node);

        // Execute
        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verify
        assertNotNull(resultAlarm);
        assertEquals("alarmedObject", resultAlarm.getAlarmedObject());
        verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(any(), any(), anyString());
        verify(utils, times(1)).evaluateExpression(anyString(), any());
    }

    @Test
    void testApplyPostingRule_TopologyDetailsNotEmptyNode() throws Exception {
        // Setup
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("alarmIdentity");
        alarm.setTopologyDetails("{\"existingKey\":\"existingValue\"}");

        PostingRule rule = new PostingRule(1L, "TestRule", 1, 1, "Criteria");

        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> response = mock(ResponseEntity.class);
        when(response.getBody()).thenReturn("{\"TBL_response\":{\"topologyObjects\":[{\"MO_Type\":\"Type1\",\"INMS_Attributes.TagSequence\":\"123\",\"Name\":\"Name1\"}]}}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(response);

        when(utils.evaluateExpression(anyString(), any())).thenReturn("validValue");

        ObjectMapper mapper = new ObjectMapper();
        ObjectNode existingNode = mapper.createObjectNode();
        existingNode.put("existingKey", "existingValue");

        ObjectNode updateNode = mapper.createObjectNode();
        updateNode.put("newKey", "newValue");

        when(objectMapper.readTree(alarm.getTopologyDetails())).thenReturn(existingNode);
        when(objectMapper.readTree(anyString())).thenReturn(updateNode);

        // Execute
        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verify
        assertNotNull(resultAlarm);
        assertEquals("alarmedObject", resultAlarm.getAlarmedObject());

        JsonNode topologyDetailsNode = objectMapper.readTree(resultAlarm.getTopologyDetails());
        assertTrue(topologyDetailsNode.has("existingKey"));
        assertTrue(topologyDetailsNode.has("newKey"));

        verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(any(), any(), anyString());
        verify(utils, times(1)).evaluateExpression(anyString(), any());
    }

    @Test
    void testApplyPostingRule_EmptyTopologyDetails() throws Exception {
        // Setup
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("alarmIdentity");

        PostingRule rule = new PostingRule(1L, "TestRule", 1, 1, "Criteria");

        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> response = mock(ResponseEntity.class);
        when(response.getBody()).thenReturn("{\"TBL_response\":{\"topologyObjects\":[{\"MO_Type\":\"Type1\",\"INMS_Attributes.TagSequence\":\"123\",\"Name\":\"Name1\"}]}}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(response);

        when(utils.evaluateExpression(anyString(), any())).thenReturn("validValue");

        ObjectMapper mapper = new ObjectMapper();
        ObjectNode node = mapper.createObjectNode();
        node.put("alarmedObject", "alarmedObject");

        when(objectMapper.createObjectNode()).thenReturn(node);
        when(objectMapper.readTree(anyString())).thenReturn(node);

        // Execute
        Alarm resultAlarm = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verify
        assertNotNull(resultAlarm);
        assertEquals("alarmedObject", resultAlarm.getAlarmedObject());
        verify(topoApiClient, times(1)).fetchTopologyTraversalDetails(any(), any(), anyString());
        verify(utils, times(1)).evaluateExpression(anyString(), any());
    }

    @Test
    void testApplyPostingRule_NullTopologyDetails() throws Exception {
        // Setup
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("alarmIdentity");
        alarm.setTopologyDetails(null);

        PostingRule rule = new PostingRule(1L, "TestRule", 1, 1, "Criteria");

        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> response = mock(ResponseEntity.class);
        when(response.getBody()).thenReturn("{\"TBL_response\":{\"topologyObjects\":[{\"MO_Type\":\"Type1\",\"INMS_Attributes.TagSequence\":\"123\",\"Name\":\"Name1\"}]}}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(), any(), anyString())).thenReturn(response);

        when(utils.evaluateExpression(anyString(), any())).thenReturn("validValue");

        ObjectMapper mapper