To achieve 100% code coverage for the specified `else if` block, we need to ensure that all logical branches within the condition are adequately tested. The condition in question is:

```java
else if((perceivedSeverity == null || (perceivedSeverity != null && perceivedSeverity.toString().isEmpty())) && ...)
```

This condition can be broken down into the following key branches:
1. `perceivedSeverity == null`
2. `perceivedSeverity != null && perceivedSeverity.toString().isEmpty()`
3. The state when `perceivedSeverity` is neither `null` nor an empty string.

We need to test cases where:
- `perceivedSeverity` is `null` and the subsequent condition is true.
- `perceivedSeverity` is an empty string and the subsequent condition is true.
- `perceivedSeverity` is neither `null` nor an empty string, ensuring the condition is not met.

Let's add the necessary test cases to cover these branches:

### Test Case: `perceivedSeverity` is `null`
```java
@Test
void testCreateAlarm_withNullPerceivedSeverity() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    String nullPerceivedSeverityJson = "{ \"externalAlarmId\":\"abcd\", \"State\":\"someState\", \"sequenceId\":\"12345\"}";
    JsonNode json = obj.readTree(nullPerceivedSeverityJson);

    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    percMap.put("Indeterminate", 1);
    stateMap.put("someState", 1);
    typeMap.put("Other", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("new");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    alarmRepositoryImpl.createAlarm(nullPerceivedSeverityJson);
}
```

### Test Case: `perceivedSeverity` is an empty string
```java
@Test
void testCreateAlarm_withEmptyPerceivedSeverity() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    String emptyPerceivedSeverityJson = "{ \"externalAlarmId\":\"abcd\", \"State\":\"someState\", \"sequenceId\":\"12345\", \"perceivedSeverity\":\"\"}";
    JsonNode json = obj.readTree(emptyPerceivedSeverityJson);

    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    percMap.put("Indeterminate", 1);
    percMap.put("", 1);
    stateMap.put("someState", 1);
    typeMap.put("Other", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("new");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    alarmRepositoryImpl.createAlarm(emptyPerceivedSeverityJson);
}
```

### Test Case: `perceivedSeverity` is non-empty and non-null
```java
@Test
void testCreateAlarm_withNonEmptyPerceivedSeverity() throws Exception {
    ObjectMapper obj = new ObjectMapper();
    String nonEmptyPerceivedSeverityJson = "{ \"externalAlarmId\":\"abcd\", \"State\":\"someState\", \"sequenceId\":\"12345\", \"perceivedSeverity\":\"critical\"}";
    JsonNode json = obj.readTree(nonEmptyPerceivedSeverityJson);

    Map<String, Integer> percMap = new HashMap<>();
    Map<String, Integer> stateMap = new HashMap<>();
    Map<String, Integer> typeMap = new HashMap<>();
    percMap.put("critical", 2);
    stateMap.put("someState", 1);
    typeMap.put("Other", 1);

    when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
    when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
    when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
    when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
    when(postgresConf.getAlarmStateNew()).thenReturn("new");
    when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

    alarmRepositoryImpl.createAlarm(nonEmptyPerceivedSeverityJson);
}
```

### Summary of Test Cases
- **testCreateAlarm_withNullPerceivedSeverity**: Covers the branch where `perceivedSeverity` is `null`.
- **testCreateAlarm_withEmptyPerceivedSeverity**: Covers the branch where `perceivedSeverity` is an empty string.
- **testCreateAlarm_withNonEmptyPerceivedSeverity**: Covers the branch where `perceivedSeverity` is non-empty and non-null.

By adding these test cases, you should achieve 100% code coverage for the specified `else if` block.