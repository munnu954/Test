To ensure that the specific if statements are covered in the `convertToMtnInsights` method, let's refine the test cases to focus on the conditions that trigger these statements.

### Test Case for `if(!ObjectUtils.isEmpty(insightsCaseEntities)){ }`

To cover this, we need to ensure that `insightsRepository.findByPkEcpdIdAndPkMtnAndProdIdAndPkInsightCategoryInAndPkInsightNameIn` returns a non-empty `MtnInsightsEntity`.

### Test Case for `if(aggregateInsightsEntity.getAggrValue().contains(appendOutage.toString())) { }`

To cover this, we need to ensure that `aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId` returns an `AggregateInsightsEntity` with `aggrValue` containing a specific outage ID string.

Here are the refined test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class MtnInsightsManagerTest {

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testConvertToMtnInsights_whenInsightsCaseEntitiesIsNotEmpty() {
        // Arrange
        MtnInsightsEntity entity1 = createEntity("mtnOutageCase", "VBGNxOutage", "456");
        List<MtnInsightsEntity> entities = Arrays.asList(entity1);

        MtnInsightsEntity insightsCaseEntity = createEntity("mtnOutageCase", "VBGNxOutage", "456");
        when(insightsRepository.findByPkEcpdIdAndPkMtnAndProdIdAndPkInsightCategoryInAndPkInsightNameIn(
                anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenReturn(insightsCaseEntity);

        // Act
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("VBGNxOutage", result.getCategoryInsights()[0].getCategory());
        assertTrue(result.getCategoryInsights()[0].getInsights().length > 0);
    }

    @Test
    public void testConvertToMtnInsights_whenAggregateValueContainsOutageId() {
        // Arrange
        MtnInsightsEntity entity1 = createEntity("mtnoutage", "VBGNxOutage", "123");
        List<MtnInsightsEntity> entities = Arrays.asList(entity1);

        String outageId = "123";
        String appendOutage = "\"outage_id\":\"" + outageId + "\",";
        
        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue(appendOutage + "someOtherValue");
        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(anyString(), anyString()))
                .thenReturn(aggregateEntity);

        // Act
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("VBGNxOutage", result.getCategoryInsights()[0].getCategory());
        assertTrue(result.getCategoryInsights()[0].getInsights().length > 0);
    }

    private MtnInsightsEntity createEntity(String insightName, String category, String outageId) {
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setEcpdId("ecpdId");
        pk.setMtn("mtn");
        pk.setInsightCategory(category);
        pk.setInsightName(insightName);

        MtnInsightsEntity entity = new MtnInsightsEntity();
        entity.setPk(pk);
        entity.setProdId(outageId);
        entity.setInsightValues("someValue");

        return entity;
    }
}
```

### Explanation

1. **`testConvertToMtnInsights_whenInsightsCaseEntitiesIsNotEmpty`**:
   - This test ensures the `insightsRepository` returns a non-empty `MtnInsightsEntity` when queried, thus satisfying the `if(!ObjectUtils.isEmpty(insightsCaseEntities)){ }` condition.
   - The if block should execute, and its effects are verified in the assertions.

2. **`testConvertToMtnInsights_whenAggregateValueContainsOutageId`**:
   - This test ensures that the `aggrInsightRepository` returns an `AggregateInsightsEntity` whose `aggrValue` contains the outage ID, thus satisfying the `if(aggregateInsightsEntity.getAggrValue().contains(appendOutage.toString())) { }` condition.
   - The expected behavior is verified by checking that the insights are correctly added to the results.

These test cases should effectively cover the specified if statements, ensuring they execute and are verified in the testing process.