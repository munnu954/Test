Sure! Below is a Java Program program that calculates a salary hike based on the department an employee belongs to and then sorts the employees in descending order based on their new salary after applying the hike. The program uses Java 8 Stream APIs to achieve this.

```java
import java.util.*;
import java.util.stream.Collectors;

class Employee {
    private String empName;
    private String department;
    private double salary;
    private double hikedSalary;

    public Employee(String empName, String department, double salary) {
        this.empName = empName;
        this.department = department;
        this.salary = salary;
        this.hikedSalary = calculateHikedSalary(department, salary);
    }

    public String getEmpName() {
        return empName;
    }

    public String getDepartment() {
        return department;
    }

    public double getSalary() {
        return salary;
    }

    public double getHikedSalary() {
        return hikedSalary;
    }

    private double calculateHikedSalary(String department, double salary) {
        // Example hike percentage based on department
        double hikePercentage;
        switch (department) {
            case "HR":
                hikePercentage = 0.10; // 10% hike
                break;
            case "IT":
                hikePercentage = 0.15; // 15% hike
                break;
            case "Finance":
                hikePercentage = 0.12; // 12% hike
                break;
            case "Sales":
                hikePercentage = 0.08; // 8% hike
                break;
            default:
                hikePercentage = 0.05; // 5% hike for other departments
                break;
        }
        return salary + (salary * hikePercentage);
    }

    @Override
    public String toString() {
        return String.format("Employee{name='%s', department='%s', salary=%.2f, hikedSalary=%.2f}", empName, department, salary, hikedSalary);
    }

    public static void main(String[] args) {
        List<Employee> employees = Arrays.asList(
                new Employee("Alice", "IT", 70000),
                new Employee("Bob", "HR", 50000),
                new Employee("Charlie", "Finance", 60000),
                new Employee("David", "Sales", 55000),
                new Employee("Eve", "IT", 80000)
        );

        // Sorting and printing employees in descending order of their hiked salary
        List<Employee> sortedEmployees = employees.stream()
                .sorted(Comparator.comparingDouble(Employee::getHikedSalary).reversed())
                .collect(Collectors.toList());

        sortedEmployees.forEach(System.out::println);
    }
}
```

### Explanation
1. **Employee Class**:
    - The `Employee` class has attributes: `empName`, `department`, `salary`, and `hikedSalary`.
    - The constructor takes `empName`, `department`, and `salary`, and calculates the `hikedSalary` based on the department using the `calculateHikedSalary` method.

2. **calculateHikedSalary Method**:
    - This method assigns a hike percentage based on the department name and calculates the new salary after applying the hike. You can modify the hike percentages as needed.

3. **Main Method**:
    - A list of `Employee` objects is created with initial salaries.
    - The list is then sorted in descending order according to the `hikedSalary` using Java 8 Stream APIs.
    - The sorted list is printed to the console.

When you run this program, it will print the list of employees sorted by their new salary after applying the department-based hike in descending order. You can adjust the departments, initial salaries, and hike calculation logic as per your requirements.