import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.springframework.http.ResponseEntity;

public class PostingRuleProcessingServiceTest {

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Spy
    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Test
    public void testApplyPostingRule() throws Exception {
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking dependencies
        ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenAnswer(invocation -> {
            String expression = invocation.getArgument(0);
            if(expression.equals("%Mock:AlarmExpression%")) {
                return "TestValue";
            } else if(expression.equals("%Mock:TopologyExpression%")) {
                return "{\"MO_Type\":\"TestMOType\",\"TagSequence\":\"TestTagSequence\",\"Name\":\"TestName\"}";
            } else if(expression.equals("%Mock:EligibilityValue%")) {
                return "EligibleValue";
            } else {
                return "";
            }
        });

        // Set values for @Value annotated fields
        String componentID = "reportingObject";
        ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "%Mock:TopologyExpression%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
        ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", componentID);

        // Execute the method to be tested
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions
        assertNotNull(result);
        assertEquals("TestValue", result.getAlarmedObject());
        assertNotNull(result.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_Exception() throws Exception {
        // Test for exception handling in applyPostingRule method
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        // Mocking dependencies
        ResponseEntity<String> responseEntity = ResponseEntity.ok(null);
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);

        // Execute the method to be tested
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Assertions
        assertEquals(alarm, result);
    }

    @Test
    public void testGetComponentIdForTopoTraversal() {
        // Test for getComponentIdForTopoTraversal method
        HashMap<String, Object> alarmMap = new HashMap<>();
        PostingRule rule = new PostingRule();

        // Execute the method to be tested
        String componentId = postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule);

        // Assertions
        assertNotNull(componentId);
    }

    @Test
    public void testIsLateAlarmEligibleForRuleProcessing() {
        // Test for isLateAlarmEligibleForRuleProcessing method
        Alarm alarm = new Alarm();
        SqlRowSet rs = mock(SqlRowSet.class);

        // Set componentIDAttributeName to test the condition
        String componentID = "testAttributeName";
        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", componentID);

        // Execute the method to be tested
        boolean result = postingRuleProcessingService.isLateAlarmEligibleForRuleProcessing(alarm, rs);

        // Assertions
        assertTrue(result);
    }
}