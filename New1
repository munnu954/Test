Main.java class:-

public class Main {

    private static String bootstarpServer;
    private static String topic;
    private static final Logger LOGGER = LoggerFactory.getLogger(Main.class);

    public static void main(String[] args) throws Exception {
        ParameterTool parameters = ParameterTool.fromArgs(args);

        bootstarpServer = parameters.get("bootstarpServer");
        topic = parameters.get("Topic");

        LOGGER.info("Start to read and pick the path");

        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        String path = parameters.getRequired("input");
        if (!new File(path).exists()) {
            throw new FileNotFoundException("File not found!");
        }

        String fileType = parameters.get("fileType");

        String fileContent = readFile(path);

        KafkaSink<String> sink = KafkaSink.<String>builder()
                .setBootstrapServers(bootstarpServer)
                .setRecordSerializer(KafkaRecordSerializationSchema.builder()
                        .setTopic(topic)
                        .setValueSerializationSchema(new SimpleStringSchema())
                        .build())
                .setDeliveryGuarantee(DeliveryGuarantee.AT_LEAST_ONCE)
                .build();

        final DataStream<String> transformedStream;
        switch (fileType) {
            case "Gigamon":
                transformedStream = env.fromCollection(Collections.singletonList(fileContent)).flatMap(new CsvtoJsonGigamonTransformer());
                break;
            default:
                transformedStream = env.fromCollection(Collections.singletonList(fileContent)).flatMap(new CsvtoJsonTransformer());
                break;
        }

        transformedStream.sinkTo(sink);
        env.execute();
    }

    private static String readFile(String path) throws IOException {
        return new String(Files.readAllBytes(Paths.get(path)));
    }
}


CsvtoJsonTransformer.java:-

public class CsvtoJsonTransformer implements FlatMapFunction<String, String> {

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        // Implement your CSV to JSON transformation logic here
    }
}

public class CsvtoJsonGigamonTransformer implements FlatMapFunction<String, String> {

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        // Implement your Gigamon CSV to JSON transformation logic here
    }
}


In the updated Main.java class, the readFile method reads the entire CSV file content in one go and then processes it using a single flatMap operation. The CsvtoJsonTransformer and CsvtoJsonGigamonTransformer classes remain unchanged.