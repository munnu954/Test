Writing a JUnit 5 test case to cover the catch block of the `getClrGraphics` method involves simulating a scenario where `URLDecoder.decode` throws an `UnsupportedEncodingException`. This can be achieved using mocking frameworks like Mockito.

To get started, you'll need to set up your test class and import the necessary dependencies. Here is an example of how you can write the JUnit 5 test case:

### Maven Dependencies (if not already included)
Make sure you have the following dependencies in your `pom.xml`:

```xml
<dependencies>
    <!-- JUnit 5 dependencies -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>

    <!-- Mockito dependencies -->
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>3.12.4</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-junit-jupiter</artifactId>
        <version>3.12.4</version>
        <scope>test</scope>
    </dependency>
</dependencies>
```

### Test Case Code
```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(MockitoExtension.class)
public class CommonWrapperControllerTest {

    private MockMvc mockMvc;

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @Mock
    private GraniteSegmentService graniteService;

    @InjectMocks
    private CommonWrapperController commonWrapperController;

    @BeforeEach
    public void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup(commonWrapperController).build();
    }

    @Test
    public void testGetClrGraphics_UnsupportedEncodingException() throws Exception {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String cnd = "Y";

        // Mock URLDecoder to throw UnsupportedEncodingException
        mockStatic(URLDecoder.class);
        when(URLDecoder.decode(circuitId, StandardCharsets.UTF_8.toString()))
                .thenThrow(new UnsupportedEncodingException("Unsupported encoding"));

        // Perform the request and expect status OK
        mockMvc.perform(get("/api/v1/clr/graphics")
                .param("circuitId", circuitId)
                .param("sourceSys", sourceSys)
                .param("cnd", cnd)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        // Verify that the service method was called
        verify(clrGraphicsService, times(1)).getClrGraphics(anyString(), eq(sourceSys), eq(cnd));
    }
}
```

### Explanation
1. **Dependencies**: Ensure you have JUnit 5 and Mockito dependencies in your `pom.xml`.
2. **Annotations**:
   - `@ExtendWith(MockitoExtension.class)`: To enable Mockito in JUnit 5 tests.
   - `@Mock`: To create mock instances of the dependencies (`ClrGraphicsService` and `GraniteSegmentService`).
   - `@InjectMocks`: To inject the mocked dependencies into the `CommonWrapperController` instance.
3. **Setup** (`setUp` method): Initialize `MockMvc` to simulate HTTP requests.
4. **Test Method** (`testGetClrGraphics_UnsupportedEncodingException`):
   - Mock `URLDecoder.decode` to throw `UnsupportedEncodingException`.
   - Perform a GET request to the `/api/v1/clr/graphics` endpoint.
   - Verify that the `clrGraphicsService.getClrGraphics` method was called.

This test case ensures that the catch block is executed and the exception is properly logged.