import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.mock.mockito.SpyBean;
import org.springframework.boot.test.mock.mockito.SpyBeans;
import org.springframework.test.context.TestPropertySource;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
@TestPropertySource(locations = "classpath:application-test.properties")
public class DataSourceConfigTest {

    @MockBean
    private DataSourceModal dataSourceModal;

    @SpyBean
    private DataSourceConfig dataSourceConfig;

    @Test
    public void testFalloutDataSource() {
        // Mocking data for DataSourceModal
        when(dataSourceModal.getUsername()).thenReturn("testuser");
        when(dataSourceModal.getPassword()).thenReturn("testpassword");
        when(dataSourceModal.getUrl()).thenReturn("testurl");
        when(dataSourceModal.getDriver()).thenReturn("testdriver");

        assertNotNull(dataSourceConfig.falloutDataSource());
    }

    @Test
    public void testFalloutEntityManagerFactory() {
        assertNotNull(dataSourceConfig.entityManagerFactoryBean(mock(EntityManagerFactoryBuilder.class), mock(DataSource.class)));
    }

    @Test
    public void testFalloutTransactionManager() {
        assertNotNull(dataSourceConfig.falloutTransactionManager(mock(EntityManagerFactory.class)));
    }

}
The above code will test the methods in the DataSourceConfig class by mocking the dependencies such as DataSourceModal and EntityManagerFactoryBuilder. It will ensure 100% code coverage for the DataSourceConfig class.