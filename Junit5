Here is the Junit5 test cases code covering the mentioned branches in the `NetworkOutageEventsMessageListener` class:

```java
import org.apache.pulsar.client.api.Message;
import org.apache.avro.generic.GenericRecord;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
@SpringBootTest
@ContextConfiguration(classes = {NetworkOutageEventsMessageListener.class})
public class NetworkOutageEventsMessageListenerTest {

    @InjectMocks
    private NetworkOutageEventsMessageListener listener;

    @Mock
    private BatchLoaderUtils utils;

    @Test
    public void testOnMessageWithKafkaError() throws Exception {
        Message<GenericRecord> message = Mockito.mock(Message.class);
        when(message.getData()).thenReturn("testPayload".getBytes());
        when(Utils.convert(anyString(), eq(OutageDetailsEvent.class))).thenThrow(JsonProcessingException.class);

        assertThrows(SystemException.class, () -> {
            listener.onMessage(message);
        });

        verify(utils).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), eq('-'), anyString(), anyString());
    }

    @Test
    public void testOnMessageWithUncategorizedError() throws Exception {
        Message<GenericRecord> message = Mockito.mock(Message.class);
        when(message.getData()).thenReturn("testPayload".getBytes());
        OutageDetailsEvent event = new OutageDetailsEvent();
        event.setEventId("12345");
        when(Utils.convert(anyString(), eq(OutageDetailsEvent.class))).thenReturn(event);

        assertDoesNotThrow(() -> {
            listener.onMessage(message);
        });

        verify(utils, never()).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), eq('-'), anyString(), anyString());
    }

}
```

In these test cases, we are mocking the `BatchLoaderUtils` class and simulating scenarios to cover both branches in the `onMessage` method of the `NetworkOutageEventsMessageListener` class. 

You can run these test cases to ensure that the specified branches are covered and the exceptions are handled accordingly. Let me know if you need further assistance!