import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.google.gson.Gson;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.*;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.web.client.ResourceAccessException;

import java.util.*;

class GraniteReflowMsServiceTest {

    @InjectMocks
    private GraniteReflowMsService graniteReflowMsService;

    @Mock
    private RestTemplate restTemplate;

    private static final String MOCK_URL = "http://mock-url";
    private Gson gson;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        graniteReflowMsService = new GraniteReflowMsService();
        graniteReflowMsService.restTemplate = restTemplate;
        graniteReflowMsService.cndCircHeaderMSServiceUrl = MOCK_URL;
        gson = new Gson();
    }

    @Test
    void testValidateCircuits_Success() throws Exception {
        // Arrange
        List<String> circuitNameList = Arrays.asList("Circuit1", "Circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(circuitNameList);

        CircuitDetailResponse mockResponse = createMockResponse();
        String requestJson = gson.toJson(createRequestMap(circuitNameList));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>(requestJson, headers);

        // Use ArgumentMatchers for flexibility in mocking
        when(restTemplate.exchange(eq(MOCK_URL), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class)))
                .thenReturn(new ResponseEntity<>(mockResponse, HttpStatus.OK));

        // Act
        List<String> result = graniteReflowMsService.validateCircuits(circuitNameList, toValidateCircuitNameList);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("Circuit1", result.get(0));
        assertEquals("Circuit2", result.get(1));
        assertTrue(toValidateCircuitNameList.isEmpty());
    }

    @Test
    void testValidateCircuits_NoDataFoundException() {
        // Arrange
        List<String> circuitNameList = Arrays.asList("Circuit1", "Circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(circuitNameList);

        CircuitDetailResponse emptyResponse = new CircuitDetailResponse();
        emptyResponse.setCircuitData(new CircuitData());
        String requestJson = gson.toJson(createRequestMap(circuitNameList));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>(requestJson, headers);

        when(restTemplate.exchange(eq(MOCK_URL), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class)))
                .thenReturn(new ResponseEntity<>(emptyResponse, HttpStatus.OK));

        // Act & Assert
        assertThrows(NoDataFoundException.class, () -> 
            graniteReflowMsService.validateCircuits(circuitNameList, toValidateCircuitNameList)
        );
    }

    @Test
    void testValidateCircuits_InternalServerErrorException() {
        // Arrange
        List<String> circuitNameList = Arrays.asList("Circuit1", "Circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(circuitNameList);

        String requestJson = gson.toJson(createRequestMap(circuitNameList));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>(requestJson, headers);

        when(restTemplate.exchange(eq(MOCK_URL), eq(HttpMethod.POST), any(HttpEntity.class), eq(CircuitDetailResponse.class)))
                .thenThrow(new ResourceAccessException("Mocked Resource Access Exception"));

        // Act & Assert
        assertThrows(InternalServerErrorException.class, () -> 
            graniteReflowMsService.validateCircuits(circuitNameList, toValidateCircuitNameList)
        );
    }

    private Map<String, Object> createRequestMap(List<String> circuitNameList) {
        Map<String, Object> reqMap = new HashMap<>();
        List<Map<String, Object>> circuitList = new ArrayList<>();
        circuitNameList.forEach(circuit -> {
            Map<String, Object> circuitMap = new HashMap<>();
            circuitMap.put("circuitName", circuit);
            circuitList.add(circuitMap);
        });
        reqMap.put("circuitNameList", circuitList);
        return reqMap;
    }

    private CircuitDetailResponse createMockResponse() {
        Circuit circuit1 = new Circuit();
        circuit1.setCircuitName("Circuit1");
        Circuit circuit2 = new Circuit();
        circuit2.setCircuitName("Circuit2");

        CircuitLst circuitLst = new CircuitLst();
        circuitLst.setCircuit(Arrays.asList(circuit1, circuit2));

        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));

        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);
        return response;
    }
}