Certainly! We can use Reflection APIs to access private methods in a class without changing their access level. Here is how you can achieve that:

```java
import org.apache.pulsar.client.api.PulsarClientException;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.actuate.health.Health;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

class AlarmReceiverTest {

    @Test
    void testPrivateMethodsAccess() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, PulsarClientException {
        // Create an instance of AlarmReceiver
        AlarmReceiver alarmReceiver = new AlarmReceiver(new VMBParams(), new AlarmPostGreService(), new PostingService());

        // Access the private method getConnection using Reflection
        Method getConnectionMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        getConnectionMethod.setAccessible(true);
        getConnectionMethod.invoke(alarmReceiver);

        // Access the private method receiveMessages using Reflection
        Method receiveMessagesMethod = AlarmReceiver.class.getDeclaredMethod("receiveMessages");
        receiveMessagesMethod.setAccessible(true);
        receiveMessagesMethod.invoke(alarmReceiver);
    }

    @Test
    void testHealth() {
        AlarmReceiver alarmReceiver = new AlarmReceiver(new VMBParams(), new AlarmPostGreService(), new PostingService());
        assertEquals(Health.up().build(), alarmReceiver.health());
    }
}
```

In the test method `testPrivateMethodsAccess`, we are using Reflection to access the private methods `getConnection` and `receiveMessages` in the `AlarmReceiver` class. This allows us to test the functionality of these private methods without changing their access level.