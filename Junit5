To write JUnit 5 test cases for the `TrunkProcessor` class, specifically covering the logic within the `if (isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL))` conditional statement, we need to simulate various scenarios that can arise from different configurations of `prevClrComponent`. Here's how the test cases might look:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;

    @BeforeEach
    public void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
    }

    @Test
    public void testProcessWithTrailComponent() {
        // Create a mock ClrComponent list with a Trail component
        List<ClrComponent> clrComponentList = new ArrayList<>();

        ClrComponent prevClrComponent = mock(ClrComponent.class);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.TRAIL);

        List<CircuitComp> circuitCompList = new ArrayList<>();
        CircuitComp circuitComp = mock(CircuitComp.class);
        circuitCompList.add(circuitComp);
        when(prevClrComponent.getCircuitComp()).thenReturn(circuitCompList);

        List<CircuitInfo> circuitInfoList = new ArrayList<>();
        CircuitInfo circuitInfo = mock(CircuitInfo.class);
        circuitInfoList.add(circuitInfo);
        when(circuitComp.getCircuitInfo()).thenReturn(circuitInfoList);

        clrComponentList.add(prevClrComponent);

        ClrComponent clrComponent = new ClrComponent();
        clrComponentList.add(clrComponent);

        // Ensure there is at least one existing link
        Link existingLink = new Link();
        existingLink.setTarget("existingTarget");
        links.add(existingLink);

        // Call the method under test
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        // Verify the expected behavior
        assertEquals(2, links.size(), "A new link should be added.");
        Link newLink = links.get(1);
        assertNotNull(newLink.getSource(), "The new link's source should be set.");
        assertNotNull(newLink.getTarget(), "The new link's target should be set.");
    }

    @Test
    public void testProcessWithoutTrailComponent() {
        // Create a mock ClrComponent list without a Trail component
        List<ClrComponent> clrComponentList = new ArrayList<>();

        ClrComponent prevClrComponent = mock(ClrComponent.class);
        when(prevClrComponent.getType()).thenReturn("OTHER_TYPE");
        clrComponentList.add(prevClrComponent);

        ClrComponent clrComponent = new ClrComponent();
        clrComponentList.add(clrComponent);

        // Ensure there is at least one existing link
        Link existingLink = new Link();
        existingLink.setTarget("existingTarget");
        links.add(existingLink);

        // Call the method under test
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        // Verify the expected behavior
        assertEquals(1, links.size(), "No new link should be added.");
    }
}
```

### Explanation:

1. **Setup**: A `setUp` method initializes the `TrunkProcessor` instance and other necessary collections.

2. **Test with Trail Component**: 
   - A mock `ClrComponent` with a `TRAIL` type is created.
   - Mock circuit components and circuit information are added to simulate a valid trail scenario.
   - The `process` method is called, and assertions are made to ensure that a new link is created and properly configured.

3. **Test without Trail Component**: 
   - A mock `ClrComponent` with a different type is created.
   - The `process` method is called to ensure that no new link is created when the previous component is not a `TRAIL`.

4. **Use of Mocking**: Mocking is used to simulate the behavior of `ClrComponent` and its nested objects to control the test scenarios.

5. **Assertions**: Assertions are used to verify the correctness of the link creation logic.

These test cases ensure that the specific conditional logic is covered and that different paths through the method are exercised.