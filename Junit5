To cover all branches of the `if` condition in the `alarmPosting` method, you need to create test cases for the following scenarios:

1. `alarm.getAlarmedObject()` is `null`.
2. `alarm.getAlarmedObject()` is an empty string.
3. `alarm.getAlarmedObject()` is a non-empty string.

Here is the JUnit 5 test code covering these scenarios:

```java
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;

public class AlarmRepositoryImplTest {

    // Mocking the LOG for simplicity
    private static final org.slf4j.Logger LOG = Mockito.mock(org.slf4j.Logger.class);

    @Test
    public void testAlarmPostingWithNullAlarmedObject() throws Exception {
        Alarm alarm = new Alarm();
        alarm.setTid("TestTid");
        alarm.setAlarmedObject(null); // alarmedObject is null

        AlarmRepositoryImpl alarmRepositoryImpl = new AlarmRepositoryImpl();
        doNothing().when(alarmRepositoryImpl).postAlarm(any(Alarm.class), any(String.class));

        alarmRepositoryImpl.alarmPosting(alarm);

        assertEquals(alarm.getPostingEntity(), alarm.getAlarmedObject());
    }

    @Test
    public void testAlarmPostingWithEmptyAlarmedObject() throws Exception {
        Alarm alarm = new Alarm();
        alarm.setTid("TestTid");
        alarm.setAlarmedObject(""); // alarmedObject is empty

        AlarmRepositoryImpl alarmRepositoryImpl = new AlarmRepositoryImpl();
        doNothing().when(alarmRepositoryImpl).postAlarm(any(Alarm.class), any(String.class));

        alarmRepositoryImpl.alarmPosting(alarm);

        assertEquals(alarm.getPostingEntity(), alarm.getAlarmedObject());
    }

    @Test
    public void testAlarmPostingWithNonEmptyAlarmedObject() throws Exception {
        Alarm alarm = new Alarm();
        alarm.setTid("TestTid");
        alarm.setAlarmedObject("ExistingObject"); // alarmedObject is non-empty

        AlarmRepositoryImpl alarmRepositoryImpl = new AlarmRepositoryImpl();
        doNothing().when(alarmRepositoryImpl).postAlarm(any(Alarm.class), any(String.class));

        alarmRepositoryImpl.alarmPosting(alarm);

        assertEquals("ExistingObject", alarm.getAlarmedObject());
    }

    // Mocking the postAlarm method as it's not provided in the original code
    private void postAlarm(Alarm alarm, String tid) {
        // Mock implementation
    }
}

class AlarmRepositoryImpl {
    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(AlarmRepositoryImpl.class);

    public void alarmPosting(Alarm alarm) throws Exception {
        long startTime = 0;
        long startTimePostingQuery = 0;
        long endTimePostingQuery = 0;
        long endTime = 0;
        long totalTime = 0;
        long timeElapsed = 0;
        long timeElapsedPostingQuery = 0;
        alarm.setPostingEntity(alarm.getTid());
        if (alarm.getAlarmedObject() == null || alarm.getAlarmedObject().isEmpty()) {
            alarm.setAlarmedObject(alarm.getPostingEntity());
        }
        alarm.setReportingObject(alarm.getPostingEntity());
        alarm.setEquipmentObject(alarm.getTid());
        startTimePostingQuery = System.currentTimeMillis();
        postAlarm(alarm, alarm.getTid());
        endTimePostingQuery = System.currentTimeMillis();
        timeElapsedPostingQuery = endTimePostingQuery - startTimePostingQuery;

        endTime = System.currentTimeMillis();

        timeElapsed = endTime - startTime;
        LOG.debug("TIME ELAPSED WHOLE METHOD: " + timeElapsed);
        totalTime += endTime - startTime;
        LOG.debug("TOTAL TIME COST for alarms: " + totalTime);
    }

    private void postAlarm(Alarm alarm, String tid) {
        // Mock implementation
    }
}
```

### Explanation:
1. **testAlarmPostingWithNullAlarmedObject**:
    - This test case covers the scenario where `alarm.getAlarmedObject()` is `null`.
    - It checks if `alarm.setAlarmedObject(alarm.getPostingEntity())` is called.

2. **testAlarmPostingWithEmptyAlarmedObject**:
    - This test case covers the scenario where `alarm.getAlarmedObject()` is an empty string.
    - It checks if `alarm.setAlarmedObject(alarm.getPostingEntity())` is called.

3. **testAlarmPostingWithNonEmptyAlarmedObject**:
    - This test case covers the scenario where `alarm.getAlarmedObject()` is a non-empty string.
    - It checks if `alarm.getAlarmedObject()` remains unchanged.

By adding these test cases, you ensure that all branches of the `if` condition in the `alarmPosting` method are covered, achieving 100% code coverage.