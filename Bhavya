@Given("a csv file with MRFC data")
public void acsvFileWithMRFCData() throws IOException {
    this.MRFCFile = MRFCResource.getFile();
}

@When("CsvtoJsonMRFCnTransformer is invoked on the csv file")
public void csvtojsonmrfentransformerIsInvokedOnTheCsvFile() throws Exception{
    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
    final DataStream<String> stream = env.fromElements(Main.readCSVFile(this.MRFCFile.toPath().toString()));
    this.MRFCJsonStream = stream.flatMap(new CsvtoJsonConversion.CsvtoJsonMRFCnTransformer(fileName));
}
@And("the MRFC csv file content is converted to json")
public void theMRFCCsvFileContentIsConvertedToJson() throws Exception{
    Iterator<String> iterator = this.MRFCJsonStream.executeAndCollect();
    while (iterator.hasNext()) {
        String jsonRow = iterator.next();
        JSONObject jsonObject = new JSONObject(jsonRow);
        if (iterator.hasNext()) {
            jsonRow = iterator.next();
            jsonObject = new JSONObject(jsonRow);
            // Validate IPCQLEN
            Assertions.assertThat(jsonObject.getInt("IPCQLEN")).isEqualTo(140);

            // Validate DESTNODETYPE
            Assertions.assertThat(jsonObject.getInt("DESTNODETYPE")).isEqualTo(2);
            break;
        }
    }
}
