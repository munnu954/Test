import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class TrailProcessorTest {

    @Test
    void testProcess_withNullClrComponent() {
        CircuitDetailsProvider cktDetProvider = mock(CircuitDetailsProvider.class);
        TrailProcessor trailProcessor = TrailProcessor.getInstance(cktDetProvider);

        trailProcessor.process(null, null, null, null, null, 0, null, null);

        verifyNoInteractions(cktDetProvider);
    }

    @Test
    void testProcess_withEmptyClrComponent() {
        CircuitDetailsProvider cktDetProvider = mock(CircuitDetailsProvider.class);
        TrailProcessor trailProcessor = TrailProcessor.getInstance(cktDetProvider);

        trailProcessor.process(new ArrayList<>(), new ArrayList<>(), new ClrComponent(), new ArrayList<>(), null, 0, null, null);

        verifyNoInteractions(cktDetProvider);
    }

    @Test
    void testProcess_withDifferentCircuitNames() {
        CircuitDetailsProvider cktDetProvider = mock(CircuitDetailsProvider.class);
        TrailProcessor trailProcessor = TrailProcessor.getInstance(cktDetProvider);

        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("Circuit-A");

        ClrComponent clrComponent = new ClrComponent();
        List<CircuitComp> circuitComps = new ArrayList<>();
        circuitComps.add(new CircuitComp());
        circuitComps.get(0).setCircuitInfo(Collections.singletonList(circuitInfo));
        clrComponent.setCircuitComp(circuitComps);

        ClrComponent previousClrComponent = new ClrComponent();
        List<CircuitComp> previousCircuitComps = new ArrayList<>();
        previousCircuitComps.add(new CircuitComp());
        previousCircuitComps.get(0).setCircuitInfo(Collections.singletonList(new CircuitInfo()));
        previousClrComponent.setCircuitComp(previousCircuitComps);

        trailProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), null, 1, null, null);

        verifyNoInteractions(cktDetProvider);
    }

    @Test
    void testProcess_withSameCircuitName() {
        CircuitDetailsProvider cktDetProvider = mock(CircuitDetailsProvider.class);
        TrailProcessor trailProcessor = TrailProcessor.getInstance(cktDetProvider);

        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("Circuit-A");

        ClrComponent clrComponent = new ClrComponent();
        List<CircuitComp> circuitComps = new ArrayList<>();
        circuitComps.add(new CircuitComp());
        circuitComps.get(0).setCircuitInfo(Collections.singletonList(circuitInfo));
        clrComponent.setCircuitComp(circuitComps);

        ClrComponent previousClrComponent = new ClrComponent();
        List<CircuitComp> previousCircuitComps = new ArrayList<>();
        previousCircuitComps.add(new CircuitComp());
        previousCircuitComps.get(0).setCircuitInfo(Collections.singletonList(new CircuitInfo()));
        previousClrComponent.setCircuitComp(previousCircuitComps);

        trailProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), null, 1, null, null);

        verifyNoInteractions(cktDetProvider);
    }

    @Test
    void testProcess_withCIRCUIT_previousType() {
        CircuitDetailsProvider cktDetProvider = mock(CircuitDetailsProvider.class);
        TrailProcessor trailProcessor = TrailProcessor.getInstance(cktDetProvider);

        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("Circuit-A");

        ClrComponent clrComponent = new ClrComponent();
        List<CircuitComp> circuitComps = new ArrayList<>();
        circuitComps.add(new CircuitComp());
        circuitComps.get(0).setCircuitInfo(Collections.singletonList(circuitInfo));
        clrComponent.setCircuitComp(circuitComps);

        ClrComponent previousClrComponent = new ClrComponent();
        previousClrComponent.setType("CIRCUIT");

        trailProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), null, 1, null, null);

        verifyNoInteractions(cktDetProvider);
    }

    @Test
    void testProcess_withTRAIL_previousType() {
        CircuitDetailsProvider cktDetProvider = mock(CircuitDetailsProvider.class);
        TrailProcessor trailProcessor = TrailProcessor.getInstance(cktDetProvider);

        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("Circuit-A");

        ClrComponent clrComponent = new ClrComponent();
        List<CircuitComp> circuitComps = new ArrayList<>();
        circuitComps.add(new CircuitComp());
        circuitComps.get(0).setCircuitInfo(Collections.singletonList(circuitInfo));
        clrComponent.setCircuitComp(circuitComps);

        ClrComponent previousClrComponent = new ClrComponent();
        previousClrComponent.setType("TRAIL");

        trailProcessor.process(new ArrayList<>(), new ArrayList<>(), clrComponent, new ArrayList<>(), null, 1, null, null);

        verifyNoInteractions(cktDetProvider);
    }

    @Test
    void testProcess_withSEGMENT_previousType_andMatchingCircuitName() throws Exception {
        CircuitDetailsProvider cktDetProvider = mock(CircuitDetailsProvider.class);
        TrailProcessor trailProcessor = TrailProcessor.getInstance(cktDetProvider);

        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("Circuit-A");

        ClrComponent clrComponent = new ClrComponent();
        List<CircuitComp> circuitComps = new ArrayList<>();
        circuitComps.add(new CircuitComp());
        circuitComps.get(0).setCircuitInfo(Collections.singletonList(circuitInfo));
        clrComponent.setCircuitComp(circuitComps);

        CircuitInfo previousCircuitInfo = new CircuitInfo();
        previousCircuitInfo.setCircuitName("Circuit-A");

        ClrComponent previousClrComponent = new ClrComponent();
        List<CircuitComp> previousCircuitComps = new ArrayList<>();
        previousCircuitComps.add(new CircuitComp());
        previousCircuitComps.get(0).setCircuitInfo(Collections.singletonList(previousCircuitInfo));
        previousClrComponent.setCircuitComp(previousCircuitComps);

        when(cktDetProvider.getCircuitDetails(anyString())).thenReturn(new CircuitDetailResponse());
        trailProcessor.process(Collections.singletonList(new Node()), Collections.singletonList(new Link()), clrComponent, new ArrayList<>(), null, 1, null, null);

        verify(cktDetProvider, times(1)).getCircuitDetails(anyString());
    }

    @Test
    void testProcess_withSEGMENT_previousType_andNonMatchingCircuitName() throws Exception {
        CircuitDetailsProvider cktDetProvider = mock(CircuitDetailsProvider.class);
        TrailProcessor trailProcessor = TrailProcessor.getInstance(cktDetProvider);

        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("Circuit-A");

        ClrComponent clrComponent = new ClrComponent();
        List<CircuitComp> circuitComps = new ArrayList<>();
        circuitComps.add(new CircuitComp());
        circuitComps.get(0).setCircuitInfo(Collections.singletonList(circuitInfo));
        clrComponent.setCircuitComp(circuitComps);

        CircuitInfo previousCircuitInfo = new CircuitInfo();
        previousCircuitInfo.setCircuitName("Circuit-B");

        ClrComponent previousClrComponent = new ClrComponent();
        List<CircuitComp> previousCircuitComps = new ArrayList<>();
        previousCircuitComps.add(new CircuitComp());
        previousCircuitComps.get(0).setCircuitInfo(Collections.singletonList(previousCircuitInfo));
        previousClrComponent.setCircuitComp(previousCircuitComps);

        when(cktDetProvider.getCircuitDetails(anyString())).thenReturn(new CircuitDetailResponse());

        trailProcessor.process(Collections.singletonList(new Node()), Collections.singletonList(new Link()), clrComponent, new ArrayList<>(), null, 1, null, null);

        verifyNoInteractions(cktDetProvider);
    }

    }