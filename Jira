UnifiedAuditMessage.java:

```java
@Data
public class UnifiedAuditMessage {
    private String inputFilePath;
    private String url;
    private Integer port;
    private String outputFilePath;
    private String delimiters;
    private String fileType;
    private DateTime date_received;
    private DateTime date_processed;
    private Integer no_of_records_in_the_file;
    private Integer no_of_records_processed;
    private Integer no_of_records_failed;
    private UUID job_id;
    private UUID jar_id;
    private List<String> exceptions;
    private UUID collector_id;
    private JobStatus job_status;

    public UnifiedAuditMessage(String inputFilePath, String url, Integer port, String outputFilePath, String delimiters, String fileType, DateTime date_received, DateTime date_processed, Integer no_of_records_in_the_file, Integer no_of_records_processed, Integer no_of_records_failed, UUID job_id, UUID jar_id, List<String> exceptions, UUID collector_id, JobStatus job_status) {
        this.inputFilePath = inputFilePath;
        this.url = url;
        this.port = port;
        this.outputFilePath = outputFilePath;
        this.delimiters = delimiters;
        this.fileType = fileType;
        this.date_received = date_received;
        this.date_processed = date_processed;
        this.no_of_records_in_the_file = no_of_records_in_the_file;
        this.no_of_records_processed = no_of_records_processed;
        this.no_of_records_failed = no_of_records_failed;
        this.job_id = job_id;
        this.jar_id = jar_id;
        this.exceptions = exceptions;
        this.collector_id = collector_id;
        this.job_status = job_status;
    }

    public enum JobStatus {
        COLLECTION_NEW,
        COLLECTION_IN_PROGRESS,
        COLLECTION_SUCCESSFUL,
        COLLECTION_FAILED,
        FLINK_JOB_NEW,
        FLINK_JOB_SUBMITTED,
        FLINK_JOB_IN_PROGRESS,
        FLINK_JOB_SUCCESSFUL,
        FLINK_JOB_FAILED
    }
}
```

Utils.java:

```java
public class Utils {
    public static UnifiedAuditMessage buildAuditMessage(String inputFilePath, String url, Integer port, String outputFilePath, String delimiters, String fileType, DateTime date_received, DateTime date_processed, Integer no_of_records_in_the_file, Integer no_of_records_processed, Integer no_of_records_failed, UUID job_id, UUID jar_id, List<String> exceptions, UUID collector_id, UnifiedAuditMessage.JobStatus job_status) {
        return new UnifiedAuditMessage(inputFilePath, url, port, outputFilePath, delimiters, fileType, date_received, date_processed, no_of_records_in_the_file, no_of_records_processed, no_of_records_failed, job_id, jar_id, exceptions, collector_id, job_status);
    }
}
```

KafkaAuditProducer.java:

```java
@Service
public class KafkaAuditProducer {
    private static final Logger Logger = LoggerFactory.getLogger(KafkaAuditProducer.class);

    @Value("${spring.kafka.producer.topic-name}")
    private String topicName;

    private final KafkaTemplate<String, Object> kafkaTemplate;

    @Autowired
    public KafkaAuditProducer(KafkaTemplate<String, Object> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public boolean writeMessage(UnifiedAuditMessage auditMsg) {
        try {
            this.kafkaTemplate.send(topicName, auditMsg);
            Logger.info("Kafka status message {}", auditMsg);
        } catch (Exception e) {
            return false;
        }
        return true;
    }
}
```

Note: Make sure to import the necessary classes and packages in each file as per your requirements.



public void sendMessage(UnifiedAuditMessage auditMsg, String fileType, ResponseEntity response, boolean isSuccess) {
    auditMsg.setFileType(fileType);
    auditMsg.setDate_received(DateTime.now());
    auditMsg.setDate_processed(isSuccess ? DateTime.now() : null);
    auditMsg.setNo_of_records_in_the_file(0);
    auditMsg.setNo_of_records_processed(0);
    auditMsg.setNo_of_records_failed(0);
    auditMsg.setJob_status(isSuccess ? JobStatus.COLLECTION_SUCCESSFUL : JobStatus.COLLECTION_FAILED);
    auditMsg.setJob_id(UUID.randomUUID());
    auditMsg.setJar_id(UUID.randomUUID());
    auditMsg.setExceptions(List.of(response.getStatusCode().toString()));
    auditMsg.setCollector_id(UUID.randomUUID());

    Logger.info("{} message sent: {}", isSuccess ? "Success" : "Failure", auditMsg);
    this.writeMessage(auditMsg);
}