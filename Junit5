To access the `alarms` and `alarmReceivedTimeValues` fields of the `PostingService` class without making them public, you can use Java Reflection APIs. Here is how you can modify the test cases to use reflection:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Field;
import java.time.Instant;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.Hashtable;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.messaging.Message;

public class PostingServiceTest {

    @InjectMocks
    private PostingService postingService;

    @Mock
    private Message<byte[]> msg;

    @Mock
    private MessageId messageId;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testAddMsgToQueue_MsgNotNull() throws Exception {
        when(msg.getMessageId()).thenReturn(messageId);

        Instant alarmReceivedTime = Instant.now();
        postingService.addMsgToQueue(msg, alarmReceivedTime);

        // Accessing private fields using reflection
        Field alarmsField = PostingService.class.getDeclaredField("alarms");
        alarmsField.setAccessible(true);
        ConcurrentLinkedDeque<Message<byte[]>> alarms = (ConcurrentLinkedDeque<Message<byte[]>>) alarmsField.get(postingService);

        Field alarmReceivedTimeValuesField = PostingService.class.getDeclaredField("alarmReceivedTimeValues");
        alarmReceivedTimeValuesField.setAccessible(true);
        Hashtable<MessageId, Instant> alarmReceivedTimeValues = (Hashtable<MessageId, Instant>) alarmReceivedTimeValuesField.get(postingService);

        assertFalse(alarms.isEmpty());
        assertEquals(1, alarms.size());
        assertEquals(msg, alarms.peek());
        assertEquals(alarmReceivedTime, alarmReceivedTimeValues.get(messageId));
    }

    @Test
    void testAddMsgToQueue_MsgNull() throws Exception {
        postingService.addMsgToQueue(null, Instant.now());

        // Accessing private fields using reflection
        Field alarmsField = PostingService.class.getDeclaredField("alarms");
        alarmsField.setAccessible(true);
        ConcurrentLinkedDeque<Message<byte[]>> alarms = (ConcurrentLinkedDeque<Message<byte[]>>) alarmsField.get(postingService);

        assertTrue(alarms.isEmpty());
    }
}
```

### Explanation:

1. **Reflection Setup**:
   - `Field alarmsField = PostingService.class.getDeclaredField("alarms");` — Retrieves the `alarms` field.
   - `alarmsField.setAccessible(true);` — Makes the `alarms` field accessible.
   - `ConcurrentLinkedDeque<Message<byte[]>> alarms = (ConcurrentLinkedDeque<Message<byte[]>>) alarmsField.get(postingService);` — Retrieves the actual value of the `alarms` field.

2. **Test Cases**:
   - Both test cases use reflection to access the private `alarms` and `alarmReceivedTimeValues` fields in the `PostingService` class.
   - This allows you to assert the state of these fields without changing their visibility in the original class.

With these modifications, the test cases will still cover both branches of the `if` statement and ensure 100% code coverage, while keeping the `alarms` and `alarmReceivedTimeValues` fields private.