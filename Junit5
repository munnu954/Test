import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.InjectMocks;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class EnrichmentServiceTest {

    @Mock
    private CbrsSuppressionRepository cbrsSuppressionRepository;
    
    @Mock
    private AlarmPostingRepository alarmPostingRepository;
    
    @InjectMocks
    private EnrichmentService enrichmentService;

    @Test
    void testExecuteEnrichmentTaskEnrichedAlarmPresent() {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();
        Boolean isAlarmToBeEnriched = true;

        List<CbrsSuppressionAlarm> suppressionAlarms = new ArrayList<>();
        CbrsSuppressionAlarm alarmWithEnrichment = new CbrsSuppressionAlarm(); // create an alarm with lastEnrichmentTime set
        suppressionAlarms.add(alarmWithEnrichment);

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(enrichmentService.getCbrsAlarmsEnrichmentLimit()))
                .thenReturn(Optional.of(suppressionAlarms));

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, isAlarmToBeEnriched);

        assertFalse(result);
    }

    @Test
    void testExecuteEnrichmentTaskAlarmListToBeEnriched() {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();
        Boolean isAlarmToBeEnriched = true;

        List<CbrsSuppressionAlarm> suppressionAlarms = new ArrayList<>();
        CbrsSuppressionAlarm alarmToBeEnriched = new CbrsSuppressionAlarm(); // create an alarm that should be enriched
        suppressionAlarms.add(alarmToBeEnriched);

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(enrichmentService.getCbrsAlarmsEnrichmentLimit()))
                .thenReturn(Optional.of(suppressionAlarms));

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, isAlarmToBeEnriched);

        assertTrue(result); // check if the result is true when there are alarms to be enriched
    }
}