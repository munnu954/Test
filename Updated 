@Service
public class KafkaProducer {

    @Value("${spring.kafka.producer.topic-name}")
    private String topicName;

    private static final Logger Logger = LoggerFactory.getLogger(KafkaProducer.class);

    private final KafkaTemplate<String, Object> kafkaTemplate;

    @Autowired
    public KafkaProducer(KafkaTemplate<String, Object> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public String sendMessage(SpaceCollector message) {
        Logger.info(String.format("Message sent %s", message));
        kafkaTemplate.send(topicName, message);
        return "Message sent successfully";
    }

    public boolean writeMessage(FileMetadata message) {
        this.kafkaTemplate.send(topicName, message);
        Logger.info("Kafka status message {}", message);
        return true;
    }

    public void sendSuccessAndFailureMessage(SpaceCollector collector, String fileType, ResponseEntity response, boolean isSuccess) {
        UnifiedAuditMessage metadata = new UnifiedAuditMessage();
        metadata.setFile_name(collector.getInputFilePath());
        metadata.setDate_received(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
        metadata.setDate_processed(isSuccess ? new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) : "");
        metadata.setNo_of_records_in_the_file(0);
        metadata.setNo_of_records_processed(0);
        metadata.setNo_of_records_failed(0);
        metadata.setJob_status(isSuccess ? "JOB SUBMISSION IS SUCCESS" : "FAILURE");
        metadata.setJob_id("");
        metadata.setJar_id("");
        metadata.setExceptions(response.getStatusCode().toString());
        
        Logger.info(String.format("%s message sent %s", isSuccess ? "Success" : "Failure", metadata));
        
        this.writeMessage(metadata);
    }
}