AI ðŸ¤–:
Here is the modified Cucumber glue code steps:


import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.example.CsvtoJsonConversion;

public class CsvtoJsonMRFCnTransformerTest {

    private static final String MRFC_FILE_PATH = "src/test/resources/MRFC.csv";

    private List csvRecords;

    @BeforeEach
    public void setUp() throws IOException {
        InputStream inputStream = getClass().getResourceAsStream(MRFC_FILE_PATH);
        CSVParser csvParser = new CSVParser(inputStream, CSVFormat.DEFAULT);
        csvRecords = csvParser.getRecords();
    }

    @Test
    public void testTransform() throws Exception {
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        final DataStream stream = env.fromElements(csvRecords);
        final DataStream jsonStream = stream.flatMap(new CsvtoJsonConversion.CsvtoJsonMRFCnTransformer(MRFC_FILE_PATH));
        jsonStream.print();
        env.execute();
    }

    @Test
    public void testTransformWithAssertions() throws Exception {
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        final DataStream stream = env.fromElements(csvRecords);
        final DataStream jsonStream = stream.flatMap(new CsvtoJsonConversion.CsvtoJsonMRFCnTransformer(MRFC_FILE_PATH));
        jsonStream.print();
        env.execute();

        List expectedJson = new ArrayList<>();
        expectedJson.add("{" +
                "  \"SystemId\": \"SOLKTXE1100.101\", " +
                "  \"NodeIP\": \"2607:f160:8a03:a03a:c0:10f::\", " +
                "  \"STARTTIMESTAMP\": \"2024-01-10T17:05:00\", " +
                "  \"STOPTIMESTAMP\": \"2024-01-10T17:10:00\", " +
                "  \"GATEWAYNUM\": \"7\", " +
                "  \"SERVERID\": \"0\", " +
                "  \"RGN\": \"7\", " +
                "  \"NBROFSVRAUDIT\": \"10\", " +
                "  \"NBROFSVRAUDITFAIL\": \"0\", " +
                "  \"NBROFDNSQUERY\": \"10\", " +
                "  \"NBROFONSQUERYFAIL\": \"0\", " +
                "  \"NBROFENUMQUERY\": \"10\", " +
                "  \"NBROFENUMQUERYFAIL\": \"0\", " +
                "  \"NBROFDNSARECORDQUERY\": \"10\", " +
                "  \"NBROFDNSARECORDQUERYFAIL\": \"0\", " +
                "  \"NBROFDNSAAAARECORDQUERY\": \"10\", " +
                "  \"NBROFDNSAAAAARECORDQUERYFAIL\": \"0\", " +
                "  \"NBROFDNSSRVRECORDQUERY\": \"10\", " +
                "  \"NBROFDNSSRVRECORDQUERYFAIL\": \"0\", " +
                "  \"NBROFDNSSOARECORDQUERY\": \"10\", " +
                "  \"NBROFDNSSOARECORDQUERYFAIL\": \"0" +
                "}");

        List actualJson = jsonStream.collect(Collectors.toList());

        Assertions.assertEquals(expectedJson, actualJson);
    }
}