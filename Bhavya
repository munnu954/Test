public class ConsumerServiceTest {

  private SshExceptionHandler sshExceptionHandler = new SshExceptionHandler();

  private static final String TOPIC= "test-topic";

  @Autowired
  private EmbeddedKafkaBroker embeddedKafkaBroker;

  private SpaceCollector spaceCollector;

  @Mock
  private CollectorUtil collectorUtil;

  BlockingQueue<ConsumerRecord<String, String>> records; 
  KafkaMessageListenerContainer<String, String> container;

  @InjectMocks
  private ConsumerService consumerService;

  @Mock
  private KafkaProducerService kafkaProducerService;

  @BeforeAll
  void setup() {
    Map<String, Object> configs = new HashMap<>(KafkaTestUtils.consumerProps("consumer", "false", embeddedKafkaBroker));

    DefaultKafkaConsumerFactory<String, String> consumerFactory = new DefaultKafkaConsumerFactory<>(configs, new StringDeserializer(), new StringDeserializer());

    ContainerProperties containerProperties = new ContainerProperties(TOPIC);

    container = new KafkaMessageListenerContainer<>(consumerFactory, containerProperties);

    records = new LinkedBlockingQueue<>();

    container.setupMessageListener((MessageListener<String, String>) records::add);

    container.start(); 
    ContainerTestUtils.waitForAssignment(container, 1);
  }

  @AfterAll
  void tearDown() {
    container.stop();
  }

  @Test
  void givenOutputFilePathNotAccessible() throws Exception {
    Mockito.when(collectorUtil.getDateAsString(Mockito.any(Date.class))).thenReturn("2021-07-20T12:00:00");

    spaceCollector = new SpaceCollector();
    spaceCollector.setUrl("192.168.1.243");
    spaceCollector.setPort(8080);
    spaceCollector.setUserName("custom");
    spaceCollector.setPassword("sshcollector");
    spaceCollector.setInputFilePath("C:/Temp/sampleMeasInfoData.xml");
    spaceCollector.setOutputFilePath("");

    JsonNode auditQueueJSON = collectorUtil.buildAuditQueueJSON(spaceCollector, collectorUtil.getDateAsString(new Date()), collectorUtil.getDateAsString(new Date()), "", JobStatus.COLLECTION_FAILED);
    
    Mockito.when(kafkaProducerService.writeMessage(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(Mockito.any());
    
    boolean result = consumerService.consume(spaceCollector);

    // Assert that the result is true
    assertTrue(result);

    Mockito.verify(kafkaProducerService).writeMessage(Mockito.eq(auditQueueJSON.toString()), Mockito.eq(""), Mockito.eq("3459-DEV-COLLECTION-AUDIT-QUEUE"));
  }
}