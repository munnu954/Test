To write JUnit 5 test cases for the `isDateFuture` method covering the true condition of the `if` statement and ensuring 100% code coverage, you can follow these steps:

1. Create a test class for the `AlarmRepositoryImpl`.
2. Write a test case that sets `curAlmUpdatedTime` to a future date compared to the `currentTime`.

Here is an example of how you can achieve this:

```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;

import java.time.Instant;
import java.time.format.DateTimeFormatter;
import java.time.ZoneId;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testIsDateFutureTrueCondition() throws Exception {
        // Arrange
        Instant futureInstant = Instant.now().plusSeconds(60); // 1 minute into the future
        String futureTime = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'")
                .withZone(ZoneId.of("UTC"))
                .format(futureInstant);

        // Act
        boolean result = alarmRepository.isDateFuture(futureTime);

        // Assert
        assertTrue(result, "Expected the date to be future, but it was not.");
    }

    @Test
    public void testIsDateFutureFalseCondition() throws Exception {
        // Arrange
        Instant pastInstant = Instant.now().minusSeconds(60); // 1 minute into the past
        String pastTime = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'")
                .withZone(ZoneId.of("UTC"))
                .format(pastInstant);

        // Act
        boolean result = alarmRepository.isDateFuture(pastTime);

        // Assert
        assertFalse(result, "Expected the date to be past, but it was not.");
    }
}
```

### Explanation:

1. **Test Class Setup**: We use the `@InjectMocks` annotation to create an instance of `AlarmRepositoryImpl`. The `@BeforeEach` method ensures that Mockito initializes the mocks before each test.

2. **Test for True Condition**: 
   - We create an `Instant` representing a future time (1 minute into the future).
   - We format this `Instant` into the required string format.
   - We call the `isDateFuture` method with this future time.
   - We assert that the result should be `true`.

3. **Test for False Condition**:
   - We create an `Instant` representing a past time (1 minute into the past).
   - We format this `Instant` into the required string format.
   - We call the `isDateFuture` method with this past time.
   - We assert that the result should be `false`.

These tests ensure that both the true and false conditions of the `if` statement are covered, providing 100% code coverage for the `isDateFuture` method.