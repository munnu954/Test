```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;

import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class SHAEventMessageListenerTest {

    @InjectMocks
    private SHAEventMessageListener shaEventMessageListener;

    @Mock
    private Message<GenericRecord> message;

    @Mock
    private SensitiveProfileManager profileManager;

    @Spy
    private BatchLoaderUtils utils;

    @Mock
    private KafkaFalloutService failedMessageService;

    @BeforeEach
    void setUp() {
        shaEventMessageListener = new SHAEventMessageListener();
    }


    @Test
    void testOnMessage_withEmptyPayload() throws Exception {
        // Given
        when(message.getData()).thenReturn("".getBytes(StandardCharsets.UTF_8));

        // When
        shaEventMessageListener.onMessage(message);

        // Then
        verifyNoInteractions(profileManager);
        verifyNoInteractions(utils);
        verifyNoInteractions(failedMessageService);
    }

    @Test
    void testOnMessage_withInvalidPayload() throws Exception {
        // Given
        when(message.getData()).thenReturn("invalid json".getBytes(StandardCharsets.UTF_8));

        // When
        shaEventMessageListener.onMessage(message);

        // Then
        verifyNoInteractions(profileManager);
        verifyNoInteractions(utils);
        verifyNoInteractions(failedMessageService);
    }

    @Test
    void testOnMessage_withSensitiveAccount() throws Exception {
        // Given
        String ecpdId = "ecpd-id";
        String payload = "{\"ecpd_profile_id\":\"" + ecpdId + "\"}";
        when(message.getData()).thenReturn(payload.getBytes(StandardCharsets.UTF_8));
        when(profileManager.getSensitiveAccount(ecpdId)).thenReturn(new SensitiveResponse());

        // When
        shaEventMessageListener.onMessage(message);

        // Then
        verify(profileManager).getSensitiveAccount(ecpdId);
        verifyNoInteractions(failedMessageService);
    }

    @Test
    void testOnMessage_withNonSensitiveAccount() throws Exception {
        // Given
        String ecpdId = "ecpd-id";
        String payload = "{\"ecpd_profile_id\":\"" + ecpdId + "\"}";
        String topic = "topic";
        when(message.getData()).thenReturn(payload.getBytes(StandardCharsets.UTF_8));
        when(profileManager.getSensitiveAccount(ecpdId)).thenReturn(new SensitiveResponse());
        when(utils.returnHeaders(TYSConstants.SHA_VBSM_MSG.getValue())).thenReturn(Collections.emptyList());
        when(utils.convert(payload, SHAVbsmEvent.class)).thenReturn(new SHAVbsmEvent());
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        when(utils.sendAsync(any(ProducerRecord.class), anyString(), anyString(), anyString(), anyString(), anyChar(), anyString())).thenReturn(future);

        // When
        shaEventMessageListener.onMessage(message);

        // Then
        verify(profileManager).getSensitiveAccount(ecpdId);
        verify(utils).sendAsync(any(ProducerRecord.class), anyString(), anyString(), anyString(), anyString(), anyChar(), anyString());
        verifyNoInteractions(failedMessageService);
    }

    @Test
    void testOnMessage_withExceptionInSendingMessage() throws Exception {
        // Given
        String ecpdId = "ecpd-id";
        String payload = "{\"ecpd_profile_id\":\"" + ecpdId + "\"}";
        String topic = "topic";
        when(message.getData()).thenReturn(payload.getBytes(StandardCharsets.UTF_8));
        when(profileManager.getSensitiveAccount(ecpdId)).thenReturn(new SensitiveResponse());
        when(utils.returnHeaders(TYSConstants.SHA_VBSM_MSG.getValue())).thenReturn(Collections.emptyList());
        when(utils.convert(payload, SHAVbsmEvent.class)).thenReturn(new SHAVbsmEvent());
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.completeExceptionally(new Exception("test exception"));
        when(utils.sendAsync(any(ProducerRecord.class), anyString(), anyString(), anyString(), anyString(), anyChar(), anyString())).thenReturn(future);

        // When
        shaEventMessageListener.onMessage(message);

        // Then
        verify(profileManager).getSensitiveAccount(ecpdId);
        verify(utils).sendAsync(any(ProducerRecord.class), anyString(), anyString(), anyString(), anyString(), anyChar(), anyString());
        verify(failedMessageService).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar(), anyString(), anyString());
    }

    @Test
    void testOnMessage_withKafkaSystemException() throws Exception {
        // Given
        String payload = "{}";
        when(message.getData()).thenReturn(payload.getBytes(StandardCharsets.UTF_8));
        doThrow(new SystemException("")).when(shaEventMessageListener).onMessage(message);

        // When
        Assertions.assertThrows(SystemException.class, () -> shaEventMessageListener.onMessage(message));

        // Then
        verify(shaEventMessageListener, times(1)).onMessage(message);
    }
}

```