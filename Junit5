To achieve 100% code coverage for the "for" loop in the `applyPostingRule` method of the `PostingRuleProcessingService` class, you can write JUnit5 test cases that cover all possible branches within the loop. Since the fields in the `PostingRuleProcessingService` class are not public, you can use reflection to set their values for testing purposes. Below is an example of how you can write JUnit5 test cases to achieve 100% code coverage:

```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Test
    public void testApplyPostingRuleForLoop() throws Exception {
        PostingRuleProcessingService service = new PostingRuleProcessingService();

        // Use reflection to set private fields
        Field ruleLoadingServiceField = PostingRuleProcessingService.class.getDeclaredField("ruleLoadingService");
        ruleLoadingServiceField.setAccessible(true);
        ruleLoadingServiceField.set(service, ruleLoadingService);

        Field topoApiClientField = PostingRuleProcessingService.class.getDeclaredField("topoApiClient");
        topoApiClientField.setAccessible(true);
        topoApiClientField.set(service, topoApiClient);

        // Mock the necessary dependencies
        PostingRule rule = new PostingRule(1L, "Rule Name", 1, 1, "Matching Criteria");
        Map<String, Object> alarmMap = new HashMap<>();
        Alarm alarm = new Alarm();

        when(ruleLoadingService.getRuleMap()).thenReturn(new HashMap<Long, PostingRule>() {{
            put(1L, rule);
        }});

        when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, "componentId"))
                .thenReturn(new ResponseEntity<>("Topology Data", HttpStatus.OK));

        // Call the applyPostingRule method
        Alarm result = service.applyPostingRule(alarm, rule, alarmMap);

        // Assert the result, add more assertions as needed
        assertEquals("Topology Data", result.getTopologyDetails());
    }
}
```

In the test method above, we are using Mockito to mock the dependencies and reflection to set the private fields in `PostingRuleProcessingService`. This will allow you to test the `applyPostingRule` method with different scenarios and achieve 100% code coverage for the "for" loop. You can add more test cases to cover additional branches within the loop.