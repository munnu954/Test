import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.apache.logging.log4j.Level;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class MessageReaderServiceTest {

    @Mock
    private VMBParams params;

    @Mock
    private ApolloServiceHealth healthChecker;

    @Mock
    private RuleLoadingService rulesLoadingService;

    @Mock
    private Reader<byte[]> reader;

    private MessageReaderService messageReaderService;

    @BeforeEach
    public void setup() {
        messageReaderService = new MessageReaderService();
        messageReaderService.params = params;
        messageReaderService.healthChecker = healthChecker;
        messageReaderService.rulesLoadingService = rulesLoadingService;
        messageReaderService.reader = reader;
    }

    @Test
    public void testProcessMessageFromRuleNotifierVMB() {
        // Test when reader is null
        when(reader.isConnected()).thenReturn(false);
        messageReaderService.processMessageFromRuleNotifierVMB();
        verify(messageReaderService, times(1)).retryReaderConnection();

        // Test when message is valid
        when(reader.isConnected()).thenReturn(true);
        when(VMBUtil.readMessageThrowsPulsarClientException(reader, 1, TimeUnit.SECONDS)).thenReturn(new Message<>(null));
        messageReaderService.processMessageFromRuleNotifierVMB();
        verify(messageReaderService, times(1)).retryReaderConnection();
    }

    @Test
    public void testRetryReaderConnection() {
        when(params.getVMBConnectionFailureThresholdCount()).thenReturn(3);

        // Test when failure count is less than threshold count
        messageReaderService.failureRuleUpdateVMBConnectionCount = 2;
        messageReaderService.retryReaderConnection();
        verify(messageReaderService, times(1)).closeReader();
        verify(reader, times(1)).close();

        // Test when failure count equals threshold count
        messageReaderService.failureRuleUpdateVMBConnectionCount = 3;
        assertThrows(SystemExitException.class, () -> messageReaderService.retryReaderConnection());
    }

    @Test
    public void testRun() {
        // TODO: Implement test for run method
    }

    // You can add more test methods for other scenarios as needed
}
