SpaceCollector
@Data
@Min(value = 1, message = "Id should be greater than 1")
private Integer ID;
private String URL;
@Max(value = 9999, message = "Only 4 digit port number allowed")
private Integer PORT;
private String INPUT FILE_PATH;
private String OUTPUT FILE_PATH;
private String DELIMITERS;
private String FILETYPE;


package com.example.spacecollector;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class SpaceCollectorTest {

@Test
@DisplayName("Test case to check if the SpaceCollector object is created successfully with valid input values.")
void testSpaceCollectorCreation() {
SpaceCollector spaceCollector = new SpaceCollector(2, "localhost", 9092);
assertNotNull(spaceCollector);
assertEquals(2, spaceCollector.getId());
assertEquals("localhost", spaceCollector.getHost());
assertEquals(9092, spaceCollector.getPort());
}

@Test
@DisplayName("Test case to check if the ID field of the SpaceCollector object is greater than 1.")
void testSpaceCollectorIdGreaterThanOne() {
SpaceCollector spaceCollector = new SpaceCollector(2, "localhost", 9092);
assertTrue(spaceCollector.getId() > 1);
}

@Test
@DisplayName("Test case to check if the PORT field of the SpaceCollector object is a 4-digit number.")
void testSpaceCollectorPortIsFourDigitNumber() {
SpaceCollector spaceCollector = new SpaceCollector(2, "localhost", 9092);
assertTrue(spaceCollector.getPort() >= 1000 && spaceCollector.getPort() }

@Test
@DisplayName("Test case to check if the SpaceCollector object is not created with invalid input values.")
void testSpaceCollectorCreationWithInvalidInput() {
assertThrows(IllegalArgumentException.class, () -> new SpaceCollector(0, "localhost", 9092));
}

@Test
@DisplayName("Test case to check if the ID field of the SpaceCollector object is less than or equal to 1.")
void testSpaceCollectorIdLessThanOrEqualToOne() {
assertThrows(IllegalArgumentException.class, () -> new SpaceCollector(1, "localhost", 9092));
}

@Test
@DisplayName("Test case to check if the PORT field of the SpaceCollector object is not a 4-digit number.")
void testSpaceCollectorPortIsNotFourDigitNumber() {
assertThrows(IllegalArgumentException.class, () -> new SpaceCollector(2, "localhost", 10000));
}

}

package com.example.spacecollector;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class KafkaProducerTest {

@Test
@DisplayName("Test case to check if the KafkaProducer object is created successfully and the topic name is set.")
void testKafkaProducerCreation() {
KafkaProducer kafkaProducer = new KafkaProducer("my-topic");
assertNotNull(kafkaProducer);
assertEquals("my-topic", kafkaProducer.getTopic());
}

@Test
@DisplayName("Test case to check if the sendMessage method sends the message successfully to Kafka.")
void testSendMessage() {
KafkaProducer kafkaProducer = new KafkaProducer("my-topic");
assertTrue(kafkaProducer.sendMessage("Hello World!"));
}

}


@Test
void testDefaultDelimiters() {
  SpaceCollector spaceCollector = new SpaceCollector();
  spaceCollector.setInputFilePath("test.csv");
  spaceCollector.setFileType("csv");
  spaceCollector.setId(1);
  spaceCollector.setUrl("localhost");
  spaceCollector.setPort(8080);
  spaceCollector.setOutputFilePath("output.csv");
  assertEquals(",", spaceCollector.getDelimiters());
}

@Test
void testInputFilePathNotNull() {
  SpaceCollector spaceCollector = new SpaceCollector();
  spaceCollector.setFileType("csv");
  spaceCollector.setId(1);
  spaceCollector.setUrl("localhost");
  spaceCollector.setPort(8080);
  spaceCollector.setOutputFilePath("output.csv");
  assertThrows(NullPointerException.class, () -> {
    spaceCollector.validate();
  });
}

@Test
void testAllRequiredValuesNotNull() {
  SpaceCollector spaceCollector = new SpaceCollector();
  assertThrows(NullPointerException.class, () -> {
    spaceCollector.validate();
  });
}

@Test
void testInputFilePathExists() {
  SpaceCollector spaceCollector = new SpaceCollector();
  spaceCollector.setInputFilePath("nonexistent.csv");
  assertThrows(FileNotFoundException.class, () -> {
    spaceCollector.validate();
  });
}

@Test
void testFilePathRecognised() {
  SpaceCollector spaceCollector = new SpaceCollector();
  spaceCollector.setInputFilePath("/invalid/path/test.csv");
  assertThrows(InvalidPathException.class, () -> {
    spaceCollector.validate();
  });
}


package com.example.spacecollector;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class SpaceCollectorTest {

@Test
@DisplayName("Test case to ensure that the default value is used when DELIMITERS is not provided.")
void testDefaultDelimiter() {
SpaceCollector spaceCollector = new SpaceCollector();
assertEquals(", ", spaceCollector.getDELIMITERS());
}

@Test
@DisplayName("Test case to ensure that the exception is thrown when INPUT_FILE_PATH is not provided.")
void testInputFilePathNotProvided() {
SpaceCollector spaceCollector = new SpaceCollector();
assertThrows(IllegalArgumentException.class, () -> spaceCollector.processInputFile());
}

@Test
@DisplayName("Test case to ensure that the exception is thrown when all the 3 INPUT_FILE_PATH, DELIMITERS and FILEPATH are not provided.")
void testAllInputFieldsNotProvided() {
SpaceCollector spaceCollector = new SpaceCollector();
assertThrows(IllegalArgumentException.class, () -> spaceCollector.processInputFile(null, null, null));
}

@Test
@DisplayName("Test case to ensure that the exception is thrown when the given INPUT_FILE_PATH does not exist.")
void testInvalidInputFilePath() {
SpaceCollector spaceCollector = new SpaceCollector();
assertThrows(IllegalArgumentException.class, () -> spaceCollector.processInputFile("invalid/path/to/file", ", ", "csv"));
}

@Test
@DisplayName("Test case to ensure that the exception is thrown when the given FILEPATH is not recognised.")
void testInvalidFilePath() {
SpaceCollector spaceCollector = new SpaceCollector();
assertThrows(IllegalArgumentException.class, () -> spaceCollector.processInputFile("path/to/file", ", ", "invalid-format"));
}
}