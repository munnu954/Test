import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.jdbc.BadSqlGrammarException;
import org.springframework.jdbc.core.JdbcTemplate;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Test
    public void testPerformUpdateforACK_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforACK("appliedaction", "alarmupdatedtime", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformUpdateforOpNote_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforOpNote("opNoteText", "alarmupdatedtime", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformClearbyfeed_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performClearbyfeed(1, "cleartime", "alarmupdatedtime", "appliedaction", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformUpdateforHandleEvent_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforHandleEvent("handledByidIMPACT", "alarmupdatedtime", "alarmidentity", 1);
        });
    }

    @Test
    public void testPerformUpdateforHandleTicket_WhenBadSqlGrammarExceptionThrown() {
        when(jdbcTemplate.update(any(String.class), any(Object[].class))).thenThrow(BadSqlGrammarException.class);

        assertThrows(BadSqlGrammarException.class, () -> {
            alarmRepository.performUpdateforHandleTicket("ticket", "ticketStatus", "alarmupdatedtime", "alarmidentity", 1);
        });
    }
}