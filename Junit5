To achieve 100% code coverage of the `MtnInsightsValidator` class, you will need to write JUnit 5 test cases that cover every conditional path and all possible scenarios. Here's how you can structure your test cases using JUnit 5:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

public class MtnInsightsValidatorTest {

    private MtnInsightsValidator validator;
    private MtnInsightsRequest insightsRequest;
    private MtnInsightsSearchRequest searchRequest;
    private ServiceHeader serviceHeader;

    @BeforeEach
    public void setUp() {
        validator = new MtnInsightsValidator();
        insightsRequest = new MtnInsightsRequest();
        searchRequest = new MtnInsightsSearchRequest();
        serviceHeader = new ServiceHeader();
        
        // Setting mock service header
        serviceHeader.setClientId("clientId");
        serviceHeader.setClientTransactionId("transactionId");
        serviceHeader.setServiceName("serviceName");

        insightsRequest.setServiceHeader(serviceHeader);
        searchRequest.setServiceHeader(serviceHeader);
    }

    @Test
    public void testValidateInsertMtnInsightsRequestWithValidKeyAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("1234567890");

        insightsRequest.setKeyAttributes(attributes);
        insightsRequest.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);

        validator.validate(insightsRequest);
    }

    @Test
    public void testValidateInsertMtnInsightsRequestWithValidListKeyAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("1234567890");

        insightsRequest.setListKeyAttributes(new MtnInsightsAttributes[]{attributes});
        insightsRequest.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);

        validator.validate(insightsRequest);
    }

    @Test
    public void testValidateInsertMtnInsightsRequestWithInvalidRequestType() {
        insightsRequest.setRequestType(InsightsRequestType.OTHER);

        Executable executable = () -> validator.validate(insightsRequest);

        assertThrows(InvalidRequestException.class, executable, "Invalid request type ");
    }

    @Test
    public void testValidateInsertMtnInsightsRequestWithNullKeyAttributes() {
        insightsRequest.setKeyAttributes(null);
        insightsRequest.setListKeyAttributes(null);
        insightsRequest.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);

        Executable executable = () -> validator.validate(insightsRequest);

        assertThrows(InvalidRequestException.class, executable, "Either KeyAttributes (Single) or ListKeyAttributes (Multiple) are required.");
    }

    @Test
    public void testValidateSearchRequestWithValidFields() {
        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setMtn("1234567890");
        searchParam.setEcpdId("ecpdId");
        searchParam.setInsightCategory(new String[]{"category"});
        searchParam.setInsightName(new String[]{"name"});

        searchRequest.setServiceRequest(searchParam);

        validator.validate(searchRequest);
    }

    @Test
    public void testValidateSearchRequestWithMissingFields() {
        MtnInsightsSearchParam searchParam = new MtnInsightsSearchParam();
        searchParam.setMtn(null);
        searchParam.setEcpdId(null);
        searchParam.setInsightCategory(new String[]{null});
        searchParam.setInsightName(new String[]{null});

        searchRequest.setServiceRequest(searchParam);

        Executable executable = () -> validator.validate(searchRequest);

        assertThrows(InvalidRequestException.class, executable, EventLedgerConstants.MTN_SEARCH_MAND_FIELDS_CHECK);
    }

    @Test
    public void testValidateSearchRequestWithEmptyServiceRequest() {
        searchRequest.setServiceRequest(new MtnInsightsSearchParam());

        Executable executable = () -> validator.validate(searchRequest);

        assertThrows(InvalidRequestException.class, executable, "ServiceRequest with Insight Category and Insight Name, MTN, ECPD id are required.");
    }
}
```

### Key Points:

1. **Setup**: The `@BeforeEach` method initializes objects before each test to ensure a fresh start.

2. **Test Cases**:
   - **Valid Cases**: Where the request fulfills all requirements.
   - **Invalid Cases**: Where the request violates any of the validation rules, ensuring every `InvalidRequestException` is triggered.

3. **Use of `assertThrows`**: Captures exceptions and validates error messages to ensure correct exception handling.

This structure should achieve full coverage of the `MtnInsightsValidator` class, including all validation paths and potential exceptions thrown. Adjust test data and conditions as needed to fit specific logic in your application.