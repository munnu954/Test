import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class KafkaTest {

    @Mock
    private KafkaConsumer<String, String> consumer;

    @Test
    public void testKafkaConsumer() {
        // Mock consumer record
        ConsumerRecord<String, String> record = mock(ConsumerRecord.class);
        when(record.topic()).thenReturn("topic");
        when(record.offset()).thenReturn(0L);
        when(record.partition()).thenReturn(0);
        when(record.key()).thenReturn("key");
        when(record.value()).thenReturn("value");

        // Build the mock consumer records with the mock record
        List<ConsumerRecord<String, String>> recordList = new ArrayList<>();
        recordList.add(record);
        Map<String, List<ConsumerRecord<String, String>>> recordsMap = new HashMap<>();
        recordsMap.put("topic", recordList);
        ConsumerRecords<String, String> records = new ConsumerRecords<>(recordsMap);

        // Set up the behavior of the consumer
        when(consumer.poll(any(Duration.class))).thenReturn(records);

        // Call the consumer method
        consumer.poll(Duration.ofMillis(100));

        // Verify that the poll method was called once
        verify(consumer, times(1)).poll(Duration.ofMillis(100));
    }
}