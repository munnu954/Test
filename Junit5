To achieve 100% code coverage for the specified `if` statements in the `convertToMtnInsights` method, we'll need to write JUnit 5 test cases that simulate the scenarios where the conditions evaluate to true. 

Below is an example of how you might structure the JUnit test cases using Mockito to mock the dependencies:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class MtnInsightsManagerTest {

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    private static final String OUTAGE_ID = "12345";
    private static final String INSIGHT_CATEGORY_NETWORK_OUTAGE = "VBGNxOutage";
    private static final String MTNOUTAGECASE = "mtnOutageCase";
    private static final String MTNOUTAGE = "mtnoutage";

    @BeforeEach
    public void setUp() {
        // Any initialization if required
    }

    @Test
    public void testConvertToMtnInsights_withInsightsCaseEntitiesNotEmpty() {
        // Arrange
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(MTNOUTAGECASE);
        pk.setEcpdId("ecpdId");
        pk.setMtn("mtn");
        entity.setPk(pk);
        entity.setProdId(OUTAGE_ID);
        entity.setInsightValues("Some values");

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);
        when(insightsRepository.findByPkEcpdIdAndPkMtnAndProdIdAndPkInsightCategoryInAndPkInsightNameIn(anyString(), anyString(), anyString(), any(), any()))
                .thenReturn(entity); // Mocking the repository call

        // Act
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length); // Check if insights are returned
    }

    @Test
    public void testConvertToMtnInsights_withAggregateValueContainsOutageId() {
        // Arrange
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightName(MTNOUTAGE);
        pk.setEcpdId("ecpdId");
        pk.setMtn("mtn");
        entity.setPk(pk);
        entity.setProdId(OUTAGE_ID);
        entity.setInsightValues("Some values");

        List<MtnInsightsEntity> entities = Collections.singletonList(entity);

        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        AggregateInsightsPK aggrPk = new AggregateInsightsPK();
        aggrPk.setAggrCategory(INSIGHT_CATEGORY_NETWORK_OUTAGE);
        aggrPk.setAggrProdId(OUTAGE_ID);
        aggregateEntity.setPk(aggrPk);
        aggregateEntity.setAggrValue("\"outage_id\":\"12345\","); // This should match the expected value

        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(anyString(), anyString()))
                .thenReturn(aggregateEntity); // Mocking the repository call

        // Act
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length); // Check if insights are returned
    }
}
```

### Explanation:
1. **Mockito Setup**: The test class uses Mockito to mock the dependencies (`MtnInsightsRepository` and `AggregateInsightsRepository`). This allows us to control the behavior of these dependencies in the tests.

2. **Test Case for `insightsCaseEntities`**:
   - The first test case checks the scenario where `insightsCaseEntities` is not empty. We mock the call to `insightsRepository` to return a valid `MtnInsightsEntity` when called with certain parameters. The test then asserts that the method `convertToMtnInsights` returns a non-null `InsightsMtn` object.

3. **Test Case for `aggregateInsightsEntity.getAggrValue().contains(...)`**:
   - The second test checks the condition where `aggregateInsightsEntity.getAggrValue()` contains the expected outage ID. We mock the aggregate entity to ensure it contains the correct value. The test then asserts that insights are returned.

These test cases will help ensure 100% code coverage for the specified conditions in the `convertToMtnInsights` method. Adjust the mock data as necessary to fit your specific implementation.