To create JUnit 5 test cases for the `getAEnd` and `getZEnd` methods of the `CircuitDetailsProvider` class, we need to cover all possible branches. This involves setting up different scenarios using mock data to ensure each conditional path is executed at least once.

Below is an example of how you might write these test cases using JUnit 5 and Mockito. These tests assume that you have mock objects ready for the necessary dependencies (like `RestClientUtil` and any other services).

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class CircuitDetailsProviderTest {

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @Mock
    private RestClientUtil restClientUtil;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }
    
    private CircuitDetailResponse createMockResponse(String clliCode, boolean hasAEnd, boolean hasZEnd) {
        CircuitDetailResponse response = new CircuitDetailResponse();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        Circuit circuit = new Circuit();

        if (hasAEnd) {
            AEnd aEnd = new AEnd();
            PortChannel portChannel = new PortChannel();
            PortRef portRef = new PortRef();
            portRef.setClliCode(clliCode);
            portChannel.setPortRef(Collections.singletonList(portRef));
            aEnd.setPortChannel(Collections.singletonList(portChannel));
            circuit.setAEnd(Collections.singletonList(aEnd));
        }

        if (hasZEnd) {
            ZEnd zEnd = new ZEnd();
            PortChannel portChannel = new PortChannel();
            PortRef portRef = new PortRef();
            portRef.setClliCode(clliCode);
            portChannel.setPortRef(Collections.singletonList(portRef));
            zEnd.setPortChannel(Collections.singletonList(portChannel));
            circuit.setZEnd(Collections.singletonList(zEnd));
        }

        circuitLst.setCircuit(Collections.singletonList(circuit));
        circuitData.setCircuitLst(Collections.singletonList(circuitLst));
        response.setCircuitData(circuitData);

        return response;
    }

    @Test
    public void testGetAEnd_withValidAEnd() {
        String circuitId = "123";
        String clli = "CLLI123";
        CircuitDetailResponse response = createMockResponse(clli, true, false);

        AEnd aEnd = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNotNull(aEnd);
        assertEquals(clli, aEnd.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    public void testGetAEnd_withNoAEnd() {
        String circuitId = "123";
        String clli = "CLLI123";
        CircuitDetailResponse response = createMockResponse(clli, false, false);

        AEnd aEnd = circuitDetailsProvider.getAEnd(circuitId, clli, response);

        assertNull(aEnd);
    }

    @Test
    public void testGetAEnd_withNullResponse() {
        String circuitId = "123";
        String clli = "CLLI123";

        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(null);

        AEnd aEnd = circuitDetailsProvider.getAEnd(circuitId, clli, null);

        assertNull(aEnd);
    }

    @Test
    public void testGetZEnd_withValidZEnd() {
        String circuitId = "123";
        String clli = "CLLI123";
        CircuitDetailResponse response = createMockResponse(clli, false, true);

        ZEnd zEnd = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNotNull(zEnd);
        assertEquals(clli, zEnd.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    public void testGetZEnd_withNoZEnd() {
        String circuitId = "123";
        String clli = "CLLI123";
        CircuitDetailResponse response = createMockResponse(clli, false, false);

        ZEnd zEnd = circuitDetailsProvider.getZEnd(circuitId, clli, response);

        assertNull(zEnd);
    }

    @Test
    public void testGetZEnd_withNullResponse() {
        String circuitId = "123";
        String clli = "CLLI123";

        when(restClientUtil.callEndpoint(anyString(), any(), any())).thenReturn(null);

        ZEnd zEnd = circuitDetailsProvider.getZEnd(circuitId, clli, null);

        assertNull(zEnd);
    }
}
```

### Explanation:

- **Mocking Dependencies**: We use Mockito to mock dependencies like `RestClientUtil`.
- **Setup Method**: Initializes mocks before each test.
- **Test Methods**: Each method targets a specific path in the `getAEnd` and `getZEnd` methods.
  - **Positive Test Cases**: These tests validate the expected behavior when valid data is provided.
  - **Negative Test Cases**: These tests validate the behavior when the response is null or does not contain the expected data.
- **Helper Method**: `createMockResponse` is used to set up the mock objects needed for the tests.

This setup ensures that all logical branches in your methods are covered, providing comprehensive test coverage.