import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.slf4j.Logger;

import java.time.LocalDateTime;
import java.time.ZoneId; // Ensure this import is included
import java.util.Date;

@ExtendWith(MockitoExtension.class)
public class KafkaFalloutSchedulerTest {

    @InjectMocks
    private KafkaFalloutScheduler kafkaFalloutScheduler;

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private KafkaFalloutService sqlservice;

    @Mock
    private Job job;

    @Mock
    private Logger logger;

    @BeforeEach
    public void setUp() {
        // Set up any necessary configurations or mocks
    }

    @Test
    public void testScheduleBatchJob_WithRecords() throws Exception {
        // Arrange
        when(sqlservice.hasRecords()).thenReturn(true);
        JobExecution jobExecution = mock(JobExecution.class);
        
        // Use LocalDateTime for start and end times
        LocalDateTime startTime = LocalDateTime.now();
        LocalDateTime endTime = startTime.plusMinutes(1);

        // Mocking the JobExecution behavior
        when(jobExecution.getStartTime()).thenReturn(Date.from(startTime.atZone(ZoneId.systemDefault()).toInstant()));
        when(jobExecution.getEndTime()).thenReturn(Date.from(endTime.atZone(ZoneId.systemDefault()).toInstant()));
        when(jobLauncher.run(any(Job.class), any(JobParameters.class))).thenReturn(jobExecution);

        // Act
        kafkaFalloutScheduler.scheduleBatchJob();

        // Assert
        verify(logger).info("KafkaFalloutScheduler::Batch job starting");
        verify(jobLauncher).run(any(Job.class), any(JobParameters.class));
        verify(logger).info(contains("Batch job ending with Id:"));
    }

    @Test
    public void testScheduleBatchJob_NoRecords() throws Exception {
        // Arrange
        when(sqlservice.hasRecords()).thenReturn(false);

        // Act
        kafkaFalloutScheduler.scheduleBatchJob();

        // Assert
        verify(logger).info("Unable to start batch job");
    }

    @Test
    public void testScheduleBatchJob_JobExecutionStartTimeNull() throws Exception {
        // Arrange
        when(sqlservice.hasRecords()).thenReturn(true);
        JobExecution jobExecution = mock(JobExecution.class);
        when(jobExecution.getStartTime()).thenReturn(null);
        when(jobExecution.getEndTime()).thenReturn(Date.from(LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant()));
        when(jobLauncher.run(any(Job.class), any(JobParameters.class))).thenReturn(jobExecution);

        // Act & Assert
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            kafkaFalloutScheduler.scheduleBatchJob();
        });
        assertEquals("Job Execution Start or End time is null", exception.getMessage());
    }

    @Test
    public void testScheduleBatchJob_JobExecutionEndTimeNull() throws Exception {
        // Arrange
        when(sqlservice.hasRecords()).thenReturn(true);
        JobExecution jobExecution = mock(JobExecution.class);
        when(jobExecution.getStartTime()).thenReturn(Date.from(LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant()));
        when(jobExecution.getEndTime()).thenReturn(null);
        when(jobLauncher.run(any(Job.class), any(JobParameters.class))).thenReturn(jobExecution);

        // Act & Assert
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            kafkaFalloutScheduler.scheduleBatchJob();
        });
        assertEquals("Job Execution Start or End time is null", exception.getMessage());
    }
}
