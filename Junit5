Certainly! Here's the code for the JUnit 5 test cases covering the specified `else if` block in the `createAlarm` method of the `AlarmRepositoryImpl` class:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@SpringBootTest
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private Logger LOG;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @BeforeEach
    void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testCreateAlarm_withPerceivedSeverityNull() throws Exception {
        String jsonMessage = "{ \"externalAlarmId\": \"ext123\", \"sequenceID\": \"12345\", \"perceivedSeverity\": null }";

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(mock(Map.class));
        when(postgresConf.getAlarmStateMap()).thenReturn(mock(Map.class));
        when(postgresConf.getAlarmTypeMap()).thenReturn(mock(Map.class));

        Alarm alarm = alarmRepository.createAlarm(jsonMessage);

        assertThat(alarm.getPerceivedSeverity()).isEqualTo(-1); // Should set perceivedSeverity to -1
        verify(LOG).debug(anyString());
        verify(LOG).info(contains("ext123"));
    }

    @Test
    void testCreateAlarm_withPerceivedSeverityEmpty() throws Exception {
        String jsonMessage = "{ \"externalAlarmId\": \"ext123\", \"sequenceID\": \"12345\", \"perceivedSeverity\": \"\" }";

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(mock(Map.class));
        when(postgresConf.getAlarmStateMap()).thenReturn(mock(Map.class));
        when(postgresConf.getAlarmTypeMap()).thenReturn(mock(Map.class));

        Alarm alarm = alarmRepository.createAlarm(jsonMessage);

        assertThat(alarm.getPerceivedSeverity()).isEqualTo(-1); // Should set perceivedSeverity to -1
        verify(LOG).debug(anyString());
        verify(LOG).info(contains("ext123"));
    }

    @Test
    void testCreateAlarm_withPerceivedSeverityIndeterminate() throws Exception {
        String jsonMessage = "{ \"externalAlarmId\": \"ext123\", \"sequenceID\": \"12345\", \"perceivedSeverity\": \"unknown\" }";

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(mock(Map.class));
        when(postgresConf.getAlarmStateMap()).thenReturn(mock(Map.class));
        when(postgresConf.getAlarmTypeMap()).thenReturn(mock(Map.class));

        Alarm alarm = alarmRepository.createAlarm(jsonMessage);

        assertThat(alarm.getPerceivedSeverity()).isEqualTo(postgresConf.getPerceivedSeverityMap().get(postgresConf.getPerceivedSeverityIndeterminate()));
        verify(LOG).debug(anyString());
        verify(LOG).info(contains("ext123"));
    }
}
```

Explanation:

1. **Setup:**
   - We use `@InjectMocks` to inject the `AlarmRepositoryImpl` instance.
   - We mock the `Logger` and `PostGreDataBaseConfig` dependencies.
   - `MockitoAnnotations.initMocks(this)` initializes the mocks.

2. **Test case with `perceivedSeverity` null:**
   - We provide a JSON message with `perceivedSeverity` set to null.
   - The method should set the `perceivedSeverity` to -1.
   - We assert that the `perceivedSeverity` was correctly set to -1.
   - We verify that the `LOG.debug` and `LOG.info` methods were called with the expected arguments.

3. **Test case with empty `perceivedSeverity`:**
   - We provide a JSON message with `perceivedSeverity` set to an empty string.
   - The method should set the `perceivedSeverity` to -1.
   - We assert that the `perceivedSeverity` was correctly set to -1.
   - We verify that the `LOG.debug` and `LOG.info` methods were called with the expected arguments.

4. **Test case with unknown `perceivedSeverity`:**
   - We provide a JSON message with `perceivedSeverity` set to "unknown".
   - The method should set the `perceivedSeverity` to the corresponding value from the `perceivedSeverityMap`.
   - We assert that the `perceivedSeverity` was correctly set to the expected value.
   - We verify that the `LOG.debug` and `LOG.info` methods were called with the expected arguments.

These test cases ensure that all branches within the specified `else if` block are tested, achieving 