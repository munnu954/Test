import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

class CableProcessorTest {

    private static final CableProcessor cableProcessor = CableProcessor.getInstance();
    private static final List<Node> nodes = new ArrayList<>();
    private static final List<Link> links = new ArrayList<>();
    private static final List<ClrComponent> clrComponents = new ArrayList<>();
    private static final Map<String, List<Node>> clliNodeMap = new java.util.HashMap<>();
    private static final int i = 0;
    private static final AtomicInteger ukCount = new AtomicInteger();
    private static final String sourceSys = "sourceSys";

    // Helper method to create arguments for ParameterizedTest
    private static Stream<Arguments> argumentsProvider() {
        return Stream.of(
                Arguments.of(
                        getPrevClrComponentWithEmptyEquipmentComp(),
                        getCableWithSrcAlocNode(),
                        nodes,
                        links,
                        clliNodeMap,
                        i,
                        ukCount,
                        sourceSys
                ),
                Arguments.of(
                        getPrevClrComponentWithNullEquipmentComp(),
                        getCableWithSrcAlocNode(),
                        nodes,
                        links,
                        clliNodeMap,
                        i,
                        ukCount,
                        sourceSys
                ),
                Arguments.of(
                        getPrevClrComponentWithEmptyPortRef(),
                        getNullCableSourceNode(),
                        nodes,
                        links,
                        clliNodeMap,
                        i,
                        ukCount,
                        sourceSys
                ),
                Arguments.of(
                        getPrevClrComponentWithNullPortRef(),
                        getNullCableSourceNode(),
                        nodes,
                        links,
                        clliNodeMap,
                        i,
                        ukCount,
                        sourceSys
                ),
                Arguments.of(
                        getPrevClrComponentWithFullEquipmentComp(),
                        getNullCableSourceNode(),
                        nodes,
                        links,
                        clliNodeMap,
                        i,
                        ukCount,
                        sourceSys
                ),
                Arguments.of(
                        getPrevClrComponentWithFullEquipmentComp(),
                        getNullCableSourceNode(),
                        nodes,
                        links,
                        clliNodeMap,
                        i,
                        ukCount,
                        sourceSys
                ),
                Arguments.of(
                        getPrevClrComponentWithFullEquipmentComp(),
                        getNullCableSourceNode(),
                        nodes,
                        links,
                        clliNodeMap,
                        i,
                        ukCount,
                        sourceSys
                )
        );
    }

    @ParameterizedTest
    @MethodSource("argumentsProvider")
    void testProcess_shouldHandleAllBranches(
            ClrComponent prevClrComponent,
            CableComp cable,
            List<Node> nodes,
            List<Link> links,
            Map<String, List<Node>> clliNodeMap,
            int i,
            AtomicInteger ukCount,
            String sourceSys
    ) {
        // Given
        cableProcessor.process(nodes, links, cable, clrComponents, clliNodeMap, i, ukCount, sourceSys);

        // Then
        // Assertions for each branch of the if conditional statement
        Assertions.assertAll(
                () -> assertTrue(cable.getSource() == null),
                () -> assertTrue(cable.getSource() == null),
                () -> assertTrue(cable.getSource() == null),
                () -> assertTrue(cable.getSource() == null),
                () -> assertTrue(cable.getSource() == null),
                () -> assertTrue(cable.getSource() == null),
                () -> assertTrue(cable.getSource() == null)
        );
    }

    private static ClrComponent getPrevClrComponentWithEmptyEquipmentComp() {
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setEquipmentComp(Collections.emptyList());
        return prevClrComponent;
    }

    private static ClrComponent getPrevClrComponentWithNullEquipmentComp() {
        return new ClrComponent();
    }

    private static ClrComponent getPrevClrComponentWithEmptyPortRef() {
        ClrComponent prevClrComponent = getPrevClrComponentWithFullEquipmentComp();
        prevClrComponent.getEquipmentComp().get(0).setPortRef(Collections.emptyList());
        return prevClrComponent;
    }

    private static ClrComponent getPrevClrComponentWithNullPortRef() {
        ClrComponent prevClrComponent = getPrevClrComponentWithFullEquipmentComp();
        prevClrComponent.getEquipmentComp().get(0).setPortRef(null);
        return prevClrComponent;
    }

    private static CableComp getCableWithSrcAlocNode() {
        CableComp cable = new CableComp();
        cable.setLocationA("srcAlocNode");
        return cable;
    }

    private static CableComp getNullCableSourceNode() {
        return new CableComp();
    }

    private static ClrComponent getPrevClrComponentWithFullEquipmentComp() {
        ClrComponent prevClrComponent = new ClrComponent();
        PortRef portRef = new PortRef();
        portRef.setSiteCode("srcAlocNode");
        portRef.setPortID("portID");
        portRef.setShelfID("shelfID");
        EquipmentComp equipmentComp = new EquipmentComp();
        equipmentComp.setPortRef(Arrays.asList(portRef));
        prevClrComponent.setEquipmentComp(Arrays.asList(equipmentComp));
        return prevClrComponent;
    }
}