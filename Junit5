The error message you're seeing indicates that the `saveFailedRecords` method on the `failedMessageService` mock was never called. This could happen if the exception handling in the `sendMessageAsync` method isn't correctly triggering the call to `saveFailedRecords`. 

To address this, let's ensure the asynchronous handling is set up correctly, and the `whenCompleteAsync` callback is triggered properly. Hereâ€™s the updated test case code:

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.support.SendResult;

@ExtendWith(MockitoExtension.class)
public class BatchLoaderUtilsTest {

    @InjectMocks
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    private ProducerRecord<String, String> producerRecord;
    private String transactionId;
    private String payload;
    private String producerTopic;
    private String insightName;
    private char sensitivityCheckDone;
    private String errorCategory;

    @BeforeEach
    public void setUp() {
        producerRecord = new ProducerRecord<>("topic", "key", "value");
        transactionId = "123";
        payload = "{\"data\":\"sample\"}";
        producerTopic = "sampleTopic";
        insightName = "insight";
        sensitivityCheckDone = 'N';
        errorCategory = "error";
    }

    @Test
    public void testSendMessageAsync_Success() throws ExecutionException, InterruptedException {
        // Arrange
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        RecordMetadata metadata = new RecordMetadata(null, 0L, 0, 0L, Long.valueOf(0), 0, 0);
        SendResult<String, String> sendResult = new SendResult<>(producerRecord, metadata);
        future.complete(sendResult);

        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Act
        batchLoaderUtils.sendMessageAsync(producerRecord, transactionId, payload, producerTopic, insightName, sensitivityCheckDone, errorCategory);

        // Assert
        verify(failedMessageService, never()).saveFailedRecords(any(), any(), any(), any(), anyChar(), any(), any());
    }

    @Test
    public void testSendMessageAsync_Failure() {
        // Arrange
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        future.completeExceptionally(new RuntimeException("Kafka send exception"));

        when(kafkaTemplate.send(any(ProducerRecord.class))).thenReturn(future);

        // Act
        batchLoaderUtils.sendMessageAsync(producerRecord, transactionId, payload, producerTopic, insightName, sensitivityCheckDone, errorCategory);

        // Wait for the async operation to complete
        try {
            future.get();
        } catch (Exception ignored) {
            // Ignored because we expect an exception
        }

        // Assert
        verify(failedMessageService, times(1)).saveFailedRecords(eq(producerTopic), eq(transactionId), eq(payload), eq(insightName), eq(sensitivityCheckDone), eq(errorCategory), anyString());
    }
}
```

### Key Updates:

1. **Handling Future Completion**:
   - In the `testSendMessageAsync_Failure` test, after calling `sendMessageAsync`, we call `future.get()`. This blocks the test execution until the future is completed, ensuring the `whenCompleteAsync` callback has a chance to execute. This is crucial for testing asynchronous operations.

2. **Exception Handling**:
   - The exception from `future.get()` is caught and ignored because it is expected in this test scenario.

This should ensure that the `saveFailedRecords` method is correctly invoked when an exception occurs during the message sending process.