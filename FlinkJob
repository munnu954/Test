import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class KafkaTest {

    @Mock
    private KafkaProducer<String, String> producer;

    @Mock
    private KafkaConsumer<String, String> consumer;

    @Test
    public void testKafkaProducer() {
        // Mock JSON data
        String jsonData = "{\"key\": \"value\"}";

        // Mock producer record
        ProducerRecord<String, String> record = new ProducerRecord<>("topic", "key", jsonData);

        // Call the producer method
        producer.send(record);

        // Verify that the send method was called once
        verify(producer, times(1)).send(any(ProducerRecord.class));
    }

    @Test
    public void testKafkaConsumer() {
        // Mock consumer records
        ConsumerRecords<String, String> records = new ConsumerRecords<>(null);

        // Mock consumer record
        ConsumerRecord<String, String> record = new ConsumerRecord<>("topic", 0, 0, "key", "value");

        // Add the mock record to the mock records
        records.add(record);

        // Set up the behavior of the consumer
        when(consumer.poll(any())).thenReturn(records);

        // Call the consumer method
        consumer.poll(100);

        // Verify that the poll method was called once
        verify(consumer, times(1)).poll(any());
    }
}