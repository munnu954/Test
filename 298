import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class AlarmReceiverTest {

    @Mock
    PostingService postingService;

    @Mock
    AlarmPostGreService alarmPostGreService;

    @Mock
    VMBParams vmbParams;

    @BeforeEach
    void setup() {
        postingService = Mockito.mock(PostingService.class);
        alarmPostGreService = Mockito.mock(AlarmPostGreService.class);
        vmbParams = Mockito.mock(VMBParams.class);
    }

    @Test
    void testReceiveMessages() throws Exception {
        AlarmReceiver alarmReceiver = new AlarmReceiver(vmbParams, alarmPostGreService, postingService);

        alarmReceiver._consumer = Mockito.mock(Consumer.class);

        when(VMBUtil.receiveMessageThrowsPulsarClientException(alarmReceiver._consumer, 3, TimeUnit.SECONDS)).thenReturn(Mockito.mock(Message.class));

        assertDoesNotThrow(() -> alarmReceiver.receiveMessages());
    }

    @Test
    void testAcknowledgeMessage() throws Exception {
        AlarmReceiver alarmReceiver = new AlarmReceiver(vmbParams, alarmPostGreService, postingService);

        alarmReceiver._consumer = Mockito.mock(Consumer.class);
        Message<byte[]> msg = Mockito.mock(Message.class);

        doThrow(new PulsarClientException("Test Exception")).doNothing().when(VMBUtil.class);
        VMBUtil.acknowledgeMessageThrowsPulsarClientException(alarmReceiver._consumer, msg);

        assertDoesNotThrow(() -> alarmReceiver.acknowledgeMessage(msg));
    }

    @Test
    void testSyncReconnect() throws Exception {
        AlarmReceiver alarmReceiver = new AlarmReceiver(vmbParams, alarmPostGreService, postingService);

        alarmReceiver._consumer = Mockito.mock(Consumer.class);
        AtomicInteger reconnectStage = new AtomicInteger(0);
        FieldUtils.writeField(alarmReceiver, "reconnectStage", reconnectStage, true);

        when(alarmReceiver._consumer.isConnected()).thenReturn(false);
        when(VMBUtil.createConsumerConnection(any(), any())).thenReturn(alarmReceiver._consumer);

        assertDoesNotThrow(() -> alarmReceiver.syncReconnect());
    }

    @Test
    void testRun() {
        AlarmReceiver alarmReceiver = new AlarmReceiver(vmbParams, alarmPostGreService, postingService);

        alarmReceiver._consumer = Mockito.mock(Consumer.class);
        FieldUtils.writeField(alarmReceiver, "_run", false, true);

        when(VMBUtil.receiveMessageThrowsPulsarClientException(
            alarmReceiver._consumer,
            3,
            TimeUnit.SECONDS
        )).thenReturn(Mockito.mock(Message.class));

        assertDoesNotThrow(() -> alarmReceiver.run());
    }
}