import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.powermock.reflect.Whitebox;
import org.mockito.Mockito;
import org.slf4j.Logger;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import com.fasterxml.jackson.core.JsonProcessingException;


@Test
void testConvertToObject_WithJAXBException() throws JsonProcessingException, JAXBException {
    // Arrange
    BatchLoaderUtils batchLoaderUtils = new BatchLoaderUtils();
    String xml = "<xml>test</xml>";
    Class<TYSConstants> clazz = TYSConstants.class;
    JAXBContext jaxbContextMock = mock(JAXBContext.class);
    Unmarshaller jaxbUnmarshallerMock = mock(Unmarshaller.class);
    when(jaxbContextMock.createUnmarshaller()).thenThrow(new JAXBException("Mocked JAXBException"));
    when(jaxbContextMock.newInstance(clazz)).thenReturn(jaxbContextMock);
    
    // Replace LOGGER with Mocked Logger
    Logger loggerMock = mock(Logger.class);
    Whitebox.setInternalState(BatchLoaderUtils.class, "LOGGER", loggerMock);

    // Act
    TYSConstants result = batchLoaderUtils.convertToObject(xml, clazz);

    // Assert
    verify(loggerMock).error("Unable to convert - ", new JAXBException("Mocked JAXBException"));
    assertNull(result);
}