public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private List<String> headerList = new ArrayList<>();
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        int lineCount = 0;

        for (String line : lines) {
            if (lineCount == 0 || lineCount == 1) {
                String[] headerValues = line.split(",");
                headerList.addAll(Arrays.asList(headerValues));
            } else if (lineCount == 2) {
                String[] headers = line.split(",");
                if (headerList.size() != headers.length) {
                    this.failureIntCounter.add(1);
                    continue;
                }

                for (int i = 0; i < headers.length; i++) {
                    JSONObject obj = new JSONObject();
                    obj.put(headerList.get(i), headers[i].trim().replace("\"", ""));
                    this.successIntCounter.add(1);
                    collector.collect(obj.toString());
                }
            } else {
                String[] arr = line.split(",");
                if (headerList.size() != arr.length) {
                    this.failureIntCounter.add(1);
                    continue;
                }

                JSONObject obj = new JSONObject();
                for (int j = 0; j < arr.length; j++) {
                    String jsonkey = headerList.get(j).trim().replace("\"", "");
                    String jsonvalue = arr[j].trim().replace("\"", "");
                    obj.put(jsonkey, jsonvalue);
                }

                this.successIntCounter.add(1);
                collector.collect(obj.toString());
            }
            lineCount++;
        }
    }
}