```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class SHAEventMessageListenerTest {

    @InjectMocks
    private SHAEventMessageListener shaEventMessageListener;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private SensitiveProfileManager sensitiveProfileManager;

    @Mock
    private KafkaFalloutService kafkaFalloutService;

    @Mock
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private Message<GenericRecord> message;

    @BeforeEach
    public void setUp() {
        // Reset the status of the mock objects before each test
        reset(kafkaTemplate, sensitiveProfileManager, batchLoaderUtils, message);
    }

    @Test
    void testOnMessage_EmptyPayload() {
        // Arrange
        when(message.getData()).thenReturn(new byte[0]);

        // Act
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));

        // Assert
        verify(batchLoaderUtils, never()).convert(any(), any());
    }

    @Test
    void testOnMessage_NullEcpdId() {
        // Arrange
        String payload = "{\"mdn\":\"1234567890\"}";
        when(message.getData()).thenReturn(payload.getBytes());
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId(null);
        when(batchLoaderUtils.convert(payload, SHAVbsmEvent.class)).thenReturn(event);

        // Act
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));

        // Assert
        verify(batchLoaderUtils, never()).sendMessageAsync(any());
    }

    @Test
    void testOnMessage_SensitiveAccount() throws JsonProcessingException {
        // Arrange
        String payload = "{\"ecpd_profile_id\":\"1234567890\",\"mdn\":\"1234567890\"}";
        when(message.getData()).thenReturn(payload.getBytes());
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("1234567890");
        when(batchLoaderUtils.convert(payload, SHAVbsmEvent.class)).thenReturn(event);
        SensitiveResponse sensitiveResponse = new SensitiveResponse();
        sensitiveResponse.setSensitive(true);
        when(sensitiveProfileManager.getSensitiveAccount(event.getEcpdId())).thenReturn(sensitiveResponse);

        // Act
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));

        // Assert
        verify(batchLoaderUtils, never()).sendMessageAsync(any());
    }

    @Test
    void testOnMessage_KafkaException() {
        // Arrange
        String payload = "{\"ecpd_profile_id\":\"1234567890\",\"mdn\":\"1234567890\"}";
        when(message.getData()).thenReturn(payload.getBytes());
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("1234567890");
        when(batchLoaderUtils.convert(payload, SHAVbsmEvent.class)).thenReturn(event);
        when(sensitiveProfileManager.getSensitiveAccount(event.getEcpdId())).thenThrow(new RuntimeException());

        // Act
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));

        // Assert
        verify(batchLoaderUtils, never()).sendMessageAsync(any());
        verify(kafkaFalloutService).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());
    }

    @Test
    void testOnMessage_HappyPath() throws Exception {
        // Arrange
        String payload = "{\"ecpd_profile_id\":\"1234567890\",\"mdn\":\"1234567890\"}";
        when(message.getData()).thenReturn(payload.getBytes());
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("1234567890");
        when(batchLoaderUtils.convert(payload, SHAVbsmEvent.class)).thenReturn(event);
        SensitiveResponse sensitiveResponse = new SensitiveResponse();
        sensitiveResponse.setSensitive(false);
        when(sensitiveProfileManager.getSensitiveAccount(event.getEcpdId())).thenReturn(sensitiveResponse);

        // Act
        assertDoesNotThrow(() -> shaEventMessageListener.onMessage(message));

        // Assert
        verify(batchLoaderUtils).sendMessageAsync(any(), any(), any(), any(), any(), any(), any());
        verify(kafkaFalloutService, never()).saveFailedRecords(any(), any(), any(), any(), any(), any(), any());
    }
}
```