To create JUnit 5 test cases for the `CircuitDetailsProvider` class to cover all branches of the specific `if` conditions in both `getAEnd` and `getZEnd` methods, you can follow these steps. The goal is to ensure that each condition is tested, covering both the positive and negative paths for each condition.

Here's what the JUnit test class might look like:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAEnd_WithPortType() {
        // Prepare test data
        CircuitDetailResponse response = createCircuitDetailResponse(CommonWrapperConstants.PORT);

        // Call method
        AEnd aEnd = circuitDetailsProvider.getAEnd("circuitId", "clliCode", response);

        // Verify
        assertNotNull(aEnd);
        assertEquals("clliCode", aEnd.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    public void testGetAEnd_WithChannelType() {
        // Prepare test data
        CircuitDetailResponse response = createCircuitDetailResponse(CommonWrapperConstants.CHANNEL);

        // Call method
        AEnd aEnd = circuitDetailsProvider.getAEnd("circuitId", "clliCode", response);

        // Verify
        assertNotNull(aEnd);
        assertEquals("clliCode", aEnd.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    public void testGetZEnd_WithPortType() {
        // Prepare test data
        CircuitDetailResponse response = createCircuitDetailResponse(CommonWrapperConstants.PORT);

        // Call method
        ZEnd zEnd = circuitDetailsProvider.getZEnd("circuitId", "clliCode", response);

        // Verify
        assertNotNull(zEnd);
        assertEquals("clliCode", zEnd.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    @Test
    public void testGetZEnd_WithChannelType() {
        // Prepare test data
        CircuitDetailResponse response = createCircuitDetailResponse(CommonWrapperConstants.CHANNEL);

        // Call method
        ZEnd zEnd = circuitDetailsProvider.getZEnd("circuitId", "clliCode", response);

        // Verify
        assertNotNull(zEnd);
        assertEquals("clliCode", zEnd.getPortChannel().get(0).getPortRef().get(0).getClliCode());
    }

    private CircuitDetailResponse createCircuitDetailResponse(String type) {
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(type);

        PortRef portRef = new PortRef();
        portRef.setClliCode("clliCode");

        EquipmentComp equipmentComp = new EquipmentComp();
        List<PortRef> portRefs = new ArrayList<>();
        portRefs.add(portRef);
        equipmentComp.setPortRef(portRefs);

        List<EquipmentComp> equipmentComps = new ArrayList<>();
        equipmentComps.add(equipmentComp);
        clrComponent.setEquipmentComp(equipmentComps);

        List<ClrComponent> clrComponents = new ArrayList<>();
        clrComponents.add(clrComponent);

        Path path = new Path();
        path.setClrComponent(clrComponents);

        List<Path> paths = new ArrayList<>();
        paths.add(path);

        PathLst pathLst = new PathLst();
        pathLst.setPath(paths);

        List<PathLst> pathLsts = new ArrayList<>();
        pathLsts.add(pathLst);

        Clr clr = new Clr();
        clr.setPathLst(pathLsts);

        Circuit circuit = new Circuit();
        List<Clr> clrList = new ArrayList<>();
        clrList.add(clr);
        circuit.setClr(clrList);

        CircuitLst circuitLst = new CircuitLst();
        List<Circuit> circuits = new ArrayList<>();
        circuits.add(circuit);
        circuitLst.setCircuit(circuits);

        CircuitData circuitData = new CircuitData();
        List<CircuitLst> circuitLsts = new ArrayList<>();
        circuitLsts.add(circuitLst);
        circuitData.setCircuitLst(circuitLsts);

        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        return response;
    }
}
```

### Explanation:
- **Mocks and Setup**: We use Mockito to mock dependencies like `RestClientUtil`. This is initialized in the `setUp` method.
- **Test Methods**: Each test case covers a different branch by setting up the data such that the `type` is either `PORT` or `CHANNEL`. This ensures we test both branches.
- **Helper Method**: `createCircuitDetailResponse` is a utility method to create a mock `CircuitDetailResponse` object with nested structures as required by the logic we are testing.

These tests should cover both the `PORT` and `CHANNEL` branches for both `getAEnd` and `getZEnd` methods. Adjust the helper method to match the actual structure and logic of your application.