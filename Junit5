The error you're encountering suggests that the `ObjectMapper` instance used in the `doThrow().when()` call is not being recognized as a mock. This can happen if the mock is not correctly injected or instantiated.

To ensure that the `ObjectMapper` is properly mocked and used in the `MtnInsightsManager`, let's make sure that the mocking and injection are handled correctly. I'll provide an updated version of the test code with some additional checks:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.mockito.Mockito.doThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;

@ExtendWith(MockitoExtension.class)
public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @Mock
    private EcpdByKeyRepository ecpdByKeyRepository;

    @Mock
    private MtnInsightsValidator validator;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @BeforeEach
    public void setup() {
        // Ensure that the ObjectMapper mock is used in the MtnInsightsManager
        mtnInsightsManager = new MtnInsightsManager();
        mtnInsightsManager.obj = objectMapper;
    }

    @Test
    public void testConvertAttributesArray_JsonProcessingException() throws JsonProcessingException {
        // Arrange
        MtnInsightsAttributes attr = new MtnInsightsAttributes(); // Assuming this is a valid object
        MtnInsightsAttributes[] attrsArray = {attr};

        // Mock the ObjectMapper to throw JsonProcessingException
        doThrow(JsonProcessingException.class).when(objectMapper).writeValueAsString(Mockito.any());

        // Act & Assert
        assertThrows(SystemException.class, () -> {
            mtnInsightsManager.convert(attrsArray);
        });
    }

    @Test
    public void testConvertEcpd_JsonProcessingException() throws JsonProcessingException {
        // Arrange
        MtnInsightsAttributes attr = new MtnInsightsAttributes(); // Assuming this is a valid object

        // Mock the ObjectMapper to throw JsonProcessingException
        doThrow(JsonProcessingException.class).when(objectMapper).writeValueAsString(Mockito.any());

        // Act & Assert
        assertThrows(SystemException.class, () -> {
            mtnInsightsManager.convertEcpd(attr);
        });
    }
}
```

### Key Adjustments:

1. **Re-initialize the Manager:**
   - Re-initialize `mtnInsightsManager` in the `setup` method after the `InjectMocks` setup to ensure that the `ObjectMapper` instance is correctly assigned.

2. **Use `doThrow()` Correctly:**
   - Use `doThrow(JsonProcessingException.class).when(objectMapper).writeValueAsString(Mockito.any())` to simulate the exception. This ensures that the mock behavior is correctly established for the `writeValueAsString` method.

3. **Ensure `objectMapper` is Assigned:**
   - Make sure `mtnInsightsManager.obj = objectMapper;` is executed to assign the mock to the manager.

These steps should ensure the `ObjectMapper` is correctly mocked, and the tests should execute without encountering the `NotAMockException`.