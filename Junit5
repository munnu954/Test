To add the `phyModel` condition to both the `ComnonWrapperController` and `CircuitDetailsProvider` classes, you'll need to update the code to handle the new query parameter. Here's how you can modify these classes:

### Updated `ComnonWrapperController` Class:

```java
@RestController
public class ComnonWrapperController {
    private static final Logger LOGGER = LogManager.getLogger(CommonWrapperController.class);

    @Autowired
    private ClrGraphicsService clrGraphicsService;

    @Autowired 
    private Granitesegmentservice graniteService;

    @Operation(summary = "GetClrGraphics", responses = {
        @ApiResponse(responseCode = "200", description = "Get CLR Graphics details for a given circuit",
            content = {@Content(mediaType = "application/json", schema = @Schema(implementation = CirGrapicsResponse.class))}),
        @ApiResponse(responseCode = "400", description = "Invalid input provided", content = @Content),
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content),
        @ApiResponse(responseCode = "404", description = "Data Not found", content = @Content),
    })
    @GetMapping(value = "/api/v1/clr/graphics", produces = MediaType.APPLICATION_JSON_VALUE)
    public String getClrGraphics(
            @Param(value = "circuitId") @RequestParam(value = "circuitId", required = true) String circuitId,
            @Param(value = "sourceSys") @RequestParam(required = false) String sourceSys,
            @Param(value = "cnd") @RequestParam(value = "cnd", required = false) String cnd,
            @Param(value = "phyModel") @RequestParam(value = "phyModel", required = false) String phyModel) {

        LOGGER.info("getClrGraphics Started");
        Map<String, String> input = new HashMap<>();

        if (null != sourceSys) {
            input.put("sourceSys", sourceSys);
        }
        if (StringUtils.isBlank(cnd) || ((StringUtils.isBlank(cnd)) && (!cnd.equalsIgnoreCase("Y")))) {
            cnd = "N";
        } else {
            cnd = "Y";
        }

        try {
            circuitId = URLDecoder.decode(circuitId, StandardCharsets.UTF_8.toString());
        } catch (UnsupportedEncodingException e) {
            LOGGER.error("Error while parsing circuitId: {}", e);
        }

        String response;
        response = clrGraphicsService.getClrGraphics(circuitId, sourceSys, cnd, phyModel);
        LOGGER.info("getClrGraphics Ended");
        return response;
    }
}
```

### Updated `CircuitDetailsProvider` Class:

```java
@Component
public class CircuitDetailsProvider {

    @Autowired
    private RestClientUtil restClientUtil;

    public CircuitDetailResponse getCircuitDetails(String circuitId, String phyModel) {
        CircuitDetailResponse cirDetResponse = null;
        StringBuilder finalUrl = new StringBuilder(getBaseUrl());
        finalUrl.append(cktDetailuri);

        circuitId = (null != circuitId) ? circuitId.trim() : CommonWrapperConstants.EMPTY;

        if (StringUtils.isNotBlank(phyModel)) {
            finalUrl.append("?phyModel=").append(phyModel.trim());
        }

        String response = restClientUtil.callEndpoint(finalUrl.toString().replace("#circuitId#", circuitId), HttpMethod.GET, buildHeaders());
        if (null != response) {
            Gson gson = new GsonBuilder().disableHtmlEscaping().create();
            cirDetResponse = gson.fromJson(response, CircuitDetailResponse.class);
        }
        return cirDetResponse;
    }

    private String getBaseUrl() {
        return "http://" + cktDetServiceName;
    }
}
```

### Key Changes:
- **Controller Class**: Added an optional `phyModel` parameter to the `getClrGraphics` method. This parameter is passed to the `clrGraphicsService.getClrGraphics` method.
- **Provider Class**: Added logic to append the `phyModel` parameter to the URL only if it is provided and not blank. This ensures that `phyModel` is optional and only included when supplied.

By applying these changes, the system will now handle the `phyModel` query parameter as requested.