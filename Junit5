import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Test;

public class AlarmPostingUtilsTest {

    @Test
    public void testEvaluateExpression_ExceptionHandling() {
        // Arrange
        AlarmPostingUtils alarmPostingUtils = new AlarmPostingUtils(mock(Environment.class));
        Map<String, Object> topoMap = new HashMap<>();
        String expression = "%test_expression%";
        
        // Mocking the LOG
        Logger logger = mock(Logger.class);
        when(LoggerFactory.getLogger(AlarmPostingUtils.class)).thenReturn(logger);

        // Act
        String result = alarmPostingUtils.evaluateExpression(expression, topoMap);

        // Assert
        verify(logger).error(eq("Exception occurred while Parsing Expression: ()"), anyString());
        assertEquals("", result);
    }
}
 
This test case creates a mock Environment object and a topoMap for testing the evaluateExpression method when an exception is caught. The test method mocks the Logger instance to verify if the error message is logged correctly and checks if the result is an empty string as expected.