To achieve 100% code coverage for the `ctiOnMessage` method of the `EventsMessageListener` class, you need to write test cases that cover all the branches and possible paths in the method. Below are additional test cases to cover the remaining branches:

### Test for Empty Payload Scenario

```java
@Test
void testEmptyPayload() {
    String emptyPayload = "";

    ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "test-topic");

    assertThrows(FalloutException.class, () -> 
        ReflectionTestUtils.invokeMethod(eventsMessageListener, "ctiOnMessage", consumerRecord, emptyPayload)
    );

    verifyNoInteractions(mtnEcpdService, ctiEcpdService, failedMessageService);
}
```

### Test for Invalid Action Scenario

```java
@Test
void testInvalidAction() throws Exception {
    String invalidActionPayload = "{\"ACTION\": \"INVALID_ACTION\", \"CV2\": \"12345\", \"CALLCONTROLID\": 123456}";
    
    ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "test-topic");

    ReflectionTestUtils.invokeMethod(eventsMessageListener, "ctiOnMessage", consumerRecord, invalidActionPayload);

    verifyNoInteractions(mtnEcpdService, ctiEcpdService, failedMessageService);
}
```

### Test for Sensitive Data Scenario

```java
@Test
void testSensitiveDataScenario() throws Exception {
    CTIDataStore dataStore = new CTIDataStore();
    dataStore.setSensitivity("Y");
    dataStore.setEcpd("SensitiveEcpd");
    dataStore.setMtn("SensitiveMtn");

    when(ctiEcpdService.findById(anyString())).thenReturn(dataStore);

    String sensitiveDataPayload = "{\"ACTION\": \"RELEASE\", \"CALLCONTROLID\": 123456}";

    ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "test-topic");

    ReflectionTestUtils.invokeMethod(eventsMessageListener, "ctiOnMessage", consumerRecord, sensitiveDataPayload);

    verify(ctiEcpdService, times(1)).findById(anyString());
    verifyNoMoreInteractions(ctiEcpdService);
    verifyNoInteractions(failedMessageService);
}
```

### Test for Call Established with Call Type 0

```java
@Test
void testCallEstablishedWithCallTypeZero() throws Exception {
    String callTypeZeroPayload = "{\"ACTION\": \"CALLESTABLISHED\", \"CALLTYPES\": \"0\", \"CV2\": \"12345\"}";

    ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "test-topic");

    ReflectionTestUtils.invokeMethod(eventsMessageListener, "ctiOnMessage", consumerRecord, callTypeZeroPayload);

    verify(utils, times(1)).isValidData(anyString());
    verifyNoInteractions(mtnEcpdService, ctiEcpdService, failedMessageService);
}
```

### Test for Call ID Changed Scenario

```java
@Test
void testCallIdChangedScenario() throws Exception {
    CTIDataStore ctiDataStore = new CTIDataStore();
    ctiDataStore.setEcpd("Ecpd123");
    ctiDataStore.setMtn("Mtn123");

    when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

    String callIdChangedPayload = "{\"ACTION\": \"CALLIDCHANGED\", \"OLDCALLID\": 654321}";

    ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "test-topic");

    ReflectionTestUtils.invokeMethod(eventsMessageListener, "ctiOnMessage", consumerRecord, callIdChangedPayload);

    verify(ctiEcpdService, times(1)).findById(anyString());
    verify(ctiEcpdService, times(1)).saveCTIData(any(CTIDataStore.class));
    verify(ctiEcpdService, times(1)).deleteById(anyString());
}
```

### Test for RTP Started Scenario

```java
@Test
void testRtpStartedScenario() throws Exception {
    CTIDataStore ctiDataStore = new CTIDataStore();
    ctiDataStore.setEcpd("Ecpd123");
    ctiDataStore.setMtn("Mtn123");

    when(ctiEcpdService.findById(anyString())).thenReturn(ctiDataStore);

    String rtpStartedPayload = "{\"ACTION\": \"RTPSTARTED\", \"CALLCONTROLID\": 123456}";

    ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "test-topic");

    ReflectionTestUtils.invokeMethod(eventsMessageListener, "ctiOnMessage", consumerRecord, rtpStartedPayload);

    verify(ctiEcpdService, times(1)).findById(anyString());
    verifyNoMoreInteractions(ctiEcpdService);
    verifyNoInteractions(failedMessageService);
}
```

### Test for Release Action with Null CTIDataStore

```java
@Test
void testReleaseActionWithNullCTIDataStore() throws Exception {
    when(ctiEcpdService.findById(anyString())).thenReturn(null);

    String releasePayload = "{\"ACTION\": \"RELEASE\", \"CALLCONTROLID\": 123456}";

    ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "test-topic");

    ReflectionTestUtils.invokeMethod(eventsMessageListener, "ctiOnMessage", consumerRecord, releasePayload);

    verify(ctiEcpdService, times(1)).findById(anyString());
    verify(failedMessageService, times(1)).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar());
}
```

These test cases should help in achieving 100% code coverage for the `ctiOnMessage` method by testing various branches and conditions. Adjust the payloads and mock behavior accordingly to fit the exact logic and data structures used in your application.