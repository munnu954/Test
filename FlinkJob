Certainly! Here's the converted JUnit5 test case code with assertions for invalid jarId and non-existent jarId:

```java
import org.json.JSONException;
import org.json.JSONObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

import java.io.File;
import java.util.Collections;

public class CsvToJsonTransformerJobTest {

    private TestRestTemplate restTemplate;

    private File csvFile;
    private String jarId;

    @BeforeEach
    public void setup() {
        this.restTemplate = new TestRestTemplate(new RestTemplateBuilder());

        // Replace with the actual csv file path and jarId
        this.csvFile = new File("path/to/csv/file.csv");
        this.jarId = "example-jar-id";
    }

    @Test
    public void invokeCsvToJsonTransformerJob_ValidJarId_Success() throws JSONException {
        String url = "http://localhost:8081/jars/" + jarId + "/run";
        String filePath = this.csvFile.getAbsolutePath();

        JSONObject jsonBody = new JSONObject();
        jsonBody.put("programArgs", "--input" + filePath + "-fileType csv --bootstarpServer localhost:9092 --Topic COLLECTION-TOPIC");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

        HttpEntity<String> requestEntity = new HttpEntity<>(jsonBody.toString(), headers);

        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);

        // Assert the response code and response body as needed
        Assertions.assertEquals(200, response.getStatusCodeValue());
        Assertions.assertNotNull(response.getBody());
    }

    @Test
    public void invokeCsvToJsonTransformerJob_InvalidJarId_Failure() throws JSONException {
        String invalidJarId = "invalid-jar-id";
        String url = "http://localhost:8081/jars/" + invalidJarId + "/run";
        String filePath = this.csvFile.getAbsolutePath();

        JSONObject jsonBody = new JSONObject();
        jsonBody.put("programArgs", "--input" + filePath + "-fileType csv --bootstarpServer localhost:9092 --Topic COLLECTION-TOPIC");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

        HttpEntity<String> requestEntity = new HttpEntity<>(jsonBody.toString(), headers);

        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);

        // Assert the response code and response body as needed
        Assertions.assertEquals(404, response.getStatusCodeValue());
        Assertions.assertNotNull(response.getBody());
        Assertions.assertTrue(response.getBody().contains("Jar not found"));
    }

    @Test
    public void invokeCsvToJsonTransformerJob_NonExistentJarId_Failure() throws JSONException {
        String nonExistentJarId = "non-existent-jar-id";
        String url = "http://localhost:8081/jars/" + nonExistentJarId + "/run";
        String filePath = this.csvFile.getAbsolutePath();

        JSONObject jsonBody = new JSONObject();
        jsonBody.put("programArgs", "--input" + filePath + "-fileType csv --bootstarpServer localhost:9092 --Topic COLLECTION-TOPIC");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

        HttpEntity<String> requestEntity = new HttpEntity<>(jsonBody.toString(), headers);

        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);

        // Assert the response code and response body as needed
        Assertions.assertEquals(400, response.getStatusCodeValue());
        Assertions.assertNotNull(response.getBody());
        Assertions.assertTrue(response.getBody().contains("Invalid jarId"));
    }
}
```

This JUnit5 test case can now be executed and will test the CsvToJsonTransformerJob with assertions for invalid jarId and non-existent jarId.