Here is an example of how you can write the test case code for the provided acceptance criteria:

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class ConsumerServiceTest {

    @Mock
    private KafkaProducerService kafkaProducerService;

    @InjectMocks
    private ConsumerService consumerService;

    @Test
    public void testConsume_successfulCollection_publishAuditMessageWithJobStatusSuccessful() throws Exception {
        SpaceCollector spaceCollector = new SpaceCollector();
        // Set up spaceCollector object with required values

        Mockito.when(kafkaProducerService.writeMessage(Mockito.any(JsonNode.class), Mockito.eq(""), Mockito.eq("3459-DEV-COLLECTION-AUDIT-QUEUE"))).thenReturn(true);

        boolean result = consumerService.consume(spaceCollector);

        Mockito.verify(kafkaProducerService).writeMessage(Mockito.any(JsonNode.class), Mockito.eq(""), Mockito.eq("3459-DEV-COLLECTION-AUDIT-QUEUE"));
        // Assert the result and any other necessary assertions
    }

    @Test
    public void testConsume_failedCollection_publishAuditMessageWithJobStatusFailed() throws Exception {
        SpaceCollector spaceCollector = new SpaceCollector();
        // Set up spaceCollector object with required values

        Mockito.when(kafkaProducerService.writeMessage(Mockito.any(JsonNode.class), Mockito.eq(""), Mockito.eq("3459-DEV-COLLECTION-AUDIT-QUEUE"))).thenReturn(true);

        boolean result = consumerService.consume(spaceCollector);

        Mockito.verify(kafkaProducerService).writeMessage(Mockito.any(JsonNode.class), Mockito.eq(""), Mockito.eq("3459-DEV-COLLECTION-AUDIT-QUEUE"));
        // Assert the result and any other necessary assertions
    }
}