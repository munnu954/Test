public static class CsvtoJsonDRAnTransformer extends RichFlatMapFunction<String, String> {
    private List<String[]> headersList = new ArrayList<>();
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    private String fileName;

    public CsvtoJsonDRAnTransformer(String fileName) {
        this.fileName = fileName;
    }

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        
        // Read and store headers
        for (int i = 0; i < 11; i++) {
            String line = lines[i];
            String[] header = line.split(",");
            headersList.add(header);
        }

        // Process data starting from line 13
        for (int i = 12; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");
            if (headersList.size() != arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }
            JSONObject obj = new JSONObject();
            obj.put("FILENAME", fileName);
            for (int j = 0; j < headersList.size(); j++) {
                String[] header = headersList.get(j);
                if (header.length == 2) {
                    String jsonkey = header[0].trim().replace("‌", "");
                    String jsonvalue = header[1].trim().replace("‌", "");
                    obj.put(jsonkey, arr[j].trim());
                }
            }
            this.successIntCounter.add(1);
            collector.collect(obj.toString());
        }
    }
}