public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        JSONObject obj = new JSONObject();

        for (int i = 0; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");

            if (i == 0) {
                // Process line 1 as key-value pair in JSON
                String jsonkey = arr[0].trim().substring(11); // Extract key from line 1
                String jsonvalue = arr[1].trim();
                obj.put(jsonkey, jsonvalue);
            } else if (i == 1) {
                // Process line 2 as key-value pair in JSON
                String jsonkey = arr[0].trim().substring(10); // Extract key from line 2
                String csvValues = arr[1].trim(); // Extract the comma-separated values
                String[] nodeIPValues = csvValues.split(","); // Split the CSV values into an array
                JSONArray jsonArray = new JSONArray();
                for (String value : nodeIPValues) {
                    jsonArray.put(value.trim());
                }
                obj.put(jsonkey, jsonArray);
            } else {
                // Process the remaining lines as usual
                if (headers == null || headers.length != arr.length) {
                    this.failureIntCounter.add(1);
                    continue;
                }

                for (int j = 0; j < arr.length; j++) {
                    String jsonkey = headers[j].trim().replace("\"", "");
                    String jsonvalue = arr[j].trim().replace("\"", "");
                    obj.put(jsonkey, jsonvalue);
                }

                this.successIntCounter.add(1);
            }
        }

        collector.collect(obj.toString());
    }
}