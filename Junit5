Below is a JUnit 5 test case code snippet that aims to achieve 100% code coverage for the `UserInsightsValidator` class. It utilizes reflection to access private methods and fields, assuming that the necessary dependencies such as Jackson and JUnit 5 are available.

```java
import static org.junit.jupiter.api.Assertions.*;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class UserInsightsValidatorTest {

    private UserInsightsValidator validator;
    private UserInsightsRequest userInsightsRequest;
    private UserInsightsSearchRequest userInsightsSearchRequest;

    @BeforeEach
    public void setup() {
        validator = new UserInsightsValidator();
        userInsightsRequest = new UserInsightsRequest();
        userInsightsSearchRequest = new UserInsightsSearchRequest();

        ServiceHeader serviceHeader = new ServiceHeader();
        serviceHeader.setClientId("client");
        serviceHeader.setClientTransactionId("txnId");
        serviceHeader.setServiceName("service");

        userInsightsRequest.setServiceHeader(serviceHeader);
        userInsightsSearchRequest.setServiceHeader(serviceHeader);
    }

    @Test
    public void testValidate_InsertCustomerInsights_Valid() throws Exception {
        userInsightsRequest.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);

        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("userId");
        attributes.setEcpId("ecpId");
        attributes.setInsightCategory(new String[]{"category"});
        attributes.setInsightName(new String[]{"name"});

        userInsightsRequest.setKeyAttributes(attributes);

        invokeValidateMethod(userInsightsRequest);
    }

    @Test
    public void testValidate_InvalidRequestType() {
        userInsightsRequest.setRequestType(InsightsRequestType.INSERTMTNINSIGHTS);

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            invokeValidateMethod(userInsightsRequest);
        });

        assertEquals("Invalid request type", exception.getMessage());
    }

    @Test
    public void testValidate_MissingKeyAttributes() {
        userInsightsRequest.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            invokeValidateMethod(userInsightsRequest);
        });

        assertEquals("Either KeyAttributes (Single) or ListKeyAttributes (Multiple) are required.", exception.getMessage());
    }

    @Test
    public void testValidate_InvalidKeyAttributes() throws Exception {
        userInsightsRequest.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);

        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("");
        userInsightsRequest.setKeyAttributes(attributes);

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            invokeValidateMethod(userInsightsRequest);
        });

        assertEquals("USER_SEARCH_MAND_FIELDS_CHECK", exception.getMessage());
    }

    @Test
    public void testSearchRequestValidation_Valid() throws Exception {
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId("userId");
        searchParam.setEcpId("ecpId");
        searchParam.setInsightCategory(new String[]{"category"});
        searchParam.setInsightName(new String[]{"name"});

        userInsightsSearchRequest.setServiceRequest(searchParam);

        invokeSearchValidateMethod(userInsightsSearchRequest);
    }

    @Test
    public void testSearchRequestValidation_Invalid() {
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        userInsightsSearchRequest.setServiceRequest(searchParam);

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            invokeSearchValidateMethod(userInsightsSearchRequest);
        });

        assertEquals("ServiceRequest Ecpd Id, User Id, Insight Category and Insight Name are required.", exception.getMessage());
    }

    private void invokeValidateMethod(UserInsightsRequest request) throws Exception {
        Method method = UserInsightsValidator.class.getDeclaredMethod("validate", UserInsightsRequest.class);
        method.setAccessible(true);
        method.invoke(validator, request);
    }

    private void invokeSearchValidateMethod(UserInsightsSearchRequest request) throws Exception {
        Method method = UserInsightsValidator.class.getDeclaredMethod("validate", UserInsightsSearchRequest.class);
        method.setAccessible(true);
        method.invoke(validator, request);
    }
}
```

### Explanation
- **Setup**: A `setup` method initializes shared objects that are used in tests.
- **Reflection**: The `invokeValidateMethod` and `invokeSearchValidateMethod` functions use Java reflection to access the private validate methods within the `UserInsightsValidator` class.
- **Tests**: Each test method corresponds to a branch or path in the `UserInsightsValidator`. It verifies that the correct exception is thrown with the expected message for invalid conditions and performs validation checks for valid conditions.

Adjust the `USER_SEARCH_MAND_FIELDS_CHECK` variable and any other constants or methods as needed based on the real implementation environment.