import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mock;
import static org.mockito.Mockito.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;

    @Mock
    private ClrComponent clrComponent;

    @Mock
    private List<Node> nodes;

    @Mock
    private List<Link> links;

    @Mock
    private List<ClrComponent> clrComponentList;

    @Mock
    private Map<String, List<Node>> clliNodeMap;

    @Mock
    private AtomicInteger ukCount;

    private String sourceSys = "testSourceSys";

    @BeforeEach
    void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
    }

    @Test
    void testSegmentTrail() {
        when(clrComponent.getType()).thenReturn(CommonWrapperConstants.TRAIL);
        List<CircuitInfo> circuitInfoList = new ArrayList<>();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfoList.add(circuitInfo);
        when(clrComponent.getCircuitComp()).thenReturn(circuitInfoList);

        List<Link> initialLinks = new ArrayList<>();
        Link prevTrail = new Link();
        prevTrail.setTarget("testTarget"); // Set target node to avoid null pointer exception

        links.add(prevTrail);

        List<Node> nodeList = new ArrayList<>();
        Node prevNode = new Node();
        prevNode.setPortId("testPortId");
        nodeList.add(prevNode);
        
        when(clrComponentList.get(anyInt())).thenReturn(clrComponent);
        when(links.get(anyInt())).thenReturn(prevTrail);
        when(nodes.get(anyInt())).thenReturn(prevNode);

        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 0, ukCount, sourceSys);

        // Assert the changes made by the process method in the Link object
        assertEquals("testPortId", prevTrail.getSource());
        assertEquals("testPortId", prevNode.getPortId());
    }
}