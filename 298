import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import org.springframework.test.util.ReflectionTestUtils;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@EmbeddedKafka(topics = {"3459-COLLECTION-REQUEST-QUEUE", "3459-COLLECTION-AUDIT-QUEUE"}, partitions = 1)
@SpringBootTest
@SpringJUnitConfig
@ExtendWith(SpringExtension.class)
public class KafkaInputProducerTest {

    @Autowired
    private KafkaInputProducer kafkaInputProducer;

    @Test
    public void testWriteMessage_Success() {
        // Mock dependencies
        KafkaTemplate<String, Object> kafkaTemplate = mock(KafkaTemplate.class);
        ReflectionTestUtils.setField(kafkaInputProducer, "kafkaTemplate", kafkaTemplate);

        // Test data
        FileMetadata collector = new FileMetadata();

        // Mock behavior
        when(kafkaTemplate.send(anyString(), any())).thenReturn(null);

        // Call method
        boolean result = kafkaInputProducer.writeMessage(collector);

        // Verify behavior
        verify(kafkaTemplate, times(1)).send(anyString(), eq(collector));
        assertThat(result).isTrue();
    }

    @Test
    public void testWriteMessage_Failure() {
        // Mock dependencies
        KafkaTemplate<String, Object> kafkaTemplate = mock(KafkaTemplate.class);
        ReflectionTestUtils.setField(kafkaInputProducer, "kafkaTemplate", kafkaTemplate);

        // Test data
        FileMetadata collector = new FileMetadata();

        // Mock behavior
        when(kafkaTemplate.send(anyString(), anyString())).thenThrow(new RuntimeException());

        // Call method
        boolean result = kafkaInputProducer.writeMessage(collector);

        // Verify behavior
        verify(kafkaTemplate, times(1)).send(anyString(), eq(collector));
        assertThat(result).isFalse();
    }
}