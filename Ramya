import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AuditStatusServiceTest {

    @Mock
    private LucenceColletionAuditRepo lucenceColletionAuditRepo;

    @InjectMocks
    private AuditStatusService auditStatusService;

    private Vector<ChannelSftp.LsEntry> generateFiles(int count, boolean includeDirs) {
        Vector<ChannelSftp.LsEntry> files = new Vector<>();
        for (int i = 0; i < count; i++) {
            ChannelSftp.LsEntry file = mock(ChannelSftp.LsEntry.class);
            ChannelSftp.Attributes attrs = mock(ChannelSftp.Attributes.class);
            when(attrs.isDir()).thenReturn(includeDirs && i % 2 == 0);
            when(file.getAttrs()).thenReturn(attrs);
            when(file.getFilename()).thenReturn("file" + i);
            files.add(file);
        }
        return files;
    }

    private CollectionAudit generateAudit(String path, String status) {
        CollectionAudit audit = mock(CollectionAudit.class);
        when(audit.getInputFilePath()).thenReturn(path);
        when(audit.getJobStatus()).thenReturn(status);
        return audit;
    }

    @BeforeEach
    void setUp() {
        // This will reset the mock before each test case
        reset(lucenceColletionAuditRepo);
    }

    @Test
    void testGetAuditStatusMap_EmptyList() {
        Vector<ChannelSftp.LsEntry> files = generateFiles(0, false);
        when(lucenceColletionAuditRepo.findLatestByFilePaths(anyList())).thenReturn(Collections.emptyList());

        Map<String, String> result = auditStatusService.getAuditStatusMap(files, "/remote/dir/");

        assertEquals(0, result.size());
        verify(lucenceColletionAuditRepo, never()).findLatestByFilePaths(anyList());
    }

    @Test
    void testGetAuditStatusMap_LessThan1000Files() {
        Vector<ChannelSftp.LsEntry> files = generateFiles(500, false);
        List<CollectionAudit> audits = files.stream()
            .map(file -> generateAudit("/remote/dir/" + file.getFilename(), "STATUS"))
            .collect(Collectors.toList());
        when(lucenceColletionAuditRepo.findLatestByFilePaths(anyList())).thenReturn(audits);

        Map<String, String> result = auditStatusService.getAuditStatusMap(files, "/remote/dir/");

        assertEquals(500, result.size());
        for (int i = 0; i < 500; i++) {
            assertEquals("STATUS", result.get("/remote/dir/file" + i));
        }
        verify(lucenceColletionAuditRepo, times(1)).findLatestByFilePaths(anyList());
    }

    @Test
    void testGetAuditStatusMap_Exactly1000Files() {
        Vector<ChannelSftp.LsEntry> files = generateFiles(1000, false);
        List<CollectionAudit> audits = files.stream()
            .map(file -> generateAudit("/remote/dir/" + file.getFilename(), "STATUS"))
            .collect(Collectors.toList());
        when(lucenceColletionAuditRepo.findLatestByFilePaths(anyList())).thenReturn(audits);

        Map<String, String> result = auditStatusService.getAuditStatusMap(files, "/remote/dir/");

        assertEquals(1000, result.size());
        for (int i = 0; i < 1000; i++) {
            assertEquals("STATUS", result.get("/remote/dir/file" + i));
        }
        verify(lucenceColletionAuditRepo, times(1)).findLatestByFilePaths(anyList());
    }

    @Test
    void testGetAuditStatusMap_MoreThan1000Files() {
        Vector<ChannelSftp.LsEntry> files = generateFiles(1500, false);
        List<String> allPaths = files.stream()
            .map(file -> "/remote/dir/" + file.getFilename())
            .collect(Collectors.toList());

        // Simulate the repo response for the first chunk
        List<String> chunk1Paths = allPaths.subList(0, 1000);
        List<CollectionAudit> chunk1Audits = chunk1Paths.stream()
            .map(path -> generateAudit(path, "STATUS"))
            .collect(Collectors.toList());

        // Simulate the repo response for the second chunk
        List<String> chunk2Paths = allPaths.subList(1000, 1500);
        List<CollectionAudit> chunk2Audits = chunk2Paths.stream()
            .map(path -> generateAudit(path, "STATUS"))
            .collect(Collectors.toList());

        when(lucenceColletionAuditRepo.findLatestByFilePaths(chunk1Paths)).thenReturn(chunk1Audits);
        when(lucenceColletionAuditRepo.findLatestByFilePaths(chunk2Paths)).thenReturn(chunk2Audits);

        Map<String, String> result = auditStatusService.getAuditStatusMap(files, "/remote/dir/");

        assertEquals(1500, result.size());
        for (int i = 0; i < 1500; i++) {
            assertEquals("STATUS", result.get("/remote/dir/file" + i));
        }
        verify(lucenceColletionAuditRepo, times(1)).findLatestByFilePaths(chunk1Paths);
        verify(lucenceColletionAuditRepo, times(1)).findLatestByFilePaths(chunk2Paths);
    }

    @Test
    void testPartitionList() {
        List<Integer> list = IntStream.range(0, 2500).boxed().collect(Collectors.toList());
        List<List<Integer>> partitions = auditStatusService.partitionList(list, 1000);

        assertEquals(3, partitions.size());
        assertEquals(1000, partitions.get(0).size());
        assertEquals(1000, partitions.get(1).size());
        assertEquals(500, partitions.get(2).size());
    }
}
