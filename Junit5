To create JUnit 5 test cases that cover all branches of the conditional statement `else if(CommonWrapperConstants.TRUNK.equalsIgnoreCase(prevType))` in the `process` method of the `PortProcessor` class, we need to simulate different scenarios based on the presence and attributes of `eqtObject` and `prevTrunk`. Here are the necessary test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;

class PortProcessorTest {

    private PortProcessor portProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        portProcessor = PortProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "testSource";
    }

    @Test
    void testProcessWithTrunkTypeAndValidEqtObject() {
        // Set up previous component with TRUNK type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRUNK);

        // Create a dummy link to represent the previous state
        Link prevTrunk = new Link();
        prevTrunk.setTarget("ExistingTarget");
        links.add(prevTrunk);

        // Prepare the current ClrComponent with a valid PortRef
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID("NewPortID");
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));

        // List to simulate the ClrComponent history
        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Run the process method
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify that the target of the previous trunk is updated correctly
        assertEquals("NewPortID", prevTrunk.getTarget());
        assertEquals(1, links.size());
    }

    @Test
    void testProcessWithTrunkTypeAndNullPortID() {
        // Set up previous component with TRUNK type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRUNK);

        // Create a dummy link to represent the previous state
        Link prevTrunk = new Link();
        prevTrunk.setTarget("ExistingTarget");
        links.add(prevTrunk);

        // Prepare the current ClrComponent with a PortRef having a null portID
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.PORT);
        EquipmentComp equipmentComp = new EquipmentComp();
        PortRef portRef = new PortRef();
        portRef.setPortID(null);
        portRef.setShelfTID("ShelfTID");
        equipmentComp.setPortRef(Collections.singletonList(portRef));
        clrComponent.setEquipmentComp(Collections.singletonList(equipmentComp));

        // List to simulate the ClrComponent history
        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Run the process method
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify that the target of the previous trunk is updated to use shelfTID
        assertEquals("ShelfTID", prevTrunk.getTarget());
        assertEquals(1, links.size());
    }

    @Test
    void testProcessWithTrunkTypeAndNullEqtObject() {
        // Set up previous component with TRUNK type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRUNK);

        // Create a dummy link to represent the previous state
        Link prevTrunk = new Link();
        prevTrunk.setTarget("ExistingTarget");
        links.add(prevTrunk);

        // Prepare the current ClrComponent without a valid PortRef
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.PORT);
        clrComponent.setEquipmentComp(Collections.emptyList());

        // List to simulate the ClrComponent history
        List<ClrComponent> clrComponentList = Arrays.asList(prevClrComponent, clrComponent);

        // Run the process method
        portProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify that a new equipment is created and target is updated correctly
        assertNotEquals("ExistingTarget", prevTrunk.getTarget());
        assertTrue(prevTrunk.getTarget().startsWith(CommonWrapperConstants.UNKNOWN));
        assertEquals(1, links.size());
    }
}
```

### Explanation:

1. **testProcessWithTrunkTypeAndValidEqtObject**:
   - Sets up a scenario where the previous component is of type `TRUNK` and the current component has a valid `PortRef`. The test checks that the link's target is updated to the new port ID.

2. **testProcessWithTrunkTypeAndNullPortID**:
   - Tests the case where the `PortRef` in the current component has a null `portID` but provides a `shelfTID`. The target should be updated to the `shelfTID`.

3. **testProcessWithTrunkTypeAndNullEqtObject**:
   - Simulates the condition where no valid `PortRef` is available, forcing the creation of a new equipment object. The test ensures that a new target is correctly generated and set.

These tests cover different logical branches of the `TRUNK` condition in the `PortProcessor` class, ensuring comprehensive coverage of this part of the code. Adjust constants and behavior according to your actual implementation and constants class.