The error you are encountering occurs because `when()` is being called on an actual method of the class instead of a mock. The `getValueFromNormalizedMsg` method should be mocked properly. One way to achieve this is to use a spy on the `AlarmRepositoryImpl` class and then mock the specific method calls.

Here's the revised code:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import java.util.HashMap;
import java.util.Map;

class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 0);
        perceivedSeverityMap.put("Cleared", -1);

        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 0);
        alarmStateMap.put("Uncleared", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
    }

    @Test
    void testCreateAlarm_perceivedSeverityNullAndStateCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = Mockito.spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Cleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn(null).when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Cleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityEmptyAndStateCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = Mockito.spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Cleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn("").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Cleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityNotNullAndStateCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = Mockito.spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Cleared\", \"perceivedSeverity\": \"Indeterminate\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn("Indeterminate").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Cleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityNullAndStateNotCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = Mockito.spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Uncleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn(null).when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Uncleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityEmptyAndStateNotCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = Mockito.spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Uncleared\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn("").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Uncleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_perceivedSeverityNotNullAndStateNotCleared() throws Exception {
        AlarmRepositoryImpl spyAlarmRepositoryImpl = Mockito.spy(alarmRepositoryImpl);
        String msg = "{\"State\": \"Uncleared\", \"perceivedSeverity\": \"Indeterminate\"}";
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(msg);

        doReturn("Indeterminate").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "perceivedSeverity");
        doReturn("Uncleared").when(spyAlarmRepositoryImpl).getValueFromNormalizedMsg(jsonNode, "State");

        Alarm alarm = spyAlarmRepositoryImpl.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(0, alarm.getPerceivedSeverity());
    }
}
```

In this revised code, we use a spy on the `alarmRepositoryImpl` object to allow partial mocking. This way, we can mock the `getValueFromNormalizedMsg` method calls while still using the actual `createAlarm` method.

Each test case creates a spy of the `alarmRepositoryImpl` and mocks the `getValueFromNormalizedMsg` method to return the desired values, ensuring that the specific branches in the `else if` condition are covered.