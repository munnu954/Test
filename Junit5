```java
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class MtnInsightsValidatorTest {

    @Mock
    private MtnInsightsRequest insightsRequest;
    @Mock
    private ServiceHeader serviceHeader;
    @Mock
    private MtnInsightsAttributes mtnInsightsAttributes;
    @Mock
    private MtnInsightsSearchRequest mtnInsightsSearchRequest;
    @Mock
    private MtnInsightsSearchParam serviceRequest;
    private MtnInsightsValidator validator;

    @BeforeEach
    void setup() throws InvalidRequestException {
        validator = new MtnInsightsValidator();

        when(insightsRequest.getRequestType()).thenReturn(InsightsRequestType.INSERTMTNINSIGHTS);
        when(insightsRequest.getServiceHeader()).thenReturn(serviceHeader);
        when(insightsRequest.getKeyAttributes()).thenReturn(mtnInsightsAttributes);
        when(insightsRequest.getListKeyAttributes()).thenReturn(new MtnInsightsAttributes[]{mtnInsightsAttributes});

        when(mtnInsightsSearchRequest.getServiceRequest()).thenReturn(serviceRequest);
        when(serviceRequest.getMtn()).thenReturn("MTN123");
        when(serviceRequest.getEcpdId()).thenReturn("ECPD123");
        when(serviceRequest.getInsightCategory()).thenReturn(new String[]{"VBGNxOutage"});
        when(serviceRequest.getInsightName()).thenReturn(new String[]{"mtnoutage"});
    }

    @Nested
    @DisplayName("Validate method with Service Header and InsightsRequestType")
    class ValidateMethod {

        @Test
        @DisplayName("Valid request with empty Service Header")
        void validate_emptyServiceHeader() throws InvalidRequestException {
            when(insightsRequest.getServiceHeader()).thenReturn(null);

            // Act
            validator.validate(insightsRequest);

            // Assert
            // No exception should be thrown
        }

        @Test
        @DisplayName("Valid request with non-empty Service Header")
        void validate_nonEmptyServiceHeader() throws InvalidRequestException {
            when(serviceHeader.getClientId()).thenReturn("client");
            when(serviceHeader.getClientTransactionId()).thenReturn("clientTransactionId");

            // Act
            validator.validate(insightsRequest);

            // Assert
            // No exception should be thrown
        }

        @Test
        @DisplayName("Valid request with not equal request type")
        void validate_invalidRequestType() {
            when(insightsRequest.getRequestType()).thenReturn(InsightsRequestType.GETMTNINSIGHTS);

            // Act & Assert
            assertThrows(InvalidRequestException.class, () -> validator.validate(insightsRequest));
        }

        @ParameterizedTest
        @MethodSource("provideNullKeys")
        @DisplayName("Valid request with null key attributes")
        void validate_nullKeys(MtnInsightsAttributes keys) {
            when(insightsRequest.getKeyAttributes()).thenReturn(keys);

            // Act & Assert
            assertThrows(InvalidRequestException.class, () -> validator.validate(insightsRequest));
        }

        Stream<MtnInsightsAttributes> provideNullKeys() {
            return Stream.of(null, new MtnInsightsAttributes());
        }

        @ParameterizedTest
        @MethodSource("provideEmptyKeys")
        @DisplayName("Valid request with empty key attributes")
        void validate_emptyKeys(MtnInsightsAttributes keys) {
            when(insightsRequest.getKeyAttributes()).thenReturn(keys);
            when(keys.getEcpdId()).thenReturn(null);
            when(keys.getMtn()).thenReturn(null);
            when(keys.getInsightCategory()).thenReturn(null);
            when(keys.getInsightName()).thenReturn(null);
            when(keys.getOutageId()).thenReturn(null);

            // Act & Assert
            assertThrows(InvalidRequestException.class, () -> validator.validate(insightsRequest));
        }

        Stream<MtnInsightsAttributes> provideEmptyKeys() {
            return Stream.of(null, new MtnInsightsAttributes());
        }

        @Test
        @DisplayName("Valid request with non-empty key attributes")
        void validate_nonEmptyKeys() throws InvalidRequestException {
            when(mtnInsightsAttributes.getEcpdId()).thenReturn("ECPD123");
            when(mtnInsightsAttributes.getMtn()).thenReturn("MTN123");
            when(mtnInsightsAttributes.getInsightCategory()).thenReturn("VBGNxOutage");
            when(mtnInsightsAttributes.getInsightName()).thenReturn("mtnoutage");
            when(mtnInsightsAttributes.getOutageId()).thenReturn("Outage123");

            // Act
            validator.validate(insightsRequest);

            // Assert
            // No exception should be thrown
        }

        @ParameterizedTest
        @MethodSource("provideNullListKeys")
        @DisplayName("Valid request with null list key attribute")
        void validate_nullListKey(MtnInsightsAttributes[] keys) {
            when(insightsRequest.getListKeyAttributes()).thenReturn(keys);

            // Act & Assert
            assertThrows(InvalidRequestException.class, () -> validator.validate(insightsRequest));
        }

        Stream<MtnInsightsAttributes[]> provideNullListKeys() {
            return Stream.of(null, new MtnInsightsAttributes[]{null}, new MtnInsightsAttributes[]{new MtnInsightsAttributes(), new MtnInsightsAttributes()});
        }

        @ParameterizedTest
        @MethodSource("provideEmptyListKeys")
        @DisplayName("Valid request with empty list key attribute")
        void validate_emptyListKey(MtnInsightsAttributes[] keys) {
            when(insightsRequest.getListKeyAttributes()).thenReturn(keys);

            // Act & Assert
            assertThrows(InvalidRequestException.class, () -> validator.validate(insightsRequest));
        }

        Stream<MtnInsightsAttributes[]> provideEmptyListKeys() {
            return Stream.of(new MtnInsightsAttributes[]{new MtnInsightsAttributes(), new MtnInsightsAttributes()});
        }
    }

    @Nested
    @DisplayName("validateIterator method")
    class ValidateIterator {

        @Test
        @DisplayName("Valid input in MtnInsightsAttributes")
        void validateIterator_allFilled() throws InvalidRequestException {
            when(mtnInsightsAttributes.getEcpdId()).thenReturn("ECPD123");
            when(mtnInsightsAttributes.getMtn()).thenReturn("MTN123");
            when(mtnInsightsAttributes.getInsightCategory()).thenReturn("VBGNxOutage");
            when(mtnInsightsAttributes.getInsightName()).thenReturn("mtnoutage");
            when(mtnInsightsAttributes.getOutageId()).thenReturn("Outage123");

            // Act
            validator.validateIterator(null, mtnInsightsAttributes, "");

            // Assert
            // No exception should be thrown
        }

        @Test
        @DisplayName("Exception is thrown when message is blank")
        void validateIterator_emptyMessage() {
            String message = null;

            // Act & Assert
            assertThrows(InvalidRequestException.class, () -> validator.validateIterator(message, mtnInsightsAttributes, ""));
        }

        @Test
        @DisplayName("Exception is thrown when MtnInsightsAttributes is blank")
        void validateIterator_nullAttributes() {
            // Act & Assert
            assertThrows(InvalidRequestException.class, () -> validator.validateIterator("message", null, ""));
        }

        @Test
        @DisplayName("Exception is not thrown when key attributes are not of KeyAttributes type")
        void validateIterator_notKeyAttributes() throws InvalidRequestException {
            // Act
            when(mtnInsightsAttributes.getEcpdId()).thenReturn("ECPD123");
            validator.validateIterator("message", mtnInsightsAttributes, "KeyAttributes");

            // Assert
            // No exception should be thrown
        }

        @Test
        @DisplayName("Exception is not thrown when list key attributes is not of ListKeyAttributes type")
        void validateIterator_notListKeyAttributes() throws InvalidRequestException {
            // Act
            when(mtnInsightsAttributes.getEcpdId()).thenReturn("ECPD123");
            validator.validateIterator("message", mtnInsightsAttributes, "ListKeyAttributes");

            // Assert
            // No exception should be thrown
        }

        