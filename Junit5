Sure, let's update the `CoconutServiceVersion3` class to include the logic for conditionally appending `locationCLLI` and `siteName` parameters to the `finalQuery` in the `queryBasedOnParameter` method.

Here's the updated `CoconutServiceVersion3` class:

```java
@Service
public class CoconutServiceVersion3 {

    @Autowired
    CoconutDeviceDao coconutDeviceDao;

    @Autowired
    EuipmentListCoconutDeviceDao euipmentListCoconutDeviceDao;

    @Autowired
    EquipmentListCoconutDeviceV3Dao equipmentListCoconutDeviceV3Dao;

    private CoconutDeviceMSConstants coconutDeviceMSConstants;

    private static Logger logger = LoggerFactory.getLogger(CoconutServiceVersion3.class);

    // Newly created for v3api
    public UTSEquipmentList getCOCONUTEquipListV3(EquipmentInputRequest request, UTSEquipmentList utsEquipmentList) throws InternalServerErrorException, NoDataFoundException, InterruptedException, ExecutionException, DaoException {
        try {
            String qry = null;
            String fullQuery = null;
            Map<String, Object> criteria = request.getRequestParameters();
            qry = queryBasedOnParameter(criteria);
            fullQuery = "select COUNT(*) from (" + qry + ")";
            Integer skip = 0;
            Integer limit = 10;

            if (criteria.containsKey("pageNo")) {
                if (criteria.get("pageNo").equals("1")) {
                    skip = 0;
                } else {
                    skip = (Integer.parseInt(criteria.get("pageNo").toString()) * Integer.parseInt(criteria.get("size").toString()));
                    skip = skip - Integer.parseInt(criteria.get("size").toString());
                }
            } else {
                skip = 0;
            }

            if (criteria.containsKey("size")) {
                limit = skip + Integer.parseInt(criteria.get("size").toString());
            } else {
                limit = 10;
            }

            qry = "select * from (select t.*, rownum as rn from (" + qry;
            qry = qry.concat(" ) t ) WHERE rn BETWEEN " + skip + " and " + limit + " ");

            if (criteria.containsKey("sortByField")) {
                qry = qry.concat(" order by " + criteria.get("sortByField") + " ");
            }

            if (criteria.containsKey("sortDirection")) {
                qry = qry.concat(" " + criteria.get("sortDirection") + " ");
            }

            UTSEquipmentList response = new UTSEquipmentList();
            response = equipmentListCoconutDeviceV3Dao.getEquipListDaoV3(criteria, qry, fullQuery, utsEquipmentList, request);
            return response;
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            throw new InternalServerErrorException(ex.getMessage());
        }
    }

    private String queryBasedOnParameter(Map<String, Object> queryParams) {
        String query = coconutDeviceMSConstants.COCONUT_V3_SITE_QUERY;
        StringJoiner finalQuery = new StringJoiner(" ");
        finalQuery.add(query);

        if (queryParams.containsKey("locationCLLI") && queryParams.get("locationCLLI") != null) {
            finalQuery.add("AND locationCLLI = '" + queryParams.get("locationCLLI") + "'");
        }

        if (queryParams.containsKey("siteName") && queryParams.get("siteName") != null) {
            finalQuery.add("AND siteName = '" + queryParams.get("siteName") + "'");
        }

        return finalQuery.toString();
    }
}
```

Here's a breakdown of the changes:

1. **`queryBasedOnParameter` Method**: The method now checks for the presence of `locationCLLI` and `siteName` in the `queryParams` map and appends them to the `finalQuery` if they are present.
2. **`getCOCONUTEquipListV3` Method**: This method remains mostly unchanged, but it will now use the updated query from `queryBasedOnParameter`.

This implementation ensures that the `finalQuery` will include the additional conditions for `locationCLLI` and `siteName` only if they are present in the `queryParams`, thus making it dynamic and adaptable to different inputs.