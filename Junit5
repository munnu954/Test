import org.junit.Test;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import static org.junit.Assert.assertEquals;

public class CoconutServiceVersion3Test {

    @Test
    public void testQueryBasedOnParameter_siteNamePresent() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        CoconutServiceVersion3 coconutService = new CoconutServiceVersion3();
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "TestSiteName");

        String result = (String) method.invoke(coconutService, queryParams);

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS 'unparsedAddress', site.city as city, site.state as state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS 'createdBySys' FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not null AND LOWER(site.site_name) like 'testsitename'";
        assertEquals(expectedQuery, result);
    }

    @Test
    public void testQueryBasedOnParameter_locationCLLIPresent() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        CoconutServiceVersion3 coconutService = new CoconutServiceVersion3();
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "TestCLLI");

        String result = (String) method.invoke(coconutService, queryParams);

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS 'unparsedAddress', site.city as city, site.state as state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS 'createdBySys' FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not null AND LOWER(site.clli_code) like 'testclli'";
        assertEquals(expectedQuery, result);
    }

    @Test
    public void testQueryBasedOnParameter_bothPresent() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        CoconutServiceVersion3 coconutService = new CoconutServiceVersion3();
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "TestSiteName");
        queryParams.put("locationCLLI", "TestCLLI");

        String result = (String) method.invoke(coconutService, queryParams);

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS 'unparsedAddress', site.city as city, site.state as state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS 'createdBySys' FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not null AND LOWER(site.site_name) like 'testsitename' AND LOWER(site.clli_code) like 'testclli'";
        assertEquals(expectedQuery, result);
    }

    @Test
    public void testQueryBasedOnParameter_neitherPresent() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        CoconutServiceVersion3 coconutService = new CoconutServiceVersion3();
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);

        Map<String, Object> queryParams = new HashMap<>();

        String result = (String) method.invoke(coconutService, queryParams);

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS 'unparsedAddress', site.city as city, site.state as state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS 'createdBySys' FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not null";
        assertEquals(expectedQuery, result);
    }
}