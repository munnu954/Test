@ExtendWith(SpringExtension.class)
class EventsMessageListenerTest {

    @InjectMocks
    EventsMessageListener listener;

    @Mock
    AccountEcpdService accountService;

    @Mock
    KafkaTemplate kafkaTemplate;

    @Mock
    KafkaFalloutService failedMessageService;
    
    @Mock
    BatchLoaderUtils utils;

    @Test
    void onMessage_shouldPostMessageToKafkaTopic_whenSensitivityCheckPassed() throws JsonProcessingException {
        // Given
        String transactionId = UUID.randomUUID().toString();
        String payload = "valid-payload";
        String producerTopic = "target-topic";
        String insightName = "audit-event";
        char sensitivityCheckDone = 'Y';
        RequestJSONString requestJSONString = createRequestJSONString();
        String updatedPayload = "updated-payload";

        Mono<String> ecpd = Mono.just("ecpd");
        when(accountService.getEcpdByAcctId("account-number")).thenReturn(ecpd);

        List<Header> headers = new ArrayList<>();
        ProducerRecord<String, String> producerRecord =
                new ProducerRecord<>(producerTopic, null, transactionId, updatedPayload, headers);

        // When
        listener.onMessage(null, payload);

        // Then
        verify(accountService).getEcpdByAcctId("account-number");
        verify(utils).convert(eq(payload), eq(ServiceMessage.class));
        verify(utils).convert(argThat(MatchesRegex.matches("\\{(.*?)}")), eq(RequestJSONString.class));
        verify(utils).isValidData("sensitivity");

        verify(kafkaTemplate).send(producerRecord);
        verifyNoMoreInteractions(kafkaTemplate);

        verify(failedMessageService, never()).saveFailedRecords(anyString(), anyString(), anyString(), anyString(), anyChar());
    }

    private RequestJSONString createRequestJSONString() {
        RequestJSONString requestJSONString = new RequestJSONString();
        Body body = new Body();
        CustomerDetails relinquishingCustomerDetails = new CustomerDetails();
        relinquishingCustomerDetails.setAccountNumber("account-number");
        body.setRelinquishingCustomerDetails(relinquishingCustomerDetails);
        Service service = new Service();
        service.setServiceBody(body);
        requestJSONString.setService(service);
        return requestJSONString;
    }
}