import java.nio.file.*;
import java.util.concurrent.TimeUnit;

// Existing imports

public class SSHService {
    // Existing class members and constructor

    public boolean retrieveData(SpaceCollector sp, String dateReceived, String auditTopic) {
        try {
            LOGGER.info("Entered SSH service");
            String sshUsername = sp.getUserName();
            String sshHost = sp.getUrl();
            String sshPassword = sp.getPassword();
            int port = sp.getPort().intValue();

            JSch jsch = jschFactory.createJSch();
            Session session = jsch.getSession(sshUsername, sshHost, port);
            session.setPassword(sshPassword);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();

            ChannelSftp channelSftp = (ChannelSftp) session.openChannel("sftp");
            channelSftp.connect();

            String remoteDirectory = FileUtil.getDirectory(sp.getInputFilePath());
            String localDirectory = FileUtil.getDirectory(sp.getOutputFilePath());
            LOGGER.info("remoteDirectory: " + remoteDirectory + " localDirectory: " + localDirectory);

            retrieveAndProcessDirectory(sp, dateReceived, auditTopic, remoteDirectory, localDirectory, channelSftp);

            channelSftp.disconnect();
            session.disconnect();

            return true;
        } catch (Exception e) {
            LOGGER.error("Error in retrieveData()", e);
            return false;
        }
    }

    private void retrieveAndProcessDirectory(SpaceCollector sp, String dateReceived, String auditTopic,
                                             String remoteDirectory, String localDirectory, ChannelSftp channelSftp)
            throws Exception {
        Vector<ChannelSftp.LsEntry> files = channelSftp.ls(remoteDirectory);
        Map<String, String> auditStatusMap = getAuditStatusMap(files, remoteDirectory);

        for (ChannelSftp.LsEntry file : files) {
            if (!file.getAttrs().isDir()) {
                if (wasModifiedInLast24Hours(file.getAttrs().getMTime() * 1000L)) { // Convert to milliseconds
                    String filePath = remoteDirectory + "/" + file.getFilename();
                    String status = auditStatusMap.get(filePath);
                    if (status == null || "COLLECTION_FAILED".equals(status)) {
                        String outputFile = localDirectory + "/" + file.getFilename();
                        LOGGER.info("in filePath: " + filePath + " out filePath: " + outputFile);
                        FileUtil.downloadFile(outputStreamCreator.create(outputFile), channelSftp.get(filePath),
                                filePath, outputFile, sp.getOutputFilePath());
                        processDownloadedFile(sp, dateReceived, auditTopic, outputFile, localDirectory);
                    }
                }
            } else if (!".".equals(file.getFilename()) && !"..".equals(file.getFilename())) {
                String subRemoteDirectory = remoteDirectory + "/" + file.getFilename();
                String subLocalDirectory = localDirectory + "/" + file.getFilename();
                FileUtil.createDirectoryIfNotExists(subLocalDirectory);
                retrieveAndProcessDirectory(sp, dateReceived, auditTopic, subRemoteDirectory, subLocalDirectory, channelSftp);
            }
        }
    }

    private boolean wasModifiedInLast24Hours(long modificationTime) {
        long currentTime = System.currentTimeMillis();
        long diff = currentTime - modificationTime;
        return diff <= TimeUnit.HOURS.toMillis(24);
    }

    private void processDownloadedFile(SpaceCollector sp, String dateReceived, String auditTopic,
                                       String outputFile, String localDirectory) throws Exception {
        // Existing implementation
    }

    private Map<String, String> getAuditStatusMap(Vector<ChannelSftp.LsEntry> files, String remoteDirectory) {
        // Implementation of getAuditStatusMap
        return new HashMap<>();
    }

    private CollectionAudit createAuditObject(SpaceCollector sp, String filePath, String status, String message) {
        // Implementation of createAuditObject
        return new CollectionAudit();
    }
}