Sure, here is a JUnit 5 test class that covers all the branches for the given condition in the `AlarmRepositoryImpl` class:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class AlarmRepositoryImplTest {

    @Mock
    private PostgresConf postgresConf;

    private AlarmRepositoryImpl alarmRepository;

    private ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        alarmRepository = new AlarmRepositoryImpl();
        alarmRepository.setPostgresConf(postgresConf);
    }

    @Test
    public void testPerceivedSeverityNullAndStateCleared() throws Exception {
        // Setup
        String json = "{\"externalAlarmId\":\"1\",\"sourceSystemId\":\"1\",\"alarmType\":\"1\",\"clearTime\":\"2023-01-01T00:00:00Z\",\"perceivedSeverity\":null,\"serviceAffecting\":\"true\",\"State\":\"Cleared\",\"probableCause\":\"Cause\",\"alarmRaisedTime\":\"2023-01-01T00:00:00Z\",\"alarmReportingTime\":\"2023-01-01T00:00:00Z\",\"alarmUpdatedTime\":\"2023-01-01T00:00:00Z\",\"alarmDetails\":\"Details\",\"alarmIdentity\":\"1\",\"alarmedObject\":\"Object\",\"alarmedObjectType\":\"Type\",\"TID\":\"TID\",\"reportingObject\":\"Reporting\",\"specificProblem\":\"Problem\",\"AID\":\"AID\",\"componentID\":\"Component\",\"rawMessage\":\"Raw\",\"extTopologyDetails\":\"Ext\",\"topologyDetails\":\"Topo\",\"Count\":\"10\",\"sequenceID\":\"1\",\"tag\":[\"Tag\"]}";

        JsonNode jsonNode = objectMapper.readTree(json);

        Map<String, Integer> stateMap = new HashMap<>();
        stateMap.put("Cleared", 2);

        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 0);

        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

        // Execute
        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        // Verify
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testPerceivedSeverityEmptyAndStateCleared() throws Exception {
        // Setup
        String json = "{\"externalAlarmId\":\"1\",\"sourceSystemId\":\"1\",\"alarmType\":\"1\",\"clearTime\":\"2023-01-01T00:00:00Z\",\"perceivedSeverity\":\"\",\"serviceAffecting\":\"true\",\"State\":\"Cleared\",\"probableCause\":\"Cause\",\"alarmRaisedTime\":\"2023-01-01T00:00:00Z\",\"alarmReportingTime\":\"2023-01-01T00:00:00Z\",\"alarmUpdatedTime\":\"2023-01-01T00:00:00Z\",\"alarmDetails\":\"Details\",\"alarmIdentity\":\"1\",\"alarmedObject\":\"Object\",\"alarmedObjectType\":\"Type\",\"TID\":\"TID\",\"reportingObject\":\"Reporting\",\"specificProblem\":\"Problem\",\"AID\":\"AID\",\"componentID\":\"Component\",\"rawMessage\":\"Raw\",\"extTopologyDetails\":\"Ext\",\"topologyDetails\":\"Topo\",\"Count\":\"10\",\"sequenceID\":\"1\",\"tag\":[\"Tag\"]}";

        JsonNode jsonNode = objectMapper.readTree(json);

        Map<String, Integer> stateMap = new HashMap<>();
        stateMap.put("Cleared", 2);

        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 0);

        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

        // Execute
        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        // Verify
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testPerceivedSeverityNotNullNotEmptyAndStateNotCleared() throws Exception {
        // Setup
        String json = "{\"externalAlarmId\":\"1\",\"sourceSystemId\":\"1\",\"alarmType\":\"1\",\"clearTime\":\"2023-01-01T00:00:00Z\",\"perceivedSeverity\":\"Critical\",\"serviceAffecting\":\"true\",\"State\":\"Active\",\"probableCause\":\"Cause\",\"alarmRaisedTime\":\"2023-01-01T00:00:00Z\",\"alarmReportingTime\":\"2023-01-01T00:00:00Z\",\"alarmUpdatedTime\":\"2023-01-01T00:00:00Z\",\"alarmDetails\":\"Details\",\"alarmIdentity\":\"1\",\"alarmedObject\":\"Object\",\"alarmedObjectType\":\"Type\",\"TID\":\"TID\",\"reportingObject\":\"Reporting\",\"specificProblem\":\"Problem\",\"AID\":\"AID\",\"componentID\":\"Component\",\"rawMessage\":\"Raw\",\"extTopologyDetails\":\"Ext\",\"topologyDetails\":\"Topo\",\"Count\":\"10\",\"sequenceID\":\"1\",\"tag\":[\"Tag\"]}";

        JsonNode jsonNode = objectMapper.readTree(json);

        Map<String, Integer> stateMap = new HashMap<>();
        stateMap.put("Active", 1);
        stateMap.put("Cleared", 2);

        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Critical", 5);
        perceivedSeverityMap.put("Indeterminate", 0);

        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

        // Execute
        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        // Verify
        assertEquals(5, alarm.getPerceivedSeverity());
    }

    @Test
    public void testPerceivedSeverityNullAndStateNotCleared() throws Exception {
        // Setup
        String json = "{\"externalAlarmId\":\"1\",\"sourceSystemId\":\"1\",\"alarmType\":\"1\",\"clearTime\":\"2023-01-01T00:00:00Z\",\"perceivedSeverity\":null,\"serviceAffecting\":\"true\",\"State\":\"Active\",\"probableCause\":\"Cause\",\"alarmRaisedTime\":\"2023-01-01T00:00:00Z\",\"alarmReportingTime\":\"2023-01-01T00:00:00Z\",\"alarmUpdatedTime\":\"2023-01-01T00:00:00Z\",\"alarmDetails\":\"Details\",\"alarmIdentity\":\"1\",\"alarmedObject\":\"Object\",\"alarmedObjectType\":\"Type\",\"TID\":\"TID\",\"reportingObject\":\"Reporting\",\"specificProblem\":\"Problem\",\"AID\":\"AID\",\"componentID\":\"Component\",\"rawMessage\":\"Raw\",\"extTopologyDetails\":\"Ext\",\"topologyDetails\":\"Topo\",\"Count\":\"10\",\"sequenceID\":\"1\",\"tag\":[\"Tag\"]}";

        JsonNode jsonNode = objectMapper.readTree(json);

        Map<String, Integer> stateMap = new HashMap<>();
        stateMap.put("Active", 1);
        stateMap.put("Cleared", 2);

        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 0);

        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");

        // Execute
        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        // Verify
        assertEquals(0, alarm.getPerceivedSeverity());
    }

    @Test
    public void testPerceivedSeverityEmptyAndStateNotCleared() throws Exception {
        // Setup
        String json = "{\"externalAlarmId\":\"1\",\"sourceSystemId\":\"1\",\"alarmType\":\"1\",\"clearTime\":\"2023-01-01T00:00:00Z\",\"perceivedSeverity\":\"\",\"serviceAffecting\":\"true\",\"State\":\"Active\",\"probableCause\":\"Cause\",\"alarmRaisedTime\":\"2023-01-01T00:00:00Z\",\"alarmReportingTime\":\"2023-01-01T00:00:00Z\",\"alarmUpdatedTime\":\"2023-01-01T00:00:00Z\",\"alarmDetails\":\"Details\",\"alarmIdentity\":\"1\",\"alarmedObject\":\"Object\",\"alarmedObjectType\":\"Type\",\"TID\":\"TID\",\"reportingObject\":\"Reporting\",\"specificProblem\":\"Problem\",\"AID\":\"AID\",\"componentID\":\"Component\",\"rawMessage\":\"Raw\",\"extTopologyDetails\":\"Ext\",\"topologyDetails\":\"Topo\",\"Count\":\"10\",\"sequenceID\":\"1\",\"tag\":[\"Tag