Sure, here is the updated code:


public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {

    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        String[] headerRow = lines[2].split(","); // Here, we are picking the 3rd line as the headers

        for (int i = 3; i < lines.length; i++) { // Start from the 4th line (index 3) as data lines
            String[] data = lines[i].split(",");
            JSONObject obj = new JSONObject();

            if (headerRow.length == data.length) {
                for (int j = 0; j < data.length; j++) {
                    String jsonkey = headerRow[j].trim().replace("\"", "");
                    String jsonvalue = data[j].trim().replace("\"", "");
                    obj.put(jsonkey, jsonvalue);
                }
                this.successIntCounter.add(1);
                collector.collect(obj.toString());
            } else {
                this.failureIntCounter.add(1);
            }
        }
    }
}


I have removed the hardcoded line1 and line2's jsonkeys #SystemId and #NodeIP from the code. I have also combined the two transformed JSONs into one