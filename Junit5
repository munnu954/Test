Here is the JUnit 5 test case code to cover all the branches of the specified block, ensuring 100% code coverage:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private Logger LOG;

    @Mock
    private PostgresConf postgresConf;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    private ObjectMapper objectMapper;
    private Map<String, Integer> perceivedSeverityMap;
    private Map<String, Integer> alarmStateMap;

    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper();
        perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("indeterminate", 4);
        alarmStateMap = new HashMap<>();
        alarmStateMap.put("cleared", 0);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("indeterminate");
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNull_StateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":null,\"State\":\"cleared\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getAlarmTypeOther()).thenReturn("other");

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmpty_StateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"\",\"State\":\"cleared\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getAlarmTypeOther()).thenReturn("other");

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotNull_StateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"2\",\"State\":\"cleared\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getAlarmTypeOther()).thenReturn("other");

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(4, alarm.getPerceivedSeverity()); // Assuming 4 is indeterminate severity
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNotNull_StateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"2\",\"State\":\"active\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getAlarmTypeOther()).thenReturn("other");

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(4, alarm.getPerceivedSeverity()); // Assuming 4 is indeterminate severity
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNull_StateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":null,\"State\":\"active\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getAlarmTypeOther()).thenReturn("other");

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(4, alarm.getPerceivedSeverity()); // Assuming 4 is indeterminate severity
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmpty_StateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"\",\"State\":\"active\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getAlarmTypeOther()).thenReturn("other");

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(4, alarm.getPerceivedSeverity()); // Assuming 4 is indeterminate severity
    }

    @Test
    void testCreateAlarm_PerceivedSeverityNull_StateCleared_IndeterminateNotInMap() throws Exception {
        perceivedSeverityMap.remove("indeterminate");
        String msg = "{\"perceivedSeverity\":null,\"State\":\"cleared\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getAlarmTypeOther()).thenReturn("other");

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarm_PerceivedSeverityEmpty_StateCleared_IndeterminateNotInMap() throws Exception {
        perceivedSeverityMap.remove("indeterminate");
        String msg = "{\"perceivedSeverity\":\"\",\"State\":\"cleared\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        when(postgresConf.getAlarmTypeMap()).thenReturn(new HashMap<>());
        when(postgresConf.getAlarmStateNew()).thenReturn("new");
        when(postgresConf.getAlarmTypeOther()).thenReturn("other");

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }
}
```

This code includes JUnit 5 test cases for all possible branches of the specified block. The `Alarm` class is used as provided, and the necessary setup for the `PostgresConf` mock is included. The tests ensure coverage for different combinations of `perceivedSeverity` and `stateValue`.