import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CBRSSuppressionConstantsTest {

    @Test
    public void testConstants() {
        assertEquals("infieldOperator", CBRSSuppressionConstants.INFIELDOPERATOR);
        assertEquals("outfieldOperator", CBRSSuppressionConstants.OUTFIELDOPERATOR);
        assertEquals("field", CBRSSuppressionConstants.FIELD);
        assertEquals("value", CBRSSuppressionConstants.VALUE);
        assertEquals("ruletype", CBRSSuppressionConstants.RULETYPE);
        assertEquals("CBRS Suppression", CBRSSuppressionConstants.CBRSSUPPRESSION);
        assertEquals("EQUAL", CBRSSuppressionConstants.EQUAL);
        assertEquals("AND", CBRSSuppressionConstants.AND_OPERATOR);
        assertEquals("ruleType", CBRSSuppressionConstants.RULETYPE_RMF);
        assertEquals("ruleIsActive", CBRSSuppressionConstants.RULEISACTIVE);
        assertEquals("ruleCriteria", CBRSSuppressionConstants.RULECRITERIA);
        assertEquals("ruleID", CBRSSuppressionConstants.RULEID_RMF);
        assertEquals("ruleMatchingCriteria", CBRSSuppressionConstants.RULEMATCHINGCRITERIA_RMF);
        assertEquals("ruleFunctionParameters", CBRSSuppressionConstants.RULEFUNCTIONPARAMETERS_RMF);
        assertEquals("ruleActionParameters", CBRSSuppressionConstants.RULEACTIONPARAMETERS_RMF);
        assertEquals("ruleDetails", CBRSSuppressionConstants.RULEDETAILS_RMF);
        assertEquals("ruleName", CBRSSuppressionConstants.RULENAME_RMF);
        assertEquals("rulePriority", CBRSSuppressionConstants.RULEPRIORITY_RMF);
        assertEquals("ruleVersion", CBRSSuppressionConstants.RULEVERSION_RMF);
        assertEquals("ruleDetailsID", CBRSSuppressionConstants.RULE_DETAILS_ID_RMF);
        assertEquals("timeWindow", CBRSSuppressionConstants.TIME_WINDOW);
        assertEquals("timeWindowUnits", CBRSSuppressionConstants.TIME_WINDOW_UNITS);
        assertEquals("suppression ThresholdCount", CBRSSuppressionConstants.SUPPRESSION_THRESHOLD_COUNT);
        assertEquals("suppressionKey", CBRSSuppressionConstants.SUPPRESSION_KEY);
        assertEquals("suppressionInterval", CBRSSuppressionConstants.SUPPRESSION_INTERVAL);
        assertEquals("suppressionIntervalUnits", CBRSSuppressionConstants.SUPPRESSION_INTERVAL_UNITS);
        assertEquals("suppressParentAlarms", CBRSSuppressionConstants.SUPPRESS_PARENT_ALARMS);
        assertEquals("suppressChildAlarms", CBRSSuppressionConstants.SUPPRESS_CHILD_ALARMS);
        assertEquals("alarmTemplate", CBRSSuppressionConstants.ALARM_TEMPLATE);
        assertEquals("logSuppressionEvent", CBRSSuppressionConstants.LOG_SUPPRESSION_EVENT);
    }
}