The issue you're encountering suggests that the `CircuitDetailResponse` is not returning `null` even when the response from `restClientUtil.callEndpoint` is `null`. To ensure the method returns `null` when the response is `null`, let's revisit the logic and test case setup.

Here's how you can address this and ensure the test case behaves correctly:

1. **Ensure the Logic of `getCircuitDetails`**: Verify that the `getCircuitDetails` method in the `CircuitDetailsProvider` class returns `null` when the response from the API is `null`.

2. **Test Case Configuration**: Confirm that the `when` clause in the test case accurately simulates a `null` response from the REST client.

Here's the updated test case code:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Field;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpMethod;

public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    private static final String VALID_RESPONSE = "{\"field\":\"value\"}";
    private static final String BASE_URL = "http://mockServiceName";
    private static final String CKT_DETAIL_URI = "/details?circuitId=#circuitId#&sourceSys=#sourceSys#";

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        setPrivateField(circuitDetailsProvider, "cktDetailUri", CKT_DETAIL_URI);
        setPrivateField(circuitDetailsProvider, "cktDetServiceName", "mockServiceName");
    }

    private void setPrivateField(Object targetObject, String fieldName, Object value) throws Exception {
        Field field = targetObject.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(targetObject, value);
    }

    @Test
    public void testGetCircuitDetails_ResponseIsNotNull() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        assertEquals("value", response.getField()); // Assuming the response JSON maps to a field in CircuitDetailResponse
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_ResponseIsNull() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(null);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNull(response, "Expected response to be null when API returns null");
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }
}
```

### Key Points:

- **Mocking the Null Response**: The `when(restClientUtil.callEndpoint(...)).thenReturn(null);` line is crucial to simulate a `null` API response.

- **Assertion**: The `assertNull(response, "Expected response to be null when API returns null");` line checks that `response` is `null`, which should be the case if the API returns `null`.

- **Ensure Method Logic**: Double-check the `getCircuitDetails` method to make sure it is set to return `null` if the API call result (`response`) is `null`. If there is any transformation or default object creation that happens when `response` is `null`, that logic will need to be adjusted to accommodate this test case.