
  UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
  auditMsg.setInputFilePath(Utils.getInputFilePath());
  auditMsg.setUrl(Utils.getUrl());
  auditMsg.setPort(Utils.getPort());
  auditMsg.setOutputFilePath(Utils.getOutputFilePath());
  auditMsg.setDelimiters(Utils.getDelimiters());
  auditMsg.setFileType(fileType);
  auditMsg.setDate_received(new DateTime());
  auditMsg.setDate_processed(new DateTime());
  auditMsg.setNo_of_records_in_the_file(Utils.getNo_of_records_in_the_file());
  auditMsg.setNo_of_records_processed(Utils.getNo_of_records_processed());
  auditMsg.setNo_of_records_failed(Utils.getNo_of_records_failed());
  auditMsg.setJob_id(UUID.randomUUID());
  auditMsg.setJar_id(UUID.randomUUID());
  if (isSuccess) {
    auditMsg.setJob_status(JobStatus.SUCCESS);
  } else {
    auditMsg.setJob_status(JobStatus.FAILURE);
    auditMsg.setExceptions(Collections.singletonList(response.getStatusCode().toString()));
  }
  auditMsg.setCollector_id(Utils.getCollector_id());
  return Utils.sendMessage(auditMsg);
}

public boolean writeMessage(UnifiedAuditMessage auditMsg) {
  try {
    this.kafkaTemplate.send(topicName, auditMsg);
    Logger.info("Kafka status message {}", auditMsg);
    return true;
  } catch (Exception e) {
    Logger.error("Error sending message to Kafka", e);
    return false;
  }
}