To write the JUnit test cases for the `getDeviceDetailsv3()` method of the `IVAPPDeviceService` class, we can cover the following scenarios:

1. **Successful response from the data service**:
   - Create a mock `RestTemplate` and mock the `exchange()` method to return a successful `ResponseEntity` with the expected `UTSEquipmentList` object.
   - Verify that the method returns the expected `UTSEquipmentList` object.

2. **HttpServerErrorException during the data service call**:
   - Create a mock `RestTemplate` and mock the `exchange()` method to throw an `HttpServerErrorException`.
   - Verify that the method logs the appropriate error message.

3. **Other exceptions during the data service call**:
   - Create a mock `RestTemplate` and mock the `exchange()` method to throw a generic `Exception`.
   - Verify that the method logs the appropriate error message.

4. **No data found in the response**:
   - Create a mock `RestTemplate` and mock the `exchange()` method to return a `ResponseEntity` with a null `UTSEquipmentList` object.
   - Verify that the method throws a `NoDataFoundException`.

Here's the sample code for the JUnit test cases:

```java
@RunWith(MockitoJUnitRunner.class)
public class IVAPPDeviceServiceTest {

    @InjectMocks
    private IVAPPDeviceService iVAPPDeviceService;

    @Mock
    private IVAPPDeviceUtil iVAPPDeviceUtil;

    @Mock
    private RestTemplate restTemplate;

    @Test
    public void testGetDeviceDetailsv3_Success() throws NoDataFoundException {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());
        UTSEquipmentList expectedUtsEquipmentList = new UTSEquipmentList();
        expectedUtsEquipmentList.setEquipmentLst(new EquipmentLst());

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn("http://example.com");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(any(), any(), any(), eq(UTSEquipmentList.class))).thenReturn(ResponseEntity.ok(expectedUtsEquipmentList));

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, new UTSEquipmentList());

        // Assert
        assertSame(expectedUtsEquipmentList, result);
    }

    @Test
    public void testGetDeviceDetailsv3_HttpServerErrorException() throws NoDataFoundException {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn("http://example.com");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(any(), any(), any(), eq(UTSEquipmentList.class))).thenThrow(HttpServerErrorException.class);

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);

        // Assert
        assertSame(utsEquipmentList, result);
        verify(iVAPPDeviceService.LOGGER, times(1)).info(contains("Internal Server Exception happened"));
    }

    @Test
    public void testGetDeviceDetailsv3_OtherException() throws NoDataFoundException {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn("http://example.com");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(any(), any(), any(), eq(UTSEquipmentList.class))).thenThrow(RuntimeException.class);

        // Act
        UTSEquipmentList result = iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);

        // Assert
        assertSame(utsEquipmentList, result);
        verify(iVAPPDeviceService.LOGGER, times(1)).info(contains("Exception happened"));
    }

    @Test(expected = NoDataFoundException.class)
    public void testGetDeviceDetailsv3_NoDataFound() throws NoDataFoundException {
        // Arrange
        DeviceListInputRequest request = new DeviceListInputRequest();
        request.setRequestParameters(new HashMap<>());
        UTSEquipmentList utsEquipmentList = new UTSEquipmentList();

        when(iVAPPDeviceUtil.findServiceByName(any())).thenReturn("http://example.com");
        when(iVAPPDeviceUtil.getHttpHeaders()).thenReturn(new HttpHeaders());
        when(restTemplate.exchange(any(), any(), any(), eq(UTSEquipmentList.class))).thenReturn(ResponseEntity.ok(null));

        // Act
        iVAPPDeviceService.getDeviceDetailsv3(request, utsEquipmentList);
    }
}
```

This set of test cases covers the following scenarios:

1. **Successful response from the data service**: Verifies that the method returns the expected `UTSEquipmentList` object when the data service call is successful.

2. **HttpServerErrorException during the data service call**: Verifies that the method logs the appropriate error message when an `HttpServerErrorException` is thrown during the data service call.

3. **Other exceptions during the data service call**: Verifies that the method logs the appropriate error message when a generic `Exception` is thrown during the data service call.

4. **No data found in the response**: Verifies that the method throws a `NoDataFoundException` when the data service call returns a null `UTSEquipmentList` object.

These test cases should provide 100% code coverage for the `getDeviceDetailsv3()` method of the `IVAPPDeviceService` class.