Certainly! Here are additional JUnit 5 test cases to cover the else if block of the `postAlarmForEachIteration` method:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private SqlRowSet rs;

    @Mock
    private Utils utils;

    @Mock
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private Alarm alarm;

    @Test
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    @Rollback
    public void testPostAlarmForEachIteration_AlarmStateUnclorrelated() throws Exception {
        int state = postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateUnclorrelated());
        when(jdbcTemplate.queryForRowSet(anyString(), any(Object[].class))).thenReturn(rs);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.parse("2022-01-01T10:00:00Z")));
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of(
                postgresConf.getAlarmStateCleared(), 1,
                postgresConf.getAlarmStateUnclorrelated(), 2
        ));
        when(rs.getInt("state")).thenReturn(1);
        when(utils.compareTime(anyString(), anyString(), any(Alarm.class))).thenReturn(-1);

        alarmRepository.postAlarmForEachIteration(alarm, "testCompId");

        verify(alarm).setState(state);
    }

    @Test
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    @Rollback
    public void testPostAlarmForEachIteration_AlarmStateRelated() throws Exception {
        int state = postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateRelated());
        when(jdbcTemplate.queryForRowSet(anyString(), any(Object[].class))).thenReturn(rs);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.parse("2022-01-01T10:00:00Z")));
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of(
                postgresConf.getAlarmStateCleared(), 1,
                postgresConf.getAlarmStateRelated(), 2
        ));
        when(rs.getInt("state")).thenReturn(1);
        when(utils.compareTime(anyString(), anyString(), any(Alarm.class))).thenReturn(-1);

        alarmRepository.postAlarmForEachIteration(alarm, "testCompId");

        verify(alarm).setState(state);
    }

    @Test
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    @Rollback
    public void testPostAlarmForEachIteration_AlarmStateRootCause() throws Exception {
        int state = postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateRootCause());
        when(jdbcTemplate.queryForRowSet(anyString(), any(Object[].class))).thenReturn(rs);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.parse("2022-01-01T10:00:00Z")));
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of(
                postgresConf.getAlarmStateCleared(), 1,
                postgresConf.getAlarmStateRootCause(), 3
        ));
        when(rs.getInt("state")).thenReturn(1);
        when(utils.compareTime(anyString(), anyString(), any(Alarm.class))).thenReturn(-1);

        alarmRepository.postAlarmForEachIteration(alarm, "testCompId");

        verify(alarm).setState(state);
    }

    @Test
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    @Rollback
    public void testPostAlarmForEachIteration_AlarmStateStandalone() throws Exception {
        int state = postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateStandalone());
        when(jdbcTemplate.queryForRowSet(anyString(), any(Object[].class))).thenReturn(rs);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.parse("2022-01-01T10:00:00Z")));
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of(
                postgresConf.getAlarmStateCleared(), 1,
                postgresConf.get