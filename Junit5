import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Mock
    private PostgresConf postgresConf;

    @Test
    public void testCreateAlarm_PerceivedSeverityIsNullAndStateIsCleared() throws Exception {
        // Mocked values
        String msg = "{\"externalAlarmId\":\"12345\",\"sourceSystemId\":\"SS123\",\"alarmType\":\"Type1\",\"state\":\"cleared\"}";

        // Mocking PostgresConf
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("cleared", 1));
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn(0);

        // Test
        Alarm result = alarmRepositoryImpl.createAlarm(msg);

        // Verification
        assertEquals(-1, result.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_PerceivedSeverityIsEmptyAndStateIsNotCleared() throws Exception {
        // Mocked values
        String msg = "{\"externalAlarmId\":\"12345\",\"sourceSystemId\":\"SS123\",\"alarmType\":\"Type1\",\"state\":\"new\",\"perceivedSeverity\":\"\"}";

        // Mocking PostgresConf
        when(postgresConf.getAlarmStateMap()).thenReturn(Map.of("new", 1));
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn(0);

        // Test
        Alarm result = alarmRepositoryImpl.createAlarm(msg);

        // Verification
        assertEquals(0, result.getPerceivedSeverity());
    }

    // Add more test cases for other scenarios
}

// Make sure to add test cases for other scenarios, such as when perceivedSeverity is null and state is not cleared, etc.