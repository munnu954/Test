**getAEnd() method:**

```java
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.stubbing.Answer;

import com.google.gson.Gson;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.when;

class CircuitDetailsProviderTest_getAEnd {

    @Mock
    private RestClientUtil restClientUtil;
    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    private static final String CIRCUIT_ID = "12345";
    private static final String CLLI = "12345";
    private static final String FINAL_URL = "http://cktDetServiceName:port/cktDetailuri?circuitId=12345";

    @Test
    void getAEnd_whenCircuitIdIsNull() {
        // Given
        CircuitDetailResponse response = new CircuitDetailResponse();

        // When
        AEnd aEnd = circuitDetailsProvider.getAEnd(null, CLLI, response);

        // Then
        assertNull(aEnd);
    }

    @Test
    void getAEnd_whenResponseIsNull() {
        // Given

        // When
        AEnd aEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, null);

        // Then
        assertNull(aEnd);
    }

    @Test
    void getAEnd_whenCircuitDataIsNull() {
        // Given
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(null);

        // When
        AEnd aEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, response);

        // Then
        assertNull(aEnd);
    }

    @Test
    void getAEnd_whenCircuitLstIsNull() {
        // Given
        CircuitData circuitData = new CircuitData();
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        // When
        AEnd aEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, response);

        // Then
        assertNull(aEnd);
    }

    @Test
    void getAEnd_whenCircuitIsNull() {
        // Given
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);
        circuitData.setCircuitLst(List.of(circuitLst));

        // When
        AEnd aEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, response);

        // Then
        assertNull(aEnd);
    }

    @Test
    void getAEnd_whenAEndIsNull() {
        // Given
        Circuit circuit = new Circuit();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);
        circuitData.setCircuitLst(List.of(circuitLst));
        circuitLst.setCircuit(List.of(circuit));

        // When
        AEnd aEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, response);

        // Then
        assertNull(aEnd);
    }

    @Test
    void getAEnd_whenPortChannelIsNull() {
        // Given
        PortChannel portChannel = new PortChannel();
        AEnd aEnd = new AEnd();
        Circuit circuit = new Circuit();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);
        circuitData.setCircuitLst(List.of(circuitLst));
        circuitLst.setCircuit(List.of(circuit));
        circuit.setAEnd(List.of(aEnd));
        aEnd.setPortChannel(List.of(portChannel));

        // When
        AEnd returnedAEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, response);

        // Then
        assertNull(returnedAEnd);
    }

    @Test
    void getAEnd_whenPortRefIsNull() {
        // Given
        PortRef portRef = new PortRef();
        PortChannel portChannel = new PortChannel();
        AEnd aEnd = new AEnd();
        Circuit circuit = new Circuit();
        CircuitData circuitData = new CircuitData();
        CircuitLst circuitLst = new CircuitLst();
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);
        circuitData.setCircuitLst(List.of(circuitLst));
        circuitLst.setCircuit(List.of(circuit));
        circuit.setAEnd(List.of(aEnd));
        aEnd.setPortChannel(List.of(portChannel));
        portChannel.setPortRef(List.of(portRef));

        // When
        AEnd returnedAEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, response);

        // Then
        assertNull(returnedAEnd);
    }

    @Test
    void getAEnd_whenCircuitPathLinkType() {
        // Given
        PortRef portRef = new PortRef();
        portRef.setClliCode(CLLI);
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(List.of(portRef));
        AEnd aEnd = new AEnd();
        aEnd.setPortChannel(List.of(portChannel));
        Circuit circuit = new Circuit();
        circuit.setAEnd(List.of(aEnd));
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(List.of(new CircuitLst(List.of(circuit))));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        String json = "{\"circuitData\": {\"circuitLst\": [{\"circuit\": [{\"aEnd\": [{\"portChannel\": [{\"portRef\": [{\"clliCode\": \"12345\"}]}]}]}]}]}}";
        Gson gson = new Gson();
        CircuitDetailResponse circuitDetailResponse = gson.fromJson(json, CircuitDetailResponse.class);


        // When
        AEnd returnedAEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, circuitDetailResponse);

        // Then
        assertEquals(aEnd, returnedAEnd);
    }

    @Test
    void getAEnd_whenSegmentType() {
        // Given
        PortRef portRef = new PortRef();
        portRef.setClliCode(CLLI);
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(List.of(portRef));
        AEnd aEnd = new AEnd();
        aEnd.setPortChannel(List.of(portChannel));
        Circuit circuit = new Circuit();
        circuit.setAEnd(List.of(aEnd));
        CircuitPathLink circuitPathLink = new CircuitPathLink();
        circuitPathLink.setCircuit(List.of(circuit));
        CircuitData circuitData = new CircuitData();
        circuitData.setCircuitLst(List.of(new CircuitLst(List.of(circuitPathLink))));
        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(circuitData);

        String json = "{\"circuitData\": {\"circuitLst\": [{\"circuit\": [{\"aEnd\": [{\"portChannel\": [{\"portRef\": [{\"clliCode\": \"12345\"}]}]}]}]}]}}";
        Gson gson = new Gson();
        CircuitDetailResponse circuitDetailResponse = gson.fromJson(json, CircuitDetailResponse.class);

        // When
        AEnd returnedAEnd = circuitDetailsProvider.getAEnd(CIRCUIT_ID, CLLI, circuitDetailResponse);

        // Then
        assertEquals(aEnd, returnedAEnd);
    }

    @Test
    void getAEnd_whenClliCodeNotSame() {
        // Given
        PortRef portRef = new PortRef();
        portRef.setClliCode("54321");
        PortChannel portChannel = new PortChannel();
        portChannel.setPortRef(List.of(portRef));
        AEnd aEnd = new AEnd();
        aEnd.setPortChannel(List.of(portChannel));
        Circuit circuit = new Circuit();
        circuit.setAEnd(List.of(aEnd));