Here are the JUnit 5 test cases for the `run()` and `receiveMessages()` methods of the `AlarmReceiver` class:

```java
import static org.mockito.Mockito.*;

import java.time.Instant;
import java.util.concurrent.TimeUnit;

import org.apache.pulsar.client.api.Consumer;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.PulsarClientException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.Status;

class AlarmReceiverTest {

    @Mock
    private Consumer<byte[]> consumer;

    @Mock
    private PostingService alarmPointLookupService;

    @Mock
    private AlarmPostGreService alarmPostGreService;

    @InjectMocks
    private AlarmReceiver alarmReceiver;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        alarmReceiver = new AlarmReceiver(params, alarmPostGreService, alarmPointLookupService);
    }

    @Test
    void receiveMessages_shouldAddMessageToQueue() throws PulsarClientException {
        Message<byte[]> msg = mock(Message.class);
        when(msg.getData()).thenReturn(new byte[] { 1, 2, 3 });

        alarmReceiver.receiveMessages();

        verify(alarmPointLookupService).addMsgToQueue(msg, any(Instant.class));
    }

    @Test
    void receiveMessages_shouldSleepWhenQueueSizeExceeded() throws PulsarClientException, InterruptedException {
        Message<byte[]> msg = mock(Message.class);
        when(msg.getData()).thenReturn(new byte[] { 1, 2, 3 });
        when(alarmPointLookupService.getQueueSize()).thenReturn(3000);

        alarmReceiver.receiveMessages();

        verify(alarmPointLookupService).addMsgToQueue(msg, any(Instant.class));
        verify(Thread.class).sleep(500);
    }

    @Test
    void acknowledgeMessage_shouldAcknowledgeMessage() throws PulsarClientException {
        Message<byte[]> msg = mock(Message.class);

        alarmReceiver.acknowledgeMessage(msg);

        verify(VMBUtil).acknowledgeMessageThrowsPulsarClientException(consumer, msg);
    }

    @Test
    void acknowledgeMessage_shouldRetryAndSyncReconnect() throws PulsarClientException {
        Message<byte[]> msg = mock(Message.class);
        when(VMBUtil.acknowledgeMessageThrowsPulsarClientException(consumer, msg)).thenThrow(PulsarClientException.class);

        alarmReceiver.acknowledgeMessage(msg);

        verify(VMBUtil, times(3)).acknowledgeMessageThrowsPulsarClientException(consumer, msg);
        verify(alarmReceiver).syncReconnect();
    }

    @Test
    void run_shouldReceiveMessagesAndHandleExceptions() throws PulsarClientException {
        Message<byte[]> msg = mock(Message.class);
        when(VMBUtil.receiveMessageThrowsPulsarClientException(consumer, 3, TimeUnit.SECONDS)).thenReturn(msg);

        alarmReceiver.run();

        verify(alarmReceiver).receiveMessages();
        verify(alarmReceiver).syncReconnect();
    }

    @Test
    void run_shouldStopWhenRunFlagIsFalse() {
        alarmReceiver.stop();
        alarmReceiver.run();

        verify(alarmReceiver, never()).receiveMessages();
        verify(alarmReceiver, never()).syncReconnect();
    }

    @Test
    void syncReconnect_shouldCloseConsumerAndReconnect() {
        when(consumer.isConnected()).thenReturn(true);

        alarmReceiver.syncReconnect();

        verify(VMBUtil).closeConsumer(consumer);
        verify(alarmReceiver).getConnection();
    }

    @Test
    void syncReconnect_shouldNotCloseConsumerIfNotConnected() {
        when(consumer.isConnected()).thenReturn(false);

        alarmReceiver.syncReconnect();

        verify(VMBUtil, never()).closeConsumer(consumer);
        verify(alarmReceiver).getConnection();
    }

    @Test
    void health_shouldReturnUpStatus() {
        Health health = alarmReceiver.health();

        assertEquals(Status.UP, health.getStatus());
    }

    @Test
    void shutDown_shouldCloseConsumer() throws PulsarClientException {
        alarmReceiver.shutdown();

        verify(consumer).close();
    }

    @Test
    void shutDown_shouldCatchExceptionAndLogError() throws PulsarClientException {
        doThrow(PulsarClientException.class).when(consumer).close();

        alarmReceiver.shutdown();

        verify(consumer).close();
        verify(logger).error(anyString(), any(PulsarClientException.class));
    }
}
```

Please note that the actual implementation of some methods might require additional dependencies or setup in order to run the tests successfully.