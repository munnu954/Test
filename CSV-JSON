package com.example;

import com.example.CollectorApiReader;
import com.example.CollectorInitializerService;
import com.example.SpaceCollector;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class CollectorInitializerServiceTest {

    @Mock
    private CollectorApiReader collectorApiReader;

    @Mock
    private Validator validator;

    @InjectMocks
    private CollectorInitializerService collectorInitializerService;

    @Test
    public void testInitialize_Success() {
        // Arrange
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("123456");
        spaceCollector.setUrl("https://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setUsername("username");
        spaceCollector.setPassword("password");
        spaceCollector.setSshPublicKey("sshPublicKey");
        spaceCollector.setSshPrivateKey("sshPrivateKey");
        spaceCollector.setConnectionType("ssh");
        spaceCollector.setEnabled(true);
        spaceCollector.setInputFilePath("inputFilePath");
        spaceCollector.setOutputFilePath("outputFilePath");
        spaceCollector.setPollingDuration(60);

        // Act
        when(collectorApiReader.initialize(spaceCollector)).thenReturn(true);

        // Assert
        assertTrue(collectorInitializerService.initialize(spaceCollector));
    }

    @Test
    public void testInitialize_Failure_NoDataInQueue() {
        // Arrange
        when(collectorApiReader.initialize(any())).thenReturn(false);

        // Act
        assertFalse(collectorInitializerService.initialize(null));
    }

    @Test
    public void testInitialize_Failure_InvalidJson() {
        // Arrange
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("123456");
        spaceCollector.setUrl("https://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setUsername("username");
        spaceCollector.setPassword("password");
        spaceCollector.setSshPublicKey("sshPublicKey");
        spaceCollector.setSshPrivateKey("sshPrivateKey");
        spaceCollector.setConnectionType("ssh");
        spaceCollector.setEnabled(true);
        spaceCollector.setInputFilePath("inputFilePath");
        spaceCollector.setOutputFilePath("outputFilePath");
        spaceCollector.setPollingDuration(60);

        // Act
        when(collectorApiReader.initialize(spaceCollector)).thenReturn(false);

        // Assert
        assertFalse(collectorInitializerService.initialize(spaceCollector));
    }
}

____________________________________________

Here are the Junit5 test cases for the CollectorInitializer:

``
package com.example;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class CollectorInitializerTest {

    @Mock
    private CollectorApiReader collectorApiReader;

    @Mock
    private Validator validator;

    @InjectMocks
    private CollectorInitializer collectorInitializer;

    @Test
    public void testInitialize_success() {
        // Arrange
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("12345");
        spaceCollector.setUrl("https://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setUsername("username");
        spaceCollector.setPassword("password");
        spaceCollector.setSshPublicKey("sshPublicKey");
        spaceCollector.setSshPrivateKey("sshPrivateKey");
        spaceCollector.setConnectionType("ssh");
        spaceCollector.setEnabled(true);
        spaceCollector.setInputFilePath("inputFilePath");
        spaceCollector.setOutputFilePath("outputFilePath");
        spaceCollector.setPollingDuration(60);

        // Act
        when(collectorApiReader.initialize(spaceCollector)).thenReturn(true);

        // Assert
        assertTrue(collectorInitializer.initialize(spaceCollector));
    }

    @Test
    public void testInitialize_failure_noDataInQueue() {
        // Arrange
        when(collectorApiReader.initialize(any())).thenReturn(false);

        // Act
        boolean success = collectorInitializer.initialize(new SpaceCollector());

        // Assert
        assertFalse(success);
    }

    @Test
    public void testInitialize_failure_invalidJson() {
        // Arrange
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("12345");
        spaceCollector.setUrl("https://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setUsername("username");
        spaceCollector.setPassword("password");
        spaceCollector.setSshPublicKey("sshPublicKey");
        spaceCollector.setSshPrivateKey("sshPrivateKey");
        spaceCollector.setConnectionType("ssh");
        spaceCollector.setEnabled(true);
        spaceCollector.setInputFilePath("inputFilePath");
        spaceCollector.setOutputFilePath("outputFilePath");
        spaceCollector.setPollingDuration(60);

        // Act
        when(collectorApiReader.initialize(spaceCollector)).thenReturn(false);

        // Assert
        assertFalse(collectorInitializer.initialize(spaceCollector));
    }
}


`----_------+--++++++++++++++++++++++++++++++


Here are the Junit5 test cases code for the above project:

``
package com.example;

import com.example.CollectorApiReader;
import com.example.CollectorInitializerService;
import com.example.SpaceCollector;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class CollectorInitializerServiceTest {

    @Mock
    private CollectorApiReader collectorApiReader;

    @Mock
    private KafkaProducerService kafkaProducer;

    @InjectMocks
    private CollectorInitializerService collectorInitializerService;

    @Test
    public void testInitialize_whenNoDataInQueue_shouldReturnFalse() {
        // Arrange
        when(kafkaProducer.poll(3459)).thenReturn(Optional.empty());

        // Act
        boolean success = collectorInitializerService.initialize();

        // Assert
        assertFalse(success);
    }

    @Test
    public void testInitialize_whenDataInQueue_shouldInitializeCollectorApiReader() {
        // Arrange
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("123");
        spaceCollector.setUrl("https://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setUsername("username");
        spaceCollector.setPassword("password");
        spaceCollector.setSshPublicKey("sshPublicKey");
        spaceCollector.setSshPrivateKey("sshPrivateKey");
        spaceCollector.setConnectionType("ssh");
        spaceCollector.setEnabled(true);
        spaceCollector.setInputFilePath("inputFilePath");
        spaceCollector.setOutputFilePath("outputFilePath");
        spaceCollector.setPollingDuration(1000);

        when(kafkaProducer.poll(3459)).thenReturn(Optional.of(spaceCollector));

        // Act
        collectorInitializerService.initialize();

        // Assert
        assertTrue(collectorApiReader.isInitialized());
    }

    @Test
    public void testInitialize_whenDataInQueueIsInvalid_shouldReturnFalse() {
        // Arrange
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("123");
        spaceCollector.setUrl("https://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setUsername("username");
        spaceCollector.setPassword("password");
        spaceCollector.setSshPublicKey("sshPublicKey");
        spaceCollector.setSshPrivateKey("sshPrivateKey");
        spaceCollector.setConnectionType("ssh");
        spaceCollector.setEnabled(true);
        spaceCollector.setInputFilePath("inputFilePath");
        spaceCollector.setOutputFilePath("outputFilePath");
        spaceCollector.setPollingDuration(1000);

        when(kafkaProducer.poll(3459)).thenReturn(Optional.of(spaceCollector));

        // Act
        boolean success = collectorInitializerService.initialize();

        // Assert
        assertFalse(success);
    }
}
`