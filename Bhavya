import org.apache.flink.api.common.functions.RichFlatMapFunction;
import org.apache.flink.api.common.accumulators.IntCounter;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.util.Collector;
import org.json.JSONObject;

public class CsvtoJsonRTROCSnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    private String fileName;

    public CsvtoJsonRTROCSnTransformer(String fileName) {
        this.fileName = fileName;
    }

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());

        // Process headers from line 1 - columns 1 and 2
        String[] headerParts = lines[0].split(",");
        JSONObject headerObj1 = new JSONObject();
        for (int i = 0; i < 2; i++) {
            String[] keyValue = headerParts[i].split("=");
            if (keyValue.length == 2) {
                String jsonKey = keyValue[0].trim();
                String jsonValue = keyValue[1].trim();
                headerObj1.put(jsonKey, jsonValue);
            }
        }
        collector.collect(headerObj1.toString());

        // Extract and process the JSON key from column 3
        String key3 = headerParts[2].split("=")[0].trim();

        // Process headers from line 1 - columns 3 to 8
        JSONObject headerObj2 = new JSONObject();
        for (int i = 2; i < 8; i++) {
            String jsonValue = headerParts[i + 1].trim();
            headerObj2.put(key3, jsonValue);
        }
        collector.collect(headerObj2.toString());

        // Process data starting from line 3
        headers = lines[2].split(",");
        for (int i = 3; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");
            if (headers == null || headers.length != arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }
            JSONObject obj = new JSONObject();
            obj.put("FILENAME", fileName);
            for (int j = 0; j < arr.length; j++) {
                String jsonkey = headers[j].trim().replace("\"", "");
                String jsonvalue = arr[j].trim().replace("\"", "");
                obj.put(jsonkey, jsonvalue);
            }
            this.successIntCounter.add(1);
            collector.collect(obj.toString());
        }
    }
}
