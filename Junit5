import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;

import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class KafkaConsumerTest {

    private KafkaConsumer kafkaConsumer;
    private String testFilePath;

    @BeforeEach
    public void setUp() {
        kafkaConsumer = new KafkaConsumer();
        testFilePath = "test.csv";
    }

    @AfterEach
    public void tearDown() {
        kafkaConsumer = null;
    }

    @Test
    public void testRetrieveCsvFile_WhenFileExists_ExpectRowsReturned() {
        // Arrange
        String testFilePath = "src/test/resources/test.csv";
        
        // Act
        List<String[]> rows = kafkaConsumer.retrieveCsvFile(testFilePath);

        // Assert
        assertFalse(rows.isEmpty());
        assertEquals(3, rows.size());
    }

    @Test
    public void testRetrieveCsvFile_WhenFileDoesNotExist_ExpectEmptyListReturned() {
        // Arrange
        String testFilePath = "nonexistent.csv";
        
        // Act
        List<String[]> rows = kafkaConsumer.retrieveCsvFile(testFilePath);

        // Assert
        assertTrue(rows.isEmpty());
    }

    @Test
    public void testRetrieveCsvFile_WhenFileIsEmpty_ExpectEmptyListReturned() {
        // Arrange
        String testFilePath = "src/test/resources/empty.csv";
        
        // Act
        List<String[]> rows = kafkaConsumer.retrieveCsvFile(testFilePath);

        // Assert
        assertTrue(rows.isEmpty());
    }
}