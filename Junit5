To fix the error "org.springframework.web.client.UnknownContentTypeException: Could not extract response: no suitable HttpMessageConverter found for response type [class com.verizon.uts.cdo.link.aggr.output.LinkAggregationResponse] and content type [application/json]," you need to ensure that Spring has the appropriate message converter configured to handle the conversion of the response body to the specified response class (LinkAggregationResponse).

To address this issue, you can add the `MappingJackson2HttpMessageConverter` bean in your `AppConfig` class. This message converter will help in converting the JSON response to your `LinkAggregationResponse` class.

Here is how you can update your AppConfig class with the necessary changes:

```java
@Configuration
public class AppConfig {

    Map<String, String> configData = new HashMap<>();

    @Value("${com.tcoms.linkaggregation.service.name}")
    String tcomsLinkAggregationServiceName;

    @Value("${com.tcoms.linkaggregation.service.url}")
    String tcomsLinkAggregationServiceNameUrl;

    @Bean("configMap")
    public Map<String, String> getConfigData() {
        configData.put("tcomsLinkAggregationServiceName", tcomsLinkAggregationServiceName);
        configData.put("tcomsLinkAggregationServiceNameUrl", tcomsLinkAggregationServiceNameUrl);
        return configData;
    }

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        return builder.setConnectTimeout(Duration.ofMillis(20000)).setReadTimeout(Duration.ofMillis(100000))
                .messageConverters(mappingJackson2HttpMessageConverter())
                .build();
    }

    @Bean
    public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() {
        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
        converter.setSupportedMediaTypes(Collections.singletonList(MediaType.APPLICATION_JSON));
        return converter;
    }
}
```

After adding the `MappingJackson2HttpMessageConverter`, make sure that the necessary dependencies are included in your project's `pom.xml` or `build.gradle`.

Once you have added the necessary changes to your AppConfig class, you can update your other classes accordingly. Let me know if you need further assistance in updating the remaining classes.