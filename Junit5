**Unit Tests for UserInsightsValidator Class**

**for Test Case 1:**
@Test
void validateUserInsightsRequest_keyAttributesNullListKeyAttributesNull_throwsException() {
  // Arrange
  UserInsightsRequest request = new UserInsightsRequest();
  UserInsightsValidator validator = new UserInsightsValidator();

  // Act and Assert
  assertThrows(InvalidRequestException.class, () -> {
    validator.validate(request);
  });
}

**Test Case 2:**
@Test
void validateUserInsightsRequest_keyAttributesNotNullListKeyAttributesNotNull_throwsException() {
  // Arrange
  UserInsightsRequest request = new UserInsightsRequest();
  UserInsightsAttributes keyAttributes = new UserInsightsAttributes();
  UserInsightsAttributes[] listKeyAttributes = new UserInsightsAttributes[] {new UserInsightsAttributes()};
  request.setKeyAttributes(keyAttributes);
  request.setListKeyAttributes(listKeyAttributes);
  UserInsightsValidator validator = new UserInsightsValidator();

  // Act and Assert
  assertThrows(InvalidRequestException.class, () -> {
    validator.validate(request);
  });
}

**Test Case 3:**
@Test
void validateUserInsightsRequest_keyAttributesNotNullListKeyAttributesNull_noException() {
  // Arrange
  UserInsightsRequest request = new UserInsightsRequest();
  UserInsightsAttributes keyAttributes = new UserInsightsAttributes();
  request.setKeyAttributes(keyAttributes);
  UserInsightsValidator validator = new UserInsightsValidator();

  // Act and Assert
  assertDoesNotThrow(() -> {
    validator.validate(request);
  });
}

**Test Case 4:**
@Test
void validateUserInsightsRequest_keyAttributesNullListKeyAttributesNotNull_noException() {
  // Arrange
  UserInsightsRequest request = new UserInsightsRequest();
  UserInsightsAttributes[] listKeyAttributes = new UserInsightsAttributes[] {new UserInsightsAttributes()};
  request.setListKeyAttributes(listKeyAttributes);
  UserInsightsValidator validator = new UserInsightsValidator();

  // Act and Assert
  assertDoesNotThrow(() -> {
    validator.validate(request);
  });
}

**Test Case 5:**
@Test
void validateIterator_keyAttributesUserIdEmpty_throwsException() {
  // Arrange
  UserInsightsAttributes keyAttributes = new UserInsightsAttributes();
  keyAttributes.setUserId("");
  UserInsightsValidator validator = new UserInsightsValidator();
  try {
    validator.validateIterator(null, keyAttributes, "KeyAttributes");
    fail("Exception not thrown");
  } catch (InvalidRequestException e) {
    assertTrue(e.getMessage().contains("UserId must not be empty"));
  }
}

**Test Case 6:**
@Test
void validateIterator_keyAttributesEcpdIdEmpty_throwsException() {
  // Arrange
  UserInsightsAttributes keyAttributes = new UserInsightsAttributes();
  keyAttributes.setEcpdId("");
  UserInsightsValidator validator = new UserInsightsValidator();
  try {
    validator.validateIterator(null, keyAttributes, "KeyAttributes");
    fail("Exception not thrown");
  } catch (InvalidRequestException e) {
    assertTrue(e.getMessage().contains("EcpdId must not be empty"));
  }
}

**Test Case 7:**
@Test
void validateIterator_keyAttributesInsightCategoryEmpty_throwsException() {
  // Arrange
  UserInsightsAttributes keyAttributes = new UserInsightsAttributes();
  keyAttributes.setUserId("userId");
  keyAttributes.setEcpdId("ecpdId");
  keyAttributes.setInsightCategory("");
  UserInsightsValidator validator = new UserInsightsValidator();
  try {
    validator.validateIterator(null, keyAttributes, "KeyAttributes");
    fail("Exception not thrown");
  } catch (InvalidRequestException e) {
    assertTrue(e.getMessage().contains("InsightCategory must not be empty"));
  }
}

**Test Case 8:**
@Test
void validateIterator_keyAttributesInsightNameEmpty_throwsException() {
  // Arrange
  UserInsightsAttributes keyAttributes = new UserInsightsAttributes();
  keyAttributes.setUserId("userId");
  keyAttributes.setEcpdId("ecpdId");
  keyAttributes.setInsightCategory("insightCategory");
  keyAttributes.setInsightName("");
  UserInsightsValidator validator = new UserInsightsValidator();
  try {
    validator.validateIterator(null, keyAttributes, "KeyAttributes");
    fail("Exception not thrown");
  } catch (InvalidRequestException e) {
    assertTrue(e.getMessage().contains("InsightName must not be empty"));
  }
}

**Test Case 9:**
@Test
void validateIterator_listKeyAttributesUserIdEmpty_throwsException() {
  // Arrange
  UserInsightsAttributes keyAttributes = new UserInsightsAttributes();
  keyAttributes.setUserId("");
  UserInsightsAttributes[] listKeyAttributes = new UserInsightsAttributes[] {keyAttributes};
  UserInsightsValidator validator = new UserInsightsValidator();
  try {
    validator.validateIterator(null, listKeyAttributes, "ListKeyAttributes");
    fail("Exception not thrown");
  } catch (InvalidRequestException e) {
    assertTrue(e.getMessage().contains("UserId must not be empty"));
  }
}

**Test Case 10:**
@Test
void validateIterator_listKeyAttributesEcpdIdEmpty_throwsException() {
  // Arrange
  UserInsightsAttributes keyAttributes = new UserInsightsAttributes();
  keyAttributes.setEcpdId("");
  UserInsightsAttributes[] listKeyAttributes = new UserInsightsAttributes[] {keyAttributes};
  UserInsightsValidator validator = new UserInsightsValidator();
  try {
    validator.validateIterator(null, listKeyAttributes, "ListKeyAttributes");
    fail("Exception not thrown");
  } catch (InvalidRequestException e) {
    assertTrue(e.getMessage().contains("EcpdId must not be empty"));
  }
}

**Test Case 11:**
@Test
void validateIterator_listKeyAttributesInsightCategoryEmpty_throwsException() {
  // Arrange
  UserInsightsAttributes keyAttributes = new UserInsightsAttributes();
  keyAttributes.setUserId("userId");
  keyAttributes