
class CollectionAuditTest {

    @Test
    void testHashCode_AllFieldsDifferent() {
        CollectionAudit audit1 = CollectionAudit.builder()
                .id("id1")
                .collectorId("collectorId1")
                .processType(ProcessType.Collector)
                .jarId("jarId1")
                .jobId("jobId1")
                .flinkJobId("flinkJobId1")
                .jobStatus("jobStatus1")
                .inputFilePath("inputFilePath1")
                .outputFilePath("outputFilePath1")
                .auditTopic("auditTopic1")
                .url("url1")
                .flinkURL("flinkURL1")
                .port(1)
                .delimiters("delimiters1")
                .fileType("fileType1")
                .dateReceived("dateReceived1")
                .dateProcessed("dateProcessed1")
                .noOfRecordsInTheFile(1)
                .noOfRecordsProcessed(1)
                .noOfRecordsFailed(1)
                .exceptions("exceptions1")
                .bootstrapServer("bootstrapServer1")
                .build();

        CollectionAudit audit2 = CollectionAudit.builder()
                .id("id2")
                .collectorId("collectorId2")
                .processType(ProcessType.Transformer)
                .jarId("jarId2")
                .jobId("jobId2")
                .flinkJobId("flinkJobId2")
                .jobStatus("jobStatus2")
                .inputFilePath("inputFilePath2")
                .outputFilePath("outputFilePath2")
                .auditTopic("auditTopic2")
                .url("url2")
                .flinkURL("flinkURL2")
                .port(2)
                .delimiters("delimiters2")
                .fileType("fileType2")
                .dateReceived("dateReceived2")
                .dateProcessed("dateProcessed2")
                .noOfRecordsInTheFile(2)
                .noOfRecordsProcessed(2)
                .noOfRecordsFailed(2)
                .exceptions("exceptions2")
                .bootstrapServer("bootstrapServer2")
                .build();

        assertNotEquals(audit1.hashCode(), audit2.hashCode());
    }

    @Test
    void testHashCode_SameFields() {
        CollectionAudit audit1 = CollectionAudit.builder()
                .id("id1")
                .collectorId("collectorId1")
                .processType(ProcessType.Collector)
                .jarId("jarId1")
                .jobId("jobId1")
                .flinkJobId("flinkJobId1")
                .jobStatus("jobStatus1")
                .inputFilePath("inputFilePath1")
                .outputFilePath("outputFilePath1")
                .auditTopic("auditTopic1")
                .url("url1")
                .flinkURL("flinkURL1")
                .port(1)
                .delimiters("delimiters1")
                .fileType("fileType1")
                .dateReceived("dateReceived1")
                .dateProcessed("dateProcessed1")
                .noOfRecordsInTheFile(1)
                .noOfRecordsProcessed(1)
                .noOfRecordsFailed(1)
                .exceptions("exceptions1")
                .bootstrapServer("bootstrapServer1")
                .build();

        CollectionAudit audit2 = CollectionAudit.builder()
                .id("id1")
                .collectorId("collectorId1")
                .processType(ProcessType.Collector)
                .jarId("jarId1")
                .jobId("jobId1")
                .flinkJobId("flinkJobId1")
                .jobStatus("jobStatus1")
                .inputFilePath("inputFilePath1")
                .outputFilePath("outputFilePath1")
                .auditTopic("auditTopic1")
                .url("url1")
                .flinkURL("flinkURL1")
                .port(1)
                .delimiters("delimiters1")
                .fileType("fileType1")
                .dateReceived("dateReceived1")
                .dateProcessed("dateProcessed1")
                .noOfRecordsInTheFile(1)
                .noOfRecordsProcessed(1)
                .noOfRecordsFailed(1)
                .exceptions("exceptions1")
                .bootstrapServer("bootstrapServer1")
                .build();

        assertEquals(audit1.hashCode(), audit2.hashCode());
    }

    @Test
    void testHashCode_NullFields() {
        CollectionAudit audit1 = CollectionAudit.builder()
                .id("id1")
                .collectorId("collectorId1")
                .processType(ProcessType.Collector)
                .jarId("jarId1")
                .jobId("jobId1")
                .flinkJobId("flinkJobId1")
                .jobStatus("jobStatus1")
                .inputFilePath("inputFilePath1")
                .outputFilePath("outputFilePath1")
                .auditTopic("auditTopic1")
                .url("url1")
                .flinkURL("flinkURL1")
                .port(1)
                .delimiters("delimiters1")
                .fileType("fileType1")
                .dateReceived("dateReceived1")
                .dateProcessed("dateProcessed1")
                .noOfRecordsInTheFile(1)
                .noOfRecordsProcessed(1)
                .noOfRecordsFailed(1)
                .exceptions("exceptions1")
                .bootstrapServer("bootstrapServer1")
                .build();

        CollectionAudit audit2 = CollectionAudit.builder()
                .id("id1")
                .collectorId("collectorId1")
                .processType(ProcessType.Collector)
                .jarId("jarId1")
                .jobId("jobId1")
                .flinkJobId("flinkJobId1")
                .jobStatus("jobStatus1")
                .inputFilePath("inputFilePath1")
                .outputFilePath("outputFilePath1")
                .auditTopic("auditTopic1")
                .url("url1")
                .flinkURL("flinkURL1")
                .port(1)
                .delimiters("delimiters1")
                .fileType("fileType1")
                .dateReceived("dateReceived1")
                .dateProcessed("dateProcessed1")
                .noOfRecordsInTheFile(1)
                .noOfRecordsProcessed(1)
                .noOfRecordsFailed(1)
                .exceptions("exceptions1")
                .bootstrapServer("bootstrapServer1")
                .build();

        audit2.setId(null);

        assertNotEquals(audit1.hashCode(), audit2.hashCode());
    }
}