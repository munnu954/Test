AI ðŸ¤–:
Sure, here is the updated code:


import org.apache.flink.api.common.functions.RichFlatMapFunction;
import org.apache.flink.api.common.state.MapState;
import org.apache.flink.api.common.state.MapStateDescriptor;
import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.util.Collector;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class CsvtoJsonDRAnTransformer extends RichFlatMapFunction {

    private String[] headers;
    private MapState state;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    private String fileName;

    public CsvtoJsonDRAnTransformer(String fileName) {
        this.fileName = fileName;
    }

    @Override
    public void open(Configuration parameters) throws Exception {
        super.open(parameters);
        state = getRuntimeContext().getState(new MapStateDescriptor<>("state", TypeInformation.of(String.class), TypeInformation.of(String.class)));
    }

    @Override
    public void flatMap(String s, Collector collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        headers = lines[1].split(",");
        for (int i = 2; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");
            if (headers == null  headers.length != arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }
            List jsonKeys = new ArrayList<>();
            List jsonValues = new ArrayList<>();
            for (int j = 0; j < arr.length; j++) {
                jsonKeys.add(headers[j].trim().replace("\"", ""));
                jsonValues.add(arr[j].trim().replace("\"", ""));
            }
            String jsonKey = jsonKeys.get(0);
            String jsonValue = jsonValues.get(0);
            state.put(jsonKey, jsonValue);
        }
        for (Map.Entry entry : state.entrySet()) {
            String jsonKey = entry.getKey();
            String jsonValue = entry.getValue();
            JSONObject obj = new JSONObject();
            obj.put("FILENAME", fileName);
            obj.put(jsonKey, jsonValue);
            this.successIntCounter.add(1);
            collector.collect(obj.toString());
        }
    }
}


This code first reads the headers from line 1 of the CSV file. It then reads the data from lines 2-11 and stores the key-value pairs in a map state. Finally, it iterates over the map state and generates a JSON object for each key-value pair.