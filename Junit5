@ExtendWith(MockitoExtension.class)
class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @Mock
    private PostingRuleProcessingService postingRuleProcessingService;

    private Alarm alarm;

    @BeforeEach
    void setup() {
        alarm = new Alarm();
        alarm.setAlarmIdentity("12345");
        alarm.setAlarmUpdatedTime("2023-04-01T12:00:00Z");
        alarm.setSequenceID(100L);
    }

    @Test
    void testPostAlarmForEachIteration_LatestAlarmScenario_PerceivedSeverityAndStateUpdated() {
        // Arrange
        String dbAlmUpdatedTime = "2023-04-01T11:59:59Z";
        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        when(jdbcTemplate.queryForRowSet(anyString(), any())).thenReturn(rs);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.parse(dbAlmUpdatedTime)));
        when(rs.getLong("sequenceid")).thenReturn(100L);
        when(rs.getInt("state")).thenReturn(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateNew()));
        when(rs.getInt("perceivedseverity")).thenReturn(postgresConf.getPerceivedSeverityMap().get(postgresConf.getPerceivedSeverityAny()));

        // Act
        int rowsAffected = alarmRepositoryImpl.postAlarmForEachIteration(alarm, "comp-id");

        // Assert
        assertEquals(1, rowsAffected);
        assertEquals(postgresConf.getPerceivedSeverityMap().get(postgresConf.getPerceivedSeverityAny()), alarm.getPerceivedSeverity());
        assertEquals(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateNew()), alarm.getState());
        assertEquals(1, alarm.getCount());
        assertEquals(1, alarm.getCountResetFlag());
    }

    @Test
    void testPostAlarmForEachIteration_LatestAlarmScenario_AlarmDetailsAndStateUpdated() {
        // Arrange
        String dbAlmUpdatedTime = "2023-04-01T11:59:59Z";
        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        when(jdbcTemplate.queryForRowSet(anyString(), any())).thenReturn(rs);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.parse(dbAlmUpdatedTime)));
        when(rs.getLong("sequenceid")).thenReturn(100L);
        when(rs.getInt("state")).thenReturn(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateUnclorrelated()));
        when(rs.getString("alarmdetails")).thenReturn("{\"key\":\"value\"}");
        alarm.setAlarmDetails("{\"key\":\"new-value\"}");

        // Act
        int rowsAffected = alarmRepositoryImpl.postAlarmForEachIteration(alarm, "comp-id");

        // Assert
        assertEquals(1, rowsAffected);
        assertEquals("{\"key\":\"value\"}", alarm.getAlarmDetails());
        assertEquals(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateUnclorrelated()), alarm.getState());
    }

    @Test
    void testPostAlarmForEachIteration_LatestAlarmScenario_ClearTimeUpdated() {
        // Arrange
        String dbAlmUpdatedTime = "2023-04-01T11:59:59Z";
        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        when(jdbcTemplate.queryForRowSet(anyString(), any())).thenReturn(rs);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.parse(dbAlmUpdatedTime)));
        when(rs.getLong("sequenceid")).thenReturn(100L);
        when(rs.getInt("state")).thenReturn(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared()));
        when(rs.getInt("perceivedseverity")).thenReturn(postgresConf.getPerceivedSeverityMap().get(postgresConf.getPerceivedSeverityAny()));
        when(rs.getTimestamp("cleartime")).thenReturn(Timestamp.from(Instant.now()));

        // Act
        int rowsAffected = alarmRepositoryImpl.postAlarmForEachIteration(alarm, "comp-id");

        // Assert
        assertEquals(1, rowsAffected);
        assertNotNull(alarm.getClearTime());
    }

    @Test
    void testPostAlarmForEachIteration_LatestAlarmScenario_StateUpdatedFromCleared() {
        // Arrange
        String dbAlmUpdatedTime = "2023-04-01T11:59:59Z";
        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        when(jdbcTemplate.queryForRowSet(anyString(), any())).thenReturn(rs);
        when(rs.next()).thenReturn(true);
        when(rs.getTimestamp("alarmupdatedtime")).thenReturn(Timestamp.from(Instant.parse(dbAlmUpdatedTime)));
        when(rs.getLong("sequenceid")).thenReturn(100L);
        when(rs.getInt("state")).thenReturn(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared()));
        when(rs.getInt("perceivedseverity")).thenReturn(postgresConf.getPerceivedSeverityMap().get(postgresConf.getPerceivedSeverityAny()));
        alarm.setState(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared()));

        // Act
        int rowsAffected = alarmRepositoryImpl.postAlarmForEachIteration(alarm, "comp-id");

        // Assert
        assertEquals(1, rowsAffected);
        assertEquals(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateNew()), alarm.getState());
        assertEquals(1, alarm.getCountResetFlag());
    }

    // Add more test cases as needed to cover other scenarios in the 'else if' block
}