import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.apache.kafka.common.KafkaFuture;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import java.util.Properties;
import java.util.Set;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class MainUnitTest {

    @Mock
    private AdminClient adminClient;

    @Before
    public void setup() {
        adminClient = Mockito.mock(AdminClient.class);
    }

    @Test
    public void testKafkaTopicAccessibility() throws Exception {
        // Set up the required Kafka topic name
        String topicName = "3459-DEV-COLLECTION-JSON-DATA-QUEUE";

        // Mock the listTopicsResult
        ListTopicsResult listTopicsResult = Mockito.mock(ListTopicsResult.class);

        // Mock the set of topics
        Set<String> topics = Set.of("<other-accessible-topic>");

        // Create properties for the AdminClient
        Properties properties = new Properties();
        properties.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");

        // Mock the KafkaFuture for the topic list
        KafkaFuture<Set<String>> kafkaFuture = Mockito.mock(KafkaFuture.class);
        Mockito.when(kafkaFuture.get()).thenReturn(topics);

        // Mock the adminClient listTopics method
        Mockito.when(adminClient.listTopics()).thenReturn(listTopicsResult);
        Mockito.when(listTopicsResult.names()).thenReturn(kafkaFuture);

        // Set up the Main class
        Main main = new Main();
        main.setAdminClient(adminClient);

        // Check the accessibility of the Kafka topic
        boolean isTopicAccessible = main.isKafkaTopicAccessible(topicName, properties);
    
        // Ensure that the topic is not accessible
        assertFalse(isTopicAccessible);
    }
}