import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.internals.RecordHeader;
import org.apache.pulsar.client.api.Message;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;
import org.junit.jupiter.api.extension.ExtendWith;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class SHAEventMessageListenerTest {

    @InjectMocks
    private SHAEventMessageListener shaEventMessageListener;

    @Mock
    private SensitiveProfileManager sensitiveProfileManager;

    @Mock
    private BatchLoaderUtils batchLoaderUtils;

    @Mock
    private KafkaTemplate kafkaTemplate;

    @Mock
    private KafkaFalloutService kafkaFalloutService;

    @Test
    public void testOnMessagePayloadEmpty() throws SystemException {
        Message<GenericRecord> message = mock(Message.class);

        when(message.getData()).thenReturn(null);

        assertThrows(SystemException.class, () -> shaEventMessageListener.onMessage(message));
    }

    @Test
    public void testOnMessageWithSensitiveProfile() throws SystemException, JsonMappingException {
        Message<GenericRecord> message = mock(Message.class);
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("123");
        
        when(message.getData()).thenReturn(ObjectMapper.writeValueAsString(event));
        when(batchLoaderUtils.convert(anyString(), eq(SHAVbsmEvent.class))).thenReturn(event);
        when(sensitiveProfileManager.getSensitiveAccount(anyString())).thenReturn(new SensitiveResponse("123", "token", true));

        shaEventMessageListener.onMessage(message);

        verify(batchLoaderUtils, times(0)).sendMessageAsync(any(), anyString(), anyString(), anyString(), anyString(), anyChar(), anyString());
    }

    @Test
    public void testOnMessageWithoutSensitiveProfile() throws SystemException, JsonMappingException {
        Message<GenericRecord> message = mock(Message.class);
        SHAVbsmEvent event = new SHAVbsmEvent();
        event.setEcpdId("123");
        
        when(message.getData()).thenReturn(ObjectMapper.writeValueAsString(event));
        when(batchLoaderUtils.convert(anyString(), eq(SHAVbsmEvent.class))).thenReturn(event);
        when(sensitiveProfileManager.getSensitiveAccount(anyString())).thenReturn(new SensitiveResponse("123", "token", false));

        shaEventMessageListener.onMessage(message);

        verify(batchLoaderUtils, times(1)).sendMessageAsync(any(), anyString(), anyString(), anyString(), anyString(), anyChar(), anyString());
    }
}
```