To achieve 100% code coverage for the `BatchLoaderUtils` class, including testing the try and catch blocks, you can write JUnit 5 test cases as follows. The test cases will cover scenarios such as valid and invalid XML input, null input, and empty input. Here's an example setup for the JUnit test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.xml.bind.JAXBException;
import java.io.StringReader;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class BatchLoaderUtilsTest {

    @InjectMocks
    private BatchLoaderUtils batchLoaderUtils;

    private static final String VALID_XML = "<SampleClass><name>Test</name></SampleClass>";
    private static final String INVALID_XML = "<SampleClass><name>Test</name>";

    @BeforeEach
    void setUp() {
        batchLoaderUtils = new BatchLoaderUtils();
    }

    @Test
    void testConvertToObjectWithValidXml() throws JAXBException {
        SampleClass result = batchLoaderUtils.convertToObject(VALID_XML, SampleClass.class);
        assertNotNull(result);
        assertEquals("Test", result.getName());
    }

    @Test
    void testConvertToObjectWithInvalidXml() {
        assertThrows(JAXBException.class, () -> {
            batchLoaderUtils.convertToObject(INVALID_XML, SampleClass.class);
        });
    }

    @Test
    void testConvertToObjectWithException() throws JAXBException {
        String invalidXml = "<InvalidXml>";
        assertThrows(JAXBException.class, () -> {
            batchLoaderUtils.convertToObject(invalidXml, SampleClass.class);
        });
    }

    @Test
    void testIsValidDataWithNull() {
        assertFalse(batchLoaderUtils.isValidData(null));
    }

    @Test
    void testIsValidDataWithEmptyString() {
        assertFalse(batchLoaderUtils.isValidData(""));
    }

    @Test
    void testIsValidDataWithBlankString() {
        assertFalse(batchLoaderUtils.isValidData("   "));
    }

    @Test
    void testIsValidDataWithValidString() {
        assertTrue(batchLoaderUtils.isValidData("Valid Data"));
    }
}

// Sample class for testing
@XmlRootElement
public static class SampleClass {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
```

### Explanation:
- **`testConvertToObjectWithValidXml`**: Tests the conversion of a valid XML string to an object.
- **`testConvertToObjectWithInvalidXml`**: Tests the conversion of an invalid XML string, expecting a `JAXBException`.
- **`testConvertToObjectWithException`**: Tests the behavior when an exception is thrown during XML conversion.
- **`testIsValidDataWithNull`**, **`testIsValidDataWithEmptyString`**, **`testIsValidDataWithBlankString`**: Test the `isValidData` method with null, empty, and blank strings, respectively.
- **`testIsValidDataWithValidString`**: Tests the `isValidData` method with a valid, non-empty string.

These test cases should cover all the methods in `BatchLoaderUtils` and include scenarios for the try-catch blocks.