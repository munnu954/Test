import org.apache.sshd.server.SshServer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;

import static org.mockito.Mockito.*;

public class SSHServerSimulatorTest {

    @InjectMocks
    private SSHServerSimulator sshServerSimulator;

    @Mock
    private SshServer sshServer;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testStartServer() throws IOException {
        doNothing().when(sshServerSimulator).start();
        sshServerSimulator.startServer();
        verify(sshServerSimulator, times(1)).start();
    }

    @Test
    public void testStart() throws IOException {
        when(sshServer.getHost()).thenReturn("localhost");
        when(sshServer.getPort()).thenReturn(22);

        doReturn(null).when(sshServer).setHost(anyString());
        doReturn(null).when(sshServer).setPort(anyInt());
        doReturn(null).when(sshServer).setKeyPairProvider(any());
        doReturn(null).when(sshServer).setSubsystemFactories(any());
        doReturn(null).when(sshServer).setPasswordAuthenticator(any());
        doReturn(null).when(sshServer).setFileSystemFactory(any());
        doNothing().when(sshServer).start();

        sshServerSimulator.start();

        verify(sshServer).setHost(anyString());
        verify(sshServer).setPort(anyInt());
        verify(sshServer).setKeyPairProvider(any());
        verify(sshServer).setSubsystemFactories(any());
        verify(sshServer).setPasswordAuthenticator(any());
        verify(sshServer).setFileSystemFactory(any());
        verify(sshServer).start();
    }
}