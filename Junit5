import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.kafka.core.KafkaTemplate;


class KafkaProducerTest {

    @Test
    void testSendMessage() {
        // create a mock KafkaTemplate
        KafkaTemplate<String, SpaceCollector> kafkaTemplate = mock(KafkaTemplate.class);

        // create a new KafkaProducer and set the mock KafkaTemplate
        KafkaProducer producer = new KafkaProducer();
        producer.kafkaTemplate = kafkaTemplate;

        // create a SpaceCollector object to send
        SpaceCollector message = mock(SpaceCollector.class);
        when(message.getId()).thenReturn(1);
        when(message.getUrl()).thenReturn("http://localhost");
        when(message.getPort()).thenReturn(8080);
        when(message.getInputFilePath()).thenReturn("/input.csv");
        when(message.getOutputFilePath()).thenReturn("/output.csv");
        when(message.getDelimiter()).thenReturn(",");
        when(message.getFileType()).thenReturn("csv");

        // call the sendMessage method
        producer.sendMessage(message);

        // verify that the KafkaTemplate's send method was called with the correct parameters
        verify(kafkaTemplate).send("test-topic", message);

        // assert that the log message was printed correctly
        Assertions.assertTrue(producer.getLogger().contains(String.format("Message sent")));
    }

}

class KafkaProducerTest {

    @Test
    void testSendMessageWithNullMessage() {
        // create a mock KafkaTemplate
        KafkaTemplate<String, SpaceCollector> kafkaTemplate = mock(KafkaTemplate.class);

        // create a new KafkaProducer and set the mock KafkaTemplate
        KafkaProducer producer = new KafkaProducer();
        producer.kafkaTemplate = kafkaTemplate;

        // call the sendMessage method with a null message
        producer.sendMessage(null);

        // verify that the KafkaTemplate's send method was not called
        verify(kafkaTemplate, never()).send(anyString(), any(SpaceCollector.class));

        // assert that the log message was printed correctly
        Assertions.assertTrue(producer.getLogger().contains("Message is null"));
    }

}

class KafkaConsumerTest {

    @Mock
    FlinkApiController flinkApiController;

    @Test
    void testConsume() throws IOException, CsvValidationException {
        // create a mock FlinkApiController
        FlinkApiController flinkApiController = mock(FlinkApiController.class);

        // create a new KafkaConsumer and set the mock FlinkApiController
        KafkaConsumer consumer = new KafkaConsumer();
        consumer.FlinkApi = flinkApiController;

        // create a SpaceCollector object to consume
        SpaceCollector message = mock(SpaceCollector.class);
        when(message.getId()).thenReturn(1);
        when(message.getUrl()).thenReturn("http://localhost");
        when(message.getPort()).thenReturn(8080);
        when(message.getInputFilePath()).thenReturn("/input.csv");
        when(message.getOutputFilePath()).thenReturn("/output.csv");
        when(message.getDelimiter()).thenReturn(",");
        when(message.getFileType()).thenReturn("csv");

        // call the consume method with the SpaceCollector object
        consumer.consume(message);
    }
}


import static org.mockito.Mockito.*;

import java.io.IOException;

import org.apache.commons.csv.CsvValidationException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

class KafkaConsumerTest {

    @Mock
    FlinkApiController flinkApiController;

    @Test
    void testConsumeWithIOException() throws IOException, CsvValidationException {
        // create a mock FlinkApiController
        FlinkApiController flinkApiController = mock(FlinkApiController.class);

        // create a new KafkaConsumer and set the mock FlinkApiController
        KafkaConsumer consumer = new KafkaConsumer();
        consumer.FlinkApi = flinkApiController;

        // create a SpaceCollector object to consume
        SpaceCollector message = mock(SpaceCollector.class);
        when(message.getId()).thenReturn(1);
        when(message.getUrl()).thenReturn("http://localhost");
        when(message.getPort()).thenReturn(8080);
        when(message.getInputFilePath()).thenReturn("/input.csv");
        when(message.getOutputFilePath()).thenReturn("/output.csv");
        when(message.getDelimiter()).thenReturn(",");
        when(message.getFileType()).thenReturn("csv");

        // throw an IOException when the writeCsvFile method is called
        doThrow(new IOException()).when(consumer).writeCsvFile();

        // call the consume method with the SpaceCollector object
        Assertions.assertThrows(IOException.class, () -> {
            consumer.consume(message);
        });

        // verify that the FlinkApiController's triggerJob method was not called
        verify(flinkApiController, never()).triggerJob(any(SpaceCollector.class));

        // verify that the writeCsvFile, deleteCsvFile, and retrieveCsvFile methods were not called
        verify(consumer, never()).writeCsvFile();
        verify(consumer, never()).deleteCsvFile();
        verify(consumer, never()).retrieveCsvFile();

        // assert that the log message was printed correctly
        Assertions.assertTrue(consumer.getLogger().contains("Error reading CSV file"));
    }
}
```