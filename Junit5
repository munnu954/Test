import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;

@ExtendWith(MockitoExtension.class)
class AlarmRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @Mock
    private PostingRuleProcessingService postingRuleProcessingService;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepositoryImpl;

    @Test
    void testPostAlarmForEachIteration_SetComponentId() {
        Alarm alarm = new Alarm();
        alarm.setComponentId("");

        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(AlarmConstants.CHECK_ALARM_IDENTITY, new Object[]{alarm.getAlarmIdentity()})).thenReturn(rs);
        Mockito.when(rs.next()).thenReturn(true);
        Mockito.when(rs.getString("componentid")).thenReturn("testComponentId");

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertEquals("testComponentId", alarm.getComponentId());
    }

    @Test
    void testPostAlarmForEachIteration_SetAlarmedObject() {
        Alarm alarm = new Alarm();
        alarm.setAlarmedObject("");

        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(AlarmConstants.CHECK_ALARM_IDENTITY, new Object[]{alarm.getAlarmIdentity()})).thenReturn(rs);
        Mockito.when(rs.next()).thenReturn(true);
        Mockito.when(rs.getString("alarmedobject")).thenReturn("testAlarmedObject");

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertEquals("testAlarmedObject", alarm.getAlarmedObject());
    }

    @Test
    void testPostAlarmForEachIteration_SetReportingObject() {
        Alarm alarm = new Alarm();
        alarm.setReportingObject("");

        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(AlarmConstants.CHECK_ALARM_IDENTITY, new Object[]{alarm.getAlarmIdentity()})).thenReturn(rs);
        Mockito.when(rs.next()).thenReturn(true);
        Mockito.when(rs.getString("reportingobject")).thenReturn("testReportingObject");

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertEquals("testReportingObject", alarm.getReportingObject());
    }

    @Test
    void testPostAlarmForEachIteration_SetEquipmentObject() {
        Alarm alarm = new Alarm();
        alarm.setEquipmentObject("");

        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(AlarmConstants.CHECK_ALARM_IDENTITY, new Object[]{alarm.getAlarmIdentity()})).thenReturn(rs);
        Mockito.when(rs.next()).thenReturn(true);
        Mockito.when(rs.getString("equipmentobject")).thenReturn("testEquipmentObject");

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertEquals("testEquipmentObject", alarm.getEquipmentObject());
    }

    @Test
    void testPostAlarmForEachIteration_SetTid() {
        Alarm alarm = new Alarm();
        alarm.setTid("");

        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(AlarmConstants.CHECK_ALARM_IDENTITY, new Object[]{alarm.getAlarmIdentity()})).thenReturn(rs);
        Mockito.when(rs.next()).thenReturn(true);
        Mockito.when(rs.getString("tid")).thenReturn("testTid");

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertEquals("testTid", alarm.getTid());
    }

    @Test
    void testPostAlarmForEachIteration_SetAid() {
        Alarm alarm = new Alarm();
        alarm.setAid("");

        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(AlarmConstants.CHECK_ALARM_IDENTITY, new Object[]{alarm.getAlarmIdentity()})).thenReturn(rs);
        Mockito.when(rs.next()).thenReturn(true);
        Mockito.when(rs.getString("aid")).thenReturn("testAid");

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertEquals("testAid", alarm.getAid());
    }

    @Test
    void testPostAlarmForEachIteration_SetRawMessage() {
        Alarm alarm = new Alarm();
        alarm.setRawMessage("");

        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(AlarmConstants.CHECK_ALARM_IDENTITY, new Object[]{alarm.getAlarmIdentity()})).thenReturn(rs);
        Mockito.when(rs.next()).thenReturn(true);
        Mockito.when(rs.getString("rawmessage")).thenReturn("testRawMessage");

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertEquals("testRawMessage", alarm.getRawMessage());
    }

    @Test
    void testPostAlarmForEachIteration_SetStage() {
        Alarm alarm = new Alarm();
        alarm.setStage(0);

        SqlRowSet rs = Mockito.mock(SqlRowSet.class);
        Mockito.when(jdbcTemplate.queryForRowSet(AlarmConstants.CHECK_ALARM_IDENTITY, new Object[]{alarm.getAlarmIdentity()})).thenReturn(rs);
        Mockito.when(rs.next()).thenReturn(true);
        Mockito.when(rs.getInt("stage")).thenReturn(10);

        alarmRepositoryImpl.postAlarmForEachIteration(alarm, "testCompId");

        Assertions.assertEquals(10, alarm.getStage());
    }
}