Based on the error message you provided, it seems that the Jackson ObjectMapper is unable to deserialize the incoming JSON string into the `UnifiedAuditMessage` object because it cannot find a String-argument constructor or factory method in the `UnifiedAuditMessage` class.

To fix this issue, you need to add a constructor or factory method in the `UnifiedAuditMessage` class that takes a single String argument. Here's an updated version of the `UnifiedAuditMessage` class with a String-argument constructor:

```java
@Data
@AllArgsConstructor
@NoArgsConstructor
public class UnifiedAuditMessage {
    // Existing fields
    
    public UnifiedAuditMessage(String jsonString) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            UnifiedAuditMessage auditMsg = objectMapper.readValue(jsonString, UnifiedAuditMessage.class);
            this.inputFilePath = auditMsg.inputFilePath;
            this.url = auditMsg.url;
            this.port = auditMsg.port;
            this.outputFilePath = auditMsg.outputFilePath;
            this.delimiters = auditMsg.delimiters;
            this.fileType = auditMsg.fileType;
            // Copy other fields
        } catch (JsonProcessingException e) {
            // Handle deserialization error
        }
    }
    
    // Other methods
}
```

In the `KafkaConsumer` class, update the `consume` method to use this new constructor when deserializing the JSON string:

```java
public void consume(String data) throws IOException {
    // ...
    try {
        if (data.contains("inputFilePath")) {
            ObjectMapper mapper = new ObjectMapper();
            UnifiedAuditMessage auditMsg = new UnifiedAuditMessage(data); // Use the constructor
            // ...
        }
    } catch (Exception e) {
        // Handle exception
    }
    // ...
}
```

Make sure to update other parts of your code that rely on the `UnifiedAuditMessage` class accordingly.