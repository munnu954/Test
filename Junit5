Sure, here is an example of how you can write JUnit 5 test cases to cover the two branches of the `intialializeMessageReaderService()` method in the `MessageReaderService` class. We will use reflection to test the private methods without making them public.

```java
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class MessageReaderServiceTest {

    @Mock
    private VMBConfig ruleUpdateNotifierVmbConfig;

    @Mock
    private Reader<byte[]> reader;

    @Mock
    private Message<byte[]> message;

    @Test
    public void testIntialializeMessageReaderServiceWithReaderNotNull() throws Exception {
        MockitoAnnotations.initMocks(this);

        MessageReaderService readerService = new MessageReaderService();
        readerService.ruleUpdateNotifierVmbConfig = ruleUpdateNotifierVmbConfig;
        readerService.reader = reader;

        Method createReaderConnectionMethod = MessageReaderService.class.getDeclaredMethod("createReaderConnection", VMBConfig.class, MessageId.class);
        createReaderConnectionMethod.setAccessible(true);
        when(createReaderConnectionMethod.invoke(readerService, ruleUpdateNotifierVmbConfig, MessageId.latest)).thenReturn(reader);

        Method intialializeMessageReaderServiceMethod = MessageReaderService.class.getDeclaredMethod("intialializeMessageReaderService");
        intialializeMessageReaderServiceMethod.setAccessible(true);
        intialializeMessageReaderServiceMethod.invoke(readerService);

        verify(readerService, times(1)).intialializeMessageReaderService();
        verify(readerService, times(1)).createReaderConnection(ruleUpdateNotifierVmbConfig, MessageId.latest);
        verify(reader, times(1)).isConnected();
        assertEquals(reader, readerService.reader);
    }

    @Test
    public void testIntialializeMessageReaderServiceWithReaderNull() throws Exception {
        MockitoAnnotations.initMocks(this);

        MessageReaderService readerService = new MessageReaderService();
        readerService.ruleUpdateNotifierVmbConfig = ruleUpdateNotifierVmbConfig;
        readerService.reader = null;

        Method createReaderConnectionMethod = MessageReaderService.class.getDeclaredMethod("createReaderConnection", VMBConfig.class, MessageId.class);
        createReaderConnectionMethod.setAccessible(true);
        when(createReaderConnectionMethod.invoke(readerService, ruleUpdateNotifierVmbConfig, MessageId.latest)).thenReturn(reader);

        Method intialializeMessageReaderServiceMethod = MessageReaderService.class.getDeclaredMethod("intialializeMessageReaderService");
        intialializeMessageReaderServiceMethod.setAccessible(true);
        intialializeMessageReaderServiceMethod.invoke(readerService);

        verify(readerService, times(1)).intialializeMessageReaderService();
        verify(readerService, times(1)).createReaderConnection(ruleUpdateNotifierVmbConfig, MessageId.latest);
        verify(reader, times(1)).isConnected();
        assertEquals(reader, readerService.reader);
    }
}
```

In the above code, we are using Mockito to mock the necessary dependencies (`ruleUpdateNotifierVmbConfig`, `reader`, and `message`). We are also using reflection to access and invoke the private methods (`createReaderConnection` and `intialializeMessageReaderService`) of the `MessageReaderService` class. Then, we verify the expected method invocations and assert the expected values.