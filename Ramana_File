import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.ArgumentMatchers.any;
// Import other necessary libraries

class YourTestClassTest {

    @Mock
    FlinkApi flinkApiMock;

    @InjectMocks
    KafkaConsumer kafkaConsumer;

    @BeforeEach
    void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testConsume() throws Exception {
        SpaceCollector sp = getSpaceCollector();
        File file = new File(sp.getInputFilePath());

        // Create a temporary file
        file.createNewFile();

        // Simulate the file content
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            String content = "test1 test2 test3" + System.lineSeparator() + "test4|test5|test6";
            writer.write(content);
        }

        when(flinkApiMock.triggerJob(any(SpaceCollector.class), any(String.class))).thenReturn("success");

        // Perform the test
        kafkaConsumer.consume(new ObjectMapper().writeValueAsString(sp));

        // Validate the expected behavior
        assertTrue(file.exists()); // Assert that the file still exists

        // Verify FlinkApi's triggerJob method was called with the expected arguments
        verify(flinkApiMock).triggerJob(any(SpaceCollector.class), any(String.class));

        // Clean up the file
        file.delete();
    }
}