To create JUnit 5 test cases for the specified `else if` conditional statement in the `CableProcessor` class, we'll need to mock and set up the necessary objects and their interactions. Here's how you can write the test cases:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class CableProcessorTest {

    private CableProcessor cableProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        cableProcessor = CableProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = mock(ClrComponent.class);
        clrComponentList = new ArrayList<>();
        clliNodeMap = mock(Map.class);
        ukCount = new AtomicInteger(0);
        sourceSys = "sourceSystem";
    }

    @Test
    void testProcess_previousComponentTypeIsCable() {
        // Setup ClrComponent with type CABLE
        ClrComponent prevClrComponent = mock(ClrComponent.class);
        when(prevClrComponent.getType()).thenReturn(CommonWrapperConstants.CABLE);
        clrComponentList.add(prevClrComponent);

        // Setup current ClrComponent
        CableComp cableComp = new CableComp();
        cableComp.setElementId("elementId");
        CablePairDetail cablePairDetail = new CablePairDetail();
        cablePairDetail.setStrandNumber(1);
        cableComp.getCablePairDetails().add(cablePairDetail);
        when(clrComponent.getCableComp()).thenReturn(List.of(cableComp));

        // Setup previous Link
        Link prevLink = new Link();
        prevLink.setTarget("prevTargetPortId");
        links.add(prevLink);

        // Setup previous Node
        Node prevNode = new Node();
        prevNode.setPortId("prevTargetPortId");
        nodes.add(prevNode);

        // Execute the process method
        cableProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify the results
        assertEquals(2, links.size()); // Verify that a new Link is added
        Link newLink = links.get(1);
        assertEquals("prevTargetPortId", newLink.getSource());
        assertEquals("elementId:1", newLink.getTarget());
    }
}
```

### Explanation
1. **Setup**: We create instances and mocks of the necessary objects. This includes `nodes`, `links`, `clrComponent`, etc.

2. **Previous Component Setup**: We simulate a scenario where the previous component type is "CABLE" by setting up the `clrComponentList` with a mocked `ClrComponent`.

3. **Current Component Setup**: We configure the current `ClrComponent` with the necessary `CableComp` details.

4. **Execution**: We execute the `process` method on the `cableProcessor` instance.

5. **Verification**: We verify that a new `Link` is added to the `links` list and check its source and target attributes to ensure they are correctly set as per the logic in the method.

By following this structure, you can cover the logic within the specified conditional block. Ensure you have all dependent classes and constants available in your test environment.