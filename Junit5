import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.fasterxml.jackson.databind.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.vbg.ledger.exception.FalloutException;
import com.verizon.vbg.ledger.listener.AccountEcpdService;
import com.verizon.vbg.ledger.listener.BatchLoaderUtils;
import com.verizon.vbg.ledger.listener.EventsMessageListener;
import com.verizon.vbg.ledger.listener.KafkaFalloutService;
import com.verizon.vbg.ledger.model.CustomerDetails;
import com.verizon.vbg.ledger.model.CustomerEcpdModel;
import com.verizon.vbg.ledger.model.MTNDetails;
import com.verizon.vbg.ledger.model.RequestJSONString;
import com.verizon.vbg.ledger.model.ServiceMessage;
import java.time.Calendar;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.SendResult;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.core.KafkaTemplate;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

@ExtendWith(MockitoExtension.class)
public class EventMessageListenerTest {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;
    @Mock
    private AccountEcpdService accountService;
    @Mock
    private KafkaFalloutService kafkaFalloutService;
    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;
    @Mock
    private BatchLoaderUtils batchLoaderUtils;
    @Mock
    private ObjectMapper om;
    @Captor
    private ArgumentCaptor<String> argumentCaptor;
    @Captor
    private ArgumentCaptor<ReactorKafkaSender.SendOperation<String, String>> sendOperationArgumentCaptor;
    private String transactionId = UUID.randomUUID().toString();

    @BeforeEach
    public void setup() {
        when(kafkaTemplate.send(any(ProducerRecord.class)))
                .thenReturn(Mono.just(new SendResult<>(null, null)));
    }

    @Nested
    @DisplayName("onMessage")
    class onMessage {

        @Test
        @DisplayName("Should return null when the payload is empty")
        public void shouldReturnNullWhenPayloadIsEmpty() {
            EventsMessageListener listener = new EventsMessageListener(null, null, null, null, null, null, null, null);
            listener.onMessage(null, "");
        }

        @Test
        @DisplayName("Should return null when serviceMessage cannot be converted")
        public void shouldReturnNullWhenServiceMessageCannotBeConverted() throws JsonProcessingException {
            when(batchLoaderUtils.convert(any(), any()))
                    .thenThrow(new JsonProcessingException("Error"));
            eventsMessageListener.onMessage(null, "{ \"key\": \"value\" }");
        }

        @Test
        @DisplayName("Should return null when requestJSONString cannot be converted")
        public void shouldReturnNullWhenRequestJSONStringCannotBeConverted() throws JsonProcessingException {
            ServiceMessage serviceMessage = new ServiceMessage();
            when(batchLoaderUtils.convert(any(), any()))
                    .thenReturn(serviceMessage);
            when(batchLoaderUtils.convert(any(), any()))
                    .thenThrow(new JsonProcessingException("Error"));
            eventsMessageListener.onMessage(null, "{\"RequestJSONString\":{}}");
        }

        @Test
        @DisplayName("Should return null when account number is not valid")
        public void shouldReturnNullWhenAccountNumberIsNotValid() {
            ServiceMessage serviceMessage = new ServiceMessage();
            RequestJSONString requestJSONString = new RequestJSONString();
            CustomerDetails customerDetails = new CustomerDetails();
            customerDetails.setAccountNumber("123");
            requestJSONString.setService(new Service());
            requestJSONString.getService().getServiceBody()
                    .setCallRequest(new com.verizon.vbg.ledger.model.CallRequest());
            requestJSONString.getService().getServiceBody()
                    .getCallRequest().setBody(new Body());
            requestJSONString.getService().getServiceBody()
                    .getCallRequest().getBody().setRelinquishingCustomerDetails(customerDetails);
            when(batchLoaderUtils.convert(any(), any()))
                    .thenReturn(serviceMessage, requestJSONString);
            when(batchLoaderUtils.isValidData(any()))
                    .thenReturn(false);
            eventsMessageListener.onMessage(null, "{\"RequestJSONString\":{}}");
        }

        @Test
        @DisplayName("Should not save failed records when ecpd is not found")
        public void shouldNotSaveFailedRecordsWhenEcpdNotFound() {
            ServiceMessage serviceMessage = new ServiceMessage();
            RequestJSONString requestJSONString = new RequestJSONString();
            CustomerDetails customerDetails = new CustomerDetails();
            customerDetails.setAccountNumber("123");
            requestJSONString.setService(new Service());
            requestJSONString.getService().getServiceBody()
                    .setCallRequest(new com.verizon.vbg.ledger.model.CallRequest());
            requestJSONString.getService().getServiceBody()
                    .getCallRequest().setBody(new Body());
            requestJSONString.getService().getServiceBody()
                    .getCallRequest().getBody().setRelinquishingCustomerDetails(customerDetails);
            when(batchLoaderUtils.convert(any(), any()))
                    .thenReturn(serviceMessage, requestJSONString);
            when(accountService.getEcpdByAcctId(any()))
                    .thenReturn(Mono.empty());
            eventsMessageListener.onMessage(null, "{\"RequestJSONString\":{}}");
            verify(kafkaFalloutService, times(0))
                    .saveFailedRecords(any(), any(), any(), any(), any());
        }

        @Test
        @DisplayName("Should save failed records when sensitivity is yes")
        public void shouldSaveFailedRecordsWhenSensitivityIsYes() {
            ServiceMessage serviceMessage = new ServiceMessage();
            RequestJSONString requestJSONString = new RequestJSONString();
            CustomerDetails customerDetails = new CustomerDetails();
            customerDetails.setAccountNumber("123");
            requestJSONString.setService(new Service());
            requestJSONString.getService().getServiceBody()
                    .setCallRequest(new com.verizon.vbg.ledger.model.CallRequest());
            requestJSONString.getService().getServiceBody()
                    .getCallRequest().setBody(new Body());
            requestJSONString.getService().getServiceBody()
                    .getCallRequest().getBody().setRelinquishingCustomerDetails(customerDetails);
            CustomerEcpdModel customerEcpdModel = new CustomerEcpdModel();
            customerEcpdModel.setSensitivity("y");
            when(batchLoaderUtils.convert(any(), any()))
                    .thenReturn(serviceMessage, requestJSONString);
            when(accountService.getEcpdByAcctId(any()))
                    .thenReturn(Mono.just(customerEcpdModel.getEcpd()));
            eventsMessageListener.onMessage(null, "{\"RequestJSONString\":{}}");
            verify(kafkaFalloutService, times(1))
                    .saveFailedRecords(any(), any(), argumentCaptor.capture(), any(), any());
            assertEquals("{\"RequestJSONString\":{}}", argumentCaptor.getValue());
        }

        @Test
        @DisplayName("Should not save failed records when sensitivity is no")
        public void shouldNotSaveFailedRecordsWhenSensitivityIsNo() {
            ServiceMessage serviceMessage = new ServiceMessage();
            RequestJSONString requestJSONString = new RequestJSONString();
            CustomerDetails customerDetails = new CustomerDetails();
            customerDetails.setAccountNumber("123");
            requestJSONString.setService(new Service());