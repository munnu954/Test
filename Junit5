import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

public class PostingRuleProcessingServiceTest {

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    private ObjectMapper objectMapper = new ObjectMapper();

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Test
    public void testApplyPostingRule() throws Exception {
        // Mock data
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");

        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "componentID");

        // Mock JSON response for topology details
        JsonNode topologyJsonNode = objectMapper.readTree("{\"topologyObjects\": [{\"object\": \"value\"}]}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(topologyJsonNode.toString()));

        // Execute the method
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verify the behavior and assertions
        assertNotNull(result);
        assertEquals("value", result.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_TopologyDetailsNull() throws Exception {
        // Mock data
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(responseEntity);
        when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");

        ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "componentID");

        // Mock JSON response with missing topologyObjects attribute
        JsonNode topologyJsonNode = objectMapper.readTree("{}");
        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenReturn(ResponseEntity.ok(topologyJsonNode.toString()));

        // Execute the method
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verify the behavior and assertions
        assertNotNull(result);
        assertNull(result.getTopologyDetails());
    }

    @Test
    public void testApplyPostingRule_Exception() throws Exception {
        // Mock data
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();

        when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString()))
                .thenThrow(new RuntimeException("Simulated exception"));

        // Execute the method
        Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

        // Verify the behavior and assertions
        assertNotNull(result);
        assertNull(result.getTopologyDetails());
        verify(PostingRuleProcessingService.LOG).error(eq("Exception while retrieving and parsing Topology Traversal API results:"), any());
    }
}