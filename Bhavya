To create JUnit test cases that specifically cover the conditional logic in the `RedisConfigCTI` class related to the `scaleThreadsViaRuntime` property, we will ensure that the tests validate the behavior when this property is set to both `true` and `false`. 

Hereâ€™s the adjusted test class that includes tests for the `scaleThreadsViaRuntime` logic, ensuring that the correct thread pool sizes are being used based on the runtime configuration:

### Adjusted JUnit Test Class for RedisConfigCTI

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import io.lettuce.core.resource.ClientResources;
import io.lettuce.core.resource.DefaultClientResources;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;

@ExtendWith(MockitoExtension.class)
class RedisConfigCTITest {

    @InjectMocks
    private RedisConfigCTI redisConfigCTI;

    @Mock
    private RedisConfigProperties cacheProps;

    @BeforeEach
    void setUp() {
        // Set default values for cacheProps to avoid null pointer exceptions
        cacheProps.commandTimeout = 60000L;
        cacheProps.shutdownTimeout = 10000L;
        cacheProps.standalone = true; // Default for standalone tests
        cacheProps.standaloneHost = "localhost";
        cacheProps.standalonePort = 6379;
        cacheProps.ioThreads = 2;
        cacheProps.compThreads = 4;
        cacheProps.master = "mymaster";
        cacheProps.node = Arrays.asList("localhost:26379");
        cacheProps.username = "user";
        cacheProps.sentinelpassword = "password";
    }

    @Test
    void testGetConnectionFactoryWithScaleThreadsViaRuntimeTrue() {
        // Set the scaleThreadsViaRuntime property to true
        cacheProps.scaleThreadsViaRuntime = true;

        // Execute the method to get the connection factory
        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();

        // Verify that the connection factory is not null
        assertNotNull(connectionFactory);
        assertTrue(connectionFactory instanceof LettuceConnectionFactory);

        // Verify that the ClientResources were created with runtime processor counts
        ClientResources clientResources = ((LettuceConnectionFactory) connectionFactory).getClientResources();
        assertNotNull(clientResources);
        assertEquals(Runtime.getRuntime().availableProcessors(), clientResources.getIoThreadPoolSize());
        assertEquals(Runtime.getRuntime().availableProcessors(), clientResources.getComputationThreadPoolSize());
    }

    @Test
    void testGetConnectionFactoryWithScaleThreadsViaRuntimeFalse() {
        // Set the scaleThreadsViaRuntime property to false
        cacheProps.scaleThreadsViaRuntime = false;

        // Execute the method to get the connection factory
        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();

        // Verify that the connection factory is not null
        assertNotNull(connectionFactory);
        assertTrue(connectionFactory instanceof LettuceConnectionFactory);

        // Verify that the ClientResources were created with configured thread counts
        ClientResources clientResources = ((LettuceConnectionFactory) connectionFactory).getClientResources();
        assertNotNull(clientResources);
        assertEquals(2, clientResources.getIoThreadPoolSize()); // Expected mocked value
        assertEquals(4, clientResources.getComputationThreadPoolSize()); // Expected mocked value
    }

    @Test
    void testGetConnectionFactorySentinelWithScaleThreadsViaRuntimeTrue() {
        // Test sentinel configuration with runtime scaling
        cacheProps.standalone = false; // Ensure we are testing sentinel mode
        cacheProps.scaleThreadsViaRuntime = true;

        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();

        assertNotNull(connectionFactory);
        assertTrue(connectionFactory instanceof LettuceConnectionFactory);

        // Verify that the ClientResources were created with runtime processor counts
        ClientResources clientResources = ((LettuceConnectionFactory) connectionFactory).getClientResources();
        assertNotNull(clientResources);
        assertEquals(Runtime.getRuntime().availableProcessors(), clientResources.getIoThreadPoolSize());
        assertEquals(Runtime.getRuntime().availableProcessors(), clientResources.getComputationThreadPoolSize());
    }

    @Test
    void testGetConnectionFactorySentinelWithScaleThreadsViaRuntimeFalse() {
        // Test sentinel configuration with config-based scaling
        cacheProps.standalone = false; // Ensure we are testing sentinel mode
        cacheProps.scaleThreadsViaRuntime = false;
        cacheProps.ioThreads = 0; // Test default behavior
        cacheProps.compThreads = 0; // Test default behavior

        RedisConnectionFactory connectionFactory = redisConfigCTI.getConnectionFactory();

        assertNotNull(connectionFactory);
        assertTrue(connectionFactory instanceof LettuceConnectionFactory);

        // Verify that the ClientResources were created with default values
        ClientResources clientResources = ((LettuceConnectionFactory) connectionFactory).getClientResources();
        assertNotNull(clientResources);
        assertEquals(DefaultClientResources.DEFAULT_IO_THREADS, clientResources.getIoThreadPoolSize());
        assertEquals(DefaultClientResources.DEFAULT_COMPUTATION_THREADS, clientResources.getComputationThreadPoolSize());
    }
}
```

### Key Changes Explained:

1. **Direct Field Access**: The public fields of the `RedisConfigProperties` class are directly mocked and set in the `setUp()` method.

2. **Tests for `scaleThreadsViaRuntime`**:
   - **`testGetConnectionFactoryWithScaleThreadsViaRuntimeTrue`**: This test ensures that when `scaleThreadsViaRuntime` is `true`, the `ClientResources` are configured using the number of available processors.
   - **`testGetConnectionFactoryWithScaleThreadsViaRuntimeFalse`**: This test verifies that when `scaleThreadsViaRuntime` is `false`, the `ClientResources` use the configured values.
   - **Sentinel-specific tests**: Additional tests ensure that the logic works correctly when testing with sentinel configurations, checking both conditions of `scaleThreadsViaRuntime`.

3. **Assertions**: Each test includes assertions that verify the expected values for thread pool sizes based on the configuration provided.

### Summary
This revised test class provides comprehensive coverage for the conditional logic in the `RedisConfigCTI` class regarding the `scaleThreadsViaRuntime` property. It checks both scenarios (true and false) for both standalone and sentinel Redis configurations, ensuring that the thread pool sizes are set as expected.