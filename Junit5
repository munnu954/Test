@ExtendWith(MockitoExtension.class)
public class CircuitValidatorTest {

    @InjectMocks
    private CircuitValidator circuitValidator;

    @Mock
    private RestTemplate restTemplate;

    private static final String URL = "http://example.com/api"; // Replace with your actual URL

    @BeforeEach
    public void setup() {
        ReflectionTestUtils.setField(circuitValidator, "cndCirclleaderMSServicelUrl", URL);
    }

    @Test
    public void testValidateCircuits_Success() throws NoDataFoundException, InternalServerErrorException {
        // Arrange
        List<String> circuitNameList = Arrays.asList("Circuit1", "Circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(Arrays.asList("Circuit1", "Circuit2"));

        CircuitDetailResponse response = new CircuitDetailResponse();
        // Populate response object with valid data
        response.setCircuitData(new CircuitData(
            Arrays.asList(new CircuitList(Arrays.asList(new Circuit("Circuit1"), new Circuit("Circuit2"))))
        ));

        ResponseEntity<CircuitDetailResponse> responseEntity = new ResponseEntity<>(response, HttpStatus.OK);

        Mockito.when(restTemplate.exchange(
            Mockito.eq(URL),
            Mockito.eq(HttpMethod.POST),
            Mockito.any(HttpEntity.class),
            Mockito.eq(CircuitDetailResponse.class)
        )).thenReturn(responseEntity);

        // Act
        List<String> result = circuitValidator.validateCircuits(circuitNameList, toValidateCircuitNameList);

        // Assert
        Assertions.assertEquals(2, result.size());
        Assertions.assertTrue(result.contains("Circuit1"));
        Assertions.assertTrue(result.contains("Circuit2"));
        Assertions.assertTrue(toValidateCircuitNameList.isEmpty());
    }

    @Test
    public void testValidateCircuits_NoDataFoundException() {
        // Arrange
        List<String> circuitNameList = Arrays.asList("Circuit1", "Circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(Arrays.asList("Circuit1", "Circuit2"));

        CircuitDetailResponse response = new CircuitDetailResponse();
        response.setCircuitData(new CircuitData(new ArrayList<>())); // Empty data

        ResponseEntity<CircuitDetailResponse> responseEntity = new ResponseEntity<>(response, HttpStatus.OK);

        Mockito.when(restTemplate.exchange(
            Mockito.eq(URL),
            Mockito.eq(HttpMethod.POST),
            Mockito.any(HttpEntity.class),
            Mockito.eq(CircuitDetailResponse.class)
        )).thenReturn(responseEntity);

        // Act & Assert
        Assertions.assertThrows(NoDataFoundException.class, () -> {
            circuitValidator.validateCircuits(circuitNameList, toValidateCircuitNameList);
        });
    }

    @Test
    public void testValidateCircuits_InternalServerErrorException() {
        // Arrange
        List<String> circuitNameList = Arrays.asList("Circuit1", "Circuit2");
        List<String> toValidateCircuitNameList = new ArrayList<>(Arrays.asList("Circuit1", "Circuit2"));

        Mockito.when(restTemplate.exchange(
            Mockito.eq(URL),
            Mockito.eq(HttpMethod.POST),
            Mockito.any(HttpEntity.class),
            Mockito.eq(CircuitDetailResponse.class)
        )).thenThrow(new ResourceAccessException("Internal server error"));

        // Act & Assert
        Assertions.assertThrows(InternalServerErrorException.class, () -> {
            circuitValidator.validateCircuits(circuitNameList, toValidateCircuitNameList);
        });
    }
}