Certainly! Here is the extended JUnit5 test case code to cover all the branches of the `createAlarm(String msg)` method of the `AlarmRepositoryImpl` class for 100% code coverage. 

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.core.env.Environment;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;
    private static Environment env;
    private static AlarmPostingUtils alarmPostingUtils;
    private static AlarmPostingConstants alarmPostingConstants;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
        env = mock(Environment.class);
        alarmPostingUtils = mock(AlarmPostingUtils.class);
        alarmPostingConstants = mock(AlarmPostingConstants.class);
        when(env.getProperty(anyString())).thenReturn("testValue");
        ReflectionTestUtils.setField(alarmPostingUtils, "env", env);
    }

    @Test
    void testCreateAlarm() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);
        typeMap.put("Unknown", 0);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        JsonNode json = mock(JsonNode.class);
        String j = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        json = obj.readTree(j);
        alarmRepositoryImpl.createAlarm(j);
    }

    @Test
    void testCreateAlarmWithNullReportingObject() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);
        typeMap.put("Unknown", 0);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        JsonNode json = mock(JsonNode.class);
        String j = "{ \"externalAlarmId\":\"pqwer\", \"reportingObject\":null, \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        json = obj.readTree(j);
        Alarm alarm = alarmRepositoryImpl.createAlarm(j);
        assertNotNull(alarm);
    }

    @Test
    void testCreateAlarmWithEmptyReportingObject() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);
        typeMap.put("Unknown", 0);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        JsonNode json = mock(JsonNode.class);
        String j = "{ \"externalAlarmId\":\"pqwer\", \"reportingObject\":\"\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        json = obj.readTree(j);
        Alarm alarm = alarmRepositoryImpl.createAlarm(j);
        assertNotNull(alarm);
    }

    @Test
    void testCreateAlarmExceptionHandling() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String j = "{ invalid json }";
        Alarm alarm = alarmRepositoryImpl.createAlarm(j);
        assertNull(alarm);
    }

    @Test
    void testCreateAlarmWithNullPerceivedSeverity() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);
        typeMap.put("Unknown", 0);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        JsonNode json = mock(JsonNode.class);
        String j = "{ \"externalAlarmId\":\"pqwer\", \"perceivedSeverity\":null, \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        json = obj.readTree(j);
        Alarm alarm = alarmRepositoryImpl.createAlarm(j);
        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarmWithEmptyPerceivedSeverity() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);
        typeMap.put("Unknown", 0);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        JsonNode json = mock(JsonNode.class);
        String j = "{ \"externalAlarmId\":\"pqwer\", \"perceivedSeverity\":\"\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        json = obj.readTree(j);
        Alarm alarm = alarmRepositoryImpl.createAlarm(j);
        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testCreateAlarmWithServiceAffecting() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);
        typeMap.put("Unknown", 0);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther