```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.UnsupportedEncodingException;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;

@ExtendWith(MockitoExtension.class)
class CommonWrapperControllerTest {

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @InjectMocks
    private CommonWrapperController commonWrapperController;

    @Test
    void testGetClrGraphics_Exception() {
        // Arrange
        String circuitId = "testCircuit";
        String sourceSys = "testSource";
        String cnd = "testCnd";
        String phyModel = "testPhyModel";

        when(clrGraphicsService.getClrGraphics(circuitId, sourceSys, cnd, phyModel)).thenThrow(new RuntimeException("Test Exception"));

        // Act
        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
    }

    @Test
    void testGetClrGraphics_Successful() {
        // Arrange
        String circuitId = "testCircuit";
        String sourceSys = "testSource";
        String cnd = "testCnd";
        String phyModel = "testPhyModel";
        String expectedResponse = "Test Response";

        when(clrGraphicsService.getClrGraphics(circuitId, sourceSys, cnd, phyModel)).thenReturn(expectedResponse);

        // Act
        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertEquals(expectedResponse, response);
    }

    @Test
    void testGetClrGraphics_ExceptionInCatchBlock() throws UnsupportedEncodingException {
        // Arrange
        String circuitId = "invalidValue";

        doThrow(new UnsupportedEncodingException("Test UnsupportedEncodingException")).when(clrGraphicsService).getClrGraphics(eq(circuitId), anyString(), anyString(), anyString());

        // Act
        String response = commonWrapperController.getClrGraphics(circuitId, null, null, null);

        // Assert
        assertNotNull(response);
    }
}
```