import com.verizon.apollo.suppression.model.AlarmDetailsModel;
import com.verizon.apollo.suppression.repository.CbrsSuppressionRepository;
import com.verizon.apollo.suppression.model.CbrsSuppressionAlarm;
import com.verizon.apollo.suppression.repository.AlarmPostingRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;
import static org.mockito.ArgumentMatchers.*;

@ExtendWith(MockitoExtension.class)
public class EnrichmentServiceTest {

    @Mock
    private CbrsSuppressionRepository cbrsSuppressionRepository;

    @Mock
    private AlarmPostingRepository alarmPostingRepository;

    @InjectMocks
    private EnrichmentService enrichmentService;

    @Test
    public void testExecuteEnrichmentTask_AlarmListToBeEnrichedNotEmpty() {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();
        List<CbrsSuppressionAlarm> alarmList = new ArrayList<>();
        CbrsSuppressionAlarm alarm = new CbrsSuppressionAlarm();
        alarm.setTotalActiveSuppressedCount(5);
        alarm.setTotalSuppressedCount(10);
        alarmList.add(alarm);

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt())).thenReturn(java.util.Optional.of(alarmList));
        when(alarmPostingRepository.findByAlarmIdentity(anyString())).thenReturn(java.util.Optional.of(new AlarmDetailsModel("{}", 1L));

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, true);

        assertEquals(false, result);
        verify(cbrsSuppressionRepository, times(1)).updateAlarmEnrichmentTime(any(), anyString());
    }

    @Test
    public void testExecuteEnrichmentTask_AlarmListToBeEnrichedEmpty() {
        OffsetDateTime currentTimestamp = OffsetDateTime.now();

        when(cbrsSuppressionRepository.retrieveActiveSuppressionPatterns(anyInt())).thenReturn(java.util.Optional.of(new ArrayList<>()));

        Boolean result = enrichmentService.executeEnrichmentTask(currentTimestamp, true);

        assertEquals(false, result);
    }

    // Add more test cases to cover additional scenarios

}
```