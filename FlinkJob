Here is an example of Junit5 test cases for Kafka Producer and Kafka Consumer using @Mock method for success and failure scenarios:

import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class KafkaTest {

    @Mock
    private KafkaProducer<String, String> producer;

    @Mock
    private KafkaConsumer<String, String> consumer;

    @Test
    public void testKafkaProducerSuccess() {
        // Arrange
        String topic = "test-topic";
        String key = "key";
        String value = "value";

        // Act
        producer.send(new ProducerRecord<>(topic, key, value));

        // Assert
        verify(producer, times(1)).send(any(ProducerRecord.class));
    }

    @Test
    public void testKafkaProducerFailure() {
        // Arrange
        String topic = "test-topic";
        String key = "key";
        String value = "value";

        // Act
        doThrow(new RuntimeException("Failed to send message")).when(producer).send(any(ProducerRecord.class));

        // Assert
        assertThrows(RuntimeException.class, () -> producer.send(new ProducerRecord<>(topic, key, value)));
    }

    @Test
    public void testKafkaConsumerSuccess() {
        // Arrange
        String topic = "test-topic";
        ConsumerRecords<String, String> records = new ConsumerRecords<>();

        // Act
        when(consumer.poll(any())).thenReturn(records);

        // Assert
        verify(consumer, times(1)).poll(any());
    }

    @Test
    public void testKafkaConsumerFailure() {
        // Arrange
        String topic = "test-topic";

        // Act
        doThrow(new RuntimeException("Failed to fetch records")).when(consumer).poll(any());

        // Assert
        assertThrows(RuntimeException.class, () -> consumer.poll(any()));
    }
}


In the above code, we have used the @Mock annotation to create mock instances of KafkaProducer and KafkaConsumer. We then write test cases for success and failure scenarios for both the producer and consumer. We use Mockito's verify and when methods to verify the behavior of the mocks and simulate failure scenarios. Finally, we use assertThrows to assert that the expected exceptions are thrown in the failure scenarios.