To achieve 100% code coverage for the `validateIterator` method in the `MtnInsightsValidator` class, you need to write test cases that cover all logical branches and paths. Here's how you can do it using JUnit 5:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class MtnInsightsValidatorIteratorTest {

    private MtnInsightsValidator validator;
    private MtnInsightsAttributes mtnInsightsAttributes;

    @BeforeEach
    public void setUp() {
        validator = new MtnInsightsValidator();
        mtnInsightsAttributes = new MtnInsightsAttributes();
    }

    @Test
    public void testValidateIteratorWithAllAttributesPresent() {
        mtnInsightsAttributes.setEcpdId("ecpdId");
        mtnInsightsAttributes.setMtn("1234567890");
        mtnInsightsAttributes.setInsightCategory("VBGMyBiz");
        mtnInsightsAttributes.setInsightName("MyBizReg");
        mtnInsightsAttributes.setOutageId("outageId");

        validator.validateIterator(null, mtnInsightsAttributes, "LogVal");
    }

    @Test
    public void testValidateIteratorWithMissingMtn() {
        mtnInsightsAttributes.setEcpdId("ecpdId");
        mtnInsightsAttributes.setInsightCategory("VBGMyBiz");
        mtnInsightsAttributes.setInsightName("MyBizReg");

        Executable executable = () -> validator.validateIterator(null, mtnInsightsAttributes, "LogVal");
        assertThrows(InvalidRequestException.class, executable, "LogVal" + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }

    @Test
    public void testValidateIteratorWithMissingInsightCategoryAndName() {
        mtnInsightsAttributes.setEcpdId("ecpdId");
        mtnInsightsAttributes.setMtn("1234567890");

        Executable executable = () -> validator.validateIterator(null, mtnInsightsAttributes, "LogVal");
        assertThrows(InvalidRequestException.class, executable, "LogVal" + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ);
    }

    @Test
    public void testValidateIteratorWithInvalidInsightCategoryAndName() {
        mtnInsightsAttributes.setEcpdId("ecpdId");
        mtnInsightsAttributes.setMtn("1234567890");
        mtnInsightsAttributes.setInsightCategory("InvalidCategory");
        mtnInsightsAttributes.setInsightName("InvalidName");

        validator.validateIterator(null, mtnInsightsAttributes, "LogVal");
    }

    @Test
    public void testValidateIteratorWithNetworkOutageCategoryAndMissingAttributes() {
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsAttributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));

        Executable executable = () -> validator.validateIterator(null, mtnInsightsAttributes, "LogVal");
        assertThrows(InvalidRequestException.class, executable, "LogVal" + EventLedgerConstants.LOGGER_MESSAGE_NETWORK_OUTAGE);
    }

    @Test
    public void testValidateIteratorWithNetworkOutageCategoryAndAllAttributesPresent() {
        mtnInsightsAttributes.setEcpdId("ecpdId");
        mtnInsightsAttributes.setMtn("1234567890");
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        mtnInsightsAttributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));
        mtnInsightsAttributes.setOutageId("outageId");

        validator.validateIterator(null, mtnInsightsAttributes, "LogVal");
    }

    @Test
    public void testValidateIteratorWithInsightNameOnlyMyBiz() {
        mtnInsightsAttributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));

        Executable executable = () -> validator.validateIterator(null, mtnInsightsAttributes, "LogVal");
        assertThrows(InvalidRequestException.class, executable, "LogVal" + EventLedgerConstants.LOGGER_MESSAGE_MYBIZ_MAND);
    }

    @Test
    public void testValidateIteratorWithInsightCategoryOnlyNetworkOutage() {
        mtnInsightsAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);

        Executable executable = () -> validator.validateIterator(null, mtnInsightsAttributes, "LogVal");
        assertThrows(InvalidRequestException.class, executable, "LogVal" + EventLedgerConstants.LOGGER_MESSAGE_NETWORKOUTAGE_MAND);
    }
}
```

### Key Coverage Points:

1. **All Attributes Present**: Tests where all necessary attributes are provided and valid.
2. **Missing Attributes**: Tests where one or more required attributes are missing, triggering each specific error message.
3. **Invalid Category and Name**: Tests with incorrect category and name values that do not match any specific case, ensuring no exception is thrown.
4. **Specific Scenarios**: Tests for each branch with specific logic related to `MyBiz` and `Network Outage` categories.

By including these tests, you ensure that every branch in the `validateIterator` method is covered and that exceptions are thrown when expected conditions are not met. Adjust the test data accordingly to match your application's specific logic and requirements.