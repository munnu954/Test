import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.core.step.skip.SkipLimitExceededException;
import org.springframework.batch.item.file.FlatFileParseException;
import org.springframework.batch.item.file.ResourceAware;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.IOException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
public class EcpdFeedBatchConfigurationTest {

    @InjectMocks
    private EcpdFeedBatchConfiguration.FileSkipListener fileSkipListener;

    @Mock
    private ErrorFileMovement errorFileMovement;

    private EcpdGSAMSensitiveProfile ecpdGSAMSensitiveProfile;

    @BeforeEach
    void setUp() {
        ecpdGSAMSensitiveProfile = new EcpdGSAMSensitiveProfile();
        ecpdGSAMSensitiveProfile.setFileName("test.csv");
        ReflectionTestUtils.setField(fileSkipListener, "fileFeedLocation", "/path/to/file.csv");
    }

    @Test
    void shouldMoveErrorFileToErrorDirectoryOnSkipInProcess() {
        Exception exception = new Exception("Error occurred during processing");
        doNothing().when(errorFileMovement).moveErrorFiletoErrorDir(anyString(), anyString(), anyString());

        fileSkipListener.onSkipInProcess(ecpdGSAMSensitiveProfile, exception);

        verify(errorFileMovement).moveErrorFiletoErrorDir(ecpdGSAMSensitiveProfile.getFileName(), "/path/to", "none");
    }

    @Test
    void shouldMoveErrorFileToErrorDirectoryOnSkipInWrite() {
        Exception exception = new Exception("Error occurred during write");
        doNothing().when(errorFileMovement).moveErrorFiletoErrorDir(anyString(), anyString(), anyString());

        fileSkipListener.onSkipInWrite(ecpdGSAMSensitiveProfile, exception);

        verify(errorFileMovement).moveErrorFiletoErrorDir(ecpdGSAMSensitiveProfile.getFileName(), "/path/to", "none");
    }

    @Test
    void shouldWriteErrorRecordsToFileOnSkipInReadForFlatFileParseException() {
        FlatFileParseException ffpe = new FlatFileParseException("Error occurred during parsing", "test,data,row");
        doNothing().when(errorFileMovement).writeErrorRecordsToFile(anyString(), anyString(), anyString());
        doNothing().when(errorFileMovement).moveErrorFile(anyString(), anyString());

        fileSkipListener.onSkipInRead(ffpe);

        verify(errorFileMovement).writeErrorRecordsToFile("none", "test.csv_error", "PROFILE_ID|~COMPANY_NAME| ~PROFILE_TYPE|~SENSITIVITY_LEVEL|~SENSITIVITY_TOKEN|~ACTION\ntest,data,row\n");
    }

    @Test
    void shouldMoveErrorFileToErrorDirectoryOnSkipInReadForIOException() {
        IOException ioe = new IOException("Error occurred during file read");
        doNothing().when(errorFileMovement).moveErrorFile(anyString(), anyString());

        fileSkipListener.onSkipInRead(ioe);

        verify(errorFileMovement).moveErrorFile("/path/to/test.csv", "none");
    }

    @Test
    void shouldMoveErrorFileToErrorDirectoryOnSkipInReadForGenericException() {
        Exception e = new Exception("Generic exception occurred");
        doNothing().when(errorFileMovement).moveErrorFile(anyString(), anyString());

        fileSkipListener.onSkipInRead(e);

        verify(errorFileMovement).moveErrorFile("/path/to/test.csv", "none");
    }
}