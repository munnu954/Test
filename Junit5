import static org.junit.jupiter.api.Assertions.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.MockitoAnnotations;
import org.mockito.InjectMocks;

class KafkaConsumerTest {

    @InjectMocks
    private KafkaConsumer kafkaConsumer;

    @TempDir
    Path tempDir;

    @BeforeEach
    void setUp(){
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testWriteFileSuccess() throws IOException{
        String sourceFilePath = "src/test/resources/files/indian_cities.csv";
        String destinationFolderPath = tempDir.toString();

        kafkaConsumer.writeFile(sourceFilePath, destinationFolderPath);

        Path expectedPath = Paths.get(destinationFolderPath, "indian_cities.csv");
        assertTrue(Files.exists(expectedPath));
    }

    @Test
    void testWriteFileWithEmptySourcePath() {
        String sourceFilePath = "";
        String destinationFolderPath = tempDir.toString();

        assertThrows(IOException.class, () -> {
            kafkaConsumer.writeFile(sourceFilePath, destinationFolderPath);
        });
    }

    @Test
    void testWriteFileWithNonExistentSourcePath() {
        String sourceFilePath = "nonexistent.csv";
        String destinationFolderPath = tempDir.toString();

        assertThrows(IOException.class, () -> {
            kafkaConsumer.writeFile(sourceFilePath, destinationFolderPath);
        });
    }

    @Test
    void testWriteFileWithInvalidDestinationFolder() {
        String sourceFilePath = "src/test/resources/files/indian_cities.csv";
        String destinationFolderPath = "invalidPath";

        assertThrows(IOException.class, () -> {
            kafkaConsumer.writeFile(sourceFilePath, destinationFolderPath);
        });
    }

    @Test
    void testWriteFileWithExistingFileInDestinationFolder() throws IOException{
        String sourceFilePath = "src/test/resources/files/indian_cities.csv";
        String destinationFolderPath = tempDir.toString();
        Path dummyFile = Paths.get(destinationFolderPath, "dummy.csv");
        Files.createFile(dummyFile);

        assertThrows(IOException.class, () -> {
            kafkaConsumer.writeFile(sourceFilePath, destinationFolderPath);
        });
    }
}