public boolean writeMessage(String inputFilePath, String url, Integer port, String outputFilePath, String delimiters, String fileType, DateTime dateReceived, Integer noOfRecordsInTheFile, Integer noOfRecordsProcessed, Integer noOfRecordsFailed, UUID jobId, UUID jarId, UUID collectorId, JobStatus jobStatus) {
    UnifiedAuditMessage auditMsg = new UnifiedAuditMessage(inputFilePath, url, port, outputFilePath, delimiters, fileType, dateReceived, noOfRecordsInTheFile, noOfRecordsProcessed, noOfRecordsFailed, jobId, jarId, collectorId, jobStatus);
    return writeMessage(auditMsg);
}


import org.springframework.stereotype.Service;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class KafkaAuditProducer {
    private static final Logger Logger = LoggerFactory.getLogger(KafkaAuditProducer.class);
    private final KafkaTemplate<String, Object> kafkaTemplate;

    @Value("${spring.kafka.producer.topic-name}")
    private String topicName;

    @Autowired
    public KafkaAuditProducer(KafkaTemplate<String, Object> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public void sendMessageAndLog(String inputFilePath, String url, Integer port, String outputFilePath, 
                                  String delimiters, String fileType, DateTime date_received, 
                                  Integer no_of_records_in_the_file, Integer no_of_records_processed, 
                                  Integer no_of_records_failed, UUID job_id, UUID jar_id, 
                                  List<String> exceptions, UUID collector_id, JobStatus job_status) {
        UnifiedAuditMessage auditMsg = new UnifiedAuditMessage(inputFilePath, url, port, outputFilePath,
                                delimiters, fileType, date_received, no_of_records_in_the_file,
                                no_of_records_processed, no_of_records_failed, job_id, jar_id,
                                collector_id, job_status);
        try {
            this.kafkaTemplate.send(topicName, auditMsg);
            Logger.info("Kafka status message {}", auditMsg);
        } catch (Exception e) {
            Logger.error("Failed to send Kafka message: {}", e.getMessage());
        }
    }
    
    public boolean writeMessage(UnifiedAuditMessage auditMsg) {
        try {
            this.kafkaTemplate.send(topicName, auditMsg);
            Logger.info("Kafka status message {}", auditMsg);
        } catch (Exception e) {
            Logger.error("Failed to send Kafka message: {}", e.getMessage());
            return false;
        }
        return true;
    }
}