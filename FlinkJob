public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();

    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }

    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        String[] headerRow = lines[2].split(","); // Here, we are picking the 3rd line as the headers

        JSONObject obj = new JSONObject();

        for (int i = 0; i < headerRow.length; i++) {
            String header = headerRow[i].trim().replace("\"", "");
            if (header.equals("SystemId")) {
                String systemId = lines[0].substring(lines[0].indexOf("#") + 1).trim();
                obj.put(header, systemId);
            } else if (header.equals("NodeIP")) {
                String nodeIP = lines[1].substring(lines[1].indexOf("#") + 1).trim();
                obj.put(header, nodeIP);
            } else {
                for (int j = 3; j < lines.length; j++) { // Start from the 4th line (index 3) as data lines
                    String[] data = lines[j].split(",");
                    if (headerRow.length == data.length) {
                        String jsonkey = header;
                        String jsonvalue = data[i].trim().replace("\"", "");
                        obj.put(jsonkey, jsonvalue);
                        this.successIntCounter.add(1);
                    } else {
                        this.failureIntCounter.add(1);
                    }
                }
            }
        }

        collector.collect(obj.toString());
    }
}