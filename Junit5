Sure, I'll incorporate the provided initialization and values for the `VMBConfig` instance into the `@BeforeEach` block of the test class. Here is the reframed test class:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.logging.log4j.Logger;
import org.apache.pulsar.client.api.Consumer;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.PulsarClientException;
import org.apache.pulsar.client.api.SubscriptionType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.actuate.health.Health;

@ExtendWith(MockitoExtension.class)
public class AlarmReceiverTest {

    @Mock
    private VMBParams mockParams;

    @Mock
    private AlarmPostGreService mockAlarmPostGreService;

    @Mock
    private PostingService mockAlarmPointLookupService;

    @Mock
    private Logger mockLogger;

    @InjectMocks
    private AlarmReceiver alarmReceiver;

    private VMBConfig mockVMBConfig;

    @BeforeEach
    public void setUp() throws Exception {
        mockVMBConfig = new VMBConfig();
        mockVMBConfig.setTopic("exampleTopic");
        mockVMBConfig.setTlsTrustCertsFilePath("/path/to/trustCertsFile");
        mockVMBConfig.setTlsCertFile("/path/to/certFile");
        mockVMBConfig.setTlsKeyFile("/path/to/keyFile");
        mockVMBConfig.setServiceURL("https://example.com");
        mockVMBConfig.setSubscriptionName("exampleSubscription");
        mockVMBConfig.setPublicKeyFile("/path/to/publicKey");
        mockVMBConfig.setPrivateKeyFile("/path/to/privateKey");
        mockVMBConfig.setSubscriptionType(SubscriptionType.SHARED);
        mockVMBConfig.setVmbRetryCount(5);
        mockVMBConfig.setVmbRetryTimeIntervalInSeconds(20);
        mockVMBConfig.setVmbRetryCycleTimeIntervalInMins(60);
        mockVMBConfig.setBatchingMaxPublishDelay(1000);
        mockVMBConfig.setSendTimeout(30);
        mockVMBConfig.setBlockIfQueueFull(true);
        mockVMBConfig.setEnableKeyBaching(false);
        mockVMBConfig.setPublicKeyImpactFile("/path/to/publicKeyImpactFile");
        mockVMBConfig.setVMBConnectionFailureThresholdCount(3);
        mockVMBConfig.setEncryptionStatus(true);
        mockVMBConfig.setKeySharedSubscription(false);
        mockVMBConfig.setConsumerName("exampleConsumer");

        // Initialize private fields using reflection if any
        // Example: setPrivateField(mockVMBConfig, "privateFieldName", "privateValue");

        when(mockParams.getConsumerVMBConfig()).thenReturn(mockVMBConfig);

        // Set up reflection to call private getConnection() method
        Method getConnectionMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        getConnectionMethod.setAccessible(true);
        getConnectionMethod.invoke(alarmReceiver);
    }

    private void setPrivateField(Object object, String fieldName, Object value) throws Exception {
        Field field = object.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(object, value);
    }

    @Test
    public void testGetConnectionWithValidConsumer() throws Exception {
        when(VMBUtil.createConsumerConnection(any(VMBConfig.class), isNull())).thenReturn(mock(Consumer.class));

        Method getConnectionMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        getConnectionMethod.setAccessible(true);
        getConnectionMethod.invoke(alarmReceiver);

        assertEquals(Health.up().build(), alarmReceiver.health());
    }

    @Test
    public void testGetConnectionWithNullConsumer() throws Exception {
        when(VMBUtil.createConsumerConnection(any(VMBConfig.class), isNull())).thenReturn(null);

        Method getConnectionMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        getConnectionMethod.setAccessible(true);

        assertThrows(IllegalStateException.class, () -> getConnectionMethod.invoke(alarmReceiver));
    }

    @Test
    public void testGetConnectionWithException() throws Exception {
        when(VMBUtil.createConsumerConnection(any(VMBConfig.class), isNull())).thenThrow(new RuntimeException("Test exception"));

        Method getConnectionMethod = AlarmReceiver.class.getDeclaredMethod("getConnection");
        getConnectionMethod.setAccessible(true);

        assertThrows(IllegalStateException.class, () -> getConnectionMethod.invoke(alarmReceiver));
    }

    @Test
    public void testReceiveMessagesWithValidMessage() throws Exception {
        Consumer<byte[]> mockConsumer = mock(Consumer.class);
        Message<byte[]> mockMessage = mock(Message.class);
        when(mockConsumer.receive(3, TimeUnit.SECONDS)).thenReturn(mockMessage);
        when(mockMessage.getData()).thenReturn(new byte[]{});

        Field consumerField = AlarmReceiver.class.getDeclaredField("_consumer");
        consumerField.setAccessible(true);
        consumerField.set(alarmReceiver, mockConsumer);

        alarmReceiver.receiveMessages();

        verify(mockLogger).info("Received Message counter: 1");
    }

    @Test
    public void testReceiveMessagesWithNullMessage() throws Exception {
        Consumer<byte[]> mockConsumer = mock(Consumer.class);
        when(mockConsumer.receive(3, TimeUnit.SECONDS)).thenReturn(null);

        Field consumerField = AlarmReceiver.class.getDeclaredField("_consumer");
        consumerField.setAccessible(true);
        consumerField.set(alarmReceiver, mockConsumer);

        alarmReceiver.receiveMessages();

        verify(mockLogger, never()).info("Received Message counter: 1");
    }

    @Test
    public void testAcknowledgeMessage() throws Exception {
        Consumer<byte[]> mockConsumer = mock(Consumer.class);
        Message<byte[]> mockMessage = mock(Message.class);

        Field consumerField = AlarmReceiver.class.getDeclaredField("_consumer");
        consumerField.setAccessible(true);
        consumerField.set(alarmReceiver, mockConsumer);

        alarmReceiver.acknowledgeMessage(mockMessage);

        verify(mockConsumer).acknowledge(mockMessage);
    }

    @Test
    public void testAcknowledgeMessageWithException() throws Exception {
        Consumer<byte[]> mockConsumer = mock(Consumer.class);
        Message<byte[]> mockMessage = mock(Message.class);
        doThrow(new PulsarClientException("Test exception")).when(mockConsumer).acknowledge(mockMessage);

        Field consumerField = AlarmReceiver.class.getDeclaredField("_consumer");
        consumerField.setAccessible(true);
        consumerField.set(alarmReceiver, mockConsumer);

        alarmReceiver.acknowledgeMessage(mockMessage);

        verify(mockLogger).warn(anyString());
    }

    @Test
    public void testSyncReconnect() throws Exception {
        Consumer<byte[]> mockConsumer = mock(Consumer.class);
        when(mockConsumer.isConnected()).thenReturn(false);

        Field consumerField = AlarmReceiver.class.getDeclaredField("_consumer");
        consumerField.setAccessible(true);
        consumerField.set(alarmReceiver, mockConsumer);

        Field reconnectStageField = AlarmReceiver.class.getDeclaredField("reconnectStage");
        reconnectStageField.setAccessible(true);
        reconnectStageField.set(alarmReceiver, new AtomicInteger(AlarmPostingConstants.VMB_INITIATE_RECONNECT));

        alarmReceiver.syncReconnect();

        verify(mockConsumer).close();
    }

    @Test
    public void testHealth() {
        assertEquals(Health.up().build(), alarmReceiver.health());
    }

    @Test
    public void testShutdown() throws Exception {
        Consumer<byte[]> mockConsumer = mock(Consumer.class);

        Field consumerField = AlarmReceiver.class.getDeclaredField("_consumer");
        consumerField.setAccessible(true);
        consumerField.set(alarmReceiver, mockConsumer);

        alarmReceiver.shutDown();

        verify(mockConsumer).close();
    }
}
```

### Explanation:

1. **Initialization of `VMBConfig`:**
   - The `VMBConfig` instance `mockVMBConfig` is initialized and all its fields are set with the provided values in the `@BeforeEach` method.
   - The `mockParams.getConsumerVMBConfig()` method is stubbed to return `mockVMBConfig`.

2. **Refactored Test Cases:**
   - The test cases remain the same as they are designed to test various scenarios for the `AlarmReceiver` class.

This setup should initialize `VMBConfig` with the specified values and prepare the test environment accordingly.