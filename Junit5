The error you're encountering, `java.lang.NoSuchMethodError`, indicates that the method `new JSONObject(Object object)` doesn't exist in the version of the `org.json` library you are using. The constructor that takes an `Object` isn't available in this library version, which is causing the error.

To resolve this, you can convert your object to a JSON string first and then use the `JSONObject(String source)` constructor. Here's how you can adjust your code:

### Updated `MtnInsightsValidator` Class

```java
@Component
public class MtnInsightsValidator extends AbstractInsightsValidator {

    public void validate(MtnInsightsRequest request) throws InvalidRequestException {
        validate(request.getServiceHeader());
        String errorMessage = null;

        if (!request.getRequestType().equals(InsightsRequestType.INSERTMTNINSIGHTS)) {
            errorMessage = "Invalid request type ";
        }
        if (request.getKeyAttributes() == null && request.getListKeyAttributes() == null) {
            errorMessage = "Either KeyAttributes (Single) or ListKeyAttributes (Multiple) are required.";
        } else if (request.getKeyAttributes() != null) {
            validateIterator(errorMessage, request.getKeyAttributes(), "KeyAttributes");
        } else if (request.getListKeyAttributes() != null) {
            for (int i = 0; i < request.getListKeyAttributes().length; i++) {
                validateIterator(errorMessage, request.getListKeyAttributes()[i], "ListKeyAttributes");
            }
        }
        if (errorMessage != null) {
            throw new InvalidRequestException(errorMessage);
        }
    }

    public void validateIterator(String errorMessage, MtnInsightsAttributes mtnInsightsAttributes, String logVal)
            throws InvalidRequestException {
        try {
            JSONObject jsonObject = new JSONObject(mtnInsightsAttributes.toJsonString());
            // Validate attributes here
        } catch (JSONException e) {
            throw new InvalidRequestException("Invalid JSON structure: " + e.getMessage());
        }
        
        // Add your validation logic here...

        if (errorMessage != null) {
            throw new InvalidRequestException(errorMessage);
        }
    }

    public void validate(MtnInsightsSearchRequest request) throws InvalidRequestException {
        validate(request.getServiceHeader());
        String errorMessage = null;

        try {
            JSONObject jsonObject = new JSONObject(request.getServiceRequest().toJsonString());
            // Perform validation
        } catch (JSONException e) {
            throw new InvalidRequestException("Invalid JSON structure: " + e.getMessage());
        }

        if (jsonObject.has("ecpdId") && jsonObject.has("mtn") && jsonObject.has("insightCategory")
                && jsonObject.has("insightName")) {
            if (isEmpty(request.getServiceRequest().getMtn())
                    || isEmpty(request.getServiceRequest().getInsightCategory()[0])
                    || isEmpty(request.getServiceRequest().getInsightName()[0])
                    || isEmpty(request.getServiceRequest().getEcpdId())) {
                errorMessage = MTN_SEARCH_MAND_FIELDS_CHECK;
            }
        } else {
            errorMessage = "ServiceRequest with Insight Category and Insight Name, MTN, ECPD id are required.";
        }
        if (errorMessage != null) {
            throw new InvalidRequestException(errorMessage);
        }
    }
}
```

### Additional Notes:

1. **JSON Conversion**: Make sure to implement a method in `MtnInsightsAttributes` and `MtnInsightsSearchParam` classes that converts the object to a JSON string, such as `toJsonString()`. This will be used to create the `JSONObject`.

2. **Error Handling**: Wrapped the `JSONObject` creation in a try-catch block to handle potential JSON parsing errors.

By converting your objects to JSON strings first and then using the `JSONObject(String)` constructor, you can avoid the `NoSuchMethodError`. Make sure the `toJsonString()` method is implemented correctly in your data classes, ensuring all necessary fields are serialized to JSON format as expected.