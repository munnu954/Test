import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.stream.Stream;

class ArchivalFileMovementTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(ArchivalFileMovementTest.class);

    @TempDir
    Path tempDir;

    @Test
    void testMoveFilesMatchingPattern_Success() throws Exception {
        // Arrange
        ArchivalFileMovement archivalFileMovement = new ArchivalFileMovement();
        String sourcePathPattern = "src/test/resources/files/*.txt";
        String destinationPath = tempDir.toString();

        // Act
        archivalFileMovement.moveFilesMatchingPattern(sourcePathPattern, destinationPath);

        // Assert
        Assertions.assertEquals(2, Files.list(tempDir).count(), "Unexpected number of files in the destination directory");
    }

    @Test
    void testMoveFilesMatchingPattern_Failure() throws Exception {
        // Arrange
        ArchivalFileMovement archivalFileMovement = Mockito.spy(ArchivalFileMovement.class);
        String sourcePathPattern = "src/test/resources/files/*.txt";
        String destinationPath = tempDir.toString();
        Mockito.doThrow(new IOException("Test exception")).when(archivalFileMovement).moveFile(Mockito.any(Path.class), Mockito.anyString());

        // Act
        archivalFileMovement.moveFilesMatchingPattern(sourcePathPattern, destinationPath);

        // Assert
        Mockito.verify(archivalFileMovement, Mockito.times(2)).moveFile(Mockito.any(Path.class), Mockito.anyString());
    }

    @Test
    void testGetSourceDirectory() throws Exception {
        // Arrange
        ArchivalFileMovement archivalFileMovement = new ArchivalFileMovement();
        String sourcePathPattern = "src/test/resources/files/*.txt";

        // Act
        Path sourceDir = getPrivateMethod(archivalFileMovement, "getSourceDirectory", String.class).invoke(archivalFileMovement, sourcePathPattern);

        // Assert
        Assertions.assertEquals(Paths.get("src/test/resources/files"), sourceDir, "Unexpected source directory");
    }

    @Test
    void testGetFilePattern() throws Exception {
        // Arrange
        ArchivalFileMovement archivalFileMovement = new ArchivalFileMovement();
        String sourcePathPattern = "src/test/resources/files/*.txt";

        // Act
        String filePattern = getPrivateMethod(archivalFileMovement, "getFilePattern", String.class).invoke(archivalFileMovement, sourcePathPattern);

        // Assert
        Assertions.assertEquals(".*\\.txt", filePattern, "Unexpected file pattern");
    }

    private Method getPrivateMethod(Object obj, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {
        Method method = obj.getClass().getDeclaredMethod(methodName, parameterTypes);
        method.setAccessible(true);
        return method;
    }
}