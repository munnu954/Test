Sure! Here's an example of how you can write JUnit 5 test cases for the given acceptance criteria:

```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.test.util.ReflectionTestUtils;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.List;

@SpringBootTest
public class KafkaAuditProducerTest {

    @Mock
    private KafkaTemplate<String, Object> kafkaTemplate;

    @InjectMocks
    private KafkaAuditProducer kafkaAuditProducer;

    @Captor
    private ArgumentCaptor<String> topicCaptor;

    @Captor
    private ArgumentCaptor<Object> messageCaptor;

    @Value("${spring.kafka.producer.topic-name}")
    private String topicName;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(kafkaAuditProducer, "topicName", topicName);
    }

    @Test
    public void testSendMessage_Success() {
        UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
        auditMsg.setJobStatus(JobStatus.FLINK_JOB_SUBMITTED.toString());

        String expectedResult = "Message sent successfully";

        Assertions.assertDoesNotThrow(() -> {
            String actualResult = kafkaAuditProducer.sendMessage(auditMsg);

            Mockito.verify(kafkaTemplate).send(topicCaptor.capture(), messageCaptor.capture());
            List<String> topics = topicCaptor.getAllValues();
            List<Object> messages = messageCaptor.getAllValues();

            Assertions.assertEquals(topicName, topics.get(0));
            Assertions.assertEquals(auditMsg, messages.get(0));

            Assertions.assertEquals(expectedResult, actualResult);
        });
    }

    @Test
    public void testCreateMessageAndLog_Success() {
        UnifiedAuditMessage auditMsg = new UnifiedAuditMessage();
        auditMsg.setJobStatus(JobStatus.FLINK_JOB_SUBMITTED.toString());

        Assertions.assertDoesNotThrow(() -> {
            kafkaAuditProducer.createMessageAndLog("inputFilePath", "url", 8080, "outputFilePath",
                    "|", ".csv", "2022-01-01", 10, 5, 2,
                    "job_id", "jar_id", "collector_id", Collections.emptyList(), "jobStatus");

            Mockito.verify(kafkaTemplate).send(topicCaptor.capture(), messageCaptor.capture());
            List<String> topics = topicCaptor.getAllValues();
            List<Object> messages = messageCaptor.getAllValues();

            Assertions.assertEquals(topicName, topics.get(0));
            Assertions.assertEquals(auditMsg, messages.get(0));
        });
    }
}
```

Note: You may need to update the test cases based on your specific requirements and the dependencies used in the code.

Make sure to include all the necessary dependencies for testing, such as the Mockito and JUnit 5 dependencies.