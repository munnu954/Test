@Test
public void testApplyPostingRule() throws Exception {
    // Create test data
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();

    // Mock dependencies
    ResponseEntity<String> responseEntity = ResponseEntity.ok("{}");
    when(topoApiClient.fetchTopologyTraversalDetails(any(Alarm.class), any(PostingRule.class), anyString())).thenReturn(responseEntity);
    when(utils.evaluateExpression(anyString(), anyMap())).thenReturn("TestValue");

    // Set up test values for fields
    ReflectionTestUtils.setField(postingRuleProcessingService, "alarmedObjectExpression", "%Mock:AlarmExpression%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyDetailsAlarmedObjectExpression", "%Mock:TopologyExpression%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckValue", "%Mock:EligibilityValue%");
    ReflectionTestUtils.setField(postingRuleProcessingService, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
    ReflectionTestUtils.setField(postingRuleProcessingService, "componentIDAttributeName", "MockAttributeName");

    // Execute applyPostingRule method
    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);

    // Verify the interactions and assertions
    assertNotNull(result);
    verify(topoApiClient).fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString());
    verify(utils, times(3)).evaluateExpression(anyString(), anyMap());
    verify(utils).evaluateExpression(eq("%Mock:AlarmExpression%"), anyMap());
    verify(utils).evaluateExpression(eq("%Mock:TopologyExpression%"), anyMap());
    verify(utils).evaluateExpression(eq("%Mock:EligibilityValue%"), anyMap());
}