To achieve 100% code coverage for the `UserInsightsValidator` class using JUnit 5, you need to write test cases that cover all possible branches and exceptions in the code. Below is a comprehensive test class for this purpose:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.mockito.Mockito;

public class UserInsightsValidatorTest {

    private UserInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        validator = new UserInsightsValidator();
    }

    @Test
    public void testValidateWithValidUserInsightsRequest() {
        UserInsightsRequest request = createValidUserInsightsRequest();
        Assertions.assertDoesNotThrow(() -> validator.validate(request));
    }

    @Test
    public void testValidateWithInvalidRequestType() {
        UserInsightsRequest request = createValidUserInsightsRequest();
        request.setRequestType(InsightsRequestType.UNKOWN); // Set invalid request type

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(request);
        });

        Assertions.assertEquals("Invalid request type ", exception.getMessage());
    }

    @Test
    public void testValidateWithNullKeyAttributesAndListKeyAttributes() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setServiceHeader(createValidServiceHeader());

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(request);
        });

        Assertions.assertEquals("Either KeyAttributes (Single) or ListKeyAttributes (Multiple) are required.", exception.getMessage());
    }

    @Test
    public void testValidateWithEmptyKeyAttributes() {
        UserInsightsRequest request = createValidUserInsightsRequest();
        request.setKeyAttributes(new UserInsightsAttributes());

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(request);
        });

        Assertions.assertEquals("USER_SEARCH_MAND_FIELDS_CHECK", exception.getMessage());
    }

    @Test
    public void testValidateWithEmptyListKeyAttributes() {
        UserInsightsRequest request = createValidUserInsightsRequest();
        UserInsightsAttributes[] listKeyAttributes = { new UserInsightsAttributes() };
        request.setListKeyAttributes(listKeyAttributes);

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(request);
        });

        Assertions.assertEquals("ListKeyAttributesLOGGER_MESSAGE_USER_INSIGHTS", exception.getMessage());
    }

    @Test
    public void testValidateUserInsightsSearchRequestWithValidData() {
        UserInsightsSearchRequest searchRequest = createValidUserInsightsSearchRequest();
        Assertions.assertDoesNotThrow(() -> validator.validate(searchRequest));
    }

    @Test
    public void testValidateUserInsightsSearchRequestWithMissingFields() {
        UserInsightsSearchRequest searchRequest = new UserInsightsSearchRequest();
        searchRequest.setServiceHeader(createValidServiceHeader());
        searchRequest.setServiceRequest(new UserInsightsSearchParam());

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(searchRequest);
        });

        Assertions.assertEquals("ServiceRequest Ecpd Id, User Id, Insight Category and Insight Name are required.", exception.getMessage());
    }

    private UserInsightsRequest createValidUserInsightsRequest() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setKeyAttributes(createValidUserInsightsAttributes());
        request.setServiceHeader(createValidServiceHeader());
        return request;
    }

    private UserInsightsAttributes createValidUserInsightsAttributes() {
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("validUserId");
        attributes.setEcpdId("validEcpdId");
        attributes.setInsightCategory("validCategory");
        attributes.setInsightName("validName");
        return attributes;
    }

    private ServiceHeader createValidServiceHeader() {
        ServiceHeader header = new ServiceHeader();
        header.setClientId("validClientId");
        header.setClientTransactionId("validTransactionId");
        header.setServiceName("validServiceName");
        return header;
    }

    private UserInsightsSearchRequest createValidUserInsightsSearchRequest() {
        UserInsightsSearchRequest request = new UserInsightsSearchRequest();
        request.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId("validUserId");
        searchParam.setEcpdId("validEcpdId");
        searchParam.setInsightCategory(new String[]{"validCategory"});
        searchParam.setInsightName(new String[]{"validName"});
        request.setServiceRequest(searchParam);
        return request;
    }
}
```

### Explanation:

1. **Setup Method**: Initializes the `UserInsightsValidator` before each test.

2. **Test Methods**: Each test method is designed to cover a specific code path or exception scenario:
   - **testValidateWithValidUserInsightsRequest**: Tests a valid request.
   - **testValidateWithInvalidRequestType**: Tests invalid request type.
   - **testValidateWithNullKeyAttributesAndListKeyAttributes**: Tests null key and list key attributes.
   - **testValidateWithEmptyKeyAttributes**: Tests with empty key attributes.
   - **testValidateWithEmptyListKeyAttributes**: Tests with empty list key attributes.
   - **testValidateUserInsightsSearchRequestWithValidData**: Tests a valid search request.
   - **testValidateUserInsightsSearchRequestWithMissingFields**: Tests missing fields in a search request.

3. **Helper Methods**: Create helper methods to build valid objects for testing, reducing code repetition.

This test suite should cover all branches and exception cases in your `UserInsightsValidator` class, ensuring 100% code coverage.