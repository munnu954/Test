import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.junit.MockitoJUnitRunner;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class CoconutServiceVersion3Test {

    @InjectMocks
    private CoconutServiceVersion3 coconutServiceVersion3;

    @Test
    public void testQueryBasedOnParameter_withLocationCLLIAndSiteName() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "abc123");
        queryParams.put("siteName", "site123");

        String finalQuery = getQueryBasedOnParameterUsingReflection(queryParams);

        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY));
        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'abc123'"))); // contains locationCLLI condition
        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'site123'")));     // contains siteName condition
    }

    @Test
    public void testQueryBasedOnParameter_withLocationCLLIOnly() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "abc123");

        String finalQuery = getQueryBasedOnParameterUsingReflection(queryParams);

        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY));
        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'abc123'")));
        Assert.assertFalse(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME));
    }

    @Test
    public void testQueryBasedOnParameter_withSiteNameOnly() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "site123");

        String finalQuery = getQueryBasedOnParameterUsingReflection(queryParams);

        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY));
        Assert.assertFalse(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI));
        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'site123'")));
    }

    @Test
    public void testQueryBasedOnParameter_withoutLocationCLLIAndSiteName() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();

        String finalQuery = getQueryBasedOnParameterUsingReflection(queryParams);

        Assert.assertTrue(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY));
        Assert.assertFalse(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI));
        Assert.assertFalse(finalQuery.contains(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME));
    }

    private String getQueryBasedOnParameterUsingReflection(Map<String, Object> queryParams) throws Exception {
        Method method = coconutServiceVersion3.getClass().getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        return (String) method.invoke(coconutServiceVersion3, queryParams);
    }
}