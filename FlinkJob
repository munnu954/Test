public static class CsvtoJsonMRFCnTransformer extends RichFlatMapFunction<String, String> {
    private String[] headers;
    private IntCounter successIntCounter = new IntCounter();
    private IntCounter failureIntCounter = new IntCounter();
    
    @Override
    public void open(Configuration parameters) throws Exception {
        getRuntimeContext().addAccumulator("successIntCounter", this.successIntCounter);
        getRuntimeContext().addAccumulator("failureIntCounter", this.failureIntCounter);
    }
    
    @Override
    public void flatMap(String s, Collector<String> collector) throws Exception {
        String[] lines = s.split(System.lineSeparator());
        String systemIdHeader = null;
        String nodeIPHeader = null;
        String systemIdValue = null;
        String nodeIPValue = null;
        
        for (int i = 0; i < lines.length; i++) {
            String str = lines[i];
            String[] arr = str.split(",");
            
            if (i == 0) {
                systemIdHeader = arr[0].trim().replace("#", "");
				systemIdValue = arr[1].trim();
                continue;
            } else if (i == 1) {
                nodeIPHeader = arr[0].trim().replace("#", "");
				nodeIPValue = arr[1].trim();
                continue;
            } else if (i == 2) {
                headers = arr; // Store the header row for key names
                continue; // Skip processing the header row
            }
            
            if (headers == null || headers.length != arr.length) {
                this.failureIntCounter.add(1);
                continue;
            }
            
            JSONObject obj = new JSONObject();
            obj.put(systemIdHeader, systemIdValue);
            obj.put(nodeIPHeader, nodeIPValue);
            
            for (int j = 2; j < arr.length; j++) {
                String jsonkey = headers[j-2].trim().replace("\"", "");
                String jsonvalue = arr[j].trim().replace("\"", "");
                obj.put(jsonkey, jsonvalue);
            }
            
            this.successIntCounter.add(1);
            collector.collect(obj.toString());
        }
    }
}