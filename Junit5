Certainly! To cover the else block in the `parse` method for 100% code coverage, we can add the following JUnit5 test cases:

```java
@Test
void testParseWithValidAttributeInSrcMap() throws Exception {
    // Arrange
    String expression = "%attribute1: details.age%";
    srcMap.put("details", Map.of("age", 30));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("30", result);
}

@Test
void testParseWithInvalidAttributeInSrcMap() throws Exception {
    // Arrange
    String expression = "%attribute1: details.invalid%";
    srcMap.put("details", Map.of("age", 30));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}

@Test
void testParseWithInvalidArrayIndexInSrcMap() throws Exception {
    // Arrange
    String expression = "%attribute1: details.names[3]%";
    srcMap.put("details", Map.of("names", List.of("John", "Jane", "Doe")));
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}

@Test
void testParseWithEmptyExpression() throws Exception {
    // Arrange
    String expression = "";
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}

@Test
void testParseWithEmptySrcMap() throws Exception {
    // Arrange
    String expression = "%attribute1: details.name%";
    srcMap = Collections.emptyMap();
    
    // Act
    String result = alarmPostingUtils.parse(expression, srcMap, "");

    // Assert
    assertEquals("", result);
}
```

These test cases cover scenarios where the else block in the `parse` method is executed, such as when the attribute exists in the `srcMap`, does not exist, or when an invalid array index is provided. Additionally, testing with an empty expression and an empty `srcMap` ensures that the else block is covered for various input conditions.