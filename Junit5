To cover the conditional block `if(isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL))` within the `process` method of the `TrunkProcessor` class, we need to create a JUnit 5 test case that sets up the necessary objects and state. Below is a sample JUnit test case that fulfills this requirement:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    public void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "TestSourceSys";
    }

    @Test
    public void testProcess_withTrailCondition() {
        // Arrange
        // Prepare a prevClrComponent with type TRAIL
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRAIL);

        // Prepare circuitComp and add to prevClrComponent
        CircuitComp circuitComp = mock(CircuitComp.class);
        List<CircuitInfo> circuitInfoList = new ArrayList<>();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitInfo.setCircuitName("TestCircuit");
        circuitInfoList.add(circuitInfo);
        
        when(circuitComp.getCircuitInfo()).thenReturn(circuitInfoList);
        prevClrComponent.setCircuitComp(Collections.singletonList(circuitComp));

        clrComponentList.add(prevClrComponent); // Add to clrComponentList
        clrComponentList.add(clrComponent); // Add current clrComponent

        // Act
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Assert
        assertFalse(links.isEmpty(), "Links should not be empty after processing.");
        Link lastLink = links.get(links.size() - 1);
        assertEquals(CommonWrapperConstants.CIRCUIT, lastLink.getLinkType(), "Last link type should be CIRCUIT.");
        assertEquals("TestCircuit", lastLink.getAttributes().get(0).getValue(), "Circuit Name should match.");
    }
}
```

### Explanation:

1. **Setup**: The `setUp()` method initializes the necessary objects before each test.
2. **Test Method**: The `testProcess_withTrailCondition()` method:
   - Creates a `prevClrComponent` with type `CommonWrapperConstants.TRAIL`.
   - Mocks a `CircuitComp` and simulates its behavior to return a list of `CircuitInfo`.
   - Adds the `prevClrComponent` and the current `clrComponent` to the `clrComponentList`.
   - Calls the `process` method of `TrunkProcessor`.
3. **Assertions**: After the method call, it checks:
   - That the `links` list is not empty.
   - That the type of the last link is `CIRCUIT`.
   - That the circuit name in the attributes matches the expected value.

This test ensures that the specific logic under the condition `if(isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL))` is executed and covered effectively.