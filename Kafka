@PostMapping
public String triggerJob(UnifiedAuditMessage auditMsg, String fileType) {

    RestTemplate restTemplate = new RestTemplate();
    LOGGER.info("TRIGGER JOB::::");
    HttpHeaders headers = new HttpHeaders();
    HttpEntity<String> request = null;
    String jobSubmitUrl = null;
  
    if (fileType != null) {
        JSONObject requestBody = new JSONObject();
        headers.setContentType(MediaType.APPLICATION_JSON);

        String programArgs = "";
        if (fileType.equalsIgnoreCase(".csv")) {
            programArgs = "input " + auditMsg.getInputFilePath() + " --path " + auditMsg.getInputFilePath() + " -fileType csv_GIGAMON --bootstarpServer localhost:9092 --auditTopic 3459-DEV-COLLECTION-AUDIT-QUEUE --outputTopic COLLECTION-OUTPUT";
            requestBody.put("programArgs", programArgs);
            jobSubmitUrl = flinkApiUrl + "/jars/" + flinkJobJarid + "/run";
        } else if (fileType.equalsIgnoreCase(".xml")) {
            LOGGER.info("XML FLINK TRIGGER::");
            programArgs = "--filePath " + auditMsg.getInputFilePath() + " --primaryKey |primaryKey| --bootstarpServer localhost:9092 --auditTopic 3459-DEV-COLLECTION-AUDIT-QUEUE --dataTopic COLLECTION-TOPIC";
            requestBody.put("programArgs", programArgs);
            jobSubmitUrl = flinkApiUrl + "/jars/" + flinkJobXmlJarid + "/run";
            LOGGER.info("jobSubmitUrl:" + jobSubmitUrl);
            LOGGER.info("requestBody::" + requestBody.toString());
        } else if (fileType.equalsIgnoreCase(".txt")) {
            LOGGER.info("TEXT FLINK TRIGGER::");
            programArgs = "--input " + auditMsg.getInputFilePath() + " path " + auditMsg.getInputFilePath() + " --bootstarpServer localhost:9092 --auditTopic 3459-DEV-COLLECTION-AUDIT-QUEUE --dataTopic COLLECTION-TOPIC";
            requestBody.put("programArgs", programArgs);
            jobSubmitUrl = flinkApiUrl + "/jars/" + flinkJobtxtJarid + "/run";
        }

        request = new HttpEntity<>(requestBody.toString(), headers);
    }

    // Trigger the submitted jar
    ResponseEntity<String> response = restTemplate.postForEntity(jobSubmitUrl, request, String.class);
    LOGGER.info("response: {}", response);
}