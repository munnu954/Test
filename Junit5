import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import org.junit.jupiter.api.Test;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AlarmPostingUtilsTest {

    @Test
    public void testParse() throws JsonMappingException, JsonProcessingException {
        // Test for attributeExp contains "."
        Map<String, Object> srcMap = new HashMap<>();
        srcMap.put("attribute1", "{\"nestedAttr\":\"value1\"}");
        String result = AlarmPostingUtils.parse("%attribute1:nestedAttr%", srcMap, "rule1");
        assertEquals("value1", result);

        // Test for attributeExp contains "["
        srcMap.put("attribute2", new HashMap<>() {{
            put("list1", new String[]{"element1", "element2"});
        }});
        result = AlarmPostingUtils.parse("%attribute2:list1[0]%", srcMap, "rule2");
        assertEquals("element1", result);

        // Test for attributeExp contains "[", but index is out of bounds
        result = AlarmPostingUtils.parse("%attribute2:list1[3]%", srcMap, "rule3");
        assertEquals("", result);

        // Test for attributeExp does not contain "." or "["
        srcMap.put("attribute3", "value3");
        result = AlarmPostingUtils.parse("%attribute3%", srcMap, "rule4");
        assertEquals("value3", result);

        // Test for attributeExp not found in srcMap
        result = AlarmPostingUtils.parse("%nonExistentAttribute%", srcMap, "rule5");
        assertEquals("", result);
    }
}