private Map<String, String> getAuditStatusMap(Vector<ChannelSftp.LsEntry> files, String remoteDirectory) {
    // Convert the list of files into a list of file paths, filtering out directories
    List<String> filePaths = files.stream()
            .filter(file -> !file.getAttrs().isDir())
            .map(file -> remoteDirectory + file.getFilename()) // Use absolute file path
            .collect(Collectors.toList());

    // Initialize the final map to hold the audit status
    Map<String, String> auditStatusMap = new HashMap<>();

    // Process the file paths in chunks of 1000
    final int chunkSize = 1000;
    for (int i = 0; i < filePaths.size(); i += chunkSize) {
        // Get the sublist for the current chunk
        List<String> chunk = filePaths.subList(i, Math.min(filePaths.size(), i + chunkSize));

        // Get the latest status for each file path in the current chunk
        List<CollectionAudit> audits = lucenceColletionAuditRepo.findLatestByFilePaths(chunk);

        // Filter non-null audits and add them to the map
        Map<String, String> chunkAuditStatusMap = audits.stream()
                .filter(audit -> audit != null)
                .collect(Collectors.toMap(
                        CollectionAudit::getInputFilePath, 
                        CollectionAudit::getJobStatus
                ));

        // Add the current chunk's audit status to the final map
        auditStatusMap.putAll(chunkAuditStatusMap);
    }

    return auditStatusMap;
}