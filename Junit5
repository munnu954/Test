import static org.junit.jupiter.api.Assertions.assertThrows;

import java.io.IOException;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class ArchivalFileMovementTest {

    @Test
    @DisplayName("Test moveFilesMatchingPattern throws IOException")
    void testMoveFilesMatchingPatternThrowsIOException() throws Throwable {
        // Arrange
        ArchivalFileMovement archivalFileMovement = Mockito.mock(ArchivalFileMovement.class);
        Mockito.doThrow(IOException.class).when(archivalFileMovement).moveFile(Mockito.any(), Mockito.any());

        Path sourceDir = Paths.get("/source/dir");
        String filePattern = "*.txt";
        String destinationPath = "/destination/path";

        // Act and Assert
        assertThrows(IOException.class, () -> invokeMatchingPatternMethod(archivalFileMovement, sourceDir, filePattern, destinationPath));
    }

    private void invokeMatchingPatternMethod(ArchivalFileMovement archivalFileMovement, Path sourceDir, String filePattern, String destinationPath)
            throws Throwable {
        Method sourceDirMethod = ArchivalFileMovement.class.getDeclaredMethod("getSourceDirectory", String.class);
        sourceDirMethod.setAccessible(true);
        sourceDirMethod.invoke(archivalFileMovement, Paths.get("/source" + destinationPath).toString());

        Method filePatternMethod = ArchivalFileMovement.class.getDeclaredMethod("getFilePattern", String.class);
        filePatternMethod.setAccessible(true);
        filePatternMethod.invoke(archivalFileMovement, filePattern);

        Method method = ArchivalFileMovement.class.getDeclaredMethod("moveFilesMatchingPattern", String.class, String.class);
        method.setAccessible(true);
        method.invoke(archivalFileMovement, Paths.get("/source" + destinationPath).toString(), destinationPath);
    }

}