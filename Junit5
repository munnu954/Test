To achieve 100% code coverage for the `HttpClientErrorException` catch block in the `ApiOperation` class, we can create JUnit 5 test cases that mock the behavior of the `RestTemplate` to throw a `HttpClientErrorException.NotFound`. We will use Mockito to handle the mocking.

Here's how you can write the JUnit 5 test cases:

```java
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

public class ApiOperationTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlarmGroupingParams configParams;

    @InjectMocks
    private ApiOperation apiOperation;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAlarmDetailsById_NotFound() {
        String alarmIdentity = "testAlarm";
        String url = "http://example.com/api/alarm"; // Mocked URL
        String authKey = "Bearer sample-auth-key";

        // Mocking the configParams to return the URL and Authorization key
        when(configParams.getAlarmFetchURL()).thenReturn(url);
        when(configParams.getAlarmFilterKey()).thenReturn(authKey);

        // Mocking the RestTemplate to throw HttpClientErrorException.NotFound
        doThrow(new HttpClientErrorException.NotFound("Not Found"))
                .when(restTemplate).exchange(any(String.class), any(HttpMethod.class), any(), any(Class.class));

        // Invoking the method under test
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Asserting that the result is null since the NotFound exception is caught
        assertNull(result);
        // You can also verify that the logger was called with the expected warning message
        // This requires a Logger mock or using a logging framework that can be verified
    }

    @Test
    public void testGetAlarmDetailsById_OtherException() {
        String alarmIdentity = "testAlarm";
        String url = "http://example.com/api/alarm"; // Mocked URL
        String authKey = "Bearer sample-auth-key";

        // Mocking the configParams to return the URL and Authorization key
        when(configParams.getAlarmFetchURL()).thenReturn(url);
        when(configParams.getAlarmFilterKey()).thenReturn(authKey);

        // Mocking the RestTemplate to throw a RestClientException
        doThrow(new RestClientException("Client error"))
                .when(restTemplate).exchange(any(String.class), any(HttpMethod.class), any(), any(Class.class));

        // Invoking the method under test
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Asserting that the result is null since the RestClientException is caught
        assertNull(result);
        // You can also verify that the logger was called with the expected error message
        // This requires a Logger mock or using a logging framework that can be verified
    }
}
```

### Explanation:
1. **Mocks Creation**: We create mocks for `RestTemplate` and `AlarmGroupingParams` using Mockito.
2. **Inject Mocks**: The `@InjectMocks` annotation allows Mockito to inject the mocked dependencies into the `ApiOperation` instance.
3. **Setup Method**: The `setUp()` method initializes the mocks before each test.
4. **Test for NotFound Exception**: 
   - We mock `configParams` to return predefined URL and Authorization key.
   - We configure `restTemplate` to throw `HttpClientErrorException.NotFound` when `exchange` is called.
   - We check if the result is `null` since the exception is caught in the method.
5. **Test for Other Exceptions**: 
   - Similar to the NotFound test, but we mock `restTemplate` to throw a `RestClientException`.
   - We again check if the result is `null`.

This setup provides complete coverage for the exception handling blocks in the `getAlarmDetailsById` method.