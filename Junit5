@RunWith(MockitoJUnitRunner.class)
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService service;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private Alarm alarm;

    @BeforeEach
    public void setup() {
        ReflectionTestUtils.setField(service, "alarmedObjectExpression", "%TopoObject:OSS_Names[0]%");
        ReflectionTestUtils.setField(service, "topologyDetailsAlarmedObjectExpression", "{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}");
        ReflectionTestUtils.setField(service, "topologyObjectEligibilityCheckValue", "%TopoObject:OSS_Names[0]%");
        ReflectionTestUtils.setField(service, "topologyObjectEligibilityCheckExpression", "^(?!\\s*$).+");
        ReflectionTestUtils.setField(service, "componentIDAttributeName", "reportingObject");
    }

    @Test
    public void testApplyPostingRulesWithMatch() {
        PostingRule postingRule = new PostingRule(1, "Rule 1", 1, 1, "Filter");
        HashMap<String, Object> alarmMap = new HashMap<>();
        when(ruleLoadingService.getRuleMap()).thenReturn(Collections.singletonMap(1L, postingRule));
        when(postingRule.matchFilter(alarmMap)).thenReturn(true);

        Alarm result = service.applyPostingRules(alarm);

        verify(ruleLoadingService).getRuleMap();
        verify(postingRule).matchFilter(alarmMap);
        assertNotNull(result);
    }

    @Test
    public void testApplyPostingRulesWithNoMatch() {
        PostingRule postingRule = new PostingRule(1, "Rule 1", 1, 1, "Filter");
        HashMap<String, Object> alarmMap = new HashMap<>();
        when(ruleLoadingService.getRuleMap()).thenReturn(Collections.singletonMap(1L, postingRule));
        when(postingRule.matchFilter(alarmMap)).thenReturn(false);

        Alarm result = service.applyPostingRules(alarm);

        verify(ruleLoadingService).getRuleMap();
        verify(postingRule).matchFilter(alarmMap);
        assertEquals(alarm, result);
    }

    @Test
    public void testApplyPostingRulesWithExistingPostingRuleMatch() {
        PostingRule existingRule = new PostingRule(1, "Rule 1", 1, 1, "Filter");
        PostingRule newRule = new PostingRule(2, "Rule 2", 2, 1, "Filter");
        HashMap<String, Object> alarmMap = new HashMap<>();
        when(ruleLoadingService.getRuleMap()).thenReturn(new HashMap<Long, PostingRule>() {{
            put(1L, existingRule);
            put(2L, newRule);
        }});
        when(existingRule.matchFilter(alarmMap)).thenReturn(true);
        when(newRule.matchFilter(alarmMap)).thenReturn(true);

        Alarm result = service.applyPostingRules(alarm);

        verify(ruleLoadingService).getRuleMap();
        verify(existingRule).matchFilter(alarmMap);
        verify(newRule).matchFilter(alarmMap);
        verify(newRule).getRulePriority();
        verify(existingRule, never()).getRulePriority();
        assertNotNull(result);
    }

    @Test
    public void testApplyPostingRulesWithNoPostingRuleMatch() {
        HashMap<String, Object> alarmMap = new HashMap<>();
        when(ruleLoadingService.getRuleMap()).thenReturn(Collections.emptyMap());

        Alarm result = service.applyPostingRules(alarm);

        verify(ruleLoadingService).getRuleMap();
        assertEquals(alarm, result);
    }
}