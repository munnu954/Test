I apologize for the confusion. Based on the updated `VMBUtil` class, here's the updated and executable version of the JUnit 5 test cases:

```java
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.pulsar.client.api.Consumer;
import org.apache.pulsar.client.api.Message;
import org.apache.pulsar.client.api.PulsarClientException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.actuate.health.Health;

import java.util.concurrent.TimeUnit;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AlarmReceiverTest {

    @Mock
    private AlarmPostGreService alarmPostGreService;

    @Mock
    private Consumer<byte[]> consumer;

    @Mock
    private Message<byte[]> message;

    @Mock
    private PulsarClientException pulsarClientException;

    private AlarmReceiver alarmReceiver;

    @BeforeEach
    public void setUp() {
        alarmReceiver = new AlarmReceiver(alarmPostGreService);
        alarmReceiver.set_consumer(consumer);
    }

    @Test
    public void testRun_ReceiveMessages_Success() throws Exception {
        when(VMBUtil.receiveMessageThrowsPulsarClientException(consumer, 3, TimeUnit.SECONDS)).thenReturn(message);

        alarmReceiver.run();

        verify(alarmPostGreService, times(1)).getAlarmTypeList();
        verify(alarmReceiver, times(1)).receiveMessages();
    }

    @Test
    public void testRun_PulsarClientException() throws Exception {
        when(VMBUtil.receiveMessageThrowsPulsarClientException(consumer, 3, TimeUnit.SECONDS))
                .thenThrow(pulsarClientException);

        alarmReceiver.run();

        verify(alarmReceiver, times(1)).syncReconnect();
    }

    @Test
    public void testRun_Exception() throws Exception {
        Exception exception = new Exception("Test Exception");
        when(VMBUtil.receiveMessageThrowsPulsarClientException(consumer, 3, TimeUnit.SECONDS))
                .thenThrow(exception);

        alarmReceiver.run();

        verify(alarmReceiver, times(1)).syncReconnect();
        verify(alarmReceiver, times(1)).health();
        verify(alarmReceiver, times(1)).LOGGER.error("[AlarmReceiver] : exception in Receive Message" + exception.getMessage());
    }

    @Test
    public void testRun_ExceptionInFinallyBlock() throws Exception {
        Exception exception = new Exception("Test Exception");
        when(VMBUtil.receiveMessageThrowsPulsarClientException(consumer, 3, TimeUnit.SECONDS))
                .thenThrow(exception);
        doThrow(exception).when(consumer).close();

        alarmReceiver.run();

        verify(alarmReceiver, times(1)).syncReconnect();
        verify(alarmReceiver, times(1)).health();
        verify(alarmReceiver, times(1)).LOGGER.error("[AlarmReceiver] : exception in Receive Message" + exception.getMessage());
        verify(alarmReceiver, times(1)).LOGGER.info("consumer closed");
    }
}
```

Note: The updated test cases assume that you have `logger` available and properly configured in your test environment. If not, you may need to make adjustments accordingly.