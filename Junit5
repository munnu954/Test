To incorporate the `phyModel` flag into both the `ComnonWrapperController` and `CircuitDetailsProvider` classes as an optional query parameter, you'll need to make a few changes. Below is the updated code for both classes:

### Updated ComnonWrapperController Class

```java
@RestController
public class ComnonWrapperController {
    private static final Logger LOGGER = LogManager.getLogger(CommonWrapperController.class);

    @Autowired
    private ClrGraphicsService clrGraphicsService;

    @Autowired
    private Granitesegmentservice graniteService;

    @Operation(summary = "GetClrGraphics", responses = {
        @ApiResponse(responseCode = "200", description = "Get CLR Graphics details for a given circuit",
            content = {@Content(mediaType = "application/json", schema = @Schema(implementation = CirGrapicsResponse.class))}),
        @ApiResponse(responseCode = "400", description = "Invalid input provided", content = @Content),
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content),
        @ApiResponse(responseCode = "404", description = "Data Not found", content = @Content)
    })
    @GetMapping(value = "/api/v1/clr/graphics", produces = MediaType.APPLICATION_JSON_VALUE)
    public String getClrGraphics(
        @Param(value = "circuitId") @RequestParam(value = "circuitId", required = true) String circuitId,
        @Param(value = "sourceSys") @RequestParam(required = false) String sourceSys,
        @Param(value = "cnd") @RequestParam(value = "cnd", required = false) String cnd,
        @Param(value = "phyModel") @RequestParam(value = "phyModel", required = false) String phyModel) {

        LOGGER.info("getClrGraphics Started");

        Map<String, String> input = new HashMap<>();
        if (null != sourceSys) {
            input.put("sourceSys", sourceSys);
        }

        if (StringUtils.isBlank(cnd) || (StringUtils.isBlank(cnd) && !cnd.equalsIgnoreCase("Y"))) {
            cnd = "N";
        } else {
            cnd = "Y";
        }

        try {
            circuitId = URLDecoder.decode(circuitId, StandardCharsets.UTF_8.toString());
        } catch (UnsupportedEncodingException e) {
            LOGGER.error("Error while parsing circuitId: {}", e);
        }

        // Pass phyModel if it is present
        String response;
        response = clrGraphicsService.getClrGraphics(circuitId, sourceSys, cnd, phyModel);
        LOGGER.info("getClrGraphics Ended");
        return response;
    }
}
```

### Updated CircuitDetailsProvider Class

```java
@Component
public class CircuitDetailsProvider {

    @Autowired
    private RestClientUtil restClientUtil;

    public CircuitDetailResponse getCircuitDetails(String circuitId, String phyModel) {
        CircuitDetailResponse cirDetResponse = null;
        StringBuilder finalUrl = new StringBuilder(getBaseUrl());
        finalUrl.append(cktDetailuri);

        // Append circuitId
        circuitId = (null != circuitId) ? circuitId.trim() : CommonWrapperConstants.EMPTY;
        finalUrl.append("?circuitId=").append(circuitId);

        // Append phyModel if it is present
        if (phyModel != null && !phyModel.isEmpty()) {
            finalUrl.append("&phyModel=").append(phyModel);
        }

        String response = restClientUtil.callEndpoint(finalUrl.toString(), HttpMethod.GET, buildHeaders());
        if (null != response) {
            Gson gson = new GsonBuilder().disableHtmlEscaping().create();
            cirDetResponse = gson.fromJson(response, CircuitDetailResponse.class);
        }
        return cirDetResponse;
    }

    private String getBaseUrl() {
        return "http://" + cktDetServiceName;
    }
}
```

### Key Changes:

1. **Controller Class**:
   - Added `@Param` and `@RequestParam` for `phyModel` as an optional parameter.
   - Modified the call to `clrGraphicsService.getClrGraphics` to include `phyModel`.

2. **Provider Class**:
   - Modified `getCircuitDetails` method to accept `phyModel` as an argument.
   - Appended `phyModel` to `finalUrl` only if it is provided.

These modifications will allow the `phyModel` parameter to be used conditionally, ensuring backward compatibility while adding new functionality.