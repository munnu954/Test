try {
    // Your existing code for successful job submission
    // If everything goes well, you set the HTTP status code as OK
    int httpStatusCode = 200; // OK
    // ... rest of the code
} catch (HttpClientErrorException clientErrorException) {
    // Client Error occurred (status code 4xx). You might want to log it and handle it appropriately
    clientErrorException.printStackTrace();
    LOGGER.error("Client Error triggering job", clientErrorException.getMessage());

    FileMetadata metadata = kafkaConsumer.logMetadata(collector, fileType, clientErrorException);

    kafkaInputProducer.sendFailureMessage(collector, fileType, clientErrorException);
    kafkaConsumer.writeLogToFile(metadata, destinationFolderPath);
} catch (HttpServerErrorException serverErrorException) {
    // Server Error occurred (status code 5xx). You should handle this as well
    serverErrorException.printStackTrace();
    LOGGER.error("Server Error triggering job", serverErrorException.getMessage());

    if (serverErrorException.getRawStatusCode() == 500) {
        // Handle the 500 Internal Server Error scenario
        // Perform specific actions and logging for this scenario
    }

    FileMetadata metadata = kafkaConsumer.logMetadata(collector, fileType, serverErrorException);

    kafkaInputProducer.sendFailureMessage(collector, fileType, serverErrorException);
    kafkaConsumer.writeLogToFile(metadata, destinationFolderPath);
} catch (Exception ex) {
    // Any other unhandled exceptions
    ex.printStackTrace();
    LOGGER.error("Error triggering job", ex.getMessage());

    FileMetadata metadata = kafkaConsumer.logMetadata(collector, fileType, ex);

    kafkaInputProducer.sendFailureMessage(collector, fileType, ex);
    kafkaConsumer.writeLogToFile(metadata, destinationFolderPath);
}