This error occurs because the `contains` method is not defined for the `Object` class. To fix this error, you need to convert the response body from `Object` to `String`.

Here's the updated test case code:

```
@Test
public void testJobUpload() {
String url = "http://localhost:8081/Jars/upload?input=inputFilePath&topic=topicName&bootstrapServer=bootstrapServerUrl";
ResponseEntity response = restTemplate.postForEntity(url, null, String.class);
Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
Assertions.assertTrue(response.getBody().contains("Job uploaded successfully."));
}
```

In this updated code, we have added the `` type parameter to the `ResponseEntity` object, which will convert the response body from `Object` to `String`. Now, the `contains` method can be used on the response body string.

Dependencies to be added to pom.xml file:

```

org.springframework.boot
spring-boot-starter-web


org.springframework.boot
spring-boot-starter-test
test

```

Import statements:

```
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
```

Positive Scenario Test Case Code:

```
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class JobUploadControllerTest {

@Autowired
private TestRestTemplate restTemplate;

@Test
public void testJobUpload() {
String url = "http://localhost:8081/Jars/upload?input=inputFilePath&topic=topicName&bootstrapServer=bootstrapServerUrl";
ResponseEntity response = restTemplate.postForEntity(url, null, String.class);
Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
Assertions.assertTrue(response.getBody().contains("Job uploaded successfully."));
}
}
```

Negative Scenario Test Case Code 1: Invalid input file path

```
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class JobUploadControllerTest {

@Autowired
private TestRestTemplate restTemplate;

@Test
public void testJobUploadInvalidInputFilePath() {
String url = "http://localhost:8081/Jars/upload?input=invalidFilePath&topic=topicName&bootstrapServer=bootstrapServerUrl";
ResponseEntity response = restTemplate.postForEntity(url, null, String.class);
Assertions.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
Assertions.assertTrue(response.getBody().contains("Invalid input file path."));
}
}
```

Negative Scenario Test Case Code 2: Invalid topic name

```
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class JobUploadControllerTest {

@Autowired
private TestRestTemplate restTemplate;

@Test
public void testJobUploadInvalidTopicName() {
String url = "http://localhost:8081/Jars/upload?input=inputFilePath&topic=invalidTopicName&bootstrapServer=bootstrapServerUrl";
ResponseEntity response = restTemplate.postForEntity(url, null, String.class);
Assertions.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
Assertions.assertTrue(response.getBody().contains("Invalid topic name."));
}
}
```

Negative Scenario Test Case Code 3: Invalid bootstrap server URL

```
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class JobUploadControllerTest {

@Autowired
private TestRestTemplate restTemplate;

@Test
public void testJobUploadInvalidBootstrapServerUrl() {
String url = "http://localhost:8081/Jars/upload?input=inputFilePath&topic=topicName&bootstrapServer=invalidBootstrapServerUrl";
ResponseEntity response = restTemplate.postForEntity(url, null, String.class);
Assertions.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
Assertions.assertTrue(response.getBody().contains("Invalid bootstrap server URL."));
}
}
```