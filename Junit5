import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.Environment;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CBRSSuppressionApplicationTest {

    @Mock
    Environment mockEnvironment;

    @Mock
    ConfigurableApplicationContext mockContext;

    @Mock
    AlarmConsumer mockAlarmConsumer;

    @Mock
    MessageReaderService mockMessageReaderService;

    @Test
    public void testMainWithUnsatisfiedDependencyException() {
        when(mockEnvironment.getProperty("RDB_BAD_QUERY")).thenReturn("Mocked Bad Query");
        when(mockContext.getBean(AlarmConsumer.class)).thenReturn(mockAlarmConsumer);
        when(mockContext.getBean(MessageReaderService.class)).thenReturn(mockMessageReaderService);

        UnsatisfiedDependencyException exception = new UnsatisfiedDependencyException("Validation failed for query");
        when(mockContext.run(any(String[].class))).thenThrow(exception);

        CBRSSuppressionApplication application = new CBRSSuppressionApplication(mockEnvironment);
        SpringApplication mockApp = mock(SpringApplication.class);
        when(mockApp.run(any(String[].class))).thenReturn(mockContext);

        try {
            application.main(new String[]{});
        } catch (UnsatisfiedDependencyException e) {
            // Verify the expected behavior here
        }

        verify(mockAlarmConsumer).setName("Suppression_ConsumerThread");
        verify(mockAlarmConsumer).start();
        verify(mockMessageReaderService).setName("Suppression_ReaderThread");
        verify(mockMessageReaderService).start();
    }

    @Test
    public void testMainWithoutException() {
        when(mockEnvironment.getProperty("RDB_BAD_QUERY")).thenReturn("Mocked Bad Query");
        when(mockContext.getBean(AlarmConsumer.class)).thenReturn(mockAlarmConsumer);
        when(mockContext.getBean(MessageReaderService.class)).thenReturn(mockMessageReaderService);

        CBRSSuppressionApplication application = new CBRSSuppressionApplication(mockEnvironment);
        SpringApplication mockApp = mock(SpringApplication.class);
        when(mockApp.run(any(String[].class))).thenReturn(mockContext);

        application.main(new String[]{});

        verify(mockAlarmConsumer).setName("Suppression_ConsumerThread");
        verify(mockAlarmConsumer).start();
        verify(mockMessageReaderService).setName("Suppression_ReaderThread");
        verify(mockMessageReaderService).start();
    }
}