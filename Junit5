Here are the JUnit test cases for the `queryBasedOnParameter` method:

```
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:application-context.xml"})
public class CoconutServiceVersion3Test {

    @Autowired
    private CoconutServiceVersion3 coconutServiceVersion3;

    @Test
    public void testQueryBasedOnParameter_BothParamsPresent() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "testCLLI");
        queryParams.put("siteName", "testSiteName");

        String result = invokeQueryBasedOnParameter(queryParams);
        assertEquals("Expected query with both params", getExpectedQuery("testclli", "testsitename"), result);
    }

    @Test
    public void testQueryBasedOnParameter_OnlyLocationCLLIPresent() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "testCLLI");

        String result = invokeQueryBasedOnParameter(queryParams);
        assertEquals("Expected query with only locationCLLI param", getExpectedQuery("testclli", null), result);
    }

    @Test
    public void testQueryBasedOnParameter_OnlySiteNamePresent() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "testSiteName");

        String result = invokeQueryBasedOnParameter(queryParams);
        assertEquals("Expected query with only siteName param", getExpectedQuery(null, "testsitename"), result);
    }

    @Test
    public void testQueryBasedOnParameter_NeitherParamPresent() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();

        String result = invokeQueryBasedOnParameter(queryParams);
        assertEquals("Expected query with no params", getExpectedQuery(null, null), result);
    }

    private String invokeQueryBasedOnParameter(Map<String, Object> queryParams) throws Exception {
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        return (String) method.invoke(coconutServiceVersion3, queryParams);
    }

    private String getExpectedQuery(String locationCLLI, String siteName) {
        StringBuilder query = new StringBuilder(CoconutDeviceMSConstants.COCONUT_V3_SITE_QUERY);
        if (locationCLLI != null) {
            query.append(CoconutDeviceMSConstants.COCONUT_V3_LOCATION_CLLI.replace(":locationCLLI", "'" + locationCLLI + "'"));
        }
        if (siteName != null) {
            query.append(CoconutDeviceMSConstants.COCONUT_V3_SITE_NAME.replace(":siteName", "'" + siteName + "'"));
        }
        return query.toString();
    }
}
```

In this test class, we use the `Reflection` API to invoke the `queryBasedOnParameter` method, which is private. We test all four branches of the method by passing different combinations of `locationCLLI` and `siteName` parameters. The `getExpectedQuery` method is used to build the expected query string based on the input parameters.