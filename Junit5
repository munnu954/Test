Here's a JUnit 5 test case for the `validateIterator` method in the `MtnInsightsValidator` class. This test case aims to cover all branches of the method for 100% code coverage.

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

import org.apache.commons.lang3.StringUtils;

public class MtnInsightsValidatorTest {

    @InjectMocks
    private MtnInsightsValidator validator;

    private MtnInsightsAttributes validAttributes;
    private MtnInsightsAttributes invalidAttributes;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        validAttributes = new MtnInsightsAttributes();
        validAttributes.setMtn("12345");
        validAttributes.setEcpdId("ecpdId");
        validAttributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        validAttributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        validAttributes.setOutageId("outageId");

        invalidAttributes = new MtnInsightsAttributes();
        invalidAttributes.setMtn(null);
        invalidAttributes.setEcpdId(null);
        invalidAttributes.setInsightCategory(null);
        invalidAttributes.setInsightName(null);
        invalidAttributes.setOutageId(null);
    }

    @Test
    public void testValidateIterator_withValidAttributes() {
        assertDoesNotThrow(() -> validator.validateIterator(null, validAttributes, "LogVal"));
    }

    @Test
    public void testValidateIterator_withInvalidAttributes_MissingMtn() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setEcpdId("ecpdId");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal");
        });
    }

    @Test
    public void testValidateIterator_withInvalidAttributes_MissingInsightCategory() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setEcpdId("ecpdId");
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_MYBIZZ.get(0));
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal");
        });
    }

    @Test
    public void testValidateIterator_withInvalidAttributes_MissingInsightName() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setEcpdId("ecpdId");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_MYBIZZ);
        attributes.setOutageId("outageId");

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal");
        });
    }

    @Test
    public void testValidateIterator_withInvalidAttributes_EmptyInsightAttributes() {
        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, invalidAttributes, "LogVal");
        });
    }

    @Test
    public void testValidateIterator_withValidNetworkAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn("12345");
        attributes.setEcpdId("ecpdId");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));
        attributes.setOutageId("outageId");

        assertDoesNotThrow(() -> validator.validateIterator(null, attributes, "LogVal"));
    }

    @Test
    public void testValidateIterator_withInvalidNetworkAttributes() {
        MtnInsightsAttributes attributes = new MtnInsightsAttributes();
        attributes.setMtn(null);
        attributes.setEcpdId("ecpdId");
        attributes.setInsightCategory(EventLedgerConstants.INSIGHT_CATEGORY_NETWORK_OUTAGE);
        attributes.setInsightName(EventLedgerConstants.INSIGHT_NAME_NETWORK.get(0));
        attributes.setOutageId(null);

        assertThrows(InvalidRequestException.class, () -> {
            validator.validateIterator(null, attributes, "LogVal");
        });
    }
}
```

### Explanation:
- **Setup**: A setup method initializes `MtnInsightsAttributes` for valid and invalid scenarios.
- **Test Cases**: Each test case checks a different branch of the `validateIterator` method:
  - Valid attributes should not throw an exception.
  - Missing required fields (like MTN, insightCategory, and insightName) should throw an `InvalidRequestException`.
  - Invalid scenarios for network-related insights are also tested.
  
This test suite ensures every logical path in the `validateIterator` method is covered.