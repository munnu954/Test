Sure, here's a sample code to submit the job to a Flink cluster:

public void submitJob(SpaceCollector message) {
    String flinkUrl = "http://<flink-cluster-url>:<flink-cluster-port>/jobs";
    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_JSON);
    JSONObject requestBody = new JSONObject();
    requestBody.put("entryClass", "com.example.MyFlinkJob");
    requestBody.put("programArgs", message.toProgramArgs());
    HttpEntity<String> request = new HttpEntity<String>(requestBody.toString(), headers);
    try {
        ResponseEntity<String> response = restTemplate.postForEntity(flinkUrl, request, String.class);
        if (response.getStatusCode() != HttpStatus.CREATED) {
            throw new RuntimeException("Failed to submit job to Flink cluster");
        }
    } catch (ResourceAccessException e) {
        throw new RuntimeException("Failed to connect to Flink cluster");
    }
}

In this example, we're using the Spring RestTemplate to send a POST request to the Flink cluster's /jobs endpoint with the job details in the request body. The job details include the entry class (com.example.MyFlinkJob) and program arguments generated from the SpaceCollector message. If the response status code is not 201 (CREATED), we throw a RuntimeException with an error message. We also catch ResourceAccessException to handle any connection errors. Note that you'll need to replace <flink-cluster-url> and <flink-cluster-port> with the actual URL and port of your Flink cluster.