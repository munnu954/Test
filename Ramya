import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class MyTest {

    @Mock
    private LuceneRepo luceneRepo;

    @InjectMocks
    private MyService myService; // Replace MyService with your service class name

    private final Logger logger = LoggerFactory.getLogger(MyTest.class);

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSaveEntitySuccess() {
        // Arrange
        String message = "{\"id\": 1, \"data\": \"some data\"}";
        CollectionAuditEntity auditEntity = new CollectionAuditEntity();
        auditEntity.setId(1);

        when(luceneRepo.findById(1)).thenReturn(null);

        // Act
        List<String> parsedSavedMessages = new ArrayList<>();
        myService.processMessage(message, parsedSavedMessages);

        // Assert
        assertEquals("success", parsedSavedMessages.get(0));
        verify(luceneRepo, times(1)).save(any(CollectionAuditEntity.class));
    }

    @Test
    void testEntityAlreadyExists() {
        // Arrange
        String message = "{\"id\": 1, \"data\": \"some data\"}";
        CollectionAuditEntity auditEntity = new CollectionAuditEntity();
        auditEntity.setId(1);

        when(luceneRepo.findById(1)).thenReturn(auditEntity);

        // Act
        List<String> parsedSavedMessages = new ArrayList<>();
        myService.processMessage(message, parsedSavedMessages);

        // Assert
        assertEquals("Data already exists for id: 1", parsedSavedMessages.get(0));
        verify(luceneRepo, never()).save(any(CollectionAuditEntity.class));
    }

    @Test
    void testExceptionHandling() {
        // Arrange
        String message = "{\"id\": 1, \"data\": \"some data\"}";

        doThrow(new RuntimeException("Test exception")).when(luceneRepo).save(any(CollectionAuditEntity.class));

        // Act
        List<String> parsedSavedMessages = new ArrayList<>();
        myService.processMessage(message, parsedSavedMessages);

        // Assert
        assertEquals("error", parsedSavedMessages.get(0));
    }
}
