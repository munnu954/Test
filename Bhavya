import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
import static org.mockito.BDDMockito.given;

@Component
public class FileUtility {

    private static final String FILE_NAME = "sourceFile.txt";

    private Path foundFile = null;

    @Getter
    String contentType = "application/octet-stream";

    @Value("${files.directory}")
    private String dir;

    public Resource getFileAsResource(String fileCode) throws IOException {
        Path dirPath = Paths.get(dir);

        Files.list(dirPath).forEach(file -> {
            if (file.getFileName().toString().startsWith(fileCode)) {
                foundFile = file;
            }
        });

        if (foundFile == null) {
            throw new FileNotFoundException("File Not found");
        }

        return new UrlResource(foundFile.toUri());
    }

    public String getHeaderValue(String filename) {
        return "attachment; filename=\"" + filename + "\"";
    }

    @Test
    public void givenSourceFile_whenDownload_thenReturnFileResource() throws IOException {
        // Creating file created and empty destination
        File sourceFile = new File(FILE_NAME);

        // Given file
        given(sourceFile.exists()).isTrue();

        String fileName = "test.csv";

        // When file move called
        Resource resource = getFileAsResource(fileName);

        // Then return resource with file
        assertThat(fileName).isEqualTo(resource.getFilename());
    }

    @Test
    public void givenWrongFile_whenDownload_thenThrowFileNotFoundException() {
        // Creating file created and empty destination
        File sourceFile = new File(FILE_NAME);

        // Given file does not exist
        given(sourceFile.exists()).isFalse();

        String fileName = "test.csv";

        // When file move called
        assertThatExceptionOfType(FileNotFoundException.class)
                .isThrownBy(() -> getFileAsResource(fileName))
                .withMessageContaining("File Not found");
    }
}