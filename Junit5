To write JUnit 5 test cases that cover all branches of the specific block in the `createAlarm` method, we need to consider the following scenarios:

1. `perceivedSeverity` is `null` and `stateValue` equals the cleared state.
2. `perceivedSeverity` is not `null`, is empty, and `stateValue` equals the cleared state.
3. `perceivedSeverity` is not `null`, is not empty, and `stateValue` equals the cleared state.
4. `perceivedSeverity` is `null` and `stateValue` does not equal the cleared state.
5. `perceivedSeverity` is not `null`, is empty, and `stateValue` does not equal the cleared state.
6. `perceivedSeverity` is not `null`, is not empty, and `stateValue` does not equal the cleared state.

I'll assume that `postgresConf` is a mockable configuration class that provides the mappings for `perceivedSeverity`, `alarmState`, and `alarmType`.

Here is the JUnit 5 test code to cover all these scenarios:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @Mock
    private Logger log;

    @Mock
    private PostgresConf postgresConf;

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    private ObjectMapper objectMapper;

    @BeforeEach
    public void setup() {
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testPerceivedSeverityNullAndStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\": null, \"State\": \"Cleared\"}";
        setupMocksForPerceivedSeverityTest(null, "Cleared", true);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testPerceivedSeverityEmptyAndStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\": \"\", \"State\": \"Cleared\"}";
        setupMocksForPerceivedSeverityTest("", "Cleared", true);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testPerceivedSeverityNotEmptyAndStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\": \"Warning\", \"State\": \"Cleared\"}";
        setupMocksForPerceivedSeverityTest("Warning", "Cleared", true);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity()); // Assuming 1 is the value for "Warning" in perceivedSeverityMap
    }

    @Test
    public void testPerceivedSeverityNullAndStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\": null, \"State\": \"Active\"}";
        setupMocksForPerceivedSeverityTest(null, "Active", false);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity()); // Assuming 1 is the value for Indeterminate in perceivedSeverityMap
    }

    @Test
    public void testPerceivedSeverityEmptyAndStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\": \"\", \"State\": \"Active\"}";
        setupMocksForPerceivedSeverityTest("", "Active", false);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(1, alarm.getPerceivedSeverity()); // Assuming 1 is the value for Indeterminate in perceivedSeverityMap
    }

    @Test
    public void testPerceivedSeverityNotEmptyAndStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\": \"Major\", \"State\": \"Active\"}";
        setupMocksForPerceivedSeverityTest("Major", "Active", false);

        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity()); // Assuming 2 is the value for "Major" in perceivedSeverityMap
    }

    private void setupMocksForPerceivedSeverityTest(String perceivedSeverity, String state, boolean isCleared) {
        Map<String, Integer> perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Warning", 1);
        perceivedSeverityMap.put("Indeterminate", 1);
        perceivedSeverityMap.put("Major", 2);

        Map<String, Integer> alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 0);
        alarmStateMap.put("Active", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");

        when(postgresConf.getAlarmStateMap().get("Cleared")).thenReturn(0);
        when(postgresConf.getAlarmStateMap().get("New")).thenReturn(1);

        if (isCleared) {
            when(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())).thenReturn(0);
        } else {
            when(postgresConf.getAlarmStateMap().get(postgresConf.getAlarmStateCleared())).thenReturn(1);
        }
    }
}
```

### Explanation:
1. **testPerceivedSeverityNullAndStateCleared**:
    - Tests when `perceivedSeverity` is `null` and `stateValue` equals the cleared state.
    - Expects `perceivedSeverity` to be set to `-1`.

2. **testPerceivedSeverityEmptyAndStateCleared**:
    - Tests when `perceivedSeverity` is empty and `stateValue` equals the cleared state.
    - Expects `perceivedSeverity` to be set to `-1`.

3. **testPerceivedSeverityNotEmptyAndStateCleared**:
    - Tests when `perceivedSeverity` is not empty and `stateValue` equals the cleared state.
    - Expects `perceivedSeverity` to be set to the corresponding value from the `perceivedSeverityMap`.

4. **testPerceivedSeverityNullAndStateNotCleared**:
    - Tests when `perceivedSeverity` is `null` and `stateValue` does not equal the cleared state.
    - Expects `perceivedSeverity` to be set to the default indeterminate value from the `perceivedSeverityMap`.

5. **testPerceivedSeverityEmptyAndStateNotCleared**:
    - Tests when `perceivedSeverity` is empty and `stateValue` does not equal the cleared state.
    - Expects `perceivedSeverity` to be set to the default indeterminate value from the `perceivedSeverityMap`.

6. **testPerceivedSeverityNotEmptyAndStateNotCleared**:
    - Tests when `perceivedSeverity` is not empty and `stateValue` does not equal the cleared state.
    - Expects `perceivedSeverity` to be set to the corresponding value from the `perceivedSeverityMap`.

By covering these scenarios, we can ensure that all branches of the `else if` condition inside the `createAlarm` method are tested, achieving 100% code coverage for that block.