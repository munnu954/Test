    @Test
    public void testApplyGroupingClearingLogic_GroupingCreated_IdentityNotNull() {
        // Arrange
        HashMap<String, Object> alarmMap = new HashMap<>();
        String alarmIdentity = "test-alarm-id";

        // Simulate grouping alarm with isGroupingCreated = true and identity not null
        GroupingAlarms groupingAlarm = new GroupingAlarms();
        groupingAlarm.setGroupingId(1);
        groupingAlarm.setGroupingCreated(true);
        groupingAlarm.setAlarmIdentity("SampleIdentity");

        // Set up mock behavior
        when(utils.isGeneratedAlarm(alarmMap)).thenReturn(false);
        when(groupingContributorsRepo.getGroupingContributorsByIdentity(alarmIdentity)).thenReturn(Optional.of(new ArrayList<>()));
        when(groupingAlarmsRepo.getGroupingAlarmByGroupingId(anyInt())).thenReturn(Optional.of(groupingAlarm));

        // Act
        groupingService.applyGroupingClearingLogic(alarmMap, alarmIdentity);

        // Assert: Check that api.clearAlarm was called with the correct identity
        verify(apiOperation).clearAlarm("SampleIdentity");
    }

    @Test
    public void testApplyGroupingClearingLogic_GroupingCreated_IdentityNull() {
        // Arrange
        HashMap<String, Object> alarmMap = new HashMap<>();
        String alarmIdentity = "test-alarm-id";

        // Simulate grouping alarm with isGroupingCreated = true and identity null
        GroupingAlarms groupingAlarm = new GroupingAlarms();
        groupingAlarm.setGroupingId(1);
        groupingAlarm.setGroupingCreated(true);
        groupingAlarm.setAlarmIdentity(null);

        // Set up mock behavior
        when(utils.isGeneratedAlarm(alarmMap)).thenReturn(false);
        when(groupingContributorsRepo.getGroupingContributorsByIdentity(alarmIdentity)).thenReturn(Optional.of(new ArrayList<>()));
        when(groupingAlarmsRepo.getGroupingAlarmByGroupingId(anyInt())).thenReturn(Optional.of(groupingAlarm));

        // Act
        groupingService.applyGroupingClearingLogic(alarmMap, alarmIdentity);

        // Assert: Ensure clearAlarm is not called
        verify(apiOperation, never()).clearAlarm(anyString());
    }

    @Test
    public void testApplyGroupingClearingLogic_GroupingNotCreated_IdentityNotNull() {
        // Arrange
        HashMap<String, Object> alarmMap = new HashMap<>();
        String alarmIdentity = "test-alarm-id";

        // Simulate grouping alarm with isGroupingCreated = false and identity not null
        GroupingAlarms groupingAlarm = new GroupingAlarms();
        groupingAlarm.setGroupingId(1);
        groupingAlarm.setGroupingCreated(false);
        groupingAlarm.setAlarmIdentity("SampleIdentity");

        // Set up mock behavior
        when(utils.isGeneratedAlarm(alarmMap)).thenReturn(false);
        when(groupingContributorsRepo.getGroupingContributorsByIdentity(alarmIdentity)).thenReturn(Optional.of(new ArrayList<>()));
        when(groupingAlarmsRepo.getGroupingAlarmByGroupingId(anyInt())).thenReturn(Optional.of(groupingAlarm));

        // Act
        groupingService.applyGroupingClearingLogic(alarmMap, alarmIdentity);

        // Assert: Ensure clearAlarm is not called
        verify(apiOperation, never()).clearAlarm(anyString());
    }

    @Test
    public void testApplyGroupingClearingLogic_GroupingNotCreated_IdentityNull() {
        // Arrange
        HashMap<String, Object> alarmMap = new HashMap<>();
        String alarmIdentity = "test-alarm-id";

        // Simulate grouping alarm with isGroupingCreated = false and identity null
        GroupingAlarms groupingAlarm = new GroupingAlarms();
        groupingAlarm.setGroupingId(1);
        groupingAlarm.setGroupingCreated(false);
        groupingAlarm.setAlarmIdentity(null);

        // Set up mock behavior
        when(utils.isGeneratedAlarm(alarmMap)).thenReturn(false);
        when(groupingContributorsRepo.getGroupingContributorsByIdentity(alarmIdentity)).thenReturn(Optional.of(new ArrayList<>()));
        when(groupingAlarmsRepo.getGroupingAlarmByGroupingId(anyInt())).thenReturn(Optional.of(groupingAlarm));

        // Act
        groupingService.applyGroupingClearingLogic(alarmMap, alarmIdentity);

        // Assert: Ensure clearAlarm is not called
        verify(apiOperation, never()).clearAlarm(anyString());
    }