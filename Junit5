To cover the remaining `else` statements in the `UserInsightsValidator` class, we need to write test cases that will specifically trigger those conditions. Here are the additional test cases designed to ensure 100% coverage, including those else statements:

### Additional JUnit 5 Test Cases

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

public class UserInsightsValidatorTest {

    private UserInsightsValidator validator;

    @BeforeEach
    public void setUp() {
        validator = new UserInsightsValidator();
    }

    @Test
    public void testValidateWithListKeyAttributesMissingAllFields() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        UserInsightsAttributes[] listKeyAttributes = { new UserInsightsAttributes() }; // Empty attributes
        request.setListKeyAttributes(listKeyAttributes);
        request.setServiceHeader(createValidServiceHeader());

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(request);
        });

        Assertions.assertEquals("ListKeyAttributesLOGGER_MESSAGE_USER_INSIGHTS", exception.getMessage());
    }

    @Test
    public void testValidateUserInsightsSearchRequestWithAllEmptyFields() {
        UserInsightsSearchRequest searchRequest = new UserInsightsSearchRequest();
        searchRequest.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId(""); // Empty userId
        searchParam.setEcpdId(""); // Empty ecpdId
        searchParam.setInsightCategory(new String[]{}); // Empty categories
        searchParam.setInsightName(new String[]{}); // Empty names
        searchRequest.setServiceRequest(searchParam);

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(searchRequest);
        });

        Assertions.assertEquals("ServiceRequest Ecpd Id, User Id, Insight Category and Insight Name are required.", exception.getMessage());
    }

    @Test
    public void testValidateWithListKeyAttributesMissingRequiredFields() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        UserInsightsAttributes[] listKeyAttributes = {
            new UserInsightsAttributes() // This will be empty
        };
        request.setListKeyAttributes(listKeyAttributes);
        request.setServiceHeader(createValidServiceHeader());

        InvalidRequestException exception = Assertions.assertThrows(InvalidRequestException.class, () -> {
            validator.validate(request);
        });

        // Assuming LOGGER_MESSAGE_USER_INSIGHTS is defined, replace with the actual expected message.
        Assertions.assertEquals("ListKeyAttributesLOGGER_MESSAGE_USER_INSIGHTS", exception.getMessage());
    }

    private UserInsightsRequest createValidUserInsightsRequestWithListKeyAttributes() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        UserInsightsAttributes[] listKeyAttributes = {
            createValidUserInsightsAttributes(),
            createValidUserInsightsAttributes() // Adding a second valid attribute
        };
        request.setListKeyAttributes(listKeyAttributes);
        request.setServiceHeader(createValidServiceHeader());
        return request;
    }

    // Existing helper methods...
    private UserInsightsRequest createValidUserInsightsRequest() {
        UserInsightsRequest request = new UserInsightsRequest();
        request.setRequestType(InsightsRequestType.INSERTCUSTOMERINSIGHTS);
        request.setKeyAttributes(createValidUserInsightsAttributes());
        request.setServiceHeader(createValidServiceHeader());
        return request;
    }

    private UserInsightsAttributes createValidUserInsightsAttributes() {
        UserInsightsAttributes attributes = new UserInsightsAttributes();
        attributes.setUserId("validUserId");
        attributes.setEcpdId("validEcpdId");
        attributes.setInsightCategory("validCategory");
        attributes.setInsightName("validName");
        return attributes;
    }

    private ServiceHeader createValidServiceHeader() {
        ServiceHeader header = new ServiceHeader();
        header.setClientId("validClientId");
        header.setClientTransactionId("validTransactionId");
        header.setServiceName("validServiceName");
        return header;
    }

    private UserInsightsSearchRequest createValidUserInsightsSearchRequest() {
        UserInsightsSearchRequest request = new UserInsightsSearchRequest();
        request.setServiceHeader(createValidServiceHeader());
        UserInsightsSearchParam searchParam = new UserInsightsSearchParam();
        searchParam.setUserId("validUserId");
        searchParam.setEcpdId("validEcpdId");
        searchParam.setInsightCategory(new String[]{"validCategory"});
        searchParam.setInsightName(new String[]{"validName"});
        request.setServiceRequest(searchParam);
        return request;
    }
}
```

### Additional Test Cases Explained:

1. **testValidateWithListKeyAttributesMissingAllFields**: This test checks if the `validate` method correctly handles a case where the `listKeyAttributes` are present but all fields are empty. It should trigger the `else` condition in the `validateIterator` method.

2. **testValidateUserInsightsSearchRequestWithAllEmptyFields**: This test verifies that if all fields in `UserInsightsSearchParam` are empty, the correct error message is returned from the `validate` method.

3. **testValidateWithListKeyAttributesMissingRequiredFields**: This test checks that if the `listKeyAttributes` are provided but contain missing required fields, the appropriate error message is thrown, ensuring the `else` condition is covered.

By adding these test cases, you should be able to achieve full code coverage for the `UserInsightsValidator` class, including the previously untested `else` statements. Make sure to replace any placeholder error messages with the actual expected values defined in your class.