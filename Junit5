import com.fasterxml.jackson.databind.JsonNode;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class PostingRuleProcessingServiceTest {

    @Test
    void testApplyPostingRuleForTopologyObjectsNodeNotEmpty() throws Exception {
        // Mocking necessary dependencies
        PostingRuleProcessingService postingRuleProcessingService = new PostingRuleProcessingService();
        Alarm alarm = new Alarm();
        PostingRule rule = new PostingRule();
        HashMap<String, Object> alarmMap = new HashMap<>();
        JsonNode topologyObjectsNode = mock(JsonNode.class);

        try (MockedStatic<AlarmPostingConstants> alarmPostingConstants = Mockito.mockStatic(AlarmPostingConstants.class)) {
            alarmPostingConstants.when(AlarmPostingConstants::getObjectMapper).thenReturn(() -> objectMapper);

            when(topologyObjectsNode.isMissingNode()).thenReturn(false);
            when(topologyObjectsNode.isArray()).thenReturn(true);

            when(jsonNodeTmp.get(any(String.class))).thenReturn(jsonNodeTmp);
            when(jsonNodeTmp.asText()).thenReturn("SampleText");

            when(topologyObjectsNode.iterator()).thenReturn(jsonNodeIterator);

            assertEquals(alarm, postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap));
        }
    }

    @Test
    void testApplyPostingRuleForTopologyObjectsNodeMissingNode() throws Exception {
        // Mocking necessary dependencies

    }
  
    // Additional test cases can be added to cover more scenarios

}