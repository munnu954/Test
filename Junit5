@Test
void testApplyPostingRule() throws Exception {
    // Setup
    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("TestAlarm");
    alarm.setAlarmedObject("");
    
    PostingRule rule = new PostingRule();
    rule.setRuleId("1");
    rule.setRuleTraversalExpression("%RuleExpression%");
    
    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("%RuleExpression%", "testRuleExpression");
    
    JsonNode jsonNodeTmp = AlarmPostingConstants.getObjectMapper().readTree("{\"key\": \"value\"}");
    List<JsonNode> topologyObjectsNodeList = new ArrayList<>();
    topologyObjectsNodeList.add(jsonNodeTmp);
    
    ObjectMapper objectMapper = new ObjectMapper();
    String topologyData = objectMapper.writeValueAsString(topologyObjectsNodeList);
    
    ResponseEntity<String> responseEntity = new ResponseEntity<>(topologyData, HttpStatus.OK);
    when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
    
    when(utils.evaluateExpression(eq("%TopoObject:EligibilityValue%"), anyMap())).thenReturn("eligible");
    when(utils.evaluateExpression(eq("%AlarmedObjectExpression%"), anyMap())).thenReturn("TestObject");
    when(utils.evaluateExpression(eq("{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}"), anyMap())).thenReturn("TestTopologyDetails");
    when(utils.evaluateExpression(eq("%TopoObject:TopoDetValue%"), anyMap())).thenReturn("TestTopologyDetailsValue");
    
    // Run the test
    postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    
    // Verify the results
    verify(utils, times(2)).evaluateExpression(anyString(), anyMap());
    assertNotNull(alarm.getAlarmedObject());
    assertEquals("TestObject", alarm.getAlarmedObject());
    assertNotNull(alarm.getTopologyDetails());
    assertEquals("TestTopologyDetailsValue", alarm.getTopologyDetails());
}
    
@Test
void testApplyPostingRule_NoTopologyObjects() throws Exception {
    // Setup
    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("TestAlarm");
    alarm.setAlarmedObject("");
    
    PostingRule rule = new PostingRule();
    rule.setRuleId("1");
    rule.setRuleTraversalExpression("%RuleExpression%");
    
    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("%RuleExpression%", "testRuleExpression");
    
    ObjectMapper objectMapper = new ObjectMapper();
    String topologyData = "";
    
    ResponseEntity<String> responseEntity = new ResponseEntity<>(topologyData, HttpStatus.OK);
    when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenReturn(responseEntity);
    
    // Run the test
    postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    
    // Verify the results
    verify(utils, never()).evaluateExpression(anyString(), anyMap());
    assertEquals("", alarm.getAlarmedObject());
    assertNull(alarm.getTopologyDetails());
}
    
@Test
void testApplyPostingRule_Exception() throws Exception {
    // Setup
    Alarm alarm = new Alarm();
    alarm.setAlarmIdentity("TestAlarm");
    alarm.setAlarmedObject("");
    
    PostingRule rule = new PostingRule();
    rule.setRuleId("1");
    rule.setRuleTraversalExpression("%RuleExpression%");
    
    HashMap<String, Object> alarmMap = new HashMap<>();
    alarmMap.put("%RuleExpression%", "testRuleExpression");

    when(topoApiClient.fetchTopologyTraversalDetails(eq(alarm), eq(rule), anyString())).thenThrow(new RestClientException("Error"));
    
    // Run the test
    postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    
    // Verify the results
    verify(utils, never()).evaluateExpression(anyString(), anyMap());
    assertEquals("", alarm.getAlarmedObject());
    assertNull(alarm.getTopologyDetails());
}