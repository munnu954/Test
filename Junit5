To achieve 100% code coverage for the conditional statement `if (utils.isValidData(mtn) && action.equals("CALLESTABLISHED") && !callTypeValue.equals("0")) { }` in the `ctionMessage` method, we need to test all possible combinations of the conditions involved. Here are test cases that explore those combinations:

```java
import com.verizon.vbg.ledger.listener.EventsMessageListener;
import com.verizon.vbg.ledger.service.MtnEcpdService;
import com.verizon.vbg.ledger.service.CTIEcpdService;
import com.verizon.vbg.ledger.service.KafkaFalloutService;
import com.verizon.vbg.ledger.util.BatchLoaderUtils;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.kafka.core.KafkaTemplate;

import static org.mockito.Mockito.*;

class EventsMessageListenerConditionalTests {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @Mock
    private MtnEcpdService mtnEcpdService;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @Mock
    private BatchLoaderUtils utils;

    @Mock
    private CTIEcpdService ctiEcpdService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "outbound-cti-event");
    }

    @Test
    void testCtionMessage_invalidMtn() {
        // Prepare a payload with invalid MTN
        String payload = "{\"CV2\":\"\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CALLESTABLISHED\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock the utility method to return false for MTN
        when(utils.isValidData("")).thenReturn(false);  // Invalid MTN
        when(utils.callTypeExtraction("1;2")).thenReturn("1");

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that no interactions with KafkaTemplate occur
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    void testCtionMessage_actionNotCallEstablished() {
        // Prepare a payload with action not equal to "CALLESTABLISHED"
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"OTHER_ACTION\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock the utility method to return true for MTN
        when(utils.isValidData("1234567890")).thenReturn(true);
        when(utils.callTypeExtraction("1;2")).thenReturn("1");

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that no interactions with KafkaTemplate occur
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    void testCtionMessage_callTypeValueZero() {
        // Prepare a payload with callTypeValue equals "0"
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CALLESTABLISHED\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"0;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock the utility method to return true for MTN
        when(utils.isValidData("1234567890")).thenReturn(true);
        when(utils.callTypeExtraction("0;2")).thenReturn("0");  // Call type value is "0"

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that no interactions with KafkaTemplate occur
        verify(kafkaTemplate, never()).send(any());
    }
}
```

### Explanation of the Tests:

1. **Invalid MTN**: This test case covers the scenario where the `mtn` value is invalid (e.g., empty), ensuring that the condition fails and no Kafka message is sent.

2. **Action Not `CALLESTABLISHED`**: Tests when the action is something other than "CALLESTABLISHED", ensuring that this condition fails and no further processing occurs.

3. **Call Type Value is "0"**: Covers the scenario where `callTypeValue` is "0", ensuring that this condition prevents further processing.

Each test case targets a specific logical path in the conditional statement, ensuring that each branch is executed at least once. Adjust the payloads and mocks as necessary to fit the actual implementation details and environment.