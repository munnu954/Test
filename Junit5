To cover both branches of the `if` statement in the `addMsgToQueue` method, we need to create two test cases:

1. When `alm` is `null`.
2. When `alm` is not `null`.

Here is the code for the JUnit 5 test cases:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.time.Instant;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;

public class PostingServiceTest {

    @InjectMocks
    private PostingService postingService;

    @Mock
    private Message<byte[]> msg;

    @Mock
    private MessageId messageId;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testAddMsgToQueue_MsgNotNull() {
        when(msg.getMessageId()).thenReturn(messageId);

        Instant alarmReceivedTime = Instant.now();
        postingService.addMsgToQueue(msg, alarmReceivedTime);

        assertFalse(postingService.alarms.isEmpty());
        assertEquals(1, postingService.alarms.size());
        assertEquals(msg, postingService.alarms.peek());
        assertEquals(alarmReceivedTime, postingService.alarmReceivedTimeValues.get(messageId));
    }

    @Test
    void testAddMsgToQueue_MsgNull() {
        postingService.addMsgToQueue(null, Instant.now());

        assertTrue(postingService.alarms.isEmpty());
    }
}
```

### Explanation:

1. **`testAddMsgToQueue_MsgNotNull`**:
   - This test case ensures that when `alm` is not `null`, the message is added to the `alarms` queue, and the `alarmReceivedTime` is recorded in the `alarmReceivedTimeValues` hashtable.

2. **`testAddMsgToQueue_MsgNull`**:
   - This test case verifies that when `alm` is `null`, the `alarms` queue remains empty, and nothing is added to the `alarmReceivedTimeValues` hashtable.

These test cases cover both branches of the `if` statement, ensuring 100% code coverage for the `addMsgToQueue` method.