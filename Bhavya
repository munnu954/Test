The error "The method assertTrue(boolean) in the type Assertions is not applicable for the arguments (void)" is because the assertTrue() method expects a boolean argument, but the collectorInitializerService.initialize(spaceCollector) method returns void. To fix this, you can change the assertTrue() method to assertEquals(true, collectorInitializerService.initialize(spaceCollector)).

The following code shows how to modify the CollectorApiReader.java and CollectorInitializerService.java classes to make the code workable:


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
public class CollectorApiReader {

    private static final Logger LOGGER = LoggerFactory.getLogger(CollectorApiReader.class);

    public void initialize(SpaceCollector spaceCollector) throws Exception {
        LOGGER.info("Initialized Api Reader {}", spaceCollector);
    }

}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class CollectorInitializerService {

    private final CollectorApiReader collectorApiReader;
    private final Validator validator;

    @Autowired
    public CollectorInitializerService(CollectorApiReader collectorApiReader, Validator validator) {
        this.collectorApiReader = collectorApiReader;
        this.validator = validator;
    }

    @KafkaListener(topics = "spring.kafka.producer.topic-name", groupId = "spring.kafka.consumer.group-id")
    public void consume(SpaceCollector spaceCollector) {
        LOGGER.info("Received SpaceCollector data: {}", spaceCollector);
        try {
            collectorApiReader.initialize(spaceCollector);
            LOGGER.info("SpaceCollector initialized successfully");
        } catch (Exception e) {
            LOGGER.error("Failed to initialize SpaceCollector", e);
        }
    }
}


The following code shows how to modify the testInitialize_Success() method to make the code workable:

``
@Test
public void testInitialize_Success() {
        // Arrange
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("123456");
        spaceCollector.setUrl("https://example.com");
        spaceCollector.setPort(8080);
        spaceCollector.setUsername("username");
        spaceCollector.setPassword("password");
        spaceCollector.setSshPublicKey("sshPublicKey");
        spaceCollector.setSshPrivateKey("sshPrivateKey");
        spaceCollector.setConnectionType("ssh");
        spaceCollector.setEnabled(true);
        spaceCollector.setInputFilePath("inputFilePath");
        spaceCollector.setOutputFilePath("outputFilePath");
        spaceCollector.setPollingDuration(60);

        // Act
        when(collectorApiReader.initialize(spaceCollector)).thenReturn(true);

        // Assert
        assertEquals(true, collectorInitializerService.initialize(spaceCollector));
    }
`