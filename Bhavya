The `NullPointerException` you're encountering indicates that the `opsForValue()` method of your `RedisTemplate` mock is returning `null`. This typically means that the `ValueOperations` object is not properly mocked for the `RedisTemplate`. 

To resolve this, you need to mock the behavior of `opsForValue()` so that it returns a valid mock of `ValueOperations`. Here’s how to adjust your test case:

### Revised Test Class

Here’s the complete test class with the necessary mocking for the `ValueOperations`:

```java
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;

import java.util.concurrent.TimeUnit;

@ExtendWith(MockitoExtension.class)
class CTIEcpdServiceTest {

    @Mock
    private RedisTemplate<String, CTIDataStore> redisTemplate;

    @Mock
    private ValueOperations<String, CTIDataStore> valueOperations;

    @InjectMocks
    private CTIEcpdService ctiEcpdService;

    private CTIDataStore testData;

    @BeforeEach
    void setUp() {
        testData = new CTIDataStore();
        testData.setCiscoCallId(12345); // example CiscoCallId
        testData.setEcpd("exampleEcpd");
        testData.setMtn("exampleMtn");
        testData.setSensitivity("exampleSensitivity");
        testData.setIvrCallId("exampleIvrCallId");
        ctiEcpdService.ttl = 60; // Set TTL for testing

        // Mock the behavior of redisTemplate to return the valueOperations mock
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
    }

    @Test
    void testSaveCTIData() {
        // Mock the behavior of valueOperations
        doNothing().when(valueOperations).set(any(String.class), any(CTIDataStore.class));
        when(redisTemplate.expire(any(String.class), any(Long.class), any(TimeUnit.class))).thenReturn(true);

        // Call the method under test
        ctiEcpdService.saveCTIData(testData);

        // Validate that the data is saved and expire is called
        verify(valueOperations).set("CTIDataStore: 12345", testData);
        verify(redisTemplate).expire("CTIDataStore: 12345", 60, TimeUnit.SECONDS);
    }

    @Test
    void testFindById_WithExistingId() {
        // Mock the valueOperations to return the test data when get is called
        when(valueOperations.get("CTIDataStore: 12345")).thenReturn(testData);

        // Call the method under test
        CTIDataStore result = ctiEcpdService.findById("12345");

        // Validate the result
        assertNotNull(result, "Expected data should not be null");
        assertEquals(12345, result.getCiscoCallId(), "Expected CiscoCallId does not match");
    }

    @Test
    void testFindById_WithNonExistingId() {
        // Mock the valueOperations to return null when get is called with a non-existing ID
        when(valueOperations.get("CTIDataStore: 67890")).thenReturn(null);

        // Call the method under test
        CTIDataStore result = ctiEcpdService.findById("67890");

        // Validate the result
        assertNull(result, "Expected result should be null for non-existing ID");
    }

    @Test
    void testDeleteById_WithExistingId() {
        // Mock the delete method to return true
        when(redisTemplate.delete("CTIDataStore: 12345")).thenReturn(true);

        // Call the method under test
        Boolean result = ctiEcpdService.deleteById("12345");

        // Validate the result
        assertTrue(result, "Expected deletion to return true");
        verify(redisTemplate).delete("CTIDataStore: 12345");
    }

    @Test
    void testDeleteById_WithNonExistingId() {
        // Mock the delete method to return false
        when(redisTemplate.delete("CTIDataStore: 67890")).thenReturn(false);

        // Call the method under test
        Boolean result = ctiEcpdService.deleteById("67890");

        // Validate the result
        assertFalse(result, "Expected deletion to return false for non-existing ID");
        verify(redisTemplate).delete("CTIDataStore: 67890");
    }
}
```

### Key Changes Made

1. **Mocked `ValueOperations`**: 
   - A new mock for `ValueOperations` is created and injected into the test class.
   - The `opsForValue()` method of the `RedisTemplate` is mocked to return this `ValueOperations` mock.

2. **Adjusted Method Calls**: 
   - In the tests, instead of calling `redisTemplate.opsForValue()`, the `valueOperations` mock is used to simulate the behavior of the Redis operations.

### Summary

With these adjustments, your test cases should work without throwing `NullPointerException`. Each method of the `CTIEcpdService` class is now properly tested, covering all branches and scenarios. Make sure to run the tests to confirm everything functions as expected.