   @InjectMocks
    private ApiOperation apiOperation;

    @Mock
    private AlarmGroupingParams configParams;

    private RestTemplate restTemplateMock;

    @BeforeEach
    public void setup() {
        // Initialize mocks
        MockitoAnnotations.openMocks(this);
        restTemplateMock = mock(RestTemplate.class);
        // Set the mocked RestTemplate in the ApiOperation
        apiOperation = new ApiOperation(restTemplateMock, configParams);

        // Mocking configParams
        when(configParams.getAlarmFetchURL()).thenReturn("http://example.com/api/alarm");
        when(configParams.getAlarmFilterKey()).thenReturn("test-api-key");
    }

    @Test
    public void testGetAlarmDetailsById_NotFound() {
        // Arrange
        String alarmIdentity = "test-alarm-id";

        // Mock the RestTemplate to throw HttpClientErrorException.NotFound
        doThrow(new HttpClientErrorException.NotFound("404 Not Found"))
                .when(restTemplateMock)
                .exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class), any(Class.class));

        // Act
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Assert
        assertNull(result);  // The result should be null when exception occurs
        // You can add assertions for log messages if you capture logs
    }

    @Test
    public void testGetAlarmDetailsById_RestClientException() {
        // Arrange
        String alarmIdentity = "test-alarm-id";

        // Mock the RestTemplate to throw RestClientException
        doThrow(new RestClientException("Client exception"))
                .when(restTemplateMock)
                .exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class), any(Class.class));

        // Act
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Assert
        assertNull(result);  // The result should be null when exception occurs
        // You can add assertions for log messages if you capture logs
    }

    @Test
    public void testGetAlarmDetailsById_Success() {
        // Arrange
        String alarmIdentity = "test-alarm-id";
        String expectedResponseBody = "{\"alarmDetails\": \"Example details\"}";
        ResponseEntity<String> responseEntity = ResponseEntity.ok(expectedResponseBody);

        // Mocking a successful response
        when(restTemplateMock.exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class), any(Class.class)))
                .thenReturn(responseEntity);

        // Act
        String result = apiOperation.getAlarmDetailsById(alarmIdentity);

        // Assert
        assertNotNull(result); // The result should not be null
        assertEquals(expectedResponseBody, result); // The result should match the expected response
    }