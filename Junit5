Certainly! Here's the JUnit 5 test case that covers the specific code blocks in the `postAlarmForEachIteration` method of the `AlarmRepositoryImpl` class. This test utilizes Mockito to mock dependencies and uses reflection to access private methods.

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.SqlRowSet;

import java.lang.reflect.Method;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Set;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @Mock
    private PostingRuleProcessingService postingRuleProcessingService;

    private Alarm alarm;
    private SqlRowSet rs;

    @BeforeEach
    public void setUp() {
        alarm = new Alarm();
        rs = mock(SqlRowSet.class);
    }

    @Test
    public void testPostAlarmForEachIteration() throws Exception {
        alarm.setAlarmIdentity("testIdentity");
        when(jdbcTemplate.queryForRowSet(any(String.class), any(Object[].class))).thenReturn(rs);
        when(rs.next()).thenReturn(true);
        when(rs.getLong("sequenceid")).thenReturn(1L);
        when(rs.getBoolean("resolved")).thenReturn(true);
        when(rs.getString("componentid")).thenReturn("componentId");
        when(rs.getString("alarmedobject")).thenReturn("alarmedObject");
        when(rs.getString("reportingobject")).thenReturn("reportingObject");
        when(rs.getString("equipmentobject")).thenReturn("equipmentObject");
        when(rs.getString("tid")).thenReturn("tid");
        when(rs.getString("aid")).thenReturn("aid");
        when(rs.getString("rawmessage")).thenReturn("rawMessage");
        when(rs.getInt("stage")).thenReturn(1);

        int result = alarmRepository.postAlarmForEachIteration(alarm, "compId");

        // Validate if the values have been correctly set in the alarm object
        assertEquals(1L, alarm.getSequenceID());
        assertEquals(true, alarm.isResolved());
        assertEquals("componentId", alarm.getComponentId());
        assertEquals("alarmedObject", alarm.getAlarmedObject());
        assertEquals("reportingObject", alarm.getReportingObject());
        assertEquals("equipmentObject", alarm.getEquipmentObject());
        assertEquals("tid", alarm.getTid());
        assertEquals("aid", alarm.getAid());
        assertEquals("rawMessage", alarm.getRawMessage());
        assertEquals(1, alarm.getStage());
    }

    @Test
    public void testAddTagsToSet() throws Exception {
        String[] tags = {"tag1", "tag2"};
        Method method = AlarmRepositoryImpl.class.getDeclaredMethod("addTagsToSet", String[].class);
        method.setAccessible(true);
        @SuppressWarnings("unchecked")
        Set<String> result = (Set<String>) method.invoke(alarmRepository, (Object) tags);
        assertEquals(2, result.size());
    }
}
```

### Explanation:

1. **Test Dependencies**: We use Mockito annotations to inject mock dependencies (`@InjectMocks`, `@Mock`).
2. **Setup**: The `@BeforeEach` setup method initializes common objects.
3. **Test `postAlarmForEachIteration`**:
   - **Mocking**: We mock the behavior of `jdbcTemplate.queryForRowSet` and the returned `SqlRowSet` to simulate the database interactions.
   - **Assertions**: We assert that the fields of the `Alarm` object are correctly populated based on the mock data.
4. **Test `addTagsToSet`**:
   - **Reflection**: We use reflection to access the private method `addTagsToSet`.
   - **Assertions**: We verify the output of the method.

This test case ensures that the specified fields are correctly populated and that the private method `addTagsToSet` works as expected.