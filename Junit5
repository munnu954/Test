Sure! Below is the JUnit 5 test code that covers all the branches of the given if statement in the `applyPostingRules` method of the `PostingRuleProcessingService` class. The test cases make use of reflection to set the private fields of the `PostingRuleProcessingService` class.

```java
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;

@ExtendWith(MockitoExtension.class)
public class PostingRuleProcessingServiceTest {

    @InjectMocks
    private PostingRuleProcessingService postingRuleProcessingService;

    @Mock
    private RuleLoadingService ruleLoadingService;

    @Mock
    private TopologyApiClient topoApiClient;

    @Mock
    private AlarmPostingUtils utils;

    @Mock
    private Alarm alarm;

    @Value("${topologytraversal.alarmedObjectExpression: %TopoObject:OSS_Names[0]%}")
    private String alarmedObjectExpression;

    @Value("${topologytraversal.topologyObjectEligibilityCheckValue:%TopoObject:OSS_Names[0]%}")
    private String topologyObjectEligibilityCheckValue;

    @Value("${topologytraversal.topologyObjectEligibilityCheckExpression:^(?!\\s*$).+}")
    private String topologyObjectEligibilityCheckExpression;

    @Value("${topologytraversal.componentIDAttributeName:reportingObject}")
    private String componentIDAttributeName;

    @Value("${topologytraversal.topologyDetailsAlarmedObjectExpression:{\"MO_Type\":\"%TopoObject:MO_Type%\",\"TagSequence\":\"%TopoObject:INMS_Attributes.TagSequence%\", \"Name\":\"%TopoObject: Name%\"}}")
    private String topologyDetailsAlarmedObjectExpression;

    @BeforeEach
    public void setUp() throws Exception {
        // Using reflection to set private fields
        setPrivateField("ruleLoadingService", ruleLoadingService);
        setPrivateField("topoApiClient", topoApiClient);
        setPrivateField("utils", utils);
        setPrivateField("alarmedObjectExpression", alarmedObjectExpression);
        setPrivateField("topologyObjectEligibilityCheckValue", topologyObjectEligibilityCheckValue);
        setPrivateField("topologyObjectEligibilityCheckExpression", topologyObjectEligibilityCheckExpression);
        setPrivateField("componentIDAttributeName", componentIDAttributeName);
        setPrivateField("topologyDetailsAlarmedObjectExpression", topologyDetailsAlarmedObjectExpression);
    }

    private void setPrivateField(String fieldName, Object value) throws Exception {
        Field field = PostingRuleProcessingService.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(postingRuleProcessingService, value);
    }

    @Test
    public void testApplyPostingRules_noMatchingRule() {
        when(ruleLoadingService.getRuleMap()).thenReturn(new HashMap<>());

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertEquals(alarm, result);
    }

    @Test
    public void testApplyPostingRules_matchingRuleWithHigherPriority() throws Exception {
        PostingRule rule1 = createPostingRule(1, 1);
        PostingRule rule2 = createPostingRule(2, 2);

        Map<Long, PostingRule> ruleMap = new HashMap<>();
        ruleMap.put(1L, rule1);
        ruleMap.put(2L, rule2);

        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(true);
        when(rule2.matchFilter(any())).thenReturn(true);

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertNotNull(result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_matchingRuleWithLowerPriority() throws Exception {
        PostingRule rule1 = createPostingRule(1, 2);
        PostingRule rule2 = createPostingRule(2, 1);

        Map<Long, PostingRule> ruleMap = new HashMap<>();
        ruleMap.put(1L, rule1);
        ruleMap.put(2L, rule2);

        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(true);
        when(rule2.matchFilter(any())).thenReturn(true);

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertNotNull(result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_onlyOneMatchingRule() throws Exception {
        PostingRule rule1 = createPostingRule(1, 1);
        PostingRule rule2 = createPostingRule(2, 2);

        Map<Long, PostingRule> ruleMap = new HashMap<>();
        ruleMap.put(1L, rule1);
        ruleMap.put(2L, rule2);

        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(true);
        when(rule2.matchFilter(any())).thenReturn(false);

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertNotNull(result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_noRuleMatches() throws Exception {
        PostingRule rule1 = createPostingRule(1, 1);
        PostingRule rule2 = createPostingRule(2, 2);

        Map<Long, PostingRule> ruleMap = new HashMap<>();
        ruleMap.put(1L, rule1);
        ruleMap.put(2L, rule2);

        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(false);
        when(rule2.matchFilter(any())).thenReturn(false);

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertEquals(alarm, result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    @Test
    public void testApplyPostingRules_matchingRuleWithNullPriority() throws Exception {
        PostingRule rule1 = createPostingRule(1, 1);
        PostingRule rule2 = createPostingRule(2, null);

        Map<Long, PostingRule> ruleMap = new HashMap<>();
        ruleMap.put(1L, rule1);
        ruleMap.put(2L, rule2);

        when(ruleLoadingService.getRuleMap()).thenReturn(ruleMap);
        when(rule1.matchFilter(any())).thenReturn(true);
        when(rule2.matchFilter(any())).thenReturn(true);

        Alarm result = postingRuleProcessingService.applyPostingRules(alarm);

        assertNotNull(result);
        verify(ruleLoadingService, times(1)).getRuleMap();
    }

    private PostingRule createPostingRule(long id, Integer priority) throws Exception {
        PostingRule rule = new PostingRule(id, "rule" + id, priority, 1, "criteria");
        rule.setFilterPerformer(mock(FilterPerformer.class));
        return rule;
    }
}
```

### Explanation:

- **Reflection**: The `setPrivateField` method uses reflection to set private fields in the `PostingRuleProcessingService` class.
- **Test Cases**:
  1. **testApplyPostingRules_noMatchingRule**: Tests the case where no rules match.
  2. **testApplyPostingRules_matchingRuleWithHigherPriority**: Tests when there are multiple matching rules, and one has a higher priority.
  3. **testApplyPostingRules_matchingRuleWithLowerPriority**: Tests when there are multiple matching rules, and one has a lower priority.
  4. **testApplyPostingRules_onlyOneMatchingRule**: Tests the case where only one rule matches.
  5. **testApplyPostingRules_noRuleMatches**: Tests when no rules match.
  6. **testApplyPostingRules_matchingRuleWithNullPriority**: Tests when one of the matching rules has a null priority.

Each test case ensures that the specific branch in the if condition is covered, providing 100% code coverage for the given if statement.