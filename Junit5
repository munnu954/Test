import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

public class CoconutServiceVersion3Test {

    @Test
    public void testQueryBasedOnParameter_siteNameExists() throws Exception {
        CoconutServiceVersion3 coconutService = new CoconutServiceVersion3();
        
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "TestSite");
        
        String result = (String) method.invoke(coconutService, queryParams);
        
        assertTrue(result.contains("LOWER(site.site_name) like 'testsite'"));
    }
    
    @Test
    public void testQueryBasedOnParameter_siteNameNotExists_locationCLLIExists() throws Exception {
        CoconutServiceVersion3 coconutService = new CoconutServiceVersion3();
        
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "TestCLLI");
        
        String result = (String) method.invoke(coconutService, queryParams);
        
        assertTrue(result.contains("LOWER(site.clli_code) like 'testclli'"));
    }
    
    @Test
    public void testQueryBasedOnParameter_siteNameAndLocationCLLIExists() throws Exception {
        CoconutServiceVersion3 coconutService = new CoconutServiceVersion3();
        
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "TestSite");
        queryParams.put("locationCLLI", "TestCLLI");
        
        String result = (String) method.invoke(coconutService, queryParams);
        
        assertTrue(result.contains("LOWER(site.site_name) like 'testsite'"));
        assertTrue(result.contains("LOWER(site.clli_code) like 'testclli'"));
    }
    
    @Test
    public void testQueryBasedOnParameter_noConditions() throws Exception {
        CoconutServiceVersion3 coconutService = new CoconutServiceVersion3();
        
        Method method = CoconutServiceVersion3.class.getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        
        Map<String, Object> queryParams = new HashMap<>();
        
        String result = (String) method.invoke(coconutService, queryParams);
        
        assertTrue(result.contains("SELECT DISTINCT site.clli_code AS locationCLLI"));
        assertFalse(result.contains("LIKE"));
    }
}