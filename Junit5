Certainly! To achieve 100% code coverage of the specified block, we need additional test cases to cover the remaining branches. Here are the additional test cases that you can add to the `AlarmRepositoryTest` class:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;
    private static Environment env;
    private static AlarmPostingUtils alarmPostingUtils;
    private static AlarmPostingConstants alarmPostingConstants;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
        env = mock(Environment.class);
        alarmPostingUtils = mock(AlarmPostingUtils.class);
        alarmPostingConstants = mock(AlarmPostingConstants.class);
        when(env.getProperty(Mockito.anyString())).thenReturn("testValue");
        ReflectionTestUtils.setField(alarmPostingUtils, "env", env);
    }

    @Test
    void testCreateAlarm_withNullPerceivedSeverityAndClearedState() throws Exception {
        String jsonStr = "{\"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"sequenceId\":\"23423\", \"perceivedSeverity\":null}";
        ObjectMapper obj = new ObjectMapper();
        JsonNode json = obj.readTree(jsonStr);

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(jsonStr);
    }

    @Test
    void testCreateAlarm_withNullPerceivedSeverityAndNonClearedState() throws Exception {
        String jsonStr = "{\"externalAlarmId\":\"pqwer\", \"State\":\"New\", \"sequenceId\":\"23423\", \"perceivedSeverity\":null}";
        ObjectMapper obj = new ObjectMapper();
        JsonNode json = obj.readTree(jsonStr);

        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Indeterminate", 1);
        stateMap.put("New", 1);
        typeMap.put("Other", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        alarmRepositoryImpl.createAlarm(jsonStr);
    }
}
```

These additional test cases cover the scenarios where `perceivedSeverity` is `null` and the `State` is either `"cleared"` or `"New"`. This should provide 100% code coverage for the specified block in the `createAlarm` method.