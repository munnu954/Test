To address the issue where `createAlarm` returns null, we need to ensure that the method is correctly implemented and handles all cases appropriately. The problem might be occurring either in the logic of the `createAlarm` method itself or in the setup of the test cases. Here's a step-by-step approach to troubleshoot and fix this issue:

1. **Check the `createAlarm` Method**: Ensure that the `createAlarm` method is implemented correctly and that it does not return null under any circumstances.

2. **Mocking and Dependencies**: Ensure that all dependencies are correctly mocked and that they return the expected values.

3. **Test Coverage**: Make sure that the test cases cover all possible scenarios, including edge cases.

Here is an updated version of the `AlarmRepositoryImpl` test class with some additional logging and checks. This aims to ensure that the `createAlarm` method behaves as expected:

### AlarmRepositoryImplTest.java

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private PostGreDataBaseConfig postgresConf;

    @Mock
    private ObjectMapper objectMapper;

    private final Logger LOG = LoggerFactory.getLogger(AlarmRepositoryImplTest.class);

    private Map<String, Integer> perceivedSeverityMap;
    private Map<String, Integer> alarmStateMap;

    @BeforeEach
    void setUp() {
        perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Indeterminate", 1);
        perceivedSeverityMap.put("Critical", 2);
        perceivedSeverityMap.put("Major", 3);

        alarmStateMap = new HashMap<>();
        alarmStateMap.put("New", 1);
        alarmStateMap.put("Cleared", 2);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
    }

    @Test
    void testPerceivedSeverityNullAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":null,\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        LOG.info("Testing perceivedSeverity: null, State: Cleared");
        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm, "Alarm should not be null");
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityEmptyAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"\",\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        LOG.info("Testing perceivedSeverity: empty, State: Cleared");
        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm, "Alarm should not be null");
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNotNullAndNotEmptyAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"Critical\",\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        LOG.info("Testing perceivedSeverity: Critical, State: Cleared");
        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm, "Alarm should not be null");
        assertEquals(2, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNullAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":null,\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        LOG.info("Testing perceivedSeverity: null, State: New");
        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm, "Alarm should not be null");
        assertEquals(1, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    void testPerceivedSeverityEmptyAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"\",\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        LOG.info("Testing perceivedSeverity: empty, State: New");
        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm, "Alarm should not be null");
        assertEquals(1, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    void testPerceivedSeverityNotNullAndNotEmptyAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"Major\",\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        LOG.info("Testing perceivedSeverity: Major, State: New");
        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm, "Alarm should not be null");
        assertEquals(3, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNotInMapAndAlarmStateCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"NonExistentSeverity\",\"State\":\"Cleared\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        LOG.info("Testing perceivedSeverity: NonExistentSeverity, State: Cleared");
        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm, "Alarm should not be null");
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    void testPerceivedSeverityNotInMapAndAlarmStateNotCleared() throws Exception {
        String msg = "{\"perceivedSeverity\":\"NonExistentSeverity\",\"State\":\"New\"}";
        JsonNode jsonNode = new ObjectMapper().readTree(msg);
        when(objectMapper.readTree(msg)).thenReturn(jsonNode);

        LOG.info("Testing perceivedSeverity: NonExistentSeverity, State: New");
        Alarm alarm = alarmRepository.createAlarm(msg);

        assertNotNull(alarm, "Alarm should not be null");
        assertEquals(1, alarm.getPerceivedSeverity()); // Indeterminate
    }
}
```

### Key Updates and Additions:

1. **Logging**: Added logging statements to each test case to help trace and debug the execution flow.
2. **Error Messages**: Improved the `assertNotNull` assertions to include more descriptive error messages.
3. **Mocked ObjectMapper**: Ensured the `ObjectMapper` is correctly mocked to return the expected `JsonNode` for the given message.

If the issue persists, it indicates that the `createAlarm` method might be returning null due to some internal logic that isn't covered in the tests. Ensure that the method handles all edge cases and doesn't return null for any input. If `createAlarm` depends on external resources or complex logic, consider adding more detailed logging within that method to capture why it might be returning null.