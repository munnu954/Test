Here is the JUnit5 test case code to cover the for loop in the `applyPostingRule` method of the `PostingRuleProcessingService` class:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class PostingRuleProcessingServiceTest {

    private PostingRuleProcessingService postingRuleProcessingService = new PostingRuleProcessingService();

    @Test
    public void testApplyPostingRuleForLoop() throws Exception {
        // Create a sample alarm object
        Alarm alarm = new Alarm();
        alarm.setAlarmIdentity("SampleAlarm");

        // Create a sample rule object
        PostingRule rule = new PostingRule(1L, "Rule1", 1, 1, "MatchingCriteria1");

        // Create a sample alarm map
        HashMap<String, Object> alarmMap = new HashMap<>();
        alarmMap.put("key1", "value1");
        alarmMap.put("key2", "value2");

        // Create a sample topologyObjectsNode containing JsonNodes
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode1 = objectMapper.readTree("{\"key\": \"value1\"}");
        JsonNode jsonNode2 = objectMapper.readTree("{\"key\": \"value2\"}");
        JsonNode topologyObjectsNode = objectMapper.createArrayNode().add(jsonNode1).add(jsonNode2);

        // Mock the required methods in the utils class
        AlarmPostingUtils utils = new AlarmPostingUtils(null) {
            @Override
            public String evaluateExpression(String expression, Map<String, Object> topoMap) {
                return "MockedValue";
            }
        };

        // Set the mocked utils instance
        postingRuleProcessingService.setUtils(utils);

        // Call the applyPostingRule method
        Object result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap, topologyObjectsNode);

        // Verify the result
        assertNotNull(result);
        assertEquals(alarm.getAlarmIdentity(), ((Alarm) result).getAlarmIdentity());
    }
}
```

In this test case, we are creating a sample alarm object, rule object, and mock topologyObjectsNode to cover the for loop in the `applyPostingRule` method of the `PostingRuleProcessingService` class. Make sure to adjust the test case according to the actual implementation and dependencies of your project.