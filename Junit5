To achieve 100% code coverage of the `convertToMtnInsights` method, we need to ensure that all branches, including the various `if-else` statements and potential exceptions, are thoroughly tested. Hereâ€™s an extended version of the test cases to cover more scenarios:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;

@ExtendWith(MockitoExtension.class)
public class MtnInsightsManagerTest {

    @Mock
    private MtnInsightsRepository insightsRepository;

    @Mock
    private AggregateInsightsRepository aggrInsightRepository;

    @InjectMocks
    private MtnInsightsManager mtnInsightsManager;

    @Value("${requested_by}")
    private String requested_by;

    private List<MtnInsightsEntity> entities;

    @BeforeEach
    public void setUp() {
        entities = new ArrayList<>();
    }

    private MtnInsightsEntity createEntity(String category, String insightName, String insightValues, String prodId) {
        MtnInsightsEntity entity = new MtnInsightsEntity();
        MtnInsightsPK pk = new MtnInsightsPK();
        pk.setInsightCategory(category);
        pk.setInsightName(insightName);
        entity.setPk(pk);
        entity.setInsightValues(insightValues);
        entity.setProdId(prodId);
        return entity;
    }

    @Test
    public void testConvertToMtnInsights_NetworkOutage_WithFlag_EligibleData() {
        MtnInsightsEntity networkOutageEntity = createEntity("NETWORK_OUTAGE", "MTNOUTAGE", "EVENT_CUSTOMER_STATUS", "1234");
        entities.add(networkOutageEntity);

        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue("OUTAGE_ID1234,");

        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId("NETWORK_OUTAGE", "1234"))
            .thenReturn(aggregateEntity);

        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("NETWORK_OUTAGE", result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_NetworkOutage_WithoutEligibleData() {
        MtnInsightsEntity networkOutageEntity = createEntity("NETWORK_OUTAGE", "MTNOUTAGE", "someValue", "1234");
        entities.add(networkOutageEntity);

        AggregateInsightsEntity aggregateEntity = new AggregateInsightsEntity();
        aggregateEntity.setAggrValue("OUTAGE_ID1234,");

        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId("NETWORK_OUTAGE", "1234"))
            .thenReturn(aggregateEntity);

        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("NETWORK_OUTAGE", result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_DifferentCategory() {
        MtnInsightsEntity otherCategoryEntity = createEntity("OTHER_CATEGORY", "OTHER_INSIGHT", "value", "4321");
        entities.add(otherCategoryEntity);

        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, true);

        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("OTHER_CATEGORY", result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_MultipleEntities() {
        MtnInsightsEntity networkOutageEntity1 = createEntity("NETWORK_OUTAGE", "MTNOUTAGE", "value1", "1234");
        MtnInsightsEntity networkOutageEntity2 = createEntity("NETWORK_OUTAGE", "MTNOUTAGECASE", "value2", "1234");
        entities.add(networkOutageEntity1);
        entities.add(networkOutageEntity2);

        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(entities, false);

        assertNotNull(result);
        assertEquals(1, result.getCategoryInsights().length);
        assertEquals("NETWORK_OUTAGE", result.getCategoryInsights()[0].getCategory());
    }

    @Test
    public void testConvertToMtnInsights_WithException() {
        MtnInsightsEntity networkOutageEntity = createEntity("NETWORK_OUTAGE", "MTNOUTAGE", "value", "invalid_id");
        entities.add(networkOutageEntity);

        when(aggrInsightRepository.findByPkAggrCategoryAndPkAggrProdId(anyString(), anyString()))
            .thenThrow(new RuntimeException("Database error"));

        Exception exception = assertThrows(RuntimeException.class, () -> {
            mtnInsightsManager.convertToMtnInsights(entities, true);
        });

        assertEquals("Database error", exception.getMessage());
    }

    @Test
    public void testConvertToMtnInsights_EmptyEntities() {
        InsightsMtn result = mtnInsightsManager.convertToMtnInsights(new ArrayList<>(), true);

        assertNotNull(result);
        assertEquals(0, result.getCategoryInsights().length);
    }
}
```

### Additional Test Cases Explanation:
- **Different Category**: Tests entities belonging to a category other than "NETWORK_OUTAGE".
- **Multiple Entities**: Tests multiple entities within the same category.
- **Exception Handling**: Confirms that exceptions are properly caught and handled.
- **Empty Entities**: Ensures that the method can handle an empty list of entities without error.

These additional tests should cover all logical paths and ensure robust testing of the method. Adjust mock responses and assertions as necessary to match the actual logic and data structures in your implementation.