To achieve 100% code coverage for the `CircuitDetailsProvider` class, you need to write JUnit 5 test cases that cover all possible branches and conditions of the method `getCircuitDetails`. Here is an example of how you could write these test cases, including necessary mock setup to avoid the `NullPointerException`:

```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpMethod;

public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    private static final String VALID_RESPONSE = "{\"field\":\"value\"}";
    private static final String BASE_URL = "http://mockServiceName";
    private static final String CKT_DETAIL_URI = "/details?circuitId=#circuitId#&sourceSys=#sourceSys#";
    
    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        // Set the cktDetailUri and cktDetServiceName in the CircuitDetailsProvider
        circuitDetailsProvider.cktDetailUri = CKT_DETAIL_URI;
        circuitDetailsProvider.cktDetServiceName = "mockServiceName";
    }

    @Test
    public void testGetCircuitDetails_AllFieldsProvided() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_NoPhyModel() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = null;

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_NullResponse() {
        // Arrange
        String circuitId = "123";
        String sourceSys = "sys1";
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", circuitId)
                .replace("#sourceSys#", sourceSys) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(null);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }

    @Test
    public void testGetCircuitDetails_EmptyCircuitIdAndSourceSys() {
        // Arrange
        String circuitId = null;
        String sourceSys = null;
        String cnd = "cndValue";
        String phyModel = "phyModelValue";

        String expectedUrl = BASE_URL + CKT_DETAIL_URI.replace("#circuitId#", CommonWrapperConstants.EMTPY)
                .replace("#sourceSys#", CommonWrapperConstants.EMTPY) + "&cnd=" + cnd + "&phyModel=" + phyModel;

        when(restClientUtil.callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any()))
                .thenReturn(VALID_RESPONSE);

        // Act
        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, sourceSys, cnd, phyModel);

        // Assert
        assertNotNull(response);
        verify(restClientUtil).callEndpoint(eq(expectedUrl), eq(HttpMethod.GET), any());
    }
}
```

### Key Points:
1. **Mockito**: We're using Mockito to mock the `RestClientUtil` and control its behavior during tests.
2. **Setup**: The `@BeforeEach` method ensures that before every test, the necessary mock setup is completed.
3. **Test Cases**: Each test case covers a different branch or scenario to ensure 100% code coverage:
    - All parameters provided.
    - No `phyModel` provided.
    - Null response from the REST client.
    - Null or empty `circuitId` and `sourceSys`.

Make sure to replace `CommonWrapperConstants.EMTPY` with the actual value or mock it if necessary. Also, ensure that `CircuitDetailResponse` is a valid class that can be deserialized from `VALID_RESPONSE`.