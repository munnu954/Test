Here are the JUnit 5 test cases for the `main` method of the `CBRSSuppressionApplication` class, covering all possible branches Here are the JUnit 5 test cases for the `main` method of the `CBRSSuppressionApplication` class, covering all possible branches:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest Here are the JUnit 5 test cases for the `main` method of the `CBRSSuppressionApplication` class, covering all possible branches:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.ApplicationContext;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.MockitoAnnotations.initMocks;

@ExtendWith(MockitoExtension.class)
public class CBRSSuppressionApplicationTest {

    @Mock
    private Environment env;

    @InjectMocks
    private CBRSSuppressionApplication application;

    @BeforeEach
    public void setup() {
        initMocks(this);
    }

    @Test
    public void testMain ArgsIsEmpty() {
        String[] args = {};
        try {
            SpringApplication app = new SpringApplication(CBRSSuppressionApplication.class);
            app.setBannerMode(Banner.Mode.OFF);
            ConfigurableApplicationContext appContext = app.run(args);
            assertNotNull(appContext);
            AlarmConsumer consumer = appContext.getBean(AlarmConsumer.class);
            assertNotNull(consumer);
            MessageReaderService readerService = appContext.getBean(MessageReaderService.class);
            assertNotNull(readerService);
        } catch (Exception e) {
            assertEquals("Environment is null", e.getMessage());
        }
    }

    @Test
    public void testMain ArgsIsNotIsEmpty() {
        String[] args = {"test"};
        try {
            SpringApplication app = new SpringApplication(CBRSSuppressionApplication.class);
            app.setBannerMode(Banner.Mode.OFF);
            ConfigurableApplicationContext appContext = app.run(args);
            assertNotNull(appContext);
            AlarmConsumer consumer = appContext.getBean(AlarmConsumer.class);
            assertNotNull(consumer);
            MessageReaderService readerService = appContext.getBean(MessageReaderService.class);
            assertNotNull(readerService);
        } catch (Exception e) {
            assertEquals("Environment is null", e.getMessage());
        }
    }

    @Test
    public void testMain_Environment_Is_Null() {
        when(env.getProperty("RDB_BAD_QUERY")).thenReturn(null);
        try {
            application.main(new String[0]);
            assertEquals("Environment is null", application.badQuery);
        } catch (Exception e) {
            assertEquals("Environment is null", e.getMessage());
        }
    }

    @Test
    public void testMain_Environment_GetProperty_Throws_Exception() {
        doThrow(new RuntimeException("Test Exception")).when(env).getProperty("RDB_BAD_QUERY");
        try {
            application.main(new String[0]);
            assertEquals("RDB_BAD_QUERY", application.badQuery);
        } catch (Exception e) {
            assertEquals("RDB_BAD_QUERY", application.badQuery);
        }
    }

