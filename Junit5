import com.verizon.apollo.service.AlarmOperationsAPI;
import com.verizon.apollo.service.CustomHealthChecker;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class AlarmOperationsAPITest {

    @InjectMocks
    private AlarmOperationsAPI alarmOperationsAPI;

    @Mock
    private CustomHealthChecker customHealthChecker;

    private RestTemplate restTemplate;
    private Environment env;

    @BeforeEach
    void setUp() throws Exception {
        alarmOperationsAPI = new AlarmOperationsAPI();

        // Set the restTemplate and env fields using reflection
        Field restTemplateField = AlarmOperationsAPI.class.getDeclaredField("restTemplate");
        restTemplateField.setAccessible(true);
        restTemplate = Mockito.mock(RestTemplate.class);
        restTemplateField.set(alarmOperationsAPI, restTemplate);

        Field envField = AlarmOperationsAPI.class.getDeclaredField("env");
        envField.setAccessible(true);
        env = Mockito.mock(Environment.class);
        envField.set(alarmOperationsAPI, env);

        alarmOperationsAPI.customHealthChecker = customHealthChecker;
    }

    @Test
    void testFetchTopologyTraversalDetailsSuccess() throws Exception {
        HashMap<String, Object> alarmTagValueMap = new HashMap<>();
        alarmTagValueMap.put("alarmIdentity", "123");
        String componentIdReq = "componentId";
        String tbl = "tbl";
        String tag = "tag";
        String limit = "limit";

        ResponseEntity<String> response = new ResponseEntity<>("Topology Data", HttpStatus.OK);
        when(restTemplate.exchange(any(), any(), any(), any(Class.class))).thenReturn(response);

        Method fetchTopologyTraversalDetailsMethod = AlarmOperationsAPI.class.getDeclaredMethod("fetchTopologyTraversalDetails", HashMap.class, String.class, String.class, String.class, String.class);
        fetchTopologyTraversalDetailsMethod.setAccessible(true);
        ResponseEntity<String> result = (ResponseEntity<String>) fetchTopologyTraversalDetailsMethod.invoke(alarmOperationsAPI, alarmTagValueMap, componentIdReq, tbl, tag, limit);
        assertEquals(HttpStatus.OK, result.getStatusCode());
        assertEquals("Topology Data", result.getBody());
    }

    @Test
    void testFetchTopologyTraversalDetailsNotFoundException() throws Exception {
        HashMap<String, Object> alarmTagValueMap = new HashMap<>();
        alarmTagValueMap.put("alarmIdentity", "123");
        String componentIdReq = "componentId";
        String tbl = "tbl";
        String tag = "tag";
        String limit = "limit";

        when(restTemplate.exchange(any(), any(), any(), any(Class.class))).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND, "No data found for the requested ComponentId and TBL"));

        Method fetchTopologyTraversalDetailsMethod = AlarmOperationsAPI.class.getDeclaredMethod("fetchTopologyTraversalDetails", HashMap.class, String.class, String.class, String.class, String.class);
        fetchTopologyTraversalDetailsMethod.setAccessible(true);
        ResponseEntity<String> result = (ResponseEntity<String>) fetchTopologyTraversalDetailsMethod.invoke(alarmOperationsAPI, alarmTagValueMap, componentIdReq, tbl, tag, limit);
        assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());
    }

    @Test
    void testFetchTopologyTraversalDetailsException() throws Exception {
        HashMap<String, Object> alarmTagValueMap = new HashMap<>();
        alarmTagValueMap.put("alarmIdentity", "123");
        String componentIdReq = "componentId";
        String tbl = "tbl";
        String tag = "tag";
        String limit = "limit";

        when(restTemplate.exchange(any(), any(), any(), any(Class.class))).thenThrow(new RuntimeException("Error occurred"));

        Method fetchTopologyTraversalDetailsMethod = AlarmOperationsAPI.class.getDeclaredMethod("fetchTopologyTraversalDetails", HashMap.class, String.class, String.class, String.class, String.class);
        fetchTopologyTraversalDetailsMethod.setAccessible(true);
        ResponseEntity<String> result = (ResponseEntity<String>) fetchTopologyTraversalDetailsMethod.invoke(alarmOperationsAPI, alarmTagValueMap, componentIdReq, tbl, tag, limit);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, result.getStatusCode());
    }

    @Test
    void testFetchTopologyTraversalDetailsHealthCheckFailure() throws Exception {
        HashMap<String, Object> alarmTagValueMap = new HashMap<>();
        alarmTagValueMap.put("alarmIdentity", "123");
        String componentIdReq = "componentId";
        String tbl = "tbl";
        String tag = "tag";
        String limit = "limit";

        when(restTemplate.exchange(any(), any(), any(), any(Class.class))).thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR, "Topology Service cannot be accessed."));

        try {
            Method fetchTopologyTraversalDetailsMethod = AlarmOperationsAPI.class.getDeclaredMethod("fetchTopologyTraversalDetails", HashMap.class, String.class, String.class, String.class, String.class);
            fetchTopologyTraversalDetailsMethod.setAccessible(true);
            fetchTopologyTraversalDetailsMethod.invoke(alarmOperationsAPI, alarmTagValueMap, componentIdReq, tbl, tag, limit);
        } catch (Exception e) {
            // Verify that the health check is set to DOWN
            Mockito.verify(customHealthChecker).health().down().withDetail("Error", "Topology Service cannot be accessed.").build();
        }
    }

    @Test
    void testFetchTopologyTraversalDetailsWithNullTag() throws Exception {
        HashMap<String, Object> alarmTagValueMap = new HashMap<>();
        alarmTagValueMap.put("alarmIdentity", "123");
        String componentIdReq = "componentId";
        String tbl = "tbl";
        String tag = null;
        String limit = "limit";

        ResponseEntity<String> response = new ResponseEntity<>("Topology Data", HttpStatus.OK);
        when(restTemplate.exchange(any(), any(), any(), any(Class.class))).thenReturn(response);

        Method fetchTopologyTraversalDetailsMethod = AlarmOperationsAPI.class.getDeclaredMethod("fetchTopologyTraversalDetails", HashMap.class, String.class, String.class, String.class, String.class);
        fetchTopologyTraversalDetailsMethod.setAccessible(true);
        ResponseEntity<String> result = (ResponseEntity<String>) fetchTopologyTraversalDetailsMethod.invoke(alarmOperationsAPI, alarmTagValueMap, componentIdReq, tbl, tag, limit);
        assertEquals(HttpStatus.OK, result.getStatusCode());
        assertEquals("Topology Data", result.getBody());
    }

    @Test
    void testCorrelateAlarm() throws Exception {
        String parentID = "parent-id";
        String childID = "child-id";
        long ruleID = 123L;

        Method correlateAlarmMethod = AlarmOperationsAPI.class.getDeclaredMethod("correlateAlarm", String.class, java.util.ArrayList.class, long.class);
        correlateAlarmMethod.setAccessible(true);
        correlateAlarmMethod.invoke(alarmOperationsAPI, parentID, new java.util.ArrayList<>(java.util.Arrays.asList(childID)), ruleID);

        // Verify that the method was called
        Mockito.verify(restTemplate).exchange(any(), any(), any(), any(Class.class));
    }

    @Test
    void testGetMatchingAlarms() throws Exception {
        String query = "sample-query";

        Method getMatchingAlarmsMethod = AlarmOperationsAPI.class.getDeclaredMethod("getMatchingAlarms", String.class);
        getMatchingAlarmsMethod.setAccessible(true);
        ResponseEntity<com.verizon.apollo.model.AlarmQueryResponse> result = (ResponseEntity<com.verizon.apollo.model.AlarmQueryResponse>) getMatchingAlarmsMethod.invoke(alarmOperationsAPI, query);

        // Verify that the method was called
        Mockito.verify(restTemplate).exchange(any(), any(), any(), any(Class.class));
    }
}