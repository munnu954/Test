import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.server.ResponseStatusException;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class CommonWrapperControllerUnitTest {

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @Test
    public void getClrGraphics_blankCnd_success() throws UnsupportedEncodingException {
        String circuitId = "test-circuit-id";
        String sourceSys = null;
        String cnd = null;
        String phyModel = null;

        CommonWrapperController controller = new CommonWrapperController(clrGraphicsService);
        URLDecoder decoder = mock(URLDecoder.class);
        when(decoder.decode(any(), any())).thenReturn(circuitId);
        controller.setDecoder(decoder);
        when(clrGraphicsService.getClrGraphics(any(), any(), any(), any())).thenReturn("success");

        Map<String, String> input = new HashMap<>();
        input.put("sourceSys", sourceSys);
        input.put("cnd", cnd);
        input.put("phyModel", phyModel);

        String response = controller.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        assertEquals("success", response);
        verify(clrGraphicsService, times(1)).getClrGraphics(circuitId, sourceSys, cnd, phyModel);
    }

    @Test
    public void getClrGraphics_notEmptyCnd_success() throws UnsupportedEncodingException {
        String circuitId = "test-circuit-id";
        String sourceSys = null;
        String cnd = "Y";
        String phyModel = null;

        CommonWrapperController controller = new CommonWrapperController(clrGraphicsService);
        URLDecoder decoder = mock(URLDecoder.class);
        when(decoder.decode(any(), any())).thenReturn(circuitId);
        controller.setDecoder(decoder);
        when(clrGraphicsService.getClrGraphics(any(), any(), any(), any())).thenReturn("success");

        Map<String, String> input = new HashMap<>();
        input.put("sourceSys", sourceSys);
        input.put("cnd", cnd);
        input.put("phyModel", phyModel);

        String response = controller.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        assertEquals("success", response);
        verify(clrGraphicsService, times(1)).getClrGraphics(circuitId, sourceSys, cnd, phyModel);
    }

    @Test
    public void getClrGraphics_notEmptyPhyModel_success() throws UnsupportedEncodingException {
        String circuitId = "test-circuit-id";
        String sourceSys = null;
        String cnd = null;
        String phyModel = "phy-model";

        CommonWrapperController controller = new CommonWrapperController(clrGraphicsService);
        URLDecoder decoder = mock(URLDecoder.class);
        when(decoder.decode(any(), any())).thenReturn(circuitId);
        controller.setDecoder(decoder);
        when(clrGraphicsService.getClrGraphics(any(), any(), any(), any())).thenReturn("success");

        Map<String, String> input = new HashMap<>();
        input.put("sourceSys", sourceSys);
        input.put("cnd", cnd);
        input.put("phyModel", phyModel);

        String response = controller.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        assertEquals("success", response);
        verify(clrGraphicsService, times(1)).getClrGraphics(circuitId, sourceSys, cnd, phyModel);
    }

    @Test
    public void getClrGraphics_decodeException_failure() throws UnsupportedEncodingException {
        String circuitId = "test-circuit-id";
        String sourceSys = null;
        String cnd = null;
        String phyModel = null;

        CommonWrapperController controller = new CommonWrapperController(clrGraphicsService);
        URLDecoder decoder = mock(URLDecoder.class);
        when(decoder.decode(any(), any())).thenThrow(new UnsupportedEncodingException());
        controller.setDecoder(decoder);

        assertThrows(ResponseStatusException.class,
                () -> controller.getClrGraphics(circuitId, sourceSys, cnd, phyModel));

        verify(clrGraphicsService, times(0)).getClrGraphics(any(), any(), any(), any());
    }
}