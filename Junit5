@Test
void testApplyPostingRuleWithTopologyDataAndMultipleTopologyObjects() {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    String componentId = "123";
    String topologyData = "{\"topologyObjects\": [" +
                            "{\"MO_Type\": \"test\", \"TagSequence\": \"test\", \"Name\": \"test1\"}," +
                            "{\"MO_Type\": \"test\", \"TagSequence\": \"test\", \"Name\": \"test2\"}" +
                          "]}";
    String alarmedObject = "test";
    String alarmedObjectDetails = "{\"key\": \"value\"}";
    String topoObjectEligibilityValue = "valid";

    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule)).thenReturn(componentId);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.topologyObjectEligibilityCheckValue), Mockito.anyMap())).thenReturn(topoObjectEligibilityValue);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.alarmedObjectExpression), Mockito.anyMap())).thenReturn(alarmedObject);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.topologyDetailsAlarmedObjectExpression), Mockito.anyMap())).thenReturn(alarmedObjectDetails);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentId))
           .thenReturn(new ResponseEntity<>(topologyData, HttpStatus.OK));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    Assertions.assertEquals(alarmedObject, result.getAlarmedObject());
    Assertions.assertEquals(alarmedObjectDetails, result.getTopologyDetails());
}

@Test
void testApplyPostingRuleWithTopologyDataAndNullAlarmedObject() {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    String componentId = "123";
    String topologyData = "{\"topologyObjects\": [{\"MO_Type\": \"test\", \"TagSequence\": \"test\", \"Name\": \"test\"}]}";
    String alarmedObject = null;
    String alarmedObjectDetails = "{\"key\": \"value\"}";
    String topoObjectEligibilityValue = "valid";

    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule)).thenReturn(componentId);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.topologyObjectEligibilityCheckValue), Mockito.anyMap())).thenReturn(topoObjectEligibilityValue);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.alarmedObjectExpression), Mockito.anyMap())).thenReturn(alarmedObject);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.topologyDetailsAlarmedObjectExpression), Mockito.anyMap())).thenReturn(alarmedObjectDetails);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentId))
           .thenReturn(new ResponseEntity<>(topologyData, HttpStatus.OK));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    Assertions.assertEquals(alarm, result);
}

@Test
void testApplyPostingRuleWithTopologyDataAndEmptyAlarmedObject() {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    String componentId = "123";
    String topologyData = "{\"topologyObjects\": [{\"MO_Type\": \"test\", \"TagSequence\": \"test\", \"Name\": \"test\"}]}";
    String alarmedObject = "";
    String alarmedObjectDetails = "{\"key\": \"value\"}";
    String topoObjectEligibilityValue = "valid";

    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule)).thenReturn(componentId);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.topologyObjectEligibilityCheckValue), Mockito.anyMap())).thenReturn(topoObjectEligibilityValue);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.alarmedObjectExpression), Mockito.anyMap())).thenReturn(alarmedObject);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.topologyDetailsAlarmedObjectExpression), Mockito.anyMap())).thenReturn(alarmedObjectDetails);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentId))
           .thenReturn(new ResponseEntity<>(topologyData, HttpStatus.OK));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    Assertions.assertEquals(alarm, result);
}

@Test
void testApplyPostingRuleWithTopologyDataAndNullAlarmedObjectDetails() {
    Alarm alarm = new Alarm();
    PostingRule rule = new PostingRule();
    HashMap<String, Object> alarmMap = new HashMap<>();
    String componentId = "123";
    String topologyData = "{\"topologyObjects\": [{\"MO_Type\": \"test\", \"TagSequence\": \"test\", \"Name\": \"test\"}]}";
    String alarmedObject = "test";
    String alarmedObjectDetails = null;
    String topoObjectEligibilityValue = "valid";

    Mockito.when(postingRuleProcessingService.getComponentIdForTopoTraversal(alarmMap, rule)).thenReturn(componentId);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.topologyObjectEligibilityCheckValue), Mockito.anyMap())).thenReturn(topoObjectEligibilityValue);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.alarmedObjectExpression), Mockito.anyMap())).thenReturn(alarmedObject);
    Mockito.when(utils.evaluateExpression(Mockito.eq(postingRuleProcessingService.topologyDetailsAlarmedObjectExpression), Mockito.anyMap())).thenReturn(alarmedObjectDetails);
    Mockito.when(topoApiClient.fetchTopologyTraversalDetails(alarm, rule, componentId))
           .thenReturn(new ResponseEntity<>(topologyData, HttpStatus.OK));

    Alarm result = postingRuleProcessingService.applyPostingRule(alarm, rule, alarmMap);
    Assertions.assertEquals(alarmedObject, result.getAlarmedObject());
    Assertions.assertNull(result.getTopologyDetails());
}