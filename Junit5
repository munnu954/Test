Certainly! The `NullPointerException` is occurring because the `createAlarm` method is returning `null` in case of an exception. We need to ensure that our test cases handle these scenarios properly and that the input JSON is constructed correctly to avoid exceptions within the `createAlarm` method.

Here is the updated JUnit 5 test cases code:

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class AlarmRepositoryImplTest {

    @InjectMocks
    private AlarmRepositoryImpl alarmRepository;

    @Mock
    private PostgresConf postgresConf;

    private ObjectMapper objectMapper;
    private Map<String, Integer> perceivedSeverityMap;
    private Map<String, Integer> alarmStateMap;

    @BeforeEach
    public void setUp() {
        objectMapper = new ObjectMapper();
        perceivedSeverityMap = new HashMap<>();
        perceivedSeverityMap.put("Critical", 5);
        perceivedSeverityMap.put("Major", 4);
        perceivedSeverityMap.put("Indeterminate", 2);

        alarmStateMap = new HashMap<>();
        alarmStateMap.put("Cleared", 0);
        alarmStateMap.put("New", 1);

        when(postgresConf.getPerceivedSeverityMap()).thenReturn(perceivedSeverityMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(alarmStateMap);
        when(postgresConf.getAlarmStateCleared()).thenReturn("Cleared");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
    }

    @Test
    public void testCreateAlarm_NullPerceivedSeverity_ClearedState() throws Exception {
        String msg = "{\"State\":\"Cleared\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_EmptyPerceivedSeverity_ClearedState() throws Exception {
        String msg = "{\"State\":\"Cleared\", \"perceivedSeverity\":\"\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(-1, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_NotNullPerceivedSeverity_ClearedState() throws Exception {
        String msg = "{\"State\":\"Cleared\", \"perceivedSeverity\":\"Critical\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(5, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_NullPerceivedSeverity_NotClearedState() throws Exception {
        String msg = "{\"State\":\"New\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    public void testCreateAlarm_EmptyPerceivedSeverity_NotClearedState() throws Exception {
        String msg = "{\"State\":\"New\", \"perceivedSeverity\":\"\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    public void testCreateAlarm_NotNullPerceivedSeverity_NotClearedState() throws Exception {
        String msg = "{\"State\":\"New\", \"perceivedSeverity\":\"Major\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(4, alarm.getPerceivedSeverity());
    }

    @Test
    public void testCreateAlarm_UnmappedPerceivedSeverity() throws Exception {
        String msg = "{\"State\":\"New\", \"perceivedSeverity\":\"Unknown\"}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity()); // Indeterminate
    }

    @Test
    public void testCreateAlarm_NullPerceivedSeverity_NullState() throws Exception {
        String msg = "{}";
        JsonNode jsonNode = objectMapper.readTree(msg);

        Alarm alarm = alarmRepository.createAlarm(jsonNode.toString());

        assertNotNull(alarm);
        assertEquals(2, alarm.getPerceivedSeverity()); // Indeterminate
    }
}
```

In this updated version, I ensured that the JSON inputs include the correct key "State" (with an uppercase "S") to avoid any mismatches that could lead to `NullPointerException`. Additionally, I added `assertNotNull(alarm)` to ensure that an alarm object is created and is not null before asserting its properties.

This should resolve the `NullPointerException` and ensure that all branches of the specified `else if` block are covered in the test cases.