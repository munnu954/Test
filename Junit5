To ensure full coverage of the conditional statement `if(utils.isValidData(mtn) && action.equals("CALLESTABLISHED") && !callTypeValue.equals("0"))`, we need to consider all possible combinations of each condition being true or false. Below are additional test cases to cover these scenarios:

```java
import com.verizon.vbg.ledger.listener.EventsMessageListener;
import com.verizon.vbg.ledger.service.MtnEcpdService;
import com.verizon.vbg.ledger.service.CTIEcpdService;
import com.verizon.vbg.ledger.service.KafkaFalloutService;
import com.verizon.vbg.ledger.util.BatchLoaderUtils;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.kafka.core.KafkaTemplate;

import static org.mockito.Mockito.*;

class EventsMessageListenerConditionalTests {

    @InjectMocks
    private EventsMessageListener eventsMessageListener;

    @Mock
    private MtnEcpdService mtnEcpdService;

    @Mock
    private KafkaTemplate<String, String> kafkaTemplate;

    @Mock
    private KafkaFalloutService failedMessageService;

    @Mock
    private BatchLoaderUtils utils;

    @Mock
    private CTIEcpdService ctiEcpdService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(eventsMessageListener, "ctiProducerTopic", "outbound-cti-event");
    }

    @Test
    void testCtionMessage_invalidMtn() {
        // Prepare a payload with invalid MTN
        String payload = "{\"CV2\":\"invalid\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CALLESTABLISHED\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock the utility method
        when(utils.isValidData("invalid")).thenReturn(false);  // Invalid MTN

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that no interactions with KafkaTemplate occur
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    void testCtionMessage_actionNotCallEstablished() {
        // Prepare a payload with action not "CALLESTABLISHED"
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"OTHER_ACTION\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock the utility method
        when(utils.isValidData("1234567890")).thenReturn(true);  // Valid MTN

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that no interactions with KafkaTemplate occur
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    void testCtionMessage_callTypeValueIsZero() {
        // Prepare a payload with callTypeValue as "0"
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CALLESTABLISHED\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"0;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock the utility methods
        when(utils.isValidData("1234567890")).thenReturn(true);  // Valid MTN
        when(utils.callTypeExtraction("0;2")).thenReturn("0");  // Call type value is "0"

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that no interactions with KafkaTemplate occur
        verify(kafkaTemplate, never()).send(any());
    }

    @Test
    void testCtionMessage_allConditionsMet() {
        // Prepare a payload where all conditions are met
        String payload = "{\"CV2\":\"1234567890\",\"CV5\":\"ivr*123\",\"CALLCONTROLID\":1,\"AGENTID\":\"agent1\"," +
                "\"ACTION\":\"CALLESTABLISHED\",\"OLDCALLID\":2,\"CALLESTABLISHEDID\":3,\"CALLTYPES\":\"1;2\"," +
                "\"CALLID1\":4,\"CALLID2\":5}";

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("inbound-cti-event", 0, 0L, null, payload);

        // Mock the utility methods
        when(utils.isValidData("1234567890")).thenReturn(true);  // Valid MTN
        when(utils.callTypeExtraction("1;2")).thenReturn("1");  // Call type value is not "0"

        // Call the method under test
        eventsMessageListener.ctionMessage(consumerRecord, payload);

        // Verify that the message is sent to Kafka
        verify(kafkaTemplate, times(1)).send(any());
    }
}
```

### Explanation of Test Scenarios:

1. **Invalid MTN**: Tests the case where the MTN is invalid, ensuring that the conditional block is not executed.

2. **Action Not `CALLESTABLISHED`**: Tests when the action is not "CALLESTABLISHED", ensuring the block is skipped.

3. **Call Type Value is "0"**: Tests when the call type value is "0", ensuring the block is not executed.

4. **All Conditions Met**: Tests when all conditions (`valid MTN`, `action is "CALLESTABLISHED"`, `call type value is not "0"`) are true, ensuring the block is executed and the message is sent.

These test cases are designed to cover all possible outcomes of the conditional logic in question, providing comprehensive test coverage. Adjust any details as needed to fit the actual logic and setup in your application.