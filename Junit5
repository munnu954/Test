Certainly! Here's the complete implementation for the `testCreateAlarmWithValidJsonNoState` method:

```java
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.env.Environment;

import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AlarmRepositoryTest {

    @Mock
    PostGreDataBaseConfig postgresConf;

    @InjectMocks
    @Spy
    AlarmRepositoryImpl alarmRepositoryImpl;

    private static ObjectMapper objectMapper;
    private static Environment env;
    private static AlarmPostingUtils alarmPostingUtils;
    private static AlarmPostingConstants alarmPostingConstants;

    @BeforeAll
    static void initialize() {
        objectMapper = new ObjectMapper();
        env = mock(Environment.class);
        alarmPostingUtils = mock(AlarmPostingUtils.class);
        alarmPostingConstants = mock(AlarmPostingConstants.class);
        when(env.getProperty(anyString())).thenReturn("testValue");
        ReflectionTestUtils.setField(alarmPostingUtils, "env", env);
    }

    @Test
    void testCreateAlarmWithFullJson() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        Map<String, Integer> percMap = new HashMap<>();
        Map<String, Integer> stateMap = new HashMap<>();
        Map<String, Integer> typeMap = new HashMap<>();
        percMap.put("Other", 6);
        percMap.put("Indeterminate", 1);
        stateMap.put("cleared", 6);
        typeMap.put("SomeType", 1);

        when(postgresConf.getAlarmTypeMap()).thenReturn(typeMap);
        when(postgresConf.getPerceivedSeverityMap()).thenReturn(percMap);
        when(postgresConf.getAlarmStateMap()).thenReturn(stateMap);
        when(postgresConf.getAlarmTypeOther()).thenReturn("Other");
        when(postgresConf.getAlarmStateNew()).thenReturn("New");
        when(postgresConf.getPerceivedSeverityIndeterminate()).thenReturn("Indeterminate");
        when(postgresConf.getAlarmStateCleared()).thenReturn("cleared");

        String fullJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\", \"sourceSystemId\":\"sourceId\", \"alarmType\":\"SomeType\", \"clearTime\":\"someTime\", \"perceivedSeverity\":\"Indeterminate\", \"serviceAffecting\":\"true\", \"probableCause\":\"cause\", \"alarmRaisedTime\":\"raiseTime\", \"alarmUpdatedTime\":\"updateTime\", \"alarmDetails\":\"details\", \"alarmIdentity\":\"identity\", \"alarmedObject\":\"object\", \"alarmedObjectType\":\"type\", \"TID\":\"TID\", \"reportingObject\":\"reporting\", \"specificProblem\":\"problem\", \"AID\":\"AID\", \"componentID\":\"compId\", \"rawMessage\":\"raw\", \"extTopologyDetails\":\"extDetails\", \"topologyDetails\":\"details\", \"Count\":\"5\", \"tag\":[\"tag1\", \"tag2\"] }";
        JsonNode json = obj.readTree(fullJson);
        alarmRepositoryImpl.createAlarm(fullJson);
    }

    @Test
    void testCreateAlarmWithMinimalJson() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String minimalJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\",\"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(minimalJson);
        alarmRepositoryImpl.createAlarm(minimalJson);
    }

    @Test
    void testCreateAlarmWithMissingValues() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String missingValuesJson = "{ \"externalAlarmId\":\"pqwer\", \"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(missingValuesJson);
        alarmRepositoryImpl.createAlarm(missingValuesJson);
    }

    @Test
    void testCreateAlarmWithNullValues() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String nullValuesJson = "{ \"externalAlarmId\":null, \"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(nullValuesJson);
        alarmRepositoryImpl.createAlarm(nullValuesJson);
    }

    @Test
    void testCreateAlarmWithNewState() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String newStateJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"New\",\"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(newStateJson);
        alarmRepositoryImpl.createAlarm(newStateJson);
    }

    @Test
    void testCreateAlarmWithEmptyValues() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String emptyValuesJson = "{ \"externalAlarmId\":\"\", \"State\":\"\", \"alarmType\":\"\", \"clearTime\":\"\", \"perceivedSeverity\":\"\", \"serviceAffecting\":\"\", \"alarmIdentity\":\"\", \"alarmedObject\":\"\", \"reportingObject\":\"\", \"specificProblem\":\"\", \"componentID\":\"\", \"rawMessage\":\"\", \"extTopologyDetails\":\"\", \"topologyDetails\":\"\", \"Count\":\"\", \"sequenceId\":\"\"}";
        JsonNode json = obj.readTree(emptyValuesJson);
        alarmRepositoryImpl.createAlarm(emptyValuesJson);
    }

    @Test
    void testCreateAlarmWithInvalidJson() {
        String invalidJson = "{ invalid json }";
        try {
            alarmRepositoryImpl.createAlarm(invalidJson);
        } catch (Exception e) {
            // Expected exception
        }
    }

    @Test
    void testCreateAlarmWithMixedValues() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String mixedValuesJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"alarmType\":null, \"clearTime\":\"\", \"perceivedSeverity\":\"\", \"serviceAffecting\":\"false\", \"alarmIdentity\":\"\", \"alarmedObject\":\"\", \"reportingObject\":\"\", \"specificProblem\":\"problem\", \"componentID\":\"\", \"rawMessage\":\"\", \"extTopologyDetails\":\"\", \"topologyDetails\":\"\", \"Count\":null, \"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(mixedValuesJson);
        alarmRepositoryImpl.createAlarm(mixedValuesJson);
    }

    @Test
    void testCreateAlarmWithMissingMandatoryFields() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String missingMandatoryFieldsJson = "{ \"State\":\"cleared\", \"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(missingMandatoryFieldsJson);
        alarmRepositoryImpl.createAlarm(missingMandatoryFieldsJson);
    }

    @Test
    void testCreateAlarmWithExtraFields() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String extraFieldsJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"extraField1\":\"extra1\", \"extraField2\":\"extra2\", \"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(extraFieldsJson);
        alarmRepositoryImpl.createAlarm(extraFieldsJson);
    }

    @Test
    void testCreateAlarmWithEmptyJson() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String emptyJson = "{}";
        JsonNode json = obj.readTree(emptyJson);
        alarmRepositoryImpl.createAlarm(emptyJson);
    }

    @Test
    void testCreateAlarmWithNullJson() {
        try {
            alarmRepositoryImpl.createAlarm(null);
        } catch (Exception e) {
            // Expected exception
        }
    }

    @Test
    void testCreateAlarmWithServiceAffectingTrue() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String serviceAffectingTrueJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"serviceAffecting\":\"true\", \"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(serviceAffectingTrueJson);
        alarmRepositoryImpl.createAlarm(serviceAffectingTrueJson);
    }

    @Test
    void testCreateAlarmWithServiceAffectingFalse() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String serviceAffectingFalseJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"serviceAffecting\":\"false\", \"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(serviceAffectingFalseJson);
        alarmRepositoryImpl.createAlarm(serviceAffectingFalseJson);
    }

    @Test
    void testCreateAlarmWithInvalidServiceAffecting() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String invalidServiceAffectingJson = "{ \"externalAlarmId\":\"pqwer\", \"State\":\"cleared\", \"serviceAffecting\":\"invalid\", \"sequenceId\":\"23423\"}";
        JsonNode json = obj.readTree(invalidServiceAffectingJson);
        alarmRepositoryImpl.createAlarm(invalidServiceAffectingJson);
    }

    @Test
    void testCreateAlarmWithValidJsonNoState() throws Exception {
        ObjectMapper obj = new ObjectMapper();
        String validJsonNoState = "{ \"externalAlarmId\":\"pqwer\", \"sequenceId\":\"23423\", \"alarmType\":\"SomeType\", \"perceivedSeverity\":\"Indeterminate\"}";
        JsonNode json = obj.readTree(validJsonNoState);
        
        when(postgresConf.getAlarm