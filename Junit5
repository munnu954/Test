import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.junit.MockitoJUnitRunner;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class CoconutServiceVersion3Test {

    @InjectMocks
    private CoconutServiceVersion3 coconutServiceVersion3;

    @Test
    public void testQueryBasedOnParameter_withLocationCLLIAndSiteName() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "abc123");
        queryParams.put("siteName", "site123");

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS \"unparsedAddress\", site.city as city, site.state AS state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS \"createdBySys\" FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not null AND site.clli_code = 'abc123' AND site.site_name = 'site123'";
        String actualQuery = getQueryBasedOnParameterUsingReflection(queryParams);

        Assert.assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_withLocationCLLIOnly() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("locationCLLI", "abc123");

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS \"unparsedAddress\", site.city as city, site.state AS state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS \"createdBySys\" FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not null AND site.clli_code = 'abc123'";
        String actualQuery = getQueryBasedOnParameterUsingReflection(queryParams);

        Assert.assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_withSiteNameOnly() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("siteName", "site123");

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS \"unparsedAddress\", site.city as city, site.state AS state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS \"createdBySys\" FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not null AND site.site_name = 'site123'";
        String actualQuery = getQueryBasedOnParameterUsingReflection(queryParams);

        Assert.assertEquals(expectedQuery, actualQuery);
    }

    @Test
    public void testQueryBasedOnParameter_withoutLocationCLLIAndSiteName() throws Exception {
        Map<String, Object> queryParams = new HashMap<>();

        String expectedQuery = "SELECT DISTINCT site.clli_code AS locationCLLI, site.site_name AS locationCode, site.site_name AS siteName, site.address AS \"unparsedAddress\", site.city as city, site.state AS state, site.country as country, site.zip_code as zip, site.site_code, 'COCONUT' AS \"createdBySys\" FROM gdnm_switch switch LEFT JOIN gdnm_hardware hardware ON switch.hardware_id = hardware.id LEFT JOIN gdnm_site site ON switch.site_id = site.id WHERE site.clli_code is not null";
        String actualQuery = getQueryBasedOnParameterUsingReflection(queryParams);

        Assert.assertEquals(expectedQuery, actualQuery);
    }

    private String getQueryBasedOnParameterUsingReflection(Map<String, Object> queryParams) throws Exception {
        Method method = coconutServiceVersion3.getClass().getDeclaredMethod("queryBasedOnParameter", Map.class);
        method.setAccessible(true);
        return (String) method.invoke(coconutServiceVersion3, queryParams);
    }
}