

class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private ClrComponent clrComponent;
    private List<ClrComponent> clrComponentList;
    private Map<String, List<Node>> clliNodeMap;
    private AtomicInteger ukCount;
    private String sourceSys;

    @BeforeEach
    void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clrComponent = new ClrComponent();
        clrComponentList = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        ukCount = new AtomicInteger(0);
        sourceSys = "TestSource";
    }

    @Test
    void testProcessWithTrailComponentExists() {
        // Setup a ClrComponent with a TRAIL type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.TRAIL);
        CircuitComp circuitComp = new CircuitComp();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitComp.setCircuitInfo(List.of(circuitInfo));
        prevClrComponent.setCircuitComp(List.of(circuitComp));

        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        // Add a dummy link to avoid IndexOutOfBoundsException
        Link dummyLink = new Link();
        links.add(dummyLink);

        // Execute the process method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify that a new link is added
        assertEquals(2, links.size());
        assertNotNull(links.get(1).getSource());
    }

    @Test
    void testProcessWithTrailComponentNotExists() {
        // Setup a ClrComponent without a TRAIL type
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.CABLE); // Not a TRAIL type

        clrComponentList.add(prevClrComponent);
        clrComponentList.add(clrComponent);

        // Add a dummy link to avoid IndexOutOfBoundsException
        Link dummyLink = new Link();
        links.add(dummyLink);

        // Execute the process method

trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, sourceSys);

        // Verify that no new link is added for TRAIL
        assertEquals(2, links.size());
        assertNotNull(links.get(1).getSource());
    }
}
```

### Explanation:

1. *Setup*: We initialize the necessary objects and lists in the `setUp` method, which runs before each test. This includes creating instances of `TrunkProcessor`, `nodes`, `links`, `clrComponent`, `clrComponentList`, `clliNodeMap`, and `ukCount`.

2. *Test for `isNotNull` True*: 
   - We create a `ClrComponent` with a type of `TRAIL` and add it to `clrComponentList`.
   - We ensure that the `circuitComp` list is not empty to satisfy the `isNotNull` condition.
   - We add a dummy link to `links` to prevent `IndexOutOfBoundsException`.
   - We call the `process` method and verify that a new link is added.

3. *Test for `isNotNull` False*:
   - We create a `ClrComponent` with a type other than `TRAIL` (e.g., `CABLE`) and add it to `clrComponentList`.
   - We add a dummy link to `links` to prevent `IndexOutOfBoundsException`.
   - We call the `process` method and verify that the link handling does not proceed as if it were a `TRAIL`.

These tests ensure that both branches of the `if(isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL))` condition are covered, achieving 100% code coverage for this part of the method.   

~ Yatter Basic