import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.Calendar;
import java.util.Date;

@ExtendWith(MockitoExtension.class)
public class KafkaFalloutServiceTest {

    @Mock
    private KafkaFalloutRepository repository;

    @InjectMocks
    private KafkaFalloutService service;

    private KafkaFailedMessagesPK pk;
    private KafkaFailedMessagesEntity entity;

    @BeforeEach
    void setUp() {
        pk = new KafkaFailedMessagesPK();
        pk.setTransactionId("key");
        pk.setCreatedDate(Calendar.getInstance().getTime());
        pk.setTopicName("topic");

        entity = new KafkaFailedMessagesEntity();
        entity.setId(pk);
        entity.setPayload("payload");
        entity.setInsightName("insight");
        entity.setSystemName(TYSConstants.SYSTEM_NAME.getValue());
        entity.setStatus(TYSConstants.FAILED.getValue().charAt(0));
        entity.setCreatedBy(TYSConstants.SYSTEM.getValue());
        entity.setSensitivityChecked('Y');
    }

    @Test
    void testHasRecords() {
        when(repository.count()).thenReturn(1L);
        assertTrue(service.hasRecords());
        verify(repository, times(1)).count();
    }

    @Test
    void testSaveFailedRecords() {
        service.saveFailedRecords("topic", "key", "payload", "insight", 'Y');
        verify(repository, times(1)).save(any(KafkaFailedMessagesEntity.class));
    }

    @Test
    void testPurgeRepublishedRecord() {
        service.purgeRepublishedRecord(pk);
        verify(repository, times(1)).deleteByIdTransactionId("key");
    }
}
