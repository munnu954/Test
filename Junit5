To achieve 100% code coverage for the `if (isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL))` condition inside the `process` method of the `TrunkProcessor` class, we need to test both branches of this condition. Here's how you can write JUnit 5 test cases to cover both scenarios:

1. **Test when `isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL)` returns true**.
2. **Test when `isNotNull(prevClrComponent, CommonWrapperConstants.TRAIL)` returns false** (by ensuring the condition inside returns false).

Below are the test cases for both scenarios:

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class TrunkProcessorTest {

    private TrunkProcessor trunkProcessor;
    private List<Node> nodes;
    private List<Link> links;
    private Map<String, List<Node>> clliNodeMap;
    private List<ClrComponent> clrComponentList;
    private AtomicInteger ukCount;

    @BeforeEach
    public void setUp() {
        trunkProcessor = TrunkProcessor.getInstance();
        nodes = new ArrayList<>();
        links = new ArrayList<>();
        clliNodeMap = new HashMap<>();
        clrComponentList = new ArrayList<>();
        ukCount = new AtomicInteger(0);
    }

    @Test
    public void testProcess_withPreviousTypeSegmentAndNotNullTrail_trueBranch() {
        // Set up previous ClrComponent with type "SEGEMENT" and ensure isNotNull returns true for TRAIL
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.SEGEMENT);

        CircuitComp circuitComp = new CircuitComp();
        CircuitInfo circuitInfo = new CircuitInfo();
        circuitComp.setCircuitInfo(Collections.singletonList(circuitInfo));
        prevClrComponent.setCircuitComp(Collections.singletonList(circuitComp));

        clrComponentList.add(prevClrComponent);

        // Set up current ClrComponent
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.TRUNK);
        clrComponentList.add(clrComponent);

        // Simulate previous link
        Link prevSegment = new Link();
        links.add(prevSegment);

        // Call process method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        // Assertions
        assertEquals(2, links.size(), "Link size should be 2 after processing.");
        assertNotNull(links.get(1).getSource(), "Source of the new link should not be null.");
        assertEquals(ukCount.get(), 2, "ukCount should be incremented twice.");
    }
    
    @Test
    public void testProcess_withPreviousTypeSegmentAndNotNullTrail_falseBranch() {
        // Set up previous ClrComponent with type "SEGEMENT" and ensure isNotNull returns false for TRAIL
        ClrComponent prevClrComponent = new ClrComponent();
        prevClrComponent.setType(CommonWrapperConstants.SEGEMENT);
        
        // CircuitComp list is empty, hence isNotNull should return false
        prevClrComponent.setCircuitComp(Collections.emptyList());

        clrComponentList.add(prevClrComponent);

        // Set up current ClrComponent
        ClrComponent clrComponent = new ClrComponent();
        clrComponent.setType(CommonWrapperConstants.TRUNK);
        clrComponentList.add(clrComponent);

        // Simulate previous link
        Link prevSegment = new Link();
        links.add(prevSegment);

        // Call process method
        trunkProcessor.process(nodes, links, clrComponent, clrComponentList, clliNodeMap, 1, ukCount, "sourceSys");

        // Assertions
        assertEquals(2, links.size(), "Link size should still be 2 after processing.");
        assertNotNull(links.get(1).getSource(), "Source of the new link should not be null.");
        assertEquals(ukCount.get(), 2, "ukCount should be incremented twice.");
    }
}
```

### Test Case Explanation

1. **True Branch Test**:
   - We set up a `ClrComponent` with a `SEGEMENT` type and ensure the `isNotNull` method returns `true` by populating the `circuitComp` list.
   - This triggers the logic inside the `if` condition, where a new link is added with a source set from the newly created `PortRef`.

2. **False Branch Test**:
   - We set up a `ClrComponent` with an empty `circuitComp` list, ensuring the `isNotNull` method returns `false`.
   - This skips the inner logic of the `if` condition. We check that the `links` list and `ukCount` are correctly updated without executing the inner block.

These test cases ensure that both branches of the `if` statement are executed, achieving 100% code coverage for that part of the code.