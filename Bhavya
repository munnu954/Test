import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import javax.batch.runtime.BatchStatus;
import javax.batch.runtime.JobExecution;
import javax.batch.runtime.JobInstance;

import java.util.Date;

@RunWith(MockitoJUnitRunner.class)
public class FalloutJobExecutionListenerTest {

    @Mock
    private Logger LOGGER;

    @InjectMocks
    private FalloutJobExecutionListener listener;

    private JobExecution jobExecution;
    private JobInstance jobInstance;

    @Before
    public void setup() {
        jobExecution = new JobExecution();
        jobInstance = new JobInstance("TestJob", "TestJobDescription");
        jobExecution.setJobInstance(jobInstance);
    }

    @Test
    public void testBeforeJob_SuccessfulJobExecution() {
        listener.beforeJob(jobExecution);
        verify(LOGGER).info("FalloutJobExecutionListener :: beforeJob {}", jobInstance.getJobName());
    }

    @Test
    public void testAfterJob_SuccessfulJobExecution() {
        jobExecution.setStartTime(new Date());
        jobExecution.setEndTime(new Date());
        jobExecution.setStatus(BatchStatus.COMPLETED);
        listener.afterJob(jobExecution);
        verify(LOGGER).info("FalloutJobExecutionListener:: Completed {}-batch job in {} seconds with status: {}", 
                           jobInstance.getJobName(), anyInt(), "COMPLETED");
    }

    @Test
    public void testAfterJob_UnsuccessfulJobExecution_Stopped() {
        jobExecution.setStartTime(new Date());
        jobExecution.setEndTime(new Date());
        jobExecution.setStatus(BatchStatus.FAILED);
        listener.afterJob(jobExecution);
        verify(LOGGER).info("FalloutJobExecutionListener:: Completed {}-batch job in {} seconds with status: {}", 
                           jobInstance.getJobName(), anyInt(), "STOPPED");
        org.junit.Assert.assertEquals(BatchStatus.STOPPED, jobExecution.getStatus());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAfterJob_NullStartTime() {
        jobExecution.setEndTime(new Date());
        jobExecution.setStatus(BatchStatus.COMPLETED);
        listener.afterJob(jobExecution);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAfterJob_NullEndTime() {
        jobExecution.setStartTime(new Date());
        jobExecution.setStatus(BatchStatus.COMPLETED);
        listener.afterJob(jobExecution);
    }
}