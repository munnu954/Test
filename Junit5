To achieve 100% code coverage for both the `CommonWrapperController` and `CircuitDetailsProvider` classes, you'll need to write JUnit 5 test cases that cover all possible branches, including handling exceptions. Below are the test cases for each class.

### CommonWrapperControllerTest.java

```java
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.doThrow;

import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RestController;

import com.example.service.ClrGraphicsService;

@ExtendWith(MockitoExtension.class)
public class CommonWrapperControllerTest {

    @Mock
    private ClrGraphicsService clrGraphicsService;

    @InjectMocks
    private CommonWrapperController commonWrapperController;

    private static final Logger LOGGER = LoggerFactory.getLogger(CommonWrapperController.class);

    @BeforeEach
    public void setup() {
        // Initialize any required setup here
    }

    @Test
    public void testGetClrGraphicsSuccess() throws Exception {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String cnd = "Y";
        String phyModel = "testPhyModel";

        when(clrGraphicsService.getClrGraphics(circuitId, sourceSys, cnd, phyModel))
                .thenReturn("testResponse");

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        assertEquals("testResponse", response);
    }

    @Test
    public void testGetClrGraphicsWithBlankCnd() throws Exception {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String cnd = " ";
        String phyModel = "testPhyModel";

        when(clrGraphicsService.getClrGraphics(circuitId, sourceSys, "N", phyModel))
                .thenReturn("testResponse");

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        assertEquals("testResponse", response);
    }

    @Test
    public void testGetClrGraphicsWithException() throws Exception {
        String circuitId = "testCircuitId";
        String sourceSys = "testSourceSys";
        String cnd = "Y";
        String phyModel = "testPhyModel";

        doThrow(new Exception("Decode Error")).when(clrGraphicsService).getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        String response = commonWrapperController.getClrGraphics(circuitId, sourceSys, cnd, phyModel);

        // Assert the expected behavior when an exception occurs.
        assertEquals(null, response);
    }
}
```

### CircuitDetailsProviderTest.java

```java
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.example.util.RestClientUtil;
import com.example.model.CircuitDetailResponse;

@ExtendWith(MockitoExtension.class)
public class CircuitDetailsProviderTest {

    @Mock
    private RestClientUtil restClientUtil;

    @InjectMocks
    private CircuitDetailsProvider circuitDetailsProvider;

    private static final String cktDetailuri = "/api/v1/circuits/#circuitId#";

    @BeforeEach
    public void setup() {
        // Set any necessary setup here, like system properties or constants
    }

    @Test
    public void testGetCircuitDetailsWithValidResponse() {
        String circuitId = "testCircuitId";
        String phyModel = "testPhyModel";
        String url = "http://cktDetServiceName/api/v1/circuits/testCircuitId&phyModel=testPhyModel";

        when(restClientUtil.callEndpoint(url, HttpMethod.GET, buildHeaders()))
                .thenReturn("{\"responseField\":\"value\"}");

        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, phyModel);

        assertNotNull(response);
    }

    @Test
    public void testGetCircuitDetailsWithNullResponse() {
        String circuitId = "testCircuitId";
        String phyModel = "testPhyModel";
        String url = "http://cktDetServiceName/api/v1/circuits/testCircuitId&phyModel=testPhyModel";

        when(restClientUtil.callEndpoint(url, HttpMethod.GET, buildHeaders()))
                .thenReturn(null);

        CircuitDetailResponse response = circuitDetailsProvider.getCircuitDetails(circuitId, phyModel);

        assertNull(response);
    }
}
```

### Explanation

- **CommonWrapperControllerTest**: The test cases cover all branches, including when `cnd` is blank, when there is an exception during URL decoding, and when the method executes successfully.
  
- **CircuitDetailsProviderTest**: The test cases cover scenarios where the response is valid and where the response is null. They also handle the URL construction logic including the presence of `phyModel`.

These tests should help ensure 100% code coverage, including exception handling and all logical branches. Make sure that any constants or additional methods used in the tests (like `buildHeaders`) are properly defined in your actual test environment.