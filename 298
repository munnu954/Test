import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class RMFApiClientTest {

    @Mock
    private RestTemplate restTemplate;

    private RMFApiClient rmfApiClient = new RMFApiClient();

    @Test
    public void testFetchRuleDetails_SuccessfulResponse() {
        // Given
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "dummyAuthKey");
        HttpEntity<Object> httpEntity = new HttpEntity<>(new Object(), headers);
        ResponseEntity<Object> mockResponse = ResponseEntity.ok().body(new Object());
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class)))
                .thenReturn(mockResponse);

        // When
        ResponseEntity<Object> response = rmfApiClient.fetchRuleDetails(new Object());

        // Then
        assertNotNull(response);
    }

    @Test
    public void testFetchRuleDetails_ExceptionThrown_RetryLimitReached() {
        // Given
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(), eq(Object.class)))
                .thenThrow(new RestClientException("Error"));

        // When
        ResponseEntity<Object> response = rmfApiClient.fetchRuleDetails(new Object());

        // Then
        assertNull(response);
    }

    @Test
    public void testFetchRuleDetails_ExceptionThrown_RetryAttempt() {
        // Given
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "dummyAuthKey");
        HttpEntity<Object> httpEntity = new HttpEntity<>(new Object(), headers);
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class)))
                .thenThrow(new RestClientException("Error"));

        // When
        ResponseEntity<Object> response = rmfApiClient.fetchRuleDetails(new Object());

        // Then
        assertNull(response);
    }

    @Test
    public void testFetchRuleDetails_SuccessfulResponse_RetryAttempt() {
        // Given
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "dummyAuthKey");
        HttpEntity<Object> httpEntity = new HttpEntity<>(new Object(), headers);
        ResponseEntity<Object> mockResponse = ResponseEntity.ok().body(new Object());
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), eq(httpEntity), eq(Object.class)))
                .thenReturn(mockResponse, mockResponse, mockResponse)
                .thenThrow(new RestClientException("Error"));

        // When
        ResponseEntity<Object> response = rmfApiClient.fetchRuleDetails(new Object());

        // Then
        assertNotNull(response);
    }
}