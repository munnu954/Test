Here is the JUnit 5 test class for the UserInsightsValidator class using Reflection APIs:

```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@ExtendWith(MockitoExtension.class)
class UserInsightsValidatorTest {

    @Test
    void testValidateRequestWithInsertCustomerInsights() throws NoSuchFieldException, NoSuchMethodException {
        UserInsightsValidator validator = new UserInsightsValidator();
        UserInsightsRequest request = new UserInsightsRequest();
        ServiceHeader header = new ServiceHeader();
        request.setServiceHeader(header);

        Field requestTypeField = UserInsightsRequest.class.getDeclaredField("requestType");
        requestTypeField.setAccessible(true);
        requestTypeField.set(request, InsightsRequestType.INSERTCUSTOMERINSIGHTS);

        Method validateMethod = UserInsightsValidator.class.getDeclaredMethod("validate", UserInsightsRequest.class);
        validateMethod.setAccessible(true);

        assertDoesNotThrow(() -> validateMethod.invoke(validator, request));
    }

    @Test
    void testInvalidRequestType() throws NoSuchFieldException, NoSuchMethodException {
        UserInsightsValidator validator = new UserInsightsValidator();
        UserInsightsRequest request = new UserInsightsRequest();
        ServiceHeader header = new ServiceHeader();
        request.setServiceHeader(header);

        Field requestTypeField = UserInsightsRequest.class.getDeclaredField("requestType");
        requestTypeField.setAccessible(true);
        requestTypeField.set(request, InsightsRequestType.UNKNOWN);

        Method validateMethod = UserInsightsValidator.class.getDeclaredMethod("validate", UserInsightsRequest.class);
        validateMethod.setAccessible(true);

        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            validateMethod.invoke(validator, request);
        });

        assertEquals("Invalid request type", exception.getMessage());
    }

    // Add more test cases to cover other branches of UserInsightsValidator class
  
}
```

You can add more test methods to cover different scenarios and branches of the `UserInsightsValidator` class using the Reflection API. This approach allows you to access and test private methods and fields of the class without making them public.