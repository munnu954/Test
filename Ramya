import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import static org.junit.jupiter.api.Assertions.*;

public class AuditStatusMapSteps {

    private List<SftpFile> sftpFiles;
    private String remoteDirectory;
    private Map<String, String> auditStatusMap;
    private AuditStatusService auditStatusService;
    private LuceneCollectionAuditRepository luceneCollectionAuditRepo;

    @Given("an empty list of SFTP files")
    public void an_empty_list_of_sftp_files() {
        sftpFiles = new ArrayList<>();
    }

    @Given("a list of {int} SFTP files")
    public void a_list_of_sftp_files(int numFiles) {
        sftpFiles = generateSftpFiles(numFiles);
    }

    @Given("each file is not a directory")
    public void each_file_is_not_a_directory() {
        sftpFiles.forEach(file -> file.setDirectory(false));
    }

    @Given("the remote directory is {string}")
    public void the_remote_directory_is(String directory) {
        remoteDirectory = directory;
    }

    @Given("the audit repository returns the latest audits for these files")
    public void the_audit_repository_returns_the_latest_audits_for_these_files() {
        luceneCollectionAuditRepo = mock(LuceneCollectionAuditRepository.class);
        when(luceneCollectionAuditRepo.findLatestByFilePaths(anyList())).thenReturn(generateAudits(sftpFiles));
    }

    @When("getAuditStatusMap is called")
    public void get_audit_status_map_is_called() {
        auditStatusService = new AuditStatusService(luceneCollectionAuditRepo);
        auditStatusMap = auditStatusService.getAuditStatusMap(sftpFiles, remoteDirectory);
    }

    @Then("the audit status map should be empty")
    public void the_audit_status_map_should_be_empty() {
        assertTrue(auditStatusMap.isEmpty());
    }

    @Then("the audit status map should contain {int} entries")
    public void the_audit_status_map_should_contain_entries(int expectedSize) {
        assertEquals(expectedSize, auditStatusMap.size());
    }

    @Then("each entry should have a status of {string}")
    public void each_entry_should_have_a_status_of(String expectedStatus) {
        assertTrue(auditStatusMap.values().stream().allMatch(status -> status.equals(expectedStatus)));
    }

    // Helper methods for generating mock data
    private List<SftpFile> generateSftpFiles(int numFiles) {
        List<SftpFile> files = new ArrayList<>();
        for (int i = 0; i < numFiles; i++) {
            files.add(new SftpFile("file" + i, false));
        }
        return files;
    }

    private List<CollectionAudit> generateAudits(List<SftpFile> sftpFiles) {
        List<CollectionAudit> audits = new ArrayList<>();
        for (SftpFile file : sftpFiles) {
            audits.add(new CollectionAudit(file.getFilename(), "STATUS"));
        }
        return audits;
    }
}
