Sure, here are the JUnit5 test cases for the mentioned conditions:

```java
import org.junit.jupiter.api.*;
import org.mockito.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@SpringBootTest
public class ThreadPoolControllerTest {

    @Autowired
    private ThreadPoolController controller;

    @MockBean
    private ThreadPoolTaskExecutor deviceTP;

    @MockBean
    private LuceneSpaceCollectorRepository luceneSpaceCollectorRepository;

    @MockBean
    private KafkaProducerServiceImpl kafkaProducerService;

    @Test
    public void testTestThreadsPolledRecordsNotEmpty() {
        SpaceCollector device = new SpaceCollector();
        device.setId("1");
        List<SpaceCollector> polledRecords = Arrays.asList(device);
        when(luceneSpaceCollectorRepository.findByQuery(anyString())).thenReturn(polledRecords);
        assertDoesNotThrow(() -> controller.testThreads());
    }

    @Test
    public void testTestThreadsThreadAvailable() {
        SpaceCollector device = new SpaceCollector();
        device.setId("1");
        List<SpaceCollector> polledRecords = Arrays.asList(device);
        when(luceneSpaceCollectorRepository.findByQuery(anyString())).thenReturn(polledRecords);

        Thread thread = new Thread("collection-orchestrator-id-" + device.getId());
        thread.start();

        assertDoesNotThrow(() -> controller.testThreads());
    }

    @Test
    public void testTestThreadsThreadWaiting() {
        SpaceCollector device = new SpaceCollector();
        device.setId("1");
        List<SpaceCollector> polledRecords = Arrays.asList(device);
        when(luceneSpaceCollectorRepository.findByQuery(anyString())).thenReturn(polledRecords);

        Thread thread = new Thread("collection-orchestrator-id-" + device.getId()) {
            @Override
            public State getState() {
                return State.WAITING;
            }
        };
        thread.start();

        assertDoesNotThrow(() -> controller.testThreads());
    }

    @Test
    public void testTestThreadsThreadTerminated() {
        SpaceCollector device = new SpaceCollector();
        device.setId("1");
        List<SpaceCollector> polledRecords = Arrays.asList(device);
        when(luceneSpaceCollectorRepository.findByQuery(anyString())).thenReturn(polledRecords);

        Thread thread = new Thread("collection-orchestrator-id-" + device.getId()) {
            @Override
            public State getState() {
                return State.TERMINATED;
            }
        };
        thread.start();

        assertDoesNotThrow(() -> controller.testThreads());
    }
}
```

Please replace `ThreadPoolController`, `ThreadPoolTaskExecutor`, `LuceneSpaceCollectorRepository`, `SpaceCollector`, `KafkaProducerServiceImpl`, and `controller` with your actual class and instance names. Also, please add additional checks as per your application requirements.

You may need to add some additional mock setups based on your application behavior. The above test cases are created based on the provided code snippet and cover the conditions you mentioned.

Please note, testing multithreading can be complex and may need additional setup based on your application. The above test cases for `testThreads` creates a thread but in your actual code, it won't create a new thread. It will get the threads from JVM. So you may need to adjust it based on your needs. Also, you may need to handle exceptions as per your application.