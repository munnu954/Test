Here is the code implementation for the given acceptance criteria:

AC1: The job submission throws error and status code received is Not OK.

```java
// FlinkApiController.java

// Update triggerJob method
public String triggerJob(SpaceCollector collector, String fileType) {
    // ...

    if (response != null && !response.getStatusCode().equals(HttpStatus.OK)) {
        LOGGER.info("Not Ok!!");
        FileMetadata metadata = createFailureMetadata(collector, fileType, response);
        kafkaProducer.sendFailureMessage(collector, fileType, response.toString());
        writeLogToFile(collector, fileType, response, destinationFolderPath);
    } else if (collector.getInputFilePath() == null || collector.getInputFilePath().isEmpty() || collector.getInputFilePath().isBlank()) {
        LOGGER.info("File doesn't exist");
        FileMetadata metadata = createFailureMetadata(collector, null, "File does not exist");
        kafkaProducer.sendFailureMessage(collector, null, response.toString());
        writeLogToFile(collector, null, response, destinationFolderPath);
    }

    // ...
}

// Add new method
public FileMetadata createFailureMetadata(SpaceCollector message, String fileType, ResponseEntity response) {
    FileMetadata metadata = new FileMetadata();
    metadata.setFile_name(message.getInputFilePath());
    metadata.setDate_received(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
    metadata.setDate_processed("");
    metadata.setNo_of_records_in_the_file(0);
    metadata.setNo_of_records_processed(0);
    metadata.setNo_of_records_failed(0);
    metadata.setJob_status("FAILURE");
    metadata.setJob_id("");
    metadata.setJar_id("");
    metadata.setExceptions(response.getStatusCode().toString());

    return metadata;
}
```

AC2: Publishing to the queue 3459-COLLECTION-AUDIT-QUEUE fails

```java
// FlinkApiController.java

public void writeLogToFile(SpaceCollector message, String fileType, ResponseEntity response, String destinationFolderPath) {
    String logFilePath = destinationFolderPath + "/log.txt";
    try (FileWriter fileWriter = new FileWriter(logFilePath, true)) {
        FileMetadata metadata = createFailureMetadata(message, fileType, response);
        fileWriter.write(metadata.toString());
        fileWriter.write(System.lineSeparator());
        fileWriter.flush();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
```

AC3: Input file is present and input topic 3459-COLLECTION-REQUEST-QUEUE' is not accessible.

```java
// FlinkApiController.java

// Update triggerJob method
public String triggerJob(SpaceCollector collector, String fileType) {
    // ...

    if (response != null && !response.getStatusCode().equals(HttpStatus.OK)) {
        LOGGER.info("Not Ok!!");
        FileMetadata metadata = createFailureMetadata(collector, fileType, response);
        kafkaProducer.sendFailureMessage(collector, fileType, response.toString());
        writeLogToFile(collector, fileType, response, destinationFolderPath);
    } else if (collector.getInputFilePath() == null || collector.getInputFilePath().isEmpty() || collector.getInputFilePath().isBlank()) {
        LOGGER.info("File doesn't exist");
        FileMetadata metadata = createFailureMetadata(collector, null, "File does not exist");
        kafkaProducer.sendFailureMessage(collector, null, response.toString());
        writeLogToFile(collector, null, response, destinationFolderPath);
    } else if (!isTopicAccessible(topicName)) {
        LOGGER.info("Topic 3459-COLLECTION-REQUEST-QUEUE' is not accessible");
        FileMetadata metadata = createFailureMetadata(collector, fileType, "Topic 3459-COLLECTION-REQUEST-QUEUE' is not accessible");
        kafkaProducer.sendFailureMessage(collector, fileType, response.toString());
        writeLogToFile(collector, fileType, response, destinationFolderPath);
        kafkaProducer.sendMessage(metadata);
    }

    // ...
}

// Add new method
public boolean isTopicAccessible(String topic) {
    // Implement logic to check topic accessibility
    return true; // Replace with actual implementation
}
```

AC4: Jar file is not uploaded to flink cluster

```java
// FlinkApiController.java

// Update triggerJob method
public String triggerJob(SpaceCollector collector, String fileType) {
    // ...

    if (response != null && !response.getStatusCode().equals(HttpStatus.OK)) {
        LOGGER.info("Not Ok!!");
        FileMetadata metadata = createFailureMetadata(collector, fileType, response);
        kafkaProducer.sendFailureMessage(collector, fileType, response.toString());
        writeLogToFile(collector, fileType, response, destinationFolderPath);
    } else if (collector.getInputFilePath() == null || collector.getInputFilePath().isEmpty() || collector.getInputFilePath().isBlank()) {
        LOGGER.info("File doesn't exist");
        FileMetadata metadata = createFailureMetadata(collector, null, "File does not exist");
        kafkaProducer.sendFailureMessage(collector, null, response.toString());
        writeLogToFile(collector, null, response, destinationFolderPath);
    } else if (isNoJarsPresent() && isNoEntriesInFlinkJobsTable()) {
        LOGGER.info("No jars present and flink jobs table has no entries");
        FileMetadata metadata = createFailureMetadata(collector, fileType, "No jars present and flink jobs table has no entries");
        kafkaProducer.sendFailureMessage(collector, fileType, response.toString());
        writeLogToFile(collector, fileType, response, destinationFolderPath);
    }

    // ...
}

// Add new methods
public boolean isNoJarsPresent() {
    // Implement logic to check if there are no jars present on the flink cluster
    return false; // Replace with actual implementation
}

public boolean isNoEntriesInFlinkJobsTable() {
    // Implement logic to check if there are no entries in the FLINK JOBS table
    return false; // Replace with actual implementation
}
```

AC5: Non-existent jar id passed to flink cluster.

```java
// FlinkApiController.java

// Update triggerJob method
public String triggerJob(SpaceCollector collector, String fileType) {
    // ...

    if (response != null && !response.getStatusCode().equals(HttpStatus.OK)) {
        LOGGER.info("Not Ok!!");
        FileMetadata metadata = createFailureMetadata(collector, fileType, response);
        kafkaProducer.sendFailureMessage(collector, fileType, response.toString());
        writeLogToFile(collector, fileType, response, destinationFolderPath);
    } else if (collector.getInputFilePath() == null || collector.getInputFilePath().isEmpty() || collector.getInputFilePath().isBlank()) {
        LOGGER.info("File doesn't exist");
        FileMetadata metadata = createFailureMetadata(collector, null, "File does not exist");
        kafkaProducer.sendFailureMessage(collector, null, response.toString());
        writeLogToFile(collector, null, response, destinationFolderPath);
    } else if (!isValidJarId(flinkJobJarid)) {
        LOGGER.info("Invalid jar id passed to flink cluster");
        FileMetadata metadata = createFailureMetadata(collector, fileType, "Invalid jar id passed to flink cluster");
        kafkaProducer.sendFailureMessage(collector, fileType, response.toString());
        writeLogToFile(collector, fileType, response, destinationFolderPath);
    }

    // ...
}

// Add new method
public boolean isValidJarId(String jarId) {
    // Implement logic to check if the jar id is valid
    return true; // Replace with actual implementation
}
```