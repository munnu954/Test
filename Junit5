Here is an example of positive and negative JUnit test cases for the given code:

Positive Test Case:
```java 
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class MainTest {
   
    private Main main;

    @Before
    public void setUp() {
        main = new Main();
    }

    @Test
    public void testCsvToJsonConversion() throws Exception {
        String csvRecords = "SystemId: SOLKTXE1100.101\nNodeIP: \nHeader1,Header2,Header3\nValue1,Value2,Value3";
        String expectedJson = "{\"#SystemId\":\"SOLKTXE1100.101\",\"#NodeIP\":\"\",\"Header1\":\"Value1\",\"Header2\":\"Value2\",\"Header3\":\"Value3\",\"FILENAME\":\"file.csv\"}";

        String convertedJson = main.convertCsvToJson(csvRecords, "file.csv");

        Assert.assertEquals(expectedJson, convertedJson);
    }
    
    // Other positive test cases can be added for testing various scenarios
    
}
```

Negative Test Case:
```java 
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class MainTest {
   
    private Main main;

    @Before
    public void setUp() {
        main = new Main();
    }

    @Test(expected = NullPointerException.class)
    public void testCsvToJsonConversion_InvalidCsvRecords() throws Exception {
        String csvRecords = null;

        main.convertCsvToJson(csvRecords, "file.csv");
    }
    
    // Other negative test cases can be added for testing various scenarios
    
}
```

Note: Make sure to import the necessary libraries and update the test cases with appropriate assertions and input values as per your requirements.